<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c++</title>
      <link href="/post/6f1ca842.html"/>
      <url>/post/6f1ca842.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><p>本阶段主要针对C++&#x3D;&#x3D;面向对象&#x3D;&#x3D;编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放<strong>函数体</strong>的<strong>二进制代码</strong>，由<strong>操作系统</strong>进行管理的</li><li>注释不在代码区</li><li>全局区：存放<strong>全局变量和静态变量以及常量</strong></li><li>栈区：由<strong>编译器自动分配释放</strong>, 存放<strong>函数的参数值</strong>,<strong>局部变量</strong>等</li><li>堆区：由**程序员分配和释放,**<strong><strong>若程序员不释放,程序结束时由操作系统回收</strong></strong></li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，<strong>赋予不同的生命周期</strong>, 给我们更大的<strong>灵活编程</strong></p><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><pre><code>**在程序编译后，生成了exe可执行程序**，**未执行该程序前**分为两个区域**代码区：**    存放 CPU 执行的机器指令    代码区是**共享**的，共享的目的是对于频繁被执行的程序，**只需要在内存中有一份代码即可**    代码区是**只读**的，使其只读的原因是防止程序意外地修改了它的指令,**金币变点券****全局区：**    **全局变量 和 静态变量**存放在此.    全局区还包含了**常量区**, **字符串常量和全局常量**存放在此.</code></pre><p>&#x3D;&#x3D;<strong>局部常量也局部变量都在栈区</strong>&#x3D;&#x3D;</p><pre><code>    ==该区域的数据在程序结束后由操作系统释放==.</code></pre><p>![image-20230725153630117](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230725153630117.png)</p><hr><p>(int)指针的地址，是不被定义的行为.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;a)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;b)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="type">int</span> g_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c_g_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c_g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部变量</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印地址</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部变量a地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部变量b地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局变量g_a地址为： &quot;</span> &lt;&lt;  <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;g_a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局变量g_b地址为： &quot;</span> &lt;&lt;  <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;g_b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> s_a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> s_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;静态变量s_a地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;s_a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;静态变量s_b地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;s_b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;<span class="string">&quot;hello world&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局常量c_g_a地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;c_g_a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局常量c_g_b地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;c_g_b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> c_l_a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> c_l_b = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部常量c_l_a地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;c_l_a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部常量c_l_b地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;c_l_b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印结果：</p><p><strong>局部变量</strong>a地址为： 6422044<br><strong>局部变量</strong>b地址为： 6422040<br>全局变量g_a地址为： 4206608<br>全局变量g_b地址为： 4206612<br>静态变量s_a地址为： 4206616<br>静态变量s_b地址为： 4206620<br>字符串常量地址为： 4210842<br>全局常量c_g_a地址为： 4210692<br>全局常量c_g_b地址为： 4210696<br><strong>局部常量</strong>c_l_a地址为： 6422036<br><strong>局部常量</strong>c_l_b地址为： 6422032<br>请按任意键继续. . .</p><p><img src="/assets/1545017602518.png" alt="1545017602518"></p><p>总结：</p><ul><li>C++中在<strong>程序运行前</strong>分为全局区和代码区</li><li>代码区特点是<strong>共享和只读</strong></li><li>全局区中存放&#x3D;&#x3D;全局变量、静态变量、常量&#x3D;&#x3D;,<strong>不包括局部常量和局部变量</strong></li><li>常量区中存放 const修饰的<strong>全局常量  和 字符串常量</strong></li></ul><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><pre><code>**栈区：******编译器的天下.****    由**编译器**自动分配释放, 存放**函数的参数值,局部变量**等    注意事项：**不要返回局部变量的地址，栈区开辟的数据由编译器自动释放**</code></pre><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> * <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *p = <span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;<span class="comment">//理论上第一次打印10</span></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;<span class="comment">//第二次打印乱码，就是因为编译器帮你做了一次保留，栈区的数据由编译器主宰。</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>**堆区：**    由**程序员分配释放,若程序员不释放,程序结束时由操作系统回收**    在C++中**主要利用new在堆区开辟内存**    ==并且返回new出来内存的地址，也就是指针！==</code></pre><p>![image-20230725160019240](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230725160019240.png)</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = <span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;<span class="comment">//都是10，因为堆区的数据只有点击了x才被释放。在此之前一直存在。不像堆区离开了局部（函数）就被释放了，虽然编译器会帮你保留一次，但第二次就要出问题了。</span></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><pre><code>C++中利用==new==操作符在堆区开辟数据堆区开辟的数据，**由程序员手动开辟，手动释放**，释放利用操作符 ==delete==语法：` new 数据类型`(初始值)利用new创建的数据，**会返回该数据对应的类型的指针(地址)**</code></pre><p>int *a&#x3D;new int(10)</p><pre><code>==最后需要delete对应的指针！==加new返回的 指针！</code></pre><blockquote><p>![image-20230725160534499](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230725160534499.png)</p></blockquote><pre><code>==**释放的空间不可访问**==</code></pre><p><strong>示例1： 基本语法</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = <span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用delete释放堆区数据</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//15735568</span></span><br></pre></td></tr></table></figure><p><strong>示例2：开辟数组</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//堆区开辟数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//开辟字符串,开辟字符串数组的时候换成[]再加个数</span></span><br><span class="line">    string* str=<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    cout&lt;&lt;*str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i] = i + <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> []  arr;</span><br><span class="line">    <span class="keyword">delete</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p><strong>作用： <strong>给</strong>变量</strong>起别名</p><p>土豆，马铃薯都是。。</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p>类型得相同</p><p>![image-20230725170131910](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230725170131910.png)</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul><li><strong>引用必须初始化</strong></li><li>引用在初始化后，不可以改变也就是</li><li>一旦引用被初始化绑定到一个对象上，它将一直引用该对象，无法改变引用所绑定的对象。</li></ul><p>示例：</p><p>![image-20230725170414023](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230725170414023.png)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//int &amp;c; //错误，引用必须初始化</span></span><br><span class="line"><span class="type">int</span> &amp;c = a; <span class="comment">//一旦初始化后，就不可以更改</span></span><br><span class="line">c = b; <span class="comment">//这是赋值操作，不是更改引用</span></span><br><span class="line">    <span class="comment">//实际上是操作a的值。。</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利<strong>用引用的技术让形参修饰实参</strong></p><p><strong>优点：</strong>可以简化指针修改实参</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sp1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sp2</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=*a;</span><br><span class="line">    *a=*b;</span><br><span class="line">    *b=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sp3</span><span class="params">(<span class="type">int</span>&amp; a,<span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入两个数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;值传递，不可以修改实参的本身&quot;</span>&lt;&lt;endl;</span><br><span class="line">      <span class="built_in">sp1</span>(a,b);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;地址传递--指针，可以修改实参的本身&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">sp2</span>(&amp;a,&amp;b);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;地址传递--引用，可以修改实参的本身&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">sp3</span>(a,b);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结：<strong>通过引用参数产生的效果同按地址传递是一样的</strong>。引用的语法更清楚简单</p><h5 id="当引用作为一个函数形参时，它所引用的变量的生命周期必须保证在函数的执行期间内是有效的。在函数执行期间内，对于引用所指向的变量所进行的任何修改都将影响到函数调用方式中的原始变量。"><a href="#当引用作为一个函数形参时，它所引用的变量的生命周期必须保证在函数的执行期间内是有效的。在函数执行期间内，对于引用所指向的变量所进行的任何修改都将影响到函数调用方式中的原始变量。" class="headerlink" title="当引用作为一个函数形参时，它所引用的变量的生命周期必须保证在函数的执行期间内是有效的。在函数执行期间内，对于引用所指向的变量所进行的任何修改都将影响到函数调用方式中的原始变量。"></a>当引用作为一个函数形参时，它所引用的变量的生命周期必须保证在函数的执行期间内是有效的。在函数执行期间内，对于引用所指向的变量所进行的任何修改都将影响到函数调用方式中的原始变量。</h5><p>引用和指针操作最大的区别在于，指<strong>针的方式借助的形参会占用栈区空间</strong>，而用引用则不会，<strong>因此引用节省了栈区空间！</strong></p></blockquote><hr><h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以<strong>作为函数的返回值</strong>存在的</p><p>注意：**&#x3D;&#x3D;不要返回局部变量引用和地址&#x3D;&#x3D;**</p><p><strong>也要用引用的形式去接受</strong></p><p><strong>变量有可以同时存在多个别名，别名与别名与变量之间的操作是共通的</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> &amp;b=a;</span><br><span class="line">    <span class="type">int</span> &amp;c=a;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;c=&quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用法：<em>函数调用作为左值</em></p><hr><p>在 C++ 中，<strong>不建议返回指向局部变量的引用，因为局部变量在函数执行完毕后会被销毁，而引用仍然指向该变量的内存地址。</strong>这样会导致返回的引用指向一个无效的内存位置，访问该引用可能会导致未定义行为。</p><p><strong>而静态变量是在程序运行期间一直存在的，不会在函数执行完毕后被销毁。</strong>因此，返回静态变量的引用是安全的，因为静态变量的生命周期超出了函数的作用域。</p><hr><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回局部变量引用</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>; <span class="comment">//局部变量</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回a的引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回静态变量引用</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">20</span><span class="comment">//全局区，在整个程序运行完才释放</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能返回局部变量的引用</span></span><br><span class="line">    <span class="comment">//返回的a是以类型“int&amp;”返回的，所以必须要以类型“int&amp;”去接收，这里用ref去接收，即int&amp; ref = a  ，即ref为a的别名</span></span><br><span class="line"><span class="type">int</span>&amp; ref = <span class="built_in">test01</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果函数做左值，那么必须返回引用,ref2也是a的别名</span></span><br><span class="line"><span class="type">int</span>&amp; ref2 = <span class="built_in">test02</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">////</span></span><br><span class="line">    <span class="comment">//int &amp;别名=1000 也相当于是a的别名只不过是函数</span></span><br><span class="line"><span class="built_in">test02</span>() = <span class="number">1000</span>;</span><br><span class="line"><span class="comment">////</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>int * const 变量名字&#x3D;</p><p>费曼学习法，先学面向过程C，在学面向对象CSharp，然后又滚来学C++面向对象过程（滑稽）</p><h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p><blockquote><p>常量指针是指 指针指向的数据不可更改</p><p>const指针常量是值 指针的指向不可更改</p></blockquote><p>讲解示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发现是引用，转换为 int* const ref = &amp;a;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>&amp; ref)</span></span>&#123;</span><br><span class="line">ref = <span class="number">100</span>; <span class="comment">// ref是引用，转换为*ref = 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class="line"><span class="type">int</span>&amp; ref = a; </span><br><span class="line">ref = <span class="number">20</span>; <span class="comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span></span><br><span class="line">    </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">func</span>(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用<strong>主要用来修饰形参，防止误操作</strong></p><p>在函数形参列表中，可以加改变实参</p><p>引用必须引用一块合法的内存空间</p><p>int&amp; a&#x3D;10;  不可以</p><p>const int&amp; a&#x3D;10  可以</p><p>相当于，编译器帮助这样处理.</p><p>{</p><p>int temp&#x3D;10;</p><p>const int&amp; a&#x3D;temp;</p><p>}</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用使用的场景，通常用来修饰形参</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line"><span class="comment">//v += 10;</span></span><br><span class="line">cout &lt;&lt; v &lt;&lt; endl;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="comment">//void showValue(const int* const name) &#123;</span></span><br><span class="line"><span class="comment">//v += 10;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; v &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class="line"><span class="comment">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; ref = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ref = 100;  //加入const后不可以修改变量</span></span><br><span class="line">cout &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数中利用常量引用防止误操作修改实参</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">showValue</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p><p>&#x3D;&#x3D;如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值&#x3D;&#x3D;</p><h6 id="如果函数声明有默认值，函数实现的时候就不能有默认参数"><a href="#如果函数声明有默认值，函数实现的时候就不能有默认参数" class="headerlink" title="&#x3D;&#x3D;如果函数声明有默认值，函数实现的时候就不能有默认参数&#x3D;&#x3D;"></a>&#x3D;&#x3D;如果函数<strong>声明有默认值</strong>，函数实现的时候就不能有默认参数&#x3D;&#x3D;</h6><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>, <span class="type">int</span> c = <span class="number">10</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span></span><br><span class="line"><span class="comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>, <span class="type">int</span> b = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; <span class="built_in">func</span>(<span class="number">20</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; <span class="built_in">func</span>(<span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p><p>占一个位置，可以接受实参。</p><p><strong>占位参数必须填补</strong></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数占位参数 ，占位参数也可以有默认参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> =<span class="number">10</span>)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is func&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>,<span class="number">10</span>); <span class="comment">//占位参数必须填补</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li><p>同一个作用域下</p></li><li><p>函数名称相同</p></li><li><p>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong>（前提是参数类型不同！！！）</p></li><li><blockquote><p>函数的返回值类型不可以重载！！！</p></blockquote></li></ul><p><strong>注意:</strong>  <strong>函数的返回值不可以作为函数重载的条件</strong></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数重载需要函数都在同一个作用域下</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (double a)的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a ,<span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a ,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值不可以作为函数重载条件</span></span><br><span class="line"><span class="comment">//int func(double a, int b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="number">3.14</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>,<span class="number">3.14</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="number">3.14</span> , <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul><li><strong>引用作为重载条件</strong></li><li>函数重载碰到<strong>函数默认参数</strong></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数重载注意事项</span></span><br><span class="line"><span class="comment">//1、引用作为重载条件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、函数重载碰到函数默认参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func2(int a) 调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">func</span>(a); <span class="comment">//调用无const</span></span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">//调用有const</span></span><br><span class="line">    相当于弄了一个临时变量</span><br><span class="line">      <span class="comment">//  int &amp;a=10 不可以</span></span><br><span class="line">      <span class="comment">//  const int &amp;a=10;可以</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//func2(10); //碰到默认参数产生歧义，需要避免 二义性！~！！</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="&#x3D;&#x3D;4 类和对象&#x3D;&#x3D;"></a>&#x3D;&#x3D;<strong>4</strong> 类和对象&#x3D;&#x3D;</h2><p>C++面向对象的三大特性为：&#x3D;&#x3D;封装、继承、多态&#x3D;&#x3D;</p><p>C++认为&#x3D;&#x3D;万事万物都皆为对象&#x3D;&#x3D;，对象上有其属性和行为</p><blockquote><p><strong>类里面的属性和行为都是成员！</strong></p><p><strong>创建具体的对象的过程叫做类的实例化！</strong></p></blockquote><p><strong>例如：</strong></p><pre><code>人可以作为对象，属性有姓名、年龄、身高、体重...，行为有走、跑、跳、吃饭、唱歌...车也可以作为对象，属性有轮胎、方向盘、车灯...,行为有载人、放音乐、开空调...具有相同性质的==对象==，我们可以抽象称为==类==，人属于人类，车属于车类</code></pre><h3 id="4-1-封装–1"><a href="#4-1-封装–1" class="headerlink" title="4.1 封装–1"></a>4.1 封装–1</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为<strong>加以权限控制</strong></li></ul><p><strong>封装意义一：</strong></p><pre><code>在设计类的时候，属性和行为写在一起，表现事物</code></pre><p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p><p><strong>示例1：</strong>设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//圆周率</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、封装的意义</span></span><br><span class="line"><span class="comment">//将属性和行为作为一个整体，用来表现生活中的事物</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个圆类，求圆的周长</span></span><br><span class="line"><span class="comment">//class代表设计一个类，后面跟着的是类名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:  <span class="comment">//访问权限  公共的权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="type">int</span> m_r;<span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//行为</span></span><br><span class="line"><span class="comment">//获取到圆的周长</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calculateZC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//2 * pi  * r</span></span><br><span class="line"><span class="comment">//获取圆的周长</span></span><br><span class="line"><span class="keyword">return</span>  <span class="number">2</span> * PI * m_r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过圆类，创建圆的对象</span></span><br><span class="line"><span class="comment">// c1就是一个具体的圆</span></span><br><span class="line">Circle c1;</span><br><span class="line">c1.m_r = <span class="number">10</span>; <span class="comment">//给圆对象的半径 进行赋值操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 * pi * 10 = = 62.8</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.<span class="built_in">calculateZC</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setname</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setid</span><span class="params">(string number)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;number=number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showmessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="keyword">this</span>-&gt;name&lt;&lt;<span class="string">&quot;----&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;number&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    string number;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    student xrb;</span><br><span class="line">    xrb.<span class="built_in">setname</span>(<span class="string">&quot;徐润波&quot;</span>);</span><br><span class="line">    xrb.<span class="built_in">setid</span>(<span class="string">&quot;542207230725&quot;</span>);</span><br><span class="line">    xrb.<span class="built_in">showmessage</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public        公共权限  </li><li>protected 保护权限</li><li>private      私有权限</li></ol><blockquote><p>在C++中，类的成员可以不同的访问权限，包括私有（private）、保护（protected）和公共（public）权限。这些权限决定了类的成员对于<strong>类内部和类外部</strong>的<strong>可见性和可访问性。</strong></p><p><strong>私有权限（private）是最严格的权限</strong>，它表示<strong>只有类内部的成员函数可以访问该成员，</strong>类外部的代码无法直接访问私有成员。私有成员对于类外部的用户是隐藏的，只有类内部的函数可以直接访问和操作私有成员。私有成员常用于封装类的实现细节，以确保数据的安全性和一致性。</p><p>保护权限（protected）<strong>介于私有权限和公共权限之间。</strong>保护成员<strong>可以被类内部的成员函数和派生类的成员函数访问</strong>，但对于类外部的代码是不可见的。<strong>保护成员常用于实现继承中的数据共享和派生类的访问控制。</strong></p><p>区别总结如下：</p><ul><li><strong>私有权限（private）：只有类内部的成员函数可以访问，类外部的代码无法直接访问。</strong></li><li>*<em>保护权限（protected）：类内部的成员函数和派生类的成员函数可以访问，类外部的代码无法直接访问。</em></li><li><strong>公共权限（public）：类内部的成员函数和类外部的代码都可以访问。</strong></li></ul><p>需要注意的是，这些<strong>访问权限只是在编译时进行的静态检查</strong>，<em><strong>而不是运行时的限制</strong></em>。因此，通过类的<strong>公共成员函数可以间接地访问私有和保护成员</strong>。</p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//三种权限</span></span><br><span class="line"><span class="comment">//公共权限  public     类内可以访问  类外可以访问</span></span><br><span class="line"><span class="comment">//保护权限  protected  类内可以访问  类外不可以访问</span></span><br><span class="line"><span class="comment">//私有权限  private    类内可以访问  类外不可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//姓名  公共权限</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_Name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//汽车  保护权限</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_Car;</span><br><span class="line"></span><br><span class="line"><span class="comment">//银行卡密码  私有权限</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_Password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">m_Car = <span class="string">&quot;拖拉机&quot;</span>;</span><br><span class="line">m_Password = <span class="number">123456</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Person p;</span><br><span class="line">p.m_Name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"><span class="comment">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span></span><br><span class="line"><span class="comment">//p.m_Password = 123; //私有权限类外访问不到</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><blockquote><ul><li><h4 id="struct-默认权限为公共"><a href="#struct-默认权限为公共" class="headerlink" title="struct 默认权限为公共"></a>struct 默认权限为公共</h4></li><li><h4 id="class-默认权限为私有"><a href="#class-默认权限为私有" class="headerlink" title="class   默认权限为私有"></a>class   默认权限为私有</h4></li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>  m_A; <span class="comment">//默认是私有权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">C2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m_A;  <span class="comment">//默认是公共权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">C1 c1;</span><br><span class="line">c1.m_A = <span class="number">10</span>; <span class="comment">//错误，访问权限是私有</span></span><br><span class="line"></span><br><span class="line">C2 c2;</span><br><span class="line">c2.m_A = <span class="number">10</span>; <span class="comment">//正确，访问权限是公共</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 &#x3D;&#x3D;成员属性设置为私有&#x3D;&#x3D;"></a>4.1.3 &#x3D;&#x3D;成员属性设置为私有&#x3D;&#x3D;</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以<strong>自己控制读写权限</strong></p><p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p><hr><p><em>在 C++ 中，私有成员是类的成员，<strong>只有类的成员函数可以直接访问和修改私有成员。</strong>其他函数或代码块无法直接访问和修改私有成员。</em></p><p><em>然而，<strong>可以通过指针间接访问和修改私有成员</strong>。如果你有一个指向类对象的指针，你可以使用指针来访问和修改私有成员。这是因为<strong>指针可以具有与类成员函数相同的访问权限。</strong></em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateMember;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPrivateMember</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        privateMember = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getPrivateMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> privateMember;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj;</span><br><span class="line">    MyClass* ptr = &amp;obj;</span><br><span class="line"></span><br><span class="line">    ptr-&gt;<span class="built_in">setPrivateMember</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="type">int</span> value = ptr-&gt;<span class="built_in">getPrivateMember</span>();</span><br><span class="line">    cout&lt;&lt;value&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名设置可读可写</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123;</span><br><span class="line">        m_Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取年龄</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置年龄</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">150</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;你个老妖精!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情人设置为只写</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setLover</span><span class="params">(string lover)</span> </span>&#123;</span><br><span class="line">        m_Lover = lover;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_Name; <span class="comment">//可读可写  姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m_Age; <span class="comment">//只读  年龄</span></span><br><span class="line"></span><br><span class="line">    string m_Lover; <span class="comment">//只写  情人</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Person p;</span><br><span class="line">    <span class="comment">//姓名设置</span></span><br><span class="line">    p.<span class="built_in">setName</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//年龄设置</span></span><br><span class="line">    p.<span class="built_in">setAge</span>(<span class="number">50</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;年龄： &quot;</span> &lt;&lt; p.<span class="built_in">getAge</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情人设置</span></span><br><span class="line">    p.<span class="built_in">setLover</span>(<span class="string">&quot;苍井&quot;</span>);</span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>练习案例1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><p><img src="/assets/1545533548532.png" alt="1545533548532"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cubic</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getwidth</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setwidth</span><span class="params">(<span class="type">int</span> width)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;width=width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getlength</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setlength</span><span class="params">(<span class="type">int</span> length)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;length=length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getheight</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setheight</span><span class="params">(<span class="type">int</span> height)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;height=height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">caculateV</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;length*<span class="keyword">this</span>-&gt;height*<span class="keyword">this</span>-&gt;width;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> width;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    cubic abc;</span><br><span class="line">    abc.<span class="built_in">setwidth</span>(<span class="number">3</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;得到立方体的宽度&quot;</span>&lt;&lt;abc.<span class="built_in">getwidth</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    abc.<span class="built_in">setlength</span>(<span class="number">4</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;得到立方体的长度&quot;</span>&lt;&lt;abc.<span class="built_in">getlength</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    abc.<span class="built_in">setheight</span>(<span class="number">5</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;得到立方体的高度&quot;</span>&lt;&lt;abc.<span class="built_in">getheight</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;得到立方体的体积V=&quot;</span>&lt;&lt;abc.<span class="built_in">caculateV</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到立方体的宽度3</span></span><br><span class="line"><span class="comment">//得到立方体的长度4</span></span><br><span class="line"><span class="comment">//得到立方体的高度5</span></span><br><span class="line"><span class="comment">//得到立方体的体积V=60</span></span><br><span class="line"><span class="comment">//请按任意键继续. .</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><strong>练习案例2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><p><img src="/assets/1545533829184.png" alt="1545533829184"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getx</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setx</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">gety</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sety</span><span class="params">(<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y=y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">circle</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setx</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c_x=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sety</span><span class="params">(<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c_y=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setr</span><span class="params">(<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c_r=r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;c_r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">CaculateTheRelationshipBetweenCircleAndPoint</span><span class="params">(point abc)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> p_x=abc.<span class="built_in">getx</span>();</span><br><span class="line">        <span class="type">int</span> p_y=abc.<span class="built_in">gety</span>();</span><br><span class="line">        <span class="type">int</span> distance=<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">sqrt</span>((p_x-<span class="keyword">this</span>-&gt;c_x)*(p_x-<span class="keyword">this</span>-&gt;c_x)-(p_y-<span class="keyword">this</span>-&gt;c_y)*(p_y-<span class="keyword">this</span>-&gt;c_y)));</span><br><span class="line">        <span class="keyword">return</span> distance;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> c_x;</span><br><span class="line">    <span class="type">int</span> c_y;</span><br><span class="line">    <span class="type">int</span> c_r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    circle circle;</span><br><span class="line">    circle.<span class="built_in">setx</span>(<span class="number">0</span>);</span><br><span class="line">    circle.<span class="built_in">sety</span>(<span class="number">1</span>);</span><br><span class="line">    circle.<span class="built_in">setr</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    point point;</span><br><span class="line"></span><br><span class="line">    point.<span class="built_in">setx</span>(<span class="number">2</span>);</span><br><span class="line">    point.<span class="built_in">sety</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result=circle.<span class="built_in">CaculateTheRelationshipBetweenCircleAndPoint</span>(point);</span><br><span class="line">    <span class="keyword">if</span>(result==circle.<span class="built_in">getr</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;点在圆上！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(result&gt;circle.<span class="built_in">getr</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;点在园外!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;点在园内！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点在园外!!!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="static-cast和reinterpret-cast"><a href="#static-cast和reinterpret-cast" class="headerlink" title="static_cast&lt;&gt;和reinterpret_cast&lt;&gt;"></a><em><strong>static_cast&lt;&gt;和reinterpret_cast&lt;&gt;</strong></em></h4><blockquote><h2 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast&lt;&gt;"></a>static_cast&lt;&gt;</h2><p><code>static_cast&lt;&gt;</code> 是 C++ 中的一种<strong>类型转换运算符</strong>，用于在编译时进行类型转换。它可以用于将一种类型转换为另一种类型，包括基本类型、类类型和指针类型。</p><p><code>static_cast&lt;&gt;</code> 的语法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">static_cast</span>&lt;目标类型&gt;(表达式)</span><br></pre></td></tr></table></figure><p>其中，<code>目标类型</code> 是你希望将表达式转换为的类型，而 <code>表达式</code> 则是要进行转换的值或<strong>变量</strong>。</p><p>下面是一些示例用法：</p><ol><li>将整数转换为浮点数：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> result = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(num);</span><br></pre></td></tr></table></figure><ol start="2"><li>将浮点数转换为整数：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(num);</span><br></pre></td></tr></table></figure><ol start="3"><li><em>将指针类型转换为另一种指针类型</em>：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* ptr = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">char</span>* result = <span class="built_in">static_cast</span>&lt;<span class="type">char</span>*&gt;(ptr);</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>static_cast&lt;&gt;</code> <strong>不会执行运行时的类型检查</strong>，因此转换的安全性需要由开发者自行保证。如果转换是不安全的，建议使用更加安全的类型转换运算符，如 <code>dynamic_cast&lt;&gt;</code> 或 <code>reinterpret_cast&lt;&gt;</code>。</p><p>总结起来，<code>static_cast&lt;&gt;</code> 是 C++ 中一种常用的类型转换运算符，<strong>用于在编译时进行类型转换</strong>。它可以将一种类型转换为另一种类型，但需要开发者自行确保转换的安全性。</p><hr><hr><hr><h2 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast&lt;&gt;"></a>reinterpret_cast&lt;&gt;</h2><p><code>reinterpret_cast&lt;&gt;</code> 是 C++ 中的一种类型转换运算符，用<strong>于执行底层的强制类型转换</strong>。它可以将一个指针或引用转换为另一种指针或引用类型，甚至可以将指针或引用转换为整数类型。</p><p><code>reinterpret_cast&lt;&gt;</code> 的语法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">reinterpret_cast</span>&lt;目标类型&gt;(表达式)</span><br></pre></td></tr></table></figure><p>其中，<code>目标类型</code> 是你希望将表达式转换为的类型，而 <code>表达式</code> 则是要进行转换的值或变量。</p><p>下面是一些示例用法：</p><ol><li>将指针类型转换为另一种指针类型：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* ptr = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">char</span>* result = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(ptr);</span><br></pre></td></tr></table></figure><ol start="2"><li>将指针类型转换为整数类型：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* ptr = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">uintptr_t</span> result = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>&gt;(ptr);</span><br></pre></td></tr></table></figure><ol start="3"><li>将整数类型转换为指针类型：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uintptr_t</span> num = <span class="number">12345</span>;</span><br><span class="line"><span class="type">int</span>* result = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span>*&gt;(num);</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>reinterpret_cast&lt;&gt;</code> 执行的是一种底层的强制类型转换，<strong>它可以绕过编译器的类型检查</strong>，因此需要开发者自行确保转换的安全性。使用 <code>reinterpret_cast&lt;&gt;</code> 进行类型转换时应该非常小心，确保转换的结果在语义上是合理的。</p><p>总结起来，<code>reinterpret_cast&lt;&gt;</code> 是 C++ 中一种类型转换运算符，用于执行底层的强制类型转换。它可以将指针或引用转换为另一种指针或引用类型，甚至可以将指针或引用转换为整数类型。使用 <code>reinterpret_cast&lt;&gt;</code> 进行类型转换时需要非常小心，确保转换的安全性和语义正确性。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;a)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;b)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul><li>生活中我们买的电子产品都基本会有<strong>出厂设置</strong>，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li>C++中的<strong>面向对象来源于生活，</strong>每个对象也都会有<strong>初始设置</strong>以及 对象销毁前的<strong>清理数据</strong>的设置。</li></ul><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><p><strong>多个对象的时候，先构造的后析构！！</strong></p><p><strong>在类外调用类的成员</strong></p><p><strong>类名::成员</strong></p><blockquote><pre><code>    一个对象或者变量没有初始状态，对其使用后果是未知        同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</code></pre></blockquote><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这<strong>两个函数将会被编译器自动调用</strong>，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译<strong>器强制要我们做的事情</strong>，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是-&#x3D;空实现-&#x3D;。</strong></p><ul><li>构造函数：主要作用在于创建对象时<strong>为对象的成员属性赋值</strong>，<strong>构造函数由编译器自动调用</strong>，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong><em>系统自动调用</em>，执行一些<strong>清理工作</strong>。</li></ul><p>可以写在类内</p><p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p><blockquote><ol><li><strong>构造函数，没有返回值也写void</strong></li><li><strong>函数名称与类名相同</strong></li><li><strong>构造函数可以有参数，因此可以发生重载</strong></li><li>程序在<strong>调用对象时候会自动调用构造</strong>，无须手动调用**,而且只会调用一次**</li></ol></blockquote><p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p><blockquote><ol><li><h5 id="析构函数，没有返回值也写void"><a href="#析构函数，没有返回值也写void" class="headerlink" title="析构函数，没有返回值也写void"></a>析构函数，没有返回值也写void</h5></li><li><h5 id="函数名称是类名，但前面要加个"><a href="#函数名称是类名，但前面要加个" class="headerlink" title="函数名称是类名，但前面要加个~"></a>函数名称是类名，但前面要加个~</h5></li><li><h5 id="函数不可以有参数，不能发生重载"><a href="#函数不可以有参数，不能发生重载" class="headerlink" title="函数不可以有参数，不能发生重载"></a>函数不可以有参数，不能发生重载</h5></li><li><h5 id="程序在对象销毁前对自动调用析构函数，无需手动调用，且只会调用一次"><a href="#程序在对象销毁前对自动调用析构函数，无需手动调用，且只会调用一次" class="headerlink" title="程序在对象销毁前对自动调用析构函数，无需手动调用，且只会调用一次"></a>程序在<em>对象销毁前</em>对自动调用析构函数，无需手动调用，且只会调用一次</h5></li></ol></blockquote><hr><p>C++ 类的构造函数和析构函数可以在类的定义外部进行定义和实现。这样做的目的是将类的声明和实现分离，使代码更加清晰和可维护。</p><p><strong>构造函数和析构函数的定义和实现可以放在类的定义之后的任何地方，通常会放在类的定义之后的源文件中。</strong></p><p>以下是一个示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyClass.h 头文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateMember;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(); <span class="comment">// 构造函数的声明</span></span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">MyClass</span>(); <span class="comment">// 析构函数的声明</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">someMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyClass.cpp 源文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyClass.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyClass::<span class="built_in">MyClass</span>() &#123;</span><br><span class="line">    <span class="comment">// 构造函数的实现</span></span><br><span class="line">    privateMember = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass::~<span class="built_in">MyClass</span>() &#123;</span><br><span class="line">    <span class="comment">// 析构函数的实现</span></span><br><span class="line">    <span class="comment">// 可以进行资源的释放等清理工作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyClass::someMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 方法的实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>MyClass</code> 类的构造函数和析构函数的声明放在了头文件 <code>MyClass.h</code> 中，而定义和实现则放在了源文件 <code>MyClass.cpp</code> 中。这样可以使类的接口和实现分离，提高代码的可读性和可维护性。</p><p><strong>如果构造函数和析构函数的定义和实现在类的定义内部，编译器会隐式地将它们声明为内联函数。</strong>而将它们定义在类的定义外部时，不会自动成为内联函数，需要显式地在定义中加上 <code>inline</code> 关键字来指示编译器将其作为内联函数处理。</p><blockquote><p><strong>当编译器将函数的定义插入到调用它的地方时，这被称为内联展开</strong>。相比于生成函数调用，内联展开具有以下优点和缺点：</p><p>优点：</p><ol><li><strong>减少函数调用的开销</strong>：函数调用涉及到保存和恢复寄存器、跳转到函数代码、返回地址等操作，这些操作会消耗一定的时间和空间。通过内联展开，可以避免这些开销，从而提高程序的执行效率。</li><li><strong>优化循环和递归</strong>：内联展开可以优化循环和递归函数的性能。将循环或递归函数内联展开，可以减少函数调用的次数，避免重复的栈帧创建和销毁，从而加快循环或递归的执行速度。</li><li><strong>提高编译器优化的机会</strong>：内联展开可以<strong>提供更多的代码上下文信息给编译器</strong>，使其有更多的优化机会。例如，编译器可以进行常量折叠、循环展开、代码复制等优化，从而进一步提高程序的执行效率。</li></ol><p>缺点：</p><ol><li><strong>增加代码的体积</strong>：内联展开会将函数的定义插入到调用它的地方，这会增加代码的体积。如果函数体很大，内联展开可能会导致代码膨胀，<strong>增加可执行文件的大小。</strong></li><li>增加编译时间：内联展开会增加编译器的工作量，因为编译器需要将函数的定义插入到每个调用它的地方。<strong>如果程序中有大量的函数调用，内联展开可能会导致编译时间的增加。</strong></li><li>可读性下降：内联展开会使代码变得更加冗长，可读性可能会下降。特别是对于复杂的函数体，将其内联展开可能会使代码难以理解和维护。</li></ol><p>综上所述，<strong>内联展开可以提高程序的执行效率，特别是对于频繁调用的小型函数和循环或递归函数。</strong>然而，内联展开也会增加代码的体积和编译时间，并可能降低代码的可读性。因此，在使用内联展开时需要权衡这些优缺点，并根据具体的情况进行选择。</p></blockquote><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;我是构造函数，调用对象前会自动执行，只执行一次，没有返回值也不写void，可以有参数也就说我一般用于创建对象的同时对其成员进行赋值&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;我是析构函数，对象销毁前会被自动执行，没有返回值也不写void，不可以有参数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;begin&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;end&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//begin</span></span><br><span class="line"><span class="comment">//我是构造函数，调用对象前会自动执行，只执行一次，没有返回值也不写void，可以有参数也就说我一般用于创建对象的同时对其成员进行赋值</span></span><br><span class="line"><span class="comment">//我是析构函数，对象销毁前会被自动执行，没有返回值也不写void，不可以有参数</span></span><br><span class="line"><span class="comment">//end</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><pre><code>按参数分为： 无参构造和有参构造按类型分为： 普通构造（简单的有参无参）和拷贝构造</code></pre><p>三种调用方式：</p><pre><code>括号法显示法隐式转换法</code></pre><hr><p><strong>注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</strong></p><hr><blockquote><p>C++ 中的构造函数可以分为以下几种类型：</p><ol><li><p>无参构造(默认构造)（Default Constructor）：没有参数的构造函数。如果一个类没有定义任何构造函数，编译器会自动生成一个默认构造函数。默认构造函数用于创建对象时不需要提供任何参数。</p></li><li><p>有参构造（Parameterized Constructor）：带有参数的构造函数，可以在<strong>创建对象时传递参数来初始化对象的成员变量。</strong></p></li><li><p>拷贝构造函数（Copy Constructor）：*<em>用于创建一个新对象并将其初始化为已有对象的副本。</em>**<em>拷贝构造函数的参数是 &gt; <strong>同类型的对象的引用</strong></em>*。</p></li><li><p>深拷贝构造函数（Move Constructor）：用于将一个对象的资源（如动态分配的内存）转移到另一个对象中，通常用于提高程序的性能。</p></li></ol><p>构造函数的调用方式有以下几种：</p><ol><li><p>直接调用：通过类名和参数列表直接调用构造函数来创建对象。例如：<code>MyClass obj(10);</code></p></li><li><p>隐式调用：在不显式调用构造函数的情况下，使用类的对象声明来创建对象。例如：<code>MyClass obj = 10;</code></p></li><li><p>拷贝初始化：使用一个已存在的对象来初始化新对象，会调用拷贝构造函数。例如：<code>MyClass obj2 = obj1;</code></p></li><li><p>动态创建对象：使用 <code>new</code> 运算符在堆上动态创建对象，会调用构造函数。例如：<code>MyClass* ptr = new MyClass();</code></p></li></ol><p>需要注意的是，<strong>构造函数在对象创建时自动调用，无法手动调用构造函数来重新初始化已经存在的对象</strong>。构造函数的调用顺序是<strong>先调用基类的构造函数，再调用成员对象的构造函数，最后调用派生类的构造函数</strong>。析构函数的调用顺序与构造函数相反，先调用派生类的析构函数，再调用成员对象的析构函数，最后调用基类的析构函数。</p></blockquote><p>推荐使用括号</p><p>了解匿名对象</p><p>有参构造函数直接Person（10）的时候创了一个匿名对象。</p><p>相当于没人接受这个对象。</p><p>要想利用拷贝构造函数，先有一个自己同类型的对象，然后再以引用的形式传入就ok了</p><p>![image-20230726211121976](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230726211121976.png)</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、构造函数分类</span></span><br><span class="line"><span class="comment">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span></span><br><span class="line"><span class="comment">// 按照类型分类分为 普通构造和拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//无参（默认）构造函数</span></span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> a) &#123;</span><br><span class="line">age = a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">age = p.age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、构造函数的调用</span></span><br><span class="line"><span class="comment">//调用无参构造函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person p; <span class="comment">//调用无参构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用有参的构造函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.1  括号法，常用</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span></span><br><span class="line"><span class="comment">//Person p2();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.2 显式法</span></span><br><span class="line">Person p2 = <span class="built_in">Person</span>(<span class="number">10</span>); </span><br><span class="line">Person p3 = <span class="built_in">Person</span>(p2);</span><br><span class="line"><span class="comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构，直接构造析构然后立马销毁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.3 隐式转换法</span></span><br><span class="line">Person p4 = <span class="number">10</span>; <span class="comment">// Person p4 = Person(10); </span></span><br><span class="line">Person p5 = p4; <span class="comment">// Person p5 = Person(p4); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span></span><br><span class="line"><span class="comment">//Person p5(p4);</span></span><br><span class="line">    <span class="comment">///数声明和对象定义的语法非常相似，都可以使用括号来表示。</span></span><br><span class="line">    <span class="comment">//使用额外的括号：可以在匿名对象的括号外面再加一对括号，这样编译器就不会将其解释为函数声明。</span></span><br><span class="line"><span class="comment">//MyClass obj((MyClass())); // 使用括号明确告诉编译器我们要定义一个对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">mAge = p.mAge;</span><br><span class="line">默认的简单拷贝</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li><strong>值传递</strong>的方式给函数参数传值</li><li>以<strong>值方式</strong>返回局部对象</li></ul><blockquote><ol><li><p><code>Person newman3 = man;</code> 和 <code>Person newman3; newman3 = man;</code> 是有区别的。</p><ol><li><code>Person newman3 = man;</code> 使用<strong>拷贝初始化的方式创建了一个新的对象</strong> <code>newman3</code>，并将 <code>man</code> 对象的值复制给 <code>newman3</code>。这里会<strong>调用拷贝构造函数来完成对象的复制初始化。</strong></li><li>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</li><li><code>Person newman3; newman3 = man;</code> 首先创建了一个新的对象 <code>newman3</code>，但它<strong>是通过默认构造函数创建的</strong>，并不包含任何数据。然后，通<strong>过赋值操作符 <code>=</code> 将 <code>man</code> 对象的值赋给了 <code>newman3</code><strong>。这里会调用</strong>赋值运算符重载函数来完成对象的赋值操作。</strong></li></ol><p>总体来说，两种形式都会将 <code>man</code> 对象的值复制到 <code>newman3</code> 对象中，但是在实现细节上有所不同。<strong>拷贝初始化会调用拷贝构造函数</strong>，<strong>而赋值操作会调用赋值运算符重载函数</strong>。在某些情况下，拷贝构造函数和赋值运算符重载函数的实现可能会有差异，因此两种形式可能具有不同的行为。<strong>在一般情况下</strong>，如果需要创建并初始化一个新对象，<strong>建议使用拷贝初始化的方式</strong>，而不是先创建对象再赋值的方式。</p></li><li><p><strong>值传递是指将实参的值</strong>复制一份传递给函数的形参。<strong>在函数调用时，会创建一个新的变量（形参），并将实参的值复制到形参中。</strong>&#x3D;&#x3D;在函数内部，对形参的修改不会影响到实参的值。&#x3D;&#x3D;当函数执行完毕后，形参的生命周期结束<strong>，它所占用的内存会被释放。</strong></p><p>text02()在你的例子中，<code>doWork</code> 函数的形参 <code>p1</code> 是通过值传递的方式进行传递的。当你调用 <code>doWork(p)</code> 时，会创建一个新的 <code>Person</code> 对象 <code>p1</code>，并将 <code>p</code> 对象的值复制给 <code>p1</code>。</p></li><li><p>可以以值方式返回<strong>局部对象</strong>。当函数返回一个对象时，编<strong><em>译器会执行对象的拷贝构造函数来创建一个临时对象，并将其作为返回值</em>。这个临时对象是在函数调用栈上分配的</strong>，<strong>它的生命周期与函数的返回值绑定。</strong></p><p>&#x2F;&#x2F;</p><p><strong>假如说我用a来接受这个局部对象，那么这个临时对象将会在a的销毁的时候同时销毁</strong></p><p>![image-20230727153838243](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230727153838243.png)</p></li></ol></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">mAge = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">mAge = p.mAge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数在释放内存之前调用</span></span><br><span class="line">~<span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">man</span><span class="params">(<span class="number">100</span>)</span></span>; <span class="comment">//p对象已经创建完毕</span></span><br><span class="line"><span class="function">Person <span class="title">newman</span><span class="params">(man)</span></span>; <span class="comment">//调用拷贝构造函数</span></span><br><span class="line">Person newman2 = man; <span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person newman3;</span></span><br><span class="line"><span class="comment">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 值传递的方式给函数参数传值</span></span><br><span class="line"><span class="comment">//相当于Person p1 = p;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doWork</span><span class="params">(Person p1)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person p; <span class="comment">//无参构造函数</span></span><br><span class="line"><span class="built_in">doWork</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 以值方式返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">doWork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span> *)&amp;p1 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> p1;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//此时return *this;也会拷贝一个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p = <span class="built_in">doWork2</span>();</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span> *)&amp;p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，创建一个类的时候，c++编译器至少给一个类添加3个函数,</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p></li><li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p></li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//无参（默认）构造函数</span></span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> a) &#123;</span><br><span class="line">age = a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">age = p.age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span></span><br><span class="line">Person p1; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//用户提供的有参</span></span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>; <span class="comment">//此时如果用户没有提供拷贝构造，编译器会提供</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span></span><br><span class="line">Person p4; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line"><span class="function">Person <span class="title">p5</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//此时如果用户自己没有提供有参，会出错</span></span><br><span class="line"><span class="function">Person <span class="title">p6</span><span class="params">(p5)</span></span>; <span class="comment">//用户自己提供拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;<span class="comment">//18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p><strong>深浅拷贝是面试经典问题，也是常见的一个坑</strong></p><p>浅拷贝：<strong>简单的赋值拷贝操作</strong>  编译器提供的那个拷贝构造函数，浅拷贝</p><p>深拷贝：<strong>在堆区重新申请空间，进行拷贝操作</strong></p><p>![image-20230727164829489](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230727164829489.png)</p><p><strong>这是编译器帮忙写的浅拷贝</strong></p><p>![image-20230727172119889](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230727172119889.png)</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//无参（默认）构造函数</span></span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age, <span class="type">int</span> height) &#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">m_age = age;</span><br><span class="line">m_height = <span class="keyword">new</span> <span class="built_in">int</span>(height);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数  </span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_age = a.m_age;</span><br><span class="line"><span class="comment">//m_height = a.m_height;</span></span><br><span class="line"><span class="comment">//利用拷贝对象的数据来开辟一个新的空间。</span></span><br><span class="line">m_height = <span class="keyword">new</span> <span class="built_in">int</span>(*a.m_height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (m_height != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_height;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_age;</span><br><span class="line"><span class="type">int</span>* m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>, <span class="number">160</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"><span class="comment">//Person p2 = p1;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：<strong>如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</strong></p></blockquote><ol><li><p>自己写拷贝构造函数，用拷贝对象的数据来开辟对应的空间</p></li><li><pre><code class="c++">//拷贝构造函数  Person(const Person&amp; a)&#123;    cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;    m_age = a.m_age;    //m_height = a.m_height;    //利用拷贝对象的数据来开辟一个新的空间。    m_height = new int(*a.m_height);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 析构函数PLUS！</span><br><span class="line"></span><br><span class="line">4. ```c++</span><br><span class="line">   //析构函数</span><br><span class="line">   ~Person() &#123;</span><br><span class="line">   cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;</span><br><span class="line">   if (m_height != NULL)</span><br><span class="line">   &#123;</span><br><span class="line">   delete m_height;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol><p>只有new出来的空间才能用delete，而且只能delete一次！</p><h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p><p><code>//初始化列表方式初始化</code></p><p><code>Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c)&#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">////传统方式初始化</span></span><br><span class="line"><span class="comment">//Person(int a, int b, int c) &#123;</span></span><br><span class="line"><span class="comment">//m_A = a;</span></span><br><span class="line"><span class="comment">//m_B = b;</span></span><br><span class="line"><span class="comment">//m_C = c;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化列表方式初始化</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c) :<span class="built_in">m_A</span>(a), <span class="built_in">m_B</span>(b), <span class="built_in">m_C</span>(c) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">p.<span class="built_in">PrintPerson</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="&#x3D;&#x3D;4.2.7 类对象作为类成员&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.2.7 类对象作为类成员&#x3D;&#x3D;</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">    A a；</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>B类中有对象A作为成员，A为对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><blockquote><p><strong>&#x2F;&#x2F;构造的顺序是 ：先调用<em>对象成员</em>的构造，再调用本类构造</strong><br><strong>&#x2F;&#x2F;析构顺序与构造相反</strong></p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Phone</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">m_PhoneName = name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Phone构造&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Phone</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Phone析构&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string m_PhoneName;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化列表可以告诉编译器调用哪一个构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(string name, string pName) :<span class="built_in">m_Name</span>(name), <span class="built_in">m_Phone</span>(pName)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person构造&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person析构&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">playGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; m_Name &lt;&lt; <span class="string">&quot; 使用&quot;</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class="string">&quot; 牌手机! &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string m_Name;</span><br><span class="line">Phone m_Phone;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//当类中成员是其他类对象时，我们称该成员为 对象成员</span></span><br><span class="line"><span class="comment">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span></span><br><span class="line"><span class="comment">//析构顺序与构造相反</span></span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;张三&quot;</span> , <span class="string">&quot;苹果X&quot;</span>)</span></span>;</span><br><span class="line">p.<span class="built_in">playGame</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>();</span><br><span class="line">~<span class="built_in">Son</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Father</span>();</span><br><span class="line">~<span class="built_in">Father</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Son* a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Father::<span class="built_in">Father</span>()</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="keyword">new</span> Son;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父亲被构造了&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Father::~<span class="built_in">Father</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父亲被析构了&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son::<span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;儿子被构造了&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son::~<span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;儿子被析构了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Father father;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>();</span><br><span class="line">~<span class="built_in">Son</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Father</span>();</span><br><span class="line">~<span class="built_in">Father</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Son a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Father::<span class="built_in">Father</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父亲被构造了&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Father::~<span class="built_in">Father</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父亲被析构了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son::<span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;儿子被构造了&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son::~<span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;儿子被析构了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Father father;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这两种都是先构造儿子后构造父亲，析构相反</strong></p><p><strong>只有在父亲的构造函数里面再栈区开辟一个儿子对象的时候才是先构造父亲，然后构造儿子，其他相反</strong></p><h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p><strong>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</strong></p><p>—————————————-<em>可以通过类名访问静态成员</em>————————————————-</p><p><strong><em>静态成员分为</em>：</strong></p><ul><li><strong>静态成员变量</strong><ul><li><strong>所有对象共享同一份数据</strong></li><li><strong>在编译阶段分配内存</strong>（全局区运行前）</li><li><strong>类内声明，类外初始化</strong>（记得加作用域！！！！）</li></ul></li><li><strong>静态成员函数</strong><ul><li><strong>所有对象共享同一个函数</strong></li><li><strong>静态成员函数只能访问静态成员变量</strong></li></ul></li></ul><blockquote><p><strong>静态成员变量也有私有的时候。外部不能直接访问</strong></p><p><strong>可以通过类名访问静态成员</strong></p><p><strong>普通的成员public变量不可以直接用类名：：变量名访问！！！</strong></p></blockquote><p><strong>示例1 ：</strong>静态成员变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员变量特点：</span></span><br><span class="line"><span class="comment">//1 在编译阶段分配内存</span></span><br><span class="line"><span class="comment">//2 类内声明，类外初始化</span></span><br><span class="line"><span class="comment">//3 所有对象共享同一份数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_B; <span class="comment">//静态成员变量也是有访问权限的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> Person::m_B = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、通过对象</span></span><br><span class="line">Person p1;</span><br><span class="line">p1.m_A = <span class="number">100</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">Person p2;</span><br><span class="line">p2.m_A = <span class="number">200</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl; <span class="comment">//共享同一份数据</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、通过类名</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong>静态成员函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员函数特点：</span></span><br><span class="line"><span class="comment">//1 程序共享一个函数</span></span><br><span class="line"><span class="comment">//2 静态成员函数只能访问静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_A = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//静态static成员函数它只属于类本身不属于每一个对象实例，独立存在。非静态成员，仅当实例化对象之后才存在。静态成员函数产生在前，非静态成员函数产生在后，静态函数无法访问一个不存在的东西。也就是静态成员函数离不能用this指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line"><span class="type">int</span> m_B; <span class="comment">// </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员函数也是有访问权限的</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func2调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、通过对象</span></span><br><span class="line">Person p1;</span><br><span class="line">p1.<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、通过类名</span></span><br><span class="line">Person::<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person::func2(); //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，<strong>类内的成员变量和成员函数分开存储</strong></p><p>只有<strong>非静态成员变量才属于类的对象上</strong></p><blockquote><h5 id="只有非静态成员变量在真正属于类！！！！！"><a href="#只有非静态成员变量在真正属于类！！！！！" class="headerlink" title="只有非静态成员变量在真正属于类！！！！！"></a>只有非静态成员变量在真正属于类！！！！！</h5><h5 id="空对象占用1字节，为了区分空对象。"><a href="#空对象占用1字节，为了区分空对象。" class="headerlink" title="空对象占用1字节，为了区分空对象。"></a>空对象占用1字节，为了区分空对象。</h5><h5 id="也就是类的大小是根据非静态成员变量的"><a href="#也就是类的大小是根据非静态成员变量的" class="headerlink" title="也就是类的大小是根据非静态成员变量的"></a>也就是类的大小是根据非静态成员变量的</h5></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">mA = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非静态成员变量占对象空间</span></span><br><span class="line"><span class="type">int</span> mA;</span><br><span class="line"><span class="comment">//静态成员变量不占对象空间</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> mB;</span><br><span class="line"><span class="comment">//函数也不占对象空间，所有函数共享一个函数实例</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mA &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态成员函数也不占对象空间</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">sfunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(Person) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。<em><strong>this指针指向被调用的成员函数所属的对象</strong></em></p><blockquote><p><strong>this指针是隐含每一个非静态成员函数内的一种指针</strong></p><p><strong>this指针不需要定义，直接使用即可</strong></p><p><strong>静态成员函数没有this指针</strong></p><p>本质是指针常量！！！，已经指向了a，不可以修改指向，但可以修改值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showperson</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_a = <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Person a;</span><br><span class="line">a.<span class="built_in">showperson</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>this指针的用途：</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>*<em>在类的非静态成员函数中返回对象本身，可使用return <em>this</em></em></li></ul><h5 id="链式编程思想！！！"><a href="#链式编程思想！！！" class="headerlink" title="&#x3D;&#x3D;链式编程思想！！！&#x3D;&#x3D;"></a>&#x3D;&#x3D;<strong>链式编程思想！！！</strong>&#x3D;&#x3D;</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Person&amp; <span class="title">PersonAddPerson</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line"><span class="comment">//返回对象本身</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="comment">///////////////////////////////////////////////////////////////</span></span><br><span class="line">p2.<span class="built_in">PersonAddPerson</span>(p1).<span class="built_in">PersonAddPerson</span>(p1).<span class="built_in">PersonAddPerson</span>(p1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到this指针，需要加以判断保证代码的健壮性</p><blockquote><p>类类型的指针，在成员里this就是指针。</p></blockquote><p>但不能用空指针访问里面的属性，可以用函数。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showperosn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我是person类&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showpp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//代码健壮！！！</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sdadasdassdasdasdasdsda&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person* p = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;<span class="built_in">showperosn</span>(); <span class="comment">//空指针，可以调用成员函数</span></span><br><span class="line">p-&gt;<span class="built_in">showpp</span>(); <span class="comment">//但是如果成员函数中用到了this指针，就不可以了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p><blockquote><ul><li><strong>成员函数后</strong>加const后我们称为这个函数为<strong>常函数</strong></li><li><strong>常函数内不可以修改成员属性</strong></li><li><strong>成员属性声明时加关键字mutable后，在常函数中依然可以修改</strong></li></ul></blockquote><p><strong>常对象：</strong></p><ul><li><strong>声明对象前加const称该对象为常对象</strong></li><li><strong>常对象只能调用常函数</strong></li><li><strong>常对象可以修改静态变量的值</strong></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">m_A = <span class="number">0</span>;</span><br><span class="line">m_B = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//this指针的本质是一个指针常量，指针的指向不可修改</span></span><br><span class="line"><span class="comment">//如果想让指针指向的值也不可以修改，需要声明常函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowPerson</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="comment">//const Type* const pointer;</span></span><br><span class="line"><span class="comment">//this = NULL; //不能修改指针的指向 Person* const this;</span></span><br><span class="line"><span class="comment">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_B = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyFunc</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="comment">//mA = 10000;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> m_B; <span class="comment">//可修改 可变的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰对象  常对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> Person person; <span class="comment">//常量对象  </span></span><br><span class="line">cout &lt;&lt; person.m_A &lt;&lt; endl;</span><br><span class="line"><span class="comment">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span></span><br><span class="line">person.m_B = <span class="number">100</span>; <span class="comment">//但是常对象可以修改mutable修饰成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常对象访问成员函数</span></span><br><span class="line">person.<span class="built_in">MyFunc</span>(); <span class="comment">//常对象不能调用const的函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是<strong>让一个函数或者类 访问另一个类中私有成员</strong></p><p>友元的关键字为  &#x3D;&#x3D;friend&#x3D;&#x3D;</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">building</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">goodgay</span><span class="params">(building* building)</span></span>;<span class="comment">//写在类里面就ok，最好在上面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">building</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_sittingrom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">m_bedroom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_sittingrom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_bedroom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodgay</span><span class="params">(building* building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友 全局函数正在访问:&quot;</span> &lt;&lt;building-&gt;m_sittingrom&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友 全局函数正在访问:&quot;</span> &lt;&lt; building-&gt;m_bedroom&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">building b;</span><br><span class="line"><span class="built_in">goodgay</span>(&amp;b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">text01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">goodGay</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">goodGay</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">goodGay</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::<span class="built_in">goodGay</span>()</span><br><span class="line">&#123;</span><br><span class="line">building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">goodGay gg;</span><br><span class="line">gg.<span class="built_in">visit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>;</span><br><span class="line"><span class="comment">//你可以在goodGay类的定义之前提供一个Building类的前向声明来解决编译错误。</span></span><br><span class="line"><span class="comment">//但是，在这种情况下，你不能直接在goodGay类的构造函数中使用new来创建Building对象，因为编译器仍然无法识别Building类的具体定义。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">goodGay</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">goodGay</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Building* building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">goodGay</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodGay::visit2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line">goodGay::<span class="built_in">goodGay</span>()</span><br><span class="line">&#123;</span><br><span class="line">building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">goodGay gg;</span><br><span class="line">gg.<span class="built_in">visit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><blockquote><p>通过成员函数重载</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class person</span><br><span class="line">&#123;</span><br><span class="line">public: </span><br><span class="line">person(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;m_a = a;</span><br><span class="line">this-&gt;m_b = b;</span><br><span class="line">&#125;</span><br><span class="line">person operator+(person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">person p3(0, 0);</span><br><span class="line">p3.m_a = this-&gt;m_a + p.m_a;</span><br><span class="line">p3.m_b = this-&gt;m_b + p.m_b;</span><br><span class="line">return p3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">int m_a;</span><br><span class="line">int m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">person p1(10, 10);</span><br><span class="line">person p2(20, 20);</span><br><span class="line">person p3=p1+(p2);</span><br><span class="line">cout &lt;&lt; p3.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;_------------------&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3.m_b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过全局函数重载</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line"><span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//person fucn(person&amp; p1, person&amp; p2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//person p3(0,0);</span></span><br><span class="line"><span class="comment">//p3.m_a = p1.m_a + p2.m_a;</span></span><br><span class="line"><span class="comment">//p3.m_b = p3.m_b + p2.m_b;</span></span><br><span class="line"><span class="comment">//return p3;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">person <span class="keyword">operator</span>+(person&amp; p1, person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">person <span class="title">p3</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">p3.m_a = p1.m_a + p2.m_a;</span><br><span class="line">p3.m_b = p1.m_b + p2.m_b;</span><br><span class="line"><span class="keyword">return</span> p3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="number">20</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//person p3 = func(p1, p2);</span></span><br><span class="line">    <span class="comment">//可以简写为这样！</span></span><br><span class="line">person p3 = p1 + p2;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; p3.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;_------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3.m_b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>运算符对应的函数重载</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line"><span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person <span class="keyword">operator</span>+(person&amp; p1, person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">person <span class="title">p3</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">p3.m_a = p1.m_a + p2.m_a;</span><br><span class="line">p3.m_b = p1.m_b + p2.m_b;</span><br><span class="line"><span class="keyword">return</span> p3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person <span class="keyword">operator</span>+(person&amp; p1, <span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">person <span class="title">p3</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">p3.m_a = p1.m_a + num;</span><br><span class="line">p3.m_b = p1.m_b + num;</span><br><span class="line"><span class="keyword">return</span> p3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="number">20</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//person p3 = operator+(p1, p2);</span></span><br><span class="line">person p3 = p1 + p2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在如果</span></span><br><span class="line">person p4 = p1 + <span class="number">100</span>;<span class="comment">//person + int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; p3.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3.m_b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;_------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p4.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p4.m_b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>通过成员函数或者全局函数写一个目标重载运算符的作用函数,然后把函数的名字改为operator+就可以说使用+号来重载了</li><li>不把函数名改写为operator+之前的加号还默认是原来的样子!!!!</li><li>熟练之后直接函数名字就是operator+</li><li>如果二者同时存在的时候就会报错</li></ol></blockquote><blockquote><p>总结1：对于<strong>内置的数据类型</strong>的表达式的的运算符是不可能改变的1+1&#x3D;2,变成1+1&#x3D;0?不可以</p></blockquote><blockquote><p>总结2：不要滥用运算符重载,加号运算符重载,实现就不要用减号..</p></blockquote><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="&#x3D;&#x3D;4.5.2 左移运算符重载&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.5.2 左移运算符重载&#x3D;&#x3D;</h4><p>作用：可以输出自定义数据类型</p><p>加个cosnt最好，引用作为函数参数传递的时候不修改最好加上cosnt！！！！！！！！！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p) <span class="comment">//本质operator&lt;&lt;(cout,p) 简化cout&lt;&lt;p;</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a ;</span><br><span class="line">cout &lt;&lt; p.m_b;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链式思想,返回cout对应的</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> person&amp; p) <span class="comment">//本质operator&lt;&lt;(cout,p) 简化cout&lt;&lt;p;</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a ;</span><br><span class="line">cout &lt;&lt; p.m_b;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也是ok的因为,引用本来就是起别名,而真正传入的实参确实cout所以</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_A = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_B = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span></span><br><span class="line"><span class="comment">//void operator&lt;&lt;(Person&amp; p)&#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现左移重载</span></span><br><span class="line"><span class="comment">//ostream对象只能有一个,所以要用引用的形式修改,否则覆盖不了原来的cout</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;</span><br><span class="line">out &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; p.m_B;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl; <span class="comment">//链式编程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结<strong>：重载左移运算符配合友元可以实现输出自定义数据类型</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, person&amp; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(<span class="type">int</span> a,<span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_b = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout对象和我的p对象</span></span><br><span class="line"><span class="comment">//void operator&lt;&lt;(cout)  // p.operator&lt;&lt;(cout)  简化为p&lt;&lt;cout</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line"><span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, person&amp; p) <span class="comment">//本质operator&lt;&lt;(cout,p) 简化cout&lt;&lt;p;</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a ;</span><br><span class="line">cout &lt;&lt; p.m_b;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">person <span class="title">p</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; p &lt;&lt; endl &lt;&lt; <span class="string">&quot;helloworld&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><p>但用引用可以节省空间，而且不怕拷贝函数有错误。</p><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyClass&amp; <span class="keyword">operator</span>++() &#123;  <span class="comment">// 前置递增运算符重载</span></span><br><span class="line">  <span class="comment">// 执行递增操作</span></span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;  <span class="comment">// 返回递增后的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;  <span class="comment">// 后置递增运算符重载</span></span><br><span class="line">  MyClass temp = *<span class="keyword">this</span>;  <span class="comment">// 创建一个临时对象保存当前对象的值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行递增操作</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> temp;  <span class="comment">// 返回之前的对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//class MyClass &#123;</span></span><br><span class="line"><span class="comment">//    // 类定义</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"></span><br><span class="line">MyClass&amp; <span class="keyword">operator</span>++(MyClass&amp; obj) &#123;  <span class="comment">// 前置递增运算符重载</span></span><br><span class="line"><span class="comment">// 执行递增操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;  <span class="comment">// 返回递增后的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass <span class="keyword">operator</span>++(MyClass&amp; obj, <span class="type">int</span>) &#123;  <span class="comment">// 后置递增运算符重载</span></span><br><span class="line">MyClass temp = obj;  <span class="comment">// 创建一个临时对象保存当前对象的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行递增操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp;  <span class="comment">// 返回之前的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意conse，会有一定的影响，如果引用做函数参数的时候确认是不修改的 话就加上const！！！</span></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>前置++</p><p>返回引用！！可以链式</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, person&amp; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//p.operator++(person&amp; p)</span></span><br><span class="line">person&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局函数重载的时候</span></span><br><span class="line">person&amp; <span class="keyword">operator</span>++(person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">p.m_a++;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意conse，会有一定的影响，如果引用做函数参数的时候确认是不修改的 话就加上const！！！</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">person p;</span><br><span class="line">cout &lt;&lt; ++(++p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>后置递增！</p><p>返回同类，不可以用链式</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p);</span><br><span class="line"><span class="keyword">friend</span> person <span class="keyword">operator</span>++(person&amp; obj, <span class="type">int</span>);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person <span class="keyword">operator</span>++(person&amp; obj, <span class="type">int</span>) &#123;  <span class="comment">// 后置递增运算符重载</span></span><br><span class="line">person temp = obj;  <span class="comment">// 创建一个临时对象保存当前对象的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行递增操作</span></span><br><span class="line">obj.m_a++;=</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp;  <span class="comment">// 返回之前的对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意conse，会有一定的影响，如果引用做函数参数的时候确认是不修改的 话就加上const！！！</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">person myInt;</span><br><span class="line">cout &lt;&lt; myInt++ &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">person p;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><blockquote><h4 id="总结：-前置递增返回引用，后置递增返回值"><a href="#总结：-前置递增返回引用，后置递增返回值" class="headerlink" title="总结： 前置递增返回引用，后置递增返回值"></a>总结： 前置递增返回引用，后置递增返回值</h4></blockquote><p>递减！！的成员函数 的 写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person&amp; <span class="keyword">operator</span>--()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a--;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">person <span class="keyword">operator</span>--(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">person temp = *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a--;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">person myInt;</span><br><span class="line">cout &lt;&lt; --myInt &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">person myInt;</span><br><span class="line">cout &lt;&lt; myInt--&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">person p;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递减的全局函数重载写法！！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p);</span><br><span class="line"><span class="keyword">friend</span> person&amp; <span class="keyword">operator</span>--(person&amp; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> person <span class="keyword">operator</span>--(person&amp; p, <span class="type">int</span>);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person&amp; <span class="keyword">operator</span>--(person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">p.m_a--;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person <span class="keyword">operator</span>--(person&amp; p,<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">person temp = p;</span><br><span class="line">p.m_a--;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">person myInt;</span><br><span class="line">cout &lt;&lt; --myInt &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">person myInt;</span><br><span class="line">cout &lt;&lt; myInt--&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">person p;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><blockquote><ol><li><h5 id="默认构造函数-无参，函数体为空"><a href="#默认构造函数-无参，函数体为空" class="headerlink" title="默认构造函数(无参，函数体为空)"></a>默认构造函数(无参，函数体为空)</h5></li><li><h5 id="默认析构函数-无参，函数体为空"><a href="#默认析构函数-无参，函数体为空" class="headerlink" title="默认析构函数(无参，函数体为空)"></a>默认析构函数(无参，函数体为空)</h5></li><li><h5 id="默认拷贝构造函数，对属性进行值拷贝"><a href="#默认拷贝构造函数，对属性进行值拷贝" class="headerlink" title="默认拷贝构造函数，对属性进行值拷贝"></a>默认拷贝构造函数，对属性进行值拷贝</h5></li><li><h5 id="赋值运算符-operator-对属性进行值拷贝"><a href="#赋值运算符-operator-对属性进行值拷贝" class="headerlink" title="赋值运算符 operator&#x3D;, 对属性进行值拷贝"></a>赋值运算符 operator&#x3D;, 对属性进行值拷贝</h5></li></ol></blockquote><ol><li>也是浅拷贝</li></ol><p><strong>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</strong></p><p>类中有属性指向堆区，就要考虑深拷贝了</p><hr><p><strong>思考，指出那里出现了问题????</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(<span class="type">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="built_in">int</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;p;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="comment">//此处使用拷贝构造函数的隐式转换</span></span><br><span class="line">    <span class="comment">//person p3=p1</span></span><br><span class="line">    <span class="comment">//由于我们并没有写自己的深拷贝,也就是说还用的是编译器帮我们写的浅拷贝,造成了简单的赋值操作,让我么两个指针都指向了同一块数据,然后释放了两次就鸡; </span></span><br><span class="line">    <span class="comment">//我们只是写了自己的=的重载.</span></span><br><span class="line">    <span class="comment">//避免了重载的时候释放两次同一个位置</span></span><br><span class="line">    <span class="comment">//p2=p1这样的操作不会有问题</span></span><br><span class="line">person p3 = p1;</span><br><span class="line">cout &lt;&lt; *p1.p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p2.p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p3.p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![image-20230729143751080](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230729143751080.png)</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将年龄数据开辟到堆区</span></span><br><span class="line">m_Age = <span class="keyword">new</span> <span class="built_in">int</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载赋值运算符 </span></span><br><span class="line">Person&amp; <span class="keyword">operator</span>=(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_Age;</span><br><span class="line">m_Age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译器提供的代码是浅拷贝</span></span><br><span class="line"><span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提供深拷贝 解决浅拷贝的问题</span></span><br><span class="line">m_Age = <span class="keyword">new</span> <span class="built_in">int</span>(*p.m_Age);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回自身</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_Age;</span><br><span class="line">m_Age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄的指针</span></span><br><span class="line"><span class="type">int</span> *m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">p3 = p2 = p1; <span class="comment">//赋值操作</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//int a = 10;</span></span><br><span class="line"><span class="comment">//int b = 20;</span></span><br><span class="line"><span class="comment">//int c = 30;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//c = b = a;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="可以是实现这样的操作，从右到左赋值！！！"><a href="#可以是实现这样的操作，从右到左赋值！！！" class="headerlink" title="可以是实现这样的操作，从右到左赋值！！！"></a>可以是实现这样的操作，从右到左赋值！！！</h4></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//test();</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">3</span>;</span><br><span class="line">a = b = c;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a  &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b  &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;c=&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>给&#x3D;进行链式思想实连等</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(<span class="type">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="built_in">int</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;p;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person&amp; <span class="keyword">operator</span>=(<span class="type">const</span> person&amp; pp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//需要看原来的堆区是否有数据，如果有需要先释放干净，然后再利用数据开辟空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="built_in">int</span>(*pp.p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">person p3 =(<span class="number">30</span>);</span><br><span class="line">p3 = p2 = p1;</span><br><span class="line">cout &lt;&lt; *p1.p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p2.p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p3.p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-5-5-关系运算符重载—返回BOOL"><a href="#4-5-5-关系运算符重载—返回BOOL" class="headerlink" title="4.5.5 关系运算符重载—返回BOOL"></a>4.5.5 关系运算符重载—返回BOOL</h4><p><strong>作用：</strong>重<strong>载关系运算符，可以让两个自定义类型对象进行对比操作</strong></p><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == p2.name &amp;&amp; <span class="keyword">this</span>-&gt;age == p2.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////////</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != p2.name &amp;&amp; <span class="keyword">this</span>-&gt;age != p2.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////全局函数重载的时候</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(person&amp; p1, person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.name == p2.name &amp;&amp; p1.age == p2.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(person&amp; p1, person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.name == p2.name &amp;&amp; p1.age == p2.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//全局记得加上友元!!!@#@#@#@#@#!#!</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(string name, <span class="type">int</span> age):<span class="built_in">name</span>(name), <span class="built_in">age</span>(age)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == p2.name &amp;&amp; <span class="keyword">this</span>-&gt;age == p2.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="string">&quot;tom&quot;</span>, <span class="number">16</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="string">&quot;tom&quot;</span>, <span class="number">16</span>)</span></span>;</span><br><span class="line">person p3 = <span class="built_in">person</span>(<span class="string">&quot;jerry&quot;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">///erson p4 = p2;//浅拷贝！！！危险，如果指针操纵他—+析构释放，就要考虑深拷贝！！！</span></span><br><span class="line"><span class="keyword">if</span> (p1==p2)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1和p2是相等的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1和p2是不相等的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载()"></a>4.5.6 函数调用运算符重载()</h4><ul><li>函数调用运算符 ()  也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><blockquote><h4 id="刚试了一下，operator（）（）只能在类里面定义，报错说不允许他为全局函数。"><a href="#刚试了一下，operator（）（）只能在类里面定义，报错说不允许他为全局函数。" class="headerlink" title="刚试了一下，operator（）（）只能在类里面定义，报错说不允许他为全局函数。"></a>刚试了一下，operator（）（）只能在类里面定义，报错说不允许他为全局函数。</h4></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string text)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myadd</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+<span class="number">1</span> + b+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//匿名对象调用  </span></span><br><span class="line"><span class="comment">//有参构造Person(10)单独写就是匿名对象  当前行结束之后，马上析构，直接构造析构然后立马销毁</span></span><br><span class="line"><span class="comment">//Person()单独写就是匿名对象  当前行结束之后，马上析构，直接构造析构然后立马销毁</span></span><br><span class="line">person p;</span><br><span class="line"><span class="built_in">p</span>(<span class="string">&quot;你好啊）OP&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----匿名函数----------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">person</span>()(<span class="string">&quot;你好啊匿名函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">Myadd add;</span><br><span class="line">cout&lt;&lt;<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">30</span>)&lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----匿名函数----------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Myadd</span>()(<span class="number">90</span>, <span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-继承–2"><a href="#4-6-继承–2" class="headerlink" title="4.6  继承–2"></a>4.6  继承–2</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><p><img src="/assets/1544861202252.png" alt="1544861202252"></p><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>重要但不难</p><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Java</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Python</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPP</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Java ja;</span><br><span class="line">ja.<span class="built_in">header</span>();</span><br><span class="line">ja.<span class="built_in">footer</span>();</span><br><span class="line">ja.<span class="built_in">left</span>();</span><br><span class="line">ja.<span class="built_in">content</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Python py;</span><br><span class="line">py.<span class="built_in">header</span>();</span><br><span class="line">py.<span class="built_in">footer</span>();</span><br><span class="line">py.<span class="built_in">left</span>();</span><br><span class="line">py.<span class="built_in">content</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">CPP cp;</span><br><span class="line">cp.<span class="built_in">header</span>();</span><br><span class="line">cp.<span class="built_in">footer</span>();</span><br><span class="line">cp.<span class="built_in">left</span>();</span><br><span class="line">cp.<span class="built_in">content</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承实现：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//公共页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasePage</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Java</span> : <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Python</span> : <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPP</span> : <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Java ja;</span><br><span class="line">ja.<span class="built_in">header</span>();</span><br><span class="line">ja.<span class="built_in">footer</span>();</span><br><span class="line">ja.<span class="built_in">left</span>();</span><br><span class="line">ja.<span class="built_in">content</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Python py;</span><br><span class="line">py.<span class="built_in">header</span>();</span><br><span class="line">py.<span class="built_in">footer</span>();</span><br><span class="line">py.<span class="built_in">left</span>();</span><br><span class="line">py.<span class="built_in">content</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">CPP cp;</span><br><span class="line">cp.<span class="built_in">header</span>();</span><br><span class="line">cp.<span class="built_in">footer</span>();</span><br><span class="line">cp.<span class="built_in">left</span>();</span><br><span class="line">cp.<span class="built_in">content</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>继承的好处：&#x3D;&#x3D;可以减少重复的代码&#x3D;&#x3D;</p><blockquote><p>class A : public B; </p><p><strong>A 类称为子类 或 派生类</strong></p><p><strong>B 类称为父类 或 基类</strong></p></blockquote><p><strong>派生类中的成员，包含两大部分</strong>：</p><p><strong>一类是从基类继承过来的，一类是自己增加的成员。</strong></p><p>从基类继承过过来的表现其共性，而新增的成员体现了<strong>其个性</strong>。</p><h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p><p><strong>继承方式一共有三种：</strong></p><blockquote><ul><li><h4 id="公共继承-原来是啥还是啥，只不过不可以访问父亲的私有的"><a href="#公共继承-原来是啥还是啥，只不过不可以访问父亲的私有的" class="headerlink" title="公共继承,原来是啥还是啥，只不过不可以访问父亲的私有的"></a>公共继承,原来是啥还是啥，只不过不可以访问父亲的私有的</h4></li><li><h4 id="保护继承-除了private都变成protected"><a href="#保护继承-除了private都变成protected" class="headerlink" title="保护继承  除了private都变成protected"></a>保护继承  除了private都变成protected</h4></li><li><h4 id="私有继承-全变成private；"><a href="#私有继承-全变成private；" class="headerlink" title="私有继承 全变成private；"></a>私有继承 全变成private；</h4></li></ul><p>在C++中，<strong>派生类确实继承了基类的所有成员，包括私有成员。</strong>但是，<strong>私有成员在派生类中是不可访问的。</strong>这<strong>意味着派生类无法直接访问或继承基类的私有成员。</strong></p><p><strong>私有成员只能在基类内部访问</strong>，派生类无法直接访问或继承私有成员。这是因为<strong>私有成员被设计为只能在基类内部使用，对外部是不可见的。****派生类只能通过基类的公有和保护成员来访问和操作私有成员</strong>。</p><p><strong>只是编译器把父类的private给隐藏了，子类不可访问</strong></p></blockquote><p><img src="/assets/clip_image002.png" alt="img"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> :<span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A; <span class="comment">//可访问 public权限</span></span><br><span class="line">m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line"><span class="comment">//m_C; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son1 s1;</span><br><span class="line">s1.m_A; <span class="comment">//其他类只能访问到公共权限</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span>:<span class="keyword">protected</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A; <span class="comment">//可访问 protected权限</span></span><br><span class="line">m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line"><span class="comment">//m_C; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myClass2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son2 s;</span><br><span class="line"><span class="comment">//s.m_A; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son3</span>:<span class="keyword">private</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A; <span class="comment">//可访问 private权限</span></span><br><span class="line">m_B; <span class="comment">//可访问 private权限</span></span><br><span class="line"><span class="comment">//m_C; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrandSon3</span> :<span class="keyword">public</span> Son3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span></span><br><span class="line"><span class="comment">//m_A;</span></span><br><span class="line"><span class="comment">//m_B;</span></span><br><span class="line"><span class="comment">//m_C;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="&#x3D;&#x3D;4.6.3 继承中的对象模型&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.6.3 继承中的对象模型&#x3D;&#x3D;</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p><blockquote><p><strong>在C++中，子类继承了父类的函数，但子类函数和父类函数并不指向同一块地址。</strong></p><p><strong>当子类继承父类的函数时，子类会创建一个新的函数，该函数与父类的函数具有相同的名称和参数列表，但是可以有不同的实现（重写）或相同的实现（继承）。</strong></p><p><strong>子类函数和父类函数是两个独立的函数，它们具有不同的地址。子类对象可以通过子类函数来调用子类的实现，而父类对象可以通过父类函数来调用父类的实现。</strong></p><hr><p><strong>在C++中，子类继承了父类的成员变量，但子类的成员变量和父类的成员变量并不指向同一块地址。子类对象包含了父类对象的所有成员变量，但它们在内存中是独立存储的。</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> parentVar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> : <span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Parent parent;</span><br><span class="line">    Child child;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印父类成员变量地址</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;父类成员变量地址：&quot;</span> &lt;&lt; &amp;(parent.parentVar) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印子类成员变量地址</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;子类成员变量地址：&quot;</span> &lt;&lt; &amp;(child.parentVar) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_C; <span class="comment">//私有成员只是被隐藏了，但是还是会继承下去</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Son) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//16</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用工具查看：</p><p>![image-20230729223112618](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230729223112618.png)</p><p>打开工具窗口后，定位到当前CPP文件的盘符</p><p>![image-20230729222903401](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230729222903401.png)</p><p>然后输入： cl &#x2F;d1 reportSingleClassLayout查看的类名   所属文件名</p><p>table</p><p>效果如下图：</p><p><img src="/assets/1545882158050.png" alt="1545882158050"></p><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>因为是继承，肯定要先创建一个父类</strong></p><p><strong>先父亲后儿子，和之前的类里面有别的类的时候，</strong></p><p>4.2.7 类对象作为类成员是有区别的</p><p>类里面有类的时候是先构造里面的然后再构造外面的！！！</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span></span><br><span class="line">Son s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="总结：继承中-先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反"><a href="#总结：继承中-先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反" class="headerlink" title="总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反"></a>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</h4></blockquote><h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><blockquote><ul><li><h4 id="访问子类同名成员-直接访问即可"><a href="#访问子类同名成员-直接访问即可" class="headerlink" title="访问子类同名成员   直接访问即可"></a>访问子类同名成员   直接访问即可</h4></li><li><h4 id="访问父类同名成员-需要加作用域"><a href="#访问父类同名成员-需要加作用域" class="headerlink" title="访问父类同名成员   需要加作用域"></a>访问父类同名成员   需要加作用域</h4></li><li><p>直接调用就是儿子的，</p><p><strong>&#x2F;&#x2F;当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</strong><br><strong>&#x2F;&#x2F;如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</strong></p></li></ul></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base1</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是父类的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Base1</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是父类的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我是父亲！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_B ;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> :<span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我是儿子！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Son1</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是子类的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Son1</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是子类的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_A=<span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span></span><br><span class="line"><span class="comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son1 s1;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;子类的同名是&quot;</span>&lt;&lt; s1.m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父类的同名是&quot;</span> &lt;&lt; s1.Base1::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">s1.<span class="built_in">func</span>();</span><br><span class="line">s1.Base1::<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s1.Base1::<span class="built_in">func</span>(<span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(Son1) &lt;&lt; endl;</span><br><span class="line"><span class="comment">//16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：</p><blockquote><ol><li><h5 id="子类对象可以直接访问到子类中同名成员"><a href="#子类对象可以直接访问到子类中同名成员" class="headerlink" title="子类对象可以直接访问到子类中同名成员"></a>子类对象可以直接访问到子类中同名成员</h5></li><li><h5 id="子类对象加作用域可以访问到父类同名成员"><a href="#子类对象加作用域可以访问到父类同名成员" class="headerlink" title="子类对象加作用域可以访问到父类同名成员"></a>子类对象加作用域可以访问到父类同名成员</h5></li><li><h5 id="当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数-包括重载的，都没用，加作用域可以访问到父类中同名函数"><a href="#当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数-包括重载的，都没用，加作用域可以访问到父类中同名函数" class="headerlink" title="当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数,包括重载的，都没用，加作用域可以访问到父类中同名函数"></a>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数,包括重载的，都没用，<em>加作用域</em>可以访问到父类中同名函数</h5></li></ol></blockquote><h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p><strong>1.静态成员可以通过类名来访问！</strong></p><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p><strong>静态成员和非静态成员出现同名，处理方式一致</strong></p><p>想要使用父亲的就加作用域就欧克了！！！</p><blockquote><h5 id="访问子类同名成员-直接访问即可-1"><a href="#访问子类同名成员-直接访问即可-1" class="headerlink" title="访问子类同名成员   直接访问即可"></a>访问子类同名成员   直接访问即可</h5><h5 id="访问父类同名成员-需要加作用域-1"><a href="#访问父类同名成员-需要加作用域-1" class="headerlink" title="访问父类同名成员   需要加作用域"></a>访问父类同名成员   需要加作用域</h5></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Son::Base::<span class="built_in">func</span>();</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">    <span class="comment">//第一个双冒号：代表通过类名方式访问，第二个双冒号是，代表访问父类的作用域下！！！！</span></span><br><span class="line">Son::Base::<span class="built_in">func</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son s;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认是Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;要想用父亲的就加作用域Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过类名访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Base::m_A &lt;&lt; endl;</span><br><span class="line"><span class="comment">//想要用子类来访问父类的静态成员变量就得用这种</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son s;</span><br><span class="line">s.<span class="built_in">func</span>();</span><br><span class="line">s.Base::<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son::<span class="built_in">func</span>();</span><br><span class="line">Son::Base::<span class="built_in">func</span>();</span><br><span class="line">Son::Base::<span class="built_in">func</span>();</span><br><span class="line"><span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">Son::Base::<span class="built_in">func</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base - static void func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Base::m_A = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son - static void func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Son::m_A = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son s;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认是Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;要想用父亲的就加作用域Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过类名访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Base::m_A &lt;&lt; endl;</span><br><span class="line"><span class="comment">//想要用子类来访问父类的静态成员变量就得用这种</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son s;</span><br><span class="line">s.<span class="built_in">func</span>();</span><br><span class="line">s.Base::<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son::<span class="built_in">func</span>();</span><br><span class="line">Son::Base::<span class="built_in">func</span>();</span><br><span class="line"><span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">    <span class="comment">//第一个双冒号：代表通过类名方式访问，第二个双冒号是，代表访问父类的作用域下！！！！</span></span><br><span class="line">Son::Base::<span class="built_in">func</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote><h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><hr><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><hr><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p>子类想用自己的 就类名.使用</p><p>子类想用爹爹们的 就用 子类名.父类::对应的数据</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base1</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base2</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">200</span>;  <span class="comment">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base1 </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_C = <span class="number">300</span>;</span><br><span class="line">m_D = <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line"><span class="type">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多继承容易产生成员同名的情况</span></span><br><span class="line"><span class="comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son s;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(s) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p><pre><code>两个派生类继承同一个基类又有某个类同时继承者两个派生类这种继承被称为菱形继承，或者钻石继承</code></pre><p><strong>典型的菱形继承案例：</strong></p><p><img src="/assets/clip_image002.jpg" alt="IMG_256"></p><p><strong>菱形继承问题：</strong></p><ol><li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</code></pre></li><li><p>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</p></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承前加virtual关键字后，变为虚继承</span></span><br><span class="line"><span class="comment">//此时公共的父类Animal称为虚基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tuo</span>   : <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepTuo</span> : <span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SheepTuo st;</span><br><span class="line">st.Sheep::m_Age = <span class="number">100</span>;</span><br><span class="line">st.Tuo::m_Age = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><blockquote><p><strong>解释虚继承（virtual inheritance）的概念</strong></p><p>在C++中，当一个类被继承时，子类会包含父类的成员变量和成员函数。如果一个类被多个子类继承，那么每个子类都会包含一份父类的成员变量和成员函数，这可能会导致冗余和浪费。</p><p>为了解决这个问题，C++引入了虚继承（virtual inheritance）的概念。虚继承可以确保在多继承中，对于公共的基类，只有一份实例存在于继承体系中。通过使用<code>virtual</code>关键字来声明虚继承。</p><p>在您的代码中，<code>Sheep</code>和<code>Tuo</code>类都使用了虚继承，它们都继承自虚基类<code>Animal</code>。而<code>SheepTuo</code>类继承自<code>Sheep</code>和<code>Tuo</code>类。</p><p>在加入虚继承之前，<code>SheepTuo</code>类中会包含两份<code>m_Age</code>成员变量，分别来自于<code>Sheep</code>和<code>Tuo</code>类。而加入虚继承后，<code>SheepTuo</code>类中只会包含一份<code>m_Age</code>成员变量，来自于虚基类<code>Animal</code>。</p><p>因此，加入虚继承后，<code>SheepTuo</code>对象的大小（占用的字节数）会减小。在您的代码中，输出<code>sizeof(st)</code>可以看到<code>SheepTuo</code>对象的大小变为4。</p><p>另外，由于虚继承的特性，通过类名作用域来访问虚基类的成员变量。在您的代码中，使用<code>st.Sheep::m_Age</code>和<code>st.Tuo::m_Age</code>来访问<code>Sheep</code>和<code>Tuo</code>类中的<code>m_Age</code>成员变量。</p><p>最后，注释掉的<code>cout &lt;&lt; &quot;st.m_Age = &quot; &lt;&lt; st.m_Age &lt;&lt; endl;</code>语句会导致编译错误，因为在虚继承中，访问虚基类的成员变量需要使用类名作用域。</p><hr><p>在虚继承中，除了会包含虚基类的成员变量，还会包含一些额外的信息来处理虚继承的相关操作，比如虚基类指针或虚基类表。这些额外的信息会导致对象的大小增加。</p><hr><p><strong>确定虚基类的大小？想吧你哈哈</strong></p><p>确定虚基类指针或虚基类表所占字节的具体方法是依赖于编译器和系统的实现细节的。不同的编译器和系统可能会有不同的实现方式。</p><p>一种常见的实现方式是，在虚继承中，编译器会为每个包含虚基类的类生成一个虚基类表（vtable）。虚基类表是一个数据结构，用于存储虚基类的相关信息，比如虚基类的偏移量等。</p><p>虚基类指针是一个指向虚基类表的指针，用于在运行时动态查找虚基类的成员。虚基类指针的大小通常是一个指针的大小，即在32位系统中通常是4个字节，在64位系统中通常是8个字节。</p><p>虚基类表的大小取决于虚基类的数量和虚基类的成员变量和成员函数的数量。每个虚基类在虚基类表中占据一定的空间，用于存储虚基类的相关信息。</p></blockquote><h3 id="4-7-多态–3"><a href="#4-7-多态–3" class="headerlink" title="4.7  多态–3"></a>4.7  多态–3</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: <strong>函数重载 和 运算符重载属于静态多态，复用函数名</strong></li><li>动态多态: <strong>派生类和虚函数实现运行时多态</strong></li></ul><p>静态多态和动态多态区别：</p><ul><li><strong>静态多态的函数地址早绑定  -  编译阶段确定函数地址</strong></li><li><strong>动态多态的函数地址晚绑定</strong>  -  运行阶段确定函数地址</li></ul><hr><p><strong>等号左边编译类型右边运行类型，早绑定看编译类型，晚绑定看运行类型</strong></p><p><strong>Animal&amp; animal与传入的东西</strong></p><hr><p>&#x3D;&#x3D;就相当于重载函数，本来必须在同一作用域下才能重载，vritual允许父子类之间函数重载&#x3D;&#x3D;</p><p>下面通过案例进行讲解多态</p><blockquote><p>&#x2F;函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</p><p>&#x2F;&#x2F;我们希望传入什么对象，那么就调用什么对象的函数<br>&#x2F;&#x2F;如果函数地址在编译阶段就能确定，那么静态联编<br>&#x2F;&#x2F;如果函数地址在运行阶段才能确定，就是动态联编</p><hr><p>&#x2F;&#x2F;多态满足条件：<br>&#x2F;&#x2F;1、有继承关系<br>&#x2F;&#x2F;2、子类重写父类中的虚函数,,此时加不加 virtual都欧克<br>&#x2F;&#x2F;多态使用：<br><strong>———————————————&#x2F;&#x2F;父类指针或引用指向子类对象</strong>—————————————————-</p><p>父亲类 *pointer&#x3D;new 子类名;</p><p>父亲类&amp;p&#x3D;子类具体对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建+法计算器</span></span><br><span class="line">addCalculator add;</span><br><span class="line">AbstractCalculator&amp; abc = add;</span><br><span class="line"></span><br><span class="line">abc.a = <span class="number">10</span>;</span><br><span class="line">abc.b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc.<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">////////////////////////</span></span><br><span class="line"><span class="comment">//创建+法计算器</span></span><br><span class="line">AbstractCalculator* abc = <span class="keyword">new</span> <span class="built_in">addCalculator</span>();</span><br><span class="line"></span><br><span class="line">abc-&gt;a = <span class="number">10</span>;</span><br><span class="line">abc-&gt;b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//释放对应的数据</span></span><br><span class="line"><span class="keyword">delete</span> abc;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Speak函数就是虚函数</span></span><br><span class="line"><span class="comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;动物在叫！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> :<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;喵喵喵！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//早绑定，编译阶段就把函数地址给绑定了</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">(Animal&amp; animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">animal.<span class="built_in">Speak</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们希望传入什么对象，那么就调用什么对象的函数</span></span><br><span class="line"><span class="comment">//如果函数地址在编译阶段就能确定，那么静态联编</span></span><br><span class="line"><span class="comment">//如果函数地址在运行阶段才能确定，就是动态联编</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal am;</span><br><span class="line">Cat cat;</span><br><span class="line"><span class="built_in">speak</span>(am);</span><br><span class="line"><span class="built_in">speak</span>(cat);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多态满足条件： </span></span><br><span class="line"><span class="comment">//1、有继承关系</span></span><br><span class="line"><span class="comment">//2、子类重写父类中的虚函数</span></span><br><span class="line"><span class="comment">//多态使用：</span></span><br><span class="line"><span class="comment">//父类指针或引用指向子类对象</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>没有重写speak函数的时候，通过继承，把父亲的虚函数也也继承下来了，而且在虚基表里是父类的函数</strong></p><p>![image-20230730140026926](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230730140026926.png)</p><p>重写后</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> :<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;喵喵喵！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>![image-20230730140251440](C:\Users\许闰博\Desktop\C++\C-Resource-master\第3阶段-C++核心编程 资料\讲义\C++核心编程.assets\image-20230730140251440.png)</p><p>总结：</p><blockquote><p>C++中的多态是通过<strong>虚函数实现的</strong>。当<strong>基类指针或引用指向派生类对象时</strong>，可以通过<strong>该指针或引用调用虚函数时，会根据对象的实际类型来确定调用哪个类的虚函数。</strong></p><p>在C++中，<strong>每个包含虚函数的类都有一个虚函数表（vtable）</strong>。<strong>虚函数表是一个存储指向虚函数地址的指针数组。****每个对象都有一个指向其类的虚函数表的指针，称为虚函数指针（vptr）。</strong></p><p><strong>当对象被创建时，编译器会在对象的内存布局中添加一个隐藏的虚函数指针。</strong>这个指针指向该类的虚函数表。**&#x3D;&#x3D;如果类没有虚函数，那么它也不会有虚函数表和虚函数指针。&#x3D;&#x3D;**</p><p>当调用一个虚函数时，<strong>编译器会根据对象的虚函数指针找到对应的虚函数表，</strong>然<strong>后根据函数在虚函数表中的索引找到要调用的函数地址。</strong>这个过程是<strong>在运行时动态确定的</strong>，因此可以实现多态。</p><p>继承和重写是多态的基础。<strong>当派生类继承基类时，它会继承基类的虚函数，并可以选择重写这些虚函数。</strong></p><p>.<strong>通过重写，派生类可以为基类的虚函数提供自己的实现</strong>。</p><p>当使用基类指针或引用调用虚函数时，根据对象的实际类型，将调用派生类的虚函数。</p></blockquote><p>多态满足条件</p><ul><li><strong>有继承关系</strong></li><li><strong>子类重写父类中的虚函数</strong></li></ul><p>多态使用条件</p><ul><li><strong>父类指针或引用指向子类对象</strong></li></ul><p>重写：<strong>函数返回值类型  函数名 参数列表 完全一致称为重写</strong></p><h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p><strong>‘’字符,””字符串</strong></p><p><strong>delete会把指针指向的内存权限释放，让这块内存可以被其他进程使用</strong></p><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Caculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getresult</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//+是一个字符串const char*</span></span><br><span class="line"><span class="comment">//或者strcmp(c,&#x27;+&#x27;)==0</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Caculator caculator;</span><br><span class="line">caculator.a = <span class="number">10</span>;</span><br><span class="line">caculator.b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; caculator.<span class="built_in">getresult</span>(<span class="string">&#x27;+&#x27;</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; caculator.<span class="built_in">getresult</span>(<span class="string">&#x27;-&#x27;</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; caculator.<span class="built_in">getresult</span>(<span class="string">&#x27;*&#x27;</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; caculator.<span class="built_in">getresult</span>(<span class="string">&#x27;/&#x27;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//多态实现</span></span><br><span class="line"><span class="comment">//抽象计算器类</span></span><br><span class="line"><span class="comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">addCalculator</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">jianCalculator</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">chengCalculator</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">chuCalculator</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建+法计算器</span></span><br><span class="line">AbstractCalculator* abc = <span class="keyword">new</span> <span class="built_in">addCalculator</span>();</span><br><span class="line"></span><br><span class="line">abc-&gt;a = <span class="number">10</span>;</span><br><span class="line">abc-&gt;b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//释放对应的数据</span></span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建-法计算器</span></span><br><span class="line">abc = <span class="keyword">new</span> <span class="built_in">jianCalculator</span>();</span><br><span class="line">abc-&gt;a = <span class="number">10</span>;</span><br><span class="line">abc-&gt;b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建*法计算器</span></span><br><span class="line">abc = <span class="keyword">new</span> <span class="built_in">chengCalculator</span>();</span><br><span class="line">abc-&gt;a = <span class="number">10</span>;</span><br><span class="line">abc-&gt;b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line"><span class="comment">//创建/法计算器</span></span><br><span class="line">abc = <span class="keyword">new</span> <span class="built_in">chuCalculator</span>();</span><br><span class="line">abc-&gt;a = <span class="number">10</span>;</span><br><span class="line">abc-&gt;b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line"><span class="comment">//销毁一次后仅仅完成了空间的释放,此时还可以使用,即指向关系依然存在,</span></span><br><span class="line"><span class="comment">//但如果释放了两次以上指向关系将不存在,但一般不建议这样使用,</span></span><br><span class="line"><span class="comment">//既然释放了某空间,紧接着给该空间的指针赋值为NULL或者指向一个地方,养成良好的编程风格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p><p><strong><strong>&#x2F;&#x2F;销毁一次后仅仅完成了空间的释放,此时还可以使用,即指向关系依然存在,</strong><br>    <strong>&#x2F;&#x2F;但如果释放了两次以上指向关系将不存在,但一般不建议这样使用,</strong><br>    &#x2F;&#x2F;既然释放了某空间,紧接着给该空间的指针赋值为NULL或者指向一个地方,养成良好的编程风格</strong></p></blockquote><h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="&#x3D;&#x3D;4.7.3 纯虚函数和抽象类&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.7.3 纯虚函数和抽象类&#x3D;&#x3D;</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><blockquote><p><strong>抽象类不能实例化，但是能定义一个指向该类的指针</strong></p></blockquote><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><hr><p><strong>当类中有了纯虚函数，这个类也称为&#x3D;&#x3D;抽象类&#x3D;&#x3D;</strong></p><p><strong>纯虚函数是在<em>基类</em>中声明为纯虚函数的虚函数，它没有实现，只是用来作为接口的占位符，要求派生类必须实现这个函数。</strong></p><hr><p><strong>抽象类特点</strong>：</p><ul><li><strong>无法实例化对象</strong></li><li><strong>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</strong></li></ul><blockquote><p>纯虚函数来自</p><ol><li><strong>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></strong></li><li><strong>继承抽象类但不重写对应的纯虚函数！！！！！！！</strong></li><li>有虚析构函数或者纯虚析构函数</li></ol></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//纯虚函数</span></span><br><span class="line"><span class="comment">//类中只要有一个纯虚函数就称为抽象类</span></span><br><span class="line"><span class="comment">//抽象类无法实例化对象</span></span><br><span class="line"><span class="comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Base * base = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//base = new Base; // 错误，抽象类无法实例化对象</span></span><br><span class="line">base = <span class="keyword">new</span> Son;</span><br><span class="line">base-&gt;<span class="built_in">func</span>();</span><br><span class="line"><span class="keyword">delete</span> base;<span class="comment">//记得销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><p><img src="/assets/1545985945198.png" alt="1545985945198"></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Makedrink</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">zhushui</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">chongru</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">daorubeizhong</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">jiaruzuoliao</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//规定流程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Makeit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">zhushui</span>();</span><br><span class="line"><span class="built_in">chongru</span>();</span><br><span class="line"><span class="built_in">daorubeizhong</span>();</span><br><span class="line"><span class="built_in">jiaruzuoliao</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MakeCha</span> :<span class="keyword">public</span> Makedrink</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zhushui</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;做茶的时候煮水&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chongru</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;冲泡茶叶&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">daorubeizhong</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;倒入杯子&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jiaruzuoliao</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;加柠檬&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Makecoffee</span> :<span class="keyword">public</span> Makedrink</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zhushui</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;做咖啡的时候煮水&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chongru</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;冲泡咖啡&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">daorubeizhong</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;倒入杯子&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jiaruzuoliao</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;加牛奶和冰糖&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dowork</span><span class="params">(Makedrink* abc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">abc-&gt;<span class="built_in">Makeit</span>();</span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Makedrink* mc = <span class="keyword">new</span> <span class="built_in">MakeCha</span>();</span><br><span class="line"><span class="built_in">Dowork</span>(mc);</span><br><span class="line"><span class="built_in">Dowork</span>(<span class="keyword">new</span> MakeCha);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;现在开始制作咖啡&quot;</span> &lt;&lt; endl;</span><br><span class="line">Makedrink* cf = <span class="keyword">new</span> <span class="built_in">Makecoffee</span>();</span><br><span class="line"><span class="built_in">Dowork</span>(cf);</span><br><span class="line"><span class="built_in">Dowork</span>(<span class="keyword">new</span> MakeCha);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p><strong>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</strong></p><p><strong>也就是说不运行子类的析构函数！！！造成内存泄漏</strong></p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><pre><code>                    **如果改成纯虚析构的话需要在函数外部进行 函数实现**                    **或者就是简单的弄一个虚析构函数就ok了**</code></pre><p>虚析构和纯虚析构共性：</p><ul><li><strong>可以解决父类指针释放子类对象</strong></li><li><strong>都需要有具体的函数实现</strong>，纯虚析构函数的实现必须在外部！</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p><strong>虚析构函数通常在希望通过基类指针或引用来删除派生类对象时使用。这样可以确保派生类的析构函数被正确调用，避免内存泄漏。</strong></p><p>虚析构语法：</p><p><code>virtual ~类名()&#123;&#125;</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><strong>必须需要有外部实现！！！</strong></p><p><code>类名::~类名()&#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//纯虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不加virtual的时候不会走子类的 析构函数 造成内存泄露</span></span><br><span class="line"><span class="comment">//析构函数加上virtual关键字，变成虚析构函数  就会走子类的析构函数了</span></span><br><span class="line"><span class="comment">//virtual ~Animal()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者是纯虚析构函数，但要有函数实现！！且在外部</span></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Animal</span>() = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal::~<span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Cat</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_Name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//虚函数的重写</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; *m_Name &lt;&lt; <span class="string">&quot;小猫在说话!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Cat</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> m_Name;</span><br><span class="line">m_Name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string* m_Name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal* animal = <span class="keyword">new</span> <span class="built_in">Cat</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">animal-&gt;<span class="built_in">Speak</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span></span><br><span class="line"><span class="comment">//怎么解决？给基类增加一个虚析构函数 或者纯虚析构函数，但是明显是虚析构函数简单a Aaaaa</span></span><br><span class="line"><span class="comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span></span><br><span class="line"><span class="keyword">delete</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><blockquote><h4 id="1-虚析构或纯虚析构就是用来解决通过父类指针释放子类对象"><a href="#1-虚析构或纯虚析构就是用来解决通过父类指针释放子类对象" class="headerlink" title="1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象"></a>1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</h4><h4 id="2-如果子类中没有堆区数据，可以不写为虚析构或纯虚析构"><a href="#2-如果子类中没有堆区数据，可以不写为虚析构或纯虚析构" class="headerlink" title="2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构"></a>2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</h4><h4 id="3-拥有纯虚析构函数的类也属于抽象类"><a href="#3-拥有纯虚析构函数的类也属于抽象类" class="headerlink" title="3. 拥有纯虚析构函数的类也属于抽象类"></a>3. 拥有纯虚析构函数的类也属于抽象类</h4></blockquote><h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="&#x3D;&#x3D;4.7.6 多态案例三-电脑组装&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.7.6 多态案例三-电脑组装&#x3D;&#x3D;</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象CPU类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的计算函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象显卡类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoCard</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的显示函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象内存条类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的存储函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Computer</span>(CPU* cpu, VideoCard* vc, Memory* mem)</span><br><span class="line">&#123;</span><br><span class="line">m_cpu = cpu;</span><br><span class="line">m_vc = vc;</span><br><span class="line">m_mem = mem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供工作的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//让零件工作起来，调用接口</span></span><br><span class="line">m_cpu-&gt;<span class="built_in">calculate</span>();</span><br><span class="line"></span><br><span class="line">m_vc-&gt;<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">m_mem-&gt;<span class="built_in">storage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供析构函数 释放3个电脑零件</span></span><br><span class="line">~<span class="built_in">Computer</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放CPU零件</span></span><br><span class="line"><span class="keyword">if</span> (m_cpu != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_cpu;</span><br><span class="line">m_cpu = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放显卡零件</span></span><br><span class="line"><span class="keyword">if</span> (m_vc != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_vc;</span><br><span class="line">m_vc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存条零件</span></span><br><span class="line"><span class="keyword">if</span> (m_mem != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_mem;</span><br><span class="line">m_mem = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">CPU* m_cpu; <span class="comment">//CPU的零件指针</span></span><br><span class="line">VideoCard* m_vc; <span class="comment">//显卡零件指针</span></span><br><span class="line">Memory* m_mem; <span class="comment">//内存条零件指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体厂商</span></span><br><span class="line"><span class="comment">//Intel厂商</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntelCPU</span> :<span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Intel的CPU开始计算了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntelVideoCard</span> :<span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Intel的显卡开始显示了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntelMemory</span> :<span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Intel的内存条开始存储了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lenovo厂商</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoCPU</span> :<span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lenovo的CPU开始计算了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoVideoCard</span> :<span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lenovo的显卡开始显示了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoMemory</span> :<span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lenovo的内存条开始存储了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//第一台电脑零件</span></span><br><span class="line">CPU* intelCpu = <span class="keyword">new</span> IntelCPU;</span><br><span class="line">VideoCard* intelCard = <span class="keyword">new</span> IntelVideoCard;</span><br><span class="line">Memory* intelMem = <span class="keyword">new</span> IntelMemory;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//创建第一台电脑</span></span><br><span class="line">Computer* computer1 = <span class="keyword">new</span> <span class="built_in">Computer</span>(intelCpu, intelCard, intelMem);</span><br><span class="line">computer1-&gt;<span class="built_in">work</span>();</span><br><span class="line"><span class="keyword">delete</span> computer1;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第二台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//第二台电脑组装</span></span><br><span class="line">Computer* computer2 = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> LenovoVideoCard, <span class="keyword">new</span> LenovoMemory);</span><br><span class="line">computer2-&gt;<span class="built_in">work</span>();</span><br><span class="line"><span class="keyword">delete</span> computer2;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第三台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//第三台电脑组装</span></span><br><span class="line">Computer* computer3 = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> IntelVideoCard, <span class="keyword">new</span> LenovoMemory);</span><br><span class="line">computer3-&gt;<span class="built_in">work</span>();</span><br><span class="line"><span class="keyword">delete</span> computer3;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 &#x3D;&#x3D;&lt; fstream &gt;&#x3D;&#x3D;</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p><ol><li><p>包含头文件   </p><p>  #include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”,打开方式);</p></li><li><p>写数据</p><p>ofs &lt;&lt; “写入的数据”;</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><blockquote><p>在C++中，<code>|</code> 是位运算符中的按位或运算符。当它用于两个整数时，它将对这两个整数的每个位执行逻辑或操作。</p><p>在文件操作中，<code>|</code> 运算符通常用于将多个标志（flag）组合在一起。在你提供的例子中，<code>ios::binary | ios::out</code> 将 <code>ios::binary</code> 和 <code>ios::out</code> 这两个标志进行按位或运算，以便将它们组合在一起。</p><p><code>ios::binary</code> 是 <code>ios</code> 类中的一个标志，表示以二进制模式打开文件。在二进制模式下，文件将以字节流的形式进行读写，而不会进行任何文本转换。</p><p><code>ios::out</code> 是另一个 <code>ios</code> 类中的标志，表示以写入模式打开文件。在写入模式下，文件将被打开以供写入操作。</p><p>通过将这两个标志使用 <code>|</code> 运算符组合在一起，你可以同时指定二进制模式和写入模式来打开文件。</p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::out);</span><br><span class="line"></span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;姓名：张三&quot;</span> &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream  ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.包含fstream头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.测试写操作ooooo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.1创建对象!</span></span><br><span class="line"><span class="comment">//fstream a;</span></span><br><span class="line"><span class="comment">//也是ok的，为了区分，先引入总的头文件fstream，再用其分类ostream创建具体要写的对象</span></span><br><span class="line">ofstream a;</span><br><span class="line"><span class="comment">//1.2打开文件</span></span><br><span class="line">a.<span class="built_in">open</span>(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/12.txt&quot;</span>, ios::out);</span><br><span class="line"><span class="comment">//1.3写入操作</span></span><br><span class="line">a &lt;&lt; <span class="string">&quot;你好啊&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//1.4关闭文件</span></span><br><span class="line">a.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件   </p><p>  #include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”,打开方式);</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//1.包含fstream头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.测试写操作ooooo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.1创建对象!</span></span><br><span class="line"><span class="comment">//fstream a;</span></span><br><span class="line"><span class="comment">//也是ok的，为了区分，先引入总的头文件fstream，再用其分类ostream创建具体要写的对象</span></span><br><span class="line">ofstream a;</span><br><span class="line"><span class="comment">//1.2打开文件</span></span><br><span class="line">a.<span class="built_in">open</span>(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/11.txt&quot;</span>, ios::out | ios::binary);</span><br><span class="line"><span class="comment">//1.3写入操作</span></span><br><span class="line"><span class="comment">//&quot;你好啊&quot; &lt;&lt; endl;都被写进去了</span></span><br><span class="line">a &lt;&lt; <span class="string">&quot;你好啊dasdad &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//1.4关闭文件</span></span><br><span class="line">a.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.测试读文件</span></span><br><span class="line"><span class="comment">//2.1创建读的对象iiii</span></span><br><span class="line">fstream b;</span><br><span class="line">b.<span class="built_in">open</span>(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/11.txt&quot;</span>, ios::in);</span><br><span class="line"><span class="keyword">if</span> (b.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;打开成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;打开失败！，草！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//读取1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char bufer[1024];</span></span><br><span class="line"><span class="comment">//while (b&gt;&gt;bufer)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; bufer;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//读取2类内的getline</span></span><br><span class="line"><span class="comment">//char bufer[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//while (b.getline(bufer, sizeof(bufer)))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; bufer &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//读取3全局getline</span></span><br><span class="line"><span class="comment">//string str;</span></span><br><span class="line"><span class="comment">//while (getline(b,str))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; str &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">while</span> (c=b.<span class="built_in">get</span>()!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从右到左！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><blockquote><ul><li><strong>读文件可以利用 ifstream  ，或者fstream类</strong></li><li><strong>利用is_open函数可以判断文件是否打开成功</strong></li><li><strong>close 关闭文件</strong></li></ul></blockquote><h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 &#x3D;&#x3D;ios::binary&#x3D;&#x3D;</p><h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyStruct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">1024</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">fstream <span class="title">a</span><span class="params">(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/21.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line"></span><br><span class="line">MyStruct xrb = &#123; <span class="number">18</span>,<span class="string">&quot;李四&quot;</span> &#125;;</span><br><span class="line"><span class="comment">//结构体的实例化</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">a.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span> *)&amp;xrb, <span class="built_in">sizeof</span>(str));</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyStruct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">1024</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">fstream <span class="title">a</span><span class="params">(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/21.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line"></span><br><span class="line">MyStruct xrb = &#123; <span class="number">18</span>,<span class="string">&quot;李四&quot;</span> &#125;;</span><br><span class="line"><span class="comment">//结构体的实例化</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">a.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span> *)&amp;xrb, <span class="built_in">sizeof</span>(xrb));</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">close</span>();</span><br><span class="line">fstream b;</span><br><span class="line">b.<span class="built_in">open</span>(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/21.txt&quot;</span>, ios::in | ios::binary);</span><br><span class="line"><span class="keyword">if</span> (b.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;读取成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">MyStruct l;</span><br><span class="line">b.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;l, <span class="built_in">sizeof</span>(l));</span><br><span class="line">cout &lt;&lt; l.age &lt;&lt; l.name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>new page</title>
      <link href="/post/9b6575e3.html"/>
      <url>/post/9b6575e3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python程序设计"><a href="#Python程序设计" class="headerlink" title="Python程序设计"></a>Python程序设计</h1><h3 id="2-1语法特点"><a href="#2-1语法特点" class="headerlink" title="2.1语法特点"></a>2.1语法特点</h3><h6 id="python没有花括号，需要严格的缩进格式。就是空格数是相同的"><a href="#python没有花括号，需要严格的缩进格式。就是空格数是相同的" class="headerlink" title="python没有花括号，需要严格的缩进格式。就是空格数是相同的"></a>python没有花括号，需要严格的缩进格式。就是空格数是相同的</h6><h6 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释#"></a>单行注释#</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">0</span></span><br><span class="line">b=<span class="number">0</span></span><br><span class="line">c=<span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="comment"># 允许同时为多个变量赋值</span></span><br><span class="line">p=l=k=<span class="number">5</span></span><br><span class="line"><span class="comment"># 可以变量之间相互赋值</span></span><br><span class="line"><span class="comment"># 同一个变量可以反复赋值</span></span><br><span class="line">d=<span class="string">&quot;12.3&quot;</span></span><br><span class="line"><span class="comment"># 弱语言类型，根据赋予的值来决定具体的数据类型</span></span><br><span class="line">a=<span class="built_in">input</span>(<span class="string">&quot;请输入a&quot;</span>)</span><br><span class="line">b=<span class="built_in">input</span>(<span class="string">&quot;请输入b&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> a&gt;b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好吗&quot;</span>)</span><br></pre></td></tr></table></figure><h6 id="多行注释用”””或’’’抱起来"><a href="#多行注释用”””或’’’抱起来" class="headerlink" title="多行注释用”””或’’’抱起来"></a>多行注释用”””或’’’抱起来</h6><h6 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h6><blockquote><p>在代码中固定不变的值</p></blockquote><h6 id="语句换行-书写换行，实际一行"><a href="#语句换行-书写换行，实际一行" class="headerlink" title="语句换行 书写换行，实际一行"></a>语句换行 书写换行，实际一行</h6><p><em><strong>反斜杠后面没有跟任何字符，因此它被视为一个续行符</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">&quot; 窗前明月光\</span></span><br><span class="line"><span class="string">  dsadasdas\</span></span><br><span class="line"><span class="string"> dsadasdas&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment">#结果是</span></span><br><span class="line"><span class="comment">#  窗前明月光  dsadasdas dsadasdas</span></span><br></pre></td></tr></table></figure><h6 id="同一行写多个语句用分号隔开"><a href="#同一行写多个语句用分号隔开" class="headerlink" title="同一行写多个语句用分号隔开"></a>同一行写多个语句用分号隔开</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m=<span class="number">10</span>;n=<span class="number">11</span></span><br><span class="line"><span class="comment"># 但可读性大大降低</span></span><br></pre></td></tr></table></figure><h6 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h6><h6 id="import-模块名"><a href="#import-模块名" class="headerlink" title="import 模块名"></a>import 模块名</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.PI)</span><br></pre></td></tr></table></figure><h3 id="2-2标准输入-输出"><a href="#2-2标准输入-输出" class="headerlink" title="2.2标准输入&#x2F;输出"></a><strong>2.2标准输入&#x2F;输出</strong></h3><h6 id="标准输入函数"><a href="#标准输入函数" class="headerlink" title="标准输入函数"></a>标准输入函数</h6><p>返回的是字符出类型</p><p>注意类型转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span>([prompt])</span><br><span class="line"><span class="comment">#prompt可选参数</span></span><br><span class="line"><span class="comment">#返回一个字符串对象</span></span><br><span class="line">name=<span class="built_in">input</span>(<span class="string">&quot;请输入你的大名&quot;</span>)</span><br><span class="line"><span class="comment">#如果需要其他类型的数据就需要强制转换</span></span><br></pre></td></tr></table></figure><h6 id="标准输出函数"><a href="#标准输出函数" class="headerlink" title="标准输出函数"></a>标准输出函数</h6><p>&#x3D;&#x3D;默认自动换行&#x3D;&#x3D;</p><p>&#x3D;&#x3D;print(“%dx%d&#x3D;%d”%(i,j,sum),end&#x3D;’\t’)&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># print(value,……,sep=;&#x27;&#x27;,end=&#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># value代表输出对象，可以有多个，用逗号隔开</span></span><br><span class="line"><span class="comment"># sep用于设置输出信息的分隔符 默认为一个空格</span></span><br><span class="line"><span class="comment"># end表示print语句的结束负号，默认为换行符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你&quot;</span>,<span class="string">&quot;好&quot;</span>,<span class="string">&quot;啊&quot;</span>,sep=<span class="string">&quot;-&quot;</span>,end=<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment"># 你-好-啊a</span></span><br></pre></td></tr></table></figure><h5 id="如何格式化表达式"><a href="#如何格式化表达式" class="headerlink" title="如何格式化表达式?"></a><em><strong>如何格式化表达式?</strong></em></h5><p><em><strong>●f”{表达式}”</strong></em><br><em><strong>●”%s%d%f” % (表达式、表达式、表达式)</strong></em></p><h3 id="2-3变量和常量"><a href="#2-3变量和常量" class="headerlink" title="2.3变量和常量"></a><strong>2.3变量和常量</strong></h3><h6 id="在python中可以直接声明变量，不必声明变量的类型，也就是弱语言类型"><a href="#在python中可以直接声明变量，不必声明变量的类型，也就是弱语言类型" class="headerlink" title="在python中可以直接声明变量，不必声明变量的类型，也就是弱语言类型."></a>在python中可以直接声明变量，不必声明变量的类型，也就是弱语言类型.</h6><h6 id="虽然不需要声明但是在使用前一定要赋值"><a href="#虽然不需要声明但是在使用前一定要赋值" class="headerlink" title="虽然不需要声明但是在使用前一定要赋值"></a>虽然不需要声明但是在使用前一定要赋值</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">b=<span class="number">0</span></span><br><span class="line">c=<span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="comment"># 允许同时为多个变量赋值</span></span><br><span class="line">p=l=k=<span class="number">5</span></span><br><span class="line"><span class="comment"># 可以变量之间相互赋值</span></span><br><span class="line"><span class="comment"># 同一个变量可以反复赋值</span></span><br><span class="line">d=<span class="string">&quot;12.3&quot;</span></span><br><span class="line"><span class="comment"># 弱语言类型，根据赋予的值来决定具体的数据类型</span></span><br></pre></td></tr></table></figure><h6 id="常量就是值不改变的，通常用全部大写的变量名表示常量"><a href="#常量就是值不改变的，通常用全部大写的变量名表示常量" class="headerlink" title="常量就是值不改变的，通常用全部大写的变量名表示常量"></a>常量就是值不改变的，通常用全部大写的变量名表示常量</h6><p>python<em>没有机制保护产量不会被改变</em></p><h3 id="2-4标识符和关键字"><a href="#2-4标识符和关键字" class="headerlink" title="2.4标识符和关键字"></a><strong>2.4标识符和关键字</strong></h3><ol><li>可以有&#x3D;&#x3D;大小写字母，数字，下划线&#x3D;&#x3D;</li><li>要求第一个字符不能是数字</li><li>区分大小写就是joke和JOKE不一样</li><li>在python3中汉字也可以出现在标识符里</li></ol><h3 id="2-5简单数据类型"><a href="#2-5简单数据类型" class="headerlink" title="2.5简单数据类型"></a><strong>2.5简单数据类型</strong></h3><h4 id="type-查数据类型"><a href="#type-查数据类型" class="headerlink" title="&#x3D;&#x3D;type()查数据类型&#x3D;&#x3D;"></a>&#x3D;&#x3D;type()查数据类型&#x3D;&#x3D;</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line">b=<span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><p>整形int特点</p><ol><li><p>不带小数点，分正负</p></li><li><p>在python中没有大小限制，只要内存许可就可以无限大</p></li><li><p>二进制0B开头，八进制0O开头，十六进制0X开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0b1010</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">0x81</span>)</span><br><span class="line"><span class="comment"># 结果是10</span></span><br><span class="line"><span class="comment"># 结果是129</span></span><br></pre></td></tr></table></figure></li><li><p>进制之间的转十进制转为二进制bin(十进制数)</p></li><li><p>十进制转为八进制oct(十进制数)</p></li><li><p>十进制转为十六进制hex(十进制数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">21</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">21</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">21</span>))</span><br><span class="line"><span class="comment"># 0b10101</span></span><br><span class="line"><span class="comment"># 0o25</span></span><br><span class="line"><span class="comment"># 0x15</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="浮点类型特点"><a href="#浮点类型特点" class="headerlink" title="浮点类型特点"></a>浮点类型特点</h4><ol><li>整形转为float用float（整数150）&#x3D;&gt;150.0</li><li>1.2e2&#x3D;&gt;1.2*10^2^</li></ol><h4 id="布尔类型特点"><a href="#布尔类型特点" class="headerlink" title="布尔类型特点"></a>布尔类型特点</h4><ol><li>True和False</li><li>为0的数字0 0.0</li><li>空字符串’’ “”</li><li>空集合(){}[]</li><li>false</li><li>None</li><li>以上全为false</li></ol><h4 id="复数类型特点"><a href="#复数类型特点" class="headerlink" title="复数类型特点"></a>复数类型特点</h4><ol><li>数学上是a+bi</li><li>这里是real+imag</li><li>对应a&#x3D;1.5+2j&#x2F;J</li><li>获取实部和虚部，a.real，a.imag</li><li>把两个数转换为一个复数complex(a,b)&#x3D;&gt;a+bj</li></ol><h4 id="字符串类型特点"><a href="#字符串类型特点" class="headerlink" title="字符串类型特点"></a>字符串类型特点</h4><h6 id="标识字符串"><a href="#标识字符串" class="headerlink" title="标识字符串"></a>标识字符串</h6><ol><li>标识字符串用 单引号’’ 双引号”” 三单引号’’’ ‘’’三双””” “””</li><li>‘你好啊’ , ”你好啊“,     “””你好啊””” ,   ‘’’你好啊’’’</li><li>&#x3D;&#x3D;特殊的三引号抱起来，能原封不动的表示字符串，保留换行和缩进。。&#x3D;&#x3D;</li></ol><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><ol><li><p>用\开头</p></li><li><p>‘let’s go’&#x3D;&gt;’let\‘s go’</p></li><li><p>\n换行</p></li><li><p>\t横向制表符</p></li><li><p>\r是回车符，&#x3D;&#x3D;它的作用是将光标移到当前行的开头&#x3D;&#x3D;，覆盖之前的内容。</p></li><li><p>\b是退格符，&#x3D;&#x3D;它的作用是将光标向左移动一格&#x3D;&#x3D;，可以用来删除之前输入的字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dsadasdadsadasd\r我在这&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dasdasdsav\b我&quot;</span>)</span><br><span class="line"><span class="comment"># 我在这</span></span><br><span class="line"><span class="comment"># dasdasdsa我</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="字符串基本操作"><a href="#字符串基本操作" class="headerlink" title="&#x3D;&#x3D;字符串基本操作&#x3D;&#x3D;"></a>&#x3D;&#x3D;字符串基本操作&#x3D;&#x3D;</h4><ol><li><h5 id="正索引-负索引-但不可修改"><a href="#正索引-负索引-但不可修改" class="headerlink" title="正索引&#x2F;负索引(但不可修改)"></a>正索引&#x2F;负索引(但不可修改)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="comment"># a[1]=9???不可以</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)!</span><br><span class="line"><span class="comment"># p 0 -6</span></span><br><span class="line"><span class="comment"># y 1 -5</span></span><br><span class="line"><span class="comment"># t 2 -4</span></span><br><span class="line"><span class="comment"># h 3 -3</span></span><br><span class="line"><span class="comment"># o 4 -2</span></span><br><span class="line"><span class="comment"># n 5 -1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>&#x3D;&#x3D;python不允许以任何方式改变字符串对象的值，否则会出错&#x3D;&#x3D;</strong></p></li><li><p>&#x3D;&#x3D;可以用+号连接两个字符串，可以用*生成重复的字符串&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;比你好&quot;</span></span><br><span class="line">b=<span class="string">&quot;比是的&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a*<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="comment"># 比你好比你好比你好比你好比你好比你好</span></span><br><span class="line"><span class="comment"># 比你好比是的</span></span><br></pre></td></tr></table></figure></li><li><h5 id="字符串切片操作"><a href="#字符串切片操作" class="headerlink" title="字符串切片操作"></a>字符串切片操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="comment"># [b,c]</span></span><br><span class="line"><span class="comment"># b代表起点，c代表下标加1，左闭右开 [start，end)</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># py</span></span><br><span class="line"><span class="comment"># 左边不写的话默认为0</span></span><br><span class="line"><span class="comment"># 右边不写的话默认为字符串长度</span></span><br></pre></td></tr></table></figure></li><li><p>字符串逆转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;你好啊&quot;</span></span><br><span class="line">a=a[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ol><h5 id="字符串的常用方法："><a href="#字符串的常用方法：" class="headerlink" title="字符串的常用方法："></a>字符串的常用方法：</h5><p>&#x3D;&#x3D;这些操作都没有真正改变原来的字符串，而是返回了一个新的字符串。原来的字符串仍然保持不变。如果要改变原来的字符串，可以将新的字符串赋值给原来的变量。例如：&#x3D;&#x3D;</p><blockquote><ol><li><p>str.capitalize()  把字符串的首字母变成大写</p></li><li><p>str.find(x)   找到字符串中x的下标</p></li><li><p>str.index(x)   找到字符串中x的下标</p></li><li><p>str.lower()   把字符串中的大写变成小写</p></li><li><p>str.upper()  把字符串中的小写变成大写</p></li><li><p>str.split(x),用x把字符串给分割开，&#x3D;&#x3D;得到一个list 列表&#x3D;&#x3D;，<strong>默认是以空格分开。</strong></p></li><li><h5 id="在Python中，字符串对象有一个-strip-方法，用于去除字符串两端的空白字符（包括空格、制表符和换行符）。"><a href="#在Python中，字符串对象有一个-strip-方法，用于去除字符串两端的空白字符（包括空格、制表符和换行符）。" class="headerlink" title="在Python中，字符串对象有一个 strip() 方法，用于去除字符串两端的空白字符（包括空格、制表符和换行符）。"></a>在Python中，字符串对象有一个 <code>strip()</code> 方法，用于去除字符串两端的空白字符（包括空格、制表符和换行符）。</h5><h5 id="strip-方法不会修改原始字符串，而是返回一个新的字符串。如果指定参数-就清除字符串两端的指定字符"><a href="#strip-方法不会修改原始字符串，而是返回一个新的字符串。如果指定参数-就清除字符串两端的指定字符" class="headerlink" title="strip() 方法不会修改原始字符串，而是返回一个新的字符串。如果指定参数,就清除字符串两端的指定字符"></a><code>strip()</code> 方法不会修改原始字符串，而是返回一个新的字符串。如果指定参数,就清除字符串两端的指定字符</h5></li></ol></blockquote><p>a &#x3D; a.replace(“python”,”蟒蛇”)&#x3D;&#x3D;</p><ol><li><pre><code class="python">a=&quot;python&quot;# capitalize(a)print(a.capitalize())print(a.find(&#39;o&#39;))print(a.lower())print(a.upper())print(a.count(&#39;p&#39;))print(a.split(&#39;p&#39;))#得到一个列表对象# 默认是[&#39;python&#39;]# [&#39;&#39;, &#39;ython&#39;]print(a)print(a.replace(&quot;python&quot;,&quot;蟒蛇&quot;))print(a)# Python# 4# python# PYTHON# 1# [&#39;&#39;, &#39;ython&#39;]# python# 蟒蛇# python<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 字符串拼接</span><br><span class="line"></span><br><span class="line">&gt; 1==printf(&quot;%d+%d=%d&quot;%(a,b,c))==</span><br><span class="line">&gt;</span><br><span class="line">&gt; ----------------------------------------------------------------</span><br><span class="line">&gt;</span><br><span class="line">&gt; 2 ***==f&quot;内容&#123;变量&#125;&quot;==***</span><br><span class="line">&gt;</span><br><span class="line">&gt; 注意里面只能是变量，表达式不可以sum-=1000</span><br><span class="line">&gt;</span><br><span class="line">&gt; ---</span><br><span class="line">&gt;</span><br><span class="line">&gt; Traceback (most recent call last):</span><br><span class="line">&gt; File &quot;e:\Bluecode\python\learn\learn\review.py&quot;, line 7, in &lt;module&gt;</span><br><span class="line">&gt;  print(f&quot;&#123;aa1&#125;+&#123;bb1+1&#125;=&#123;aa1+bb1&#125;&quot;)</span><br><span class="line">&gt;                 ~~~^~</span><br><span class="line">&gt; TypeError: can only concatenate str (not &quot;int&quot;) to str</span><br><span class="line">&gt;                 ~~~</span><br><span class="line">&gt;</span><br><span class="line">&gt; ```python</span><br><span class="line">&gt; aa=int(input(&quot;请输入aa&quot;))</span><br><span class="line">&gt; bb=int(input(&quot;请输入bb&quot;))</span><br><span class="line">&gt; print(f&quot;&#123;aa&#125;+&#123;bb&#125;=&#123;aa+bb&#125;&quot;)</span><br><span class="line">&gt; aa1=(input(&quot;请输入aa1&quot;))</span><br><span class="line">&gt; bb1=(input(&quot;请输入bb1&quot;))</span><br><span class="line">&gt; print(f&quot;&#123;aa1&#125;+&#123;bb1&#125;=&#123;aa1+bb1&#125;&quot;)</span><br><span class="line">&gt; # 请输入aa7</span><br><span class="line">&gt; # 请输入bb8</span><br><span class="line">&gt; # 7+8=15</span><br><span class="line">&gt; # 请输入aa17</span><br><span class="line">&gt; # 请输入bb18</span><br><span class="line">&gt; # 7+8=78</span><br></pre></td></tr></table></figure>&gt;&gt; `input默认得到的是字符串对象`</code></pre></li></ol><h5 id="格式化的精度控制"><a href="#格式化的精度控制" class="headerlink" title="格式化的精度控制"></a><strong>格式化的精度控制</strong></h5><p>特殊在设置宽度后&#x3D;&#x3D;，是补空格&#x3D;&#x3D;，&#x3D;&#x3D;而且还是四舍五入&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="number">11.39</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span>%c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span>%c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%5.1f&quot;</span>%c)</span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"><span class="comment"># 11.39</span></span><br><span class="line"><span class="comment">#  11.4</span></span><br></pre></td></tr></table></figure><h6 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;it it dsasdasd it&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.count(<span class="string">&#x27;it&#x27;</span>))</span><br><span class="line">a=a.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a=a.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># it|it|dsasdasd|it</span></span><br><span class="line"><span class="comment"># [&#x27;it&#x27;, &#x27;it&#x27;, &#x27;dsasdasd&#x27;, &#x27;it&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="2-6-类型转换"><a href="#2-6-类型转换" class="headerlink" title="2.6&#x3D;&#x3D;类型转换&#x3D;&#x3D;"></a>2.6&#x3D;&#x3D;类型转换&#x3D;&#x3D;</h3><h5 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h5><ol><li><h5 id="int-x-得到整肃"><a href="#int-x-得到整肃" class="headerlink" title="int(x) 得到整肃"></a>int(x) 得到整肃</h5></li><li><h5 id="float-x-得到浮点数"><a href="#float-x-得到浮点数" class="headerlink" title="float(x) 得到浮点数"></a>float(x) 得到浮点数</h5></li><li><h5 id="complex-a-b-得到对应的复数"><a href="#complex-a-b-得到对应的复数" class="headerlink" title="complex(a,b) 得到对应的复数"></a>complex(a,b) 得到对应的复数</h5></li><li><h5 id="str-x-将对象转化为人容读取的字符串"><a href="#str-x-将对象转化为人容读取的字符串" class="headerlink" title="&#x3D;&#x3D;str(x) 将对象转化为人容读取的字符串&#x3D;&#x3D;"></a>&#x3D;&#x3D;str(x) 将对象转化为人容读取的字符串&#x3D;&#x3D;</h5></li><li><h5 id="repr-x-将对象转化为编辑器容读取的字符串"><a href="#repr-x-将对象转化为编辑器容读取的字符串" class="headerlink" title="repr(x) 将对象转化为编辑器容读取的字符串"></a>repr(x) 将对象转化为编辑器容读取的字符串</h5></li><li><h5 id="eval-str"><a href="#eval-str" class="headerlink" title="eval(str)"></a>eval(str)</h5></li><li><h5 id="chr-x-得到ancil对应的字符"><a href="#chr-x-得到ancil对应的字符" class="headerlink" title="chr(x) 得到ancil对应的字符"></a>chr(x) 得到ancil对应的字符</h5></li><li><h5 id="ord-x-得到l对应的ancil马"><a href="#ord-x-得到l对应的ancil马" class="headerlink" title="ord(x) 得到l对应的ancil马"></a>ord(x) 得到l对应的ancil马</h5></li><li><h5 id="bin-oct-hex"><a href="#bin-oct-hex" class="headerlink" title="bin(),oct(),hex()"></a>bin(),oct(),hex()</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">1.2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">complex</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># str,repr</span></span><br><span class="line"><span class="comment"># print(eval(&quot;sdasd&quot;+&quot;xrb&quot;))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">77</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">18</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">18</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">18</span>))</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 1.0</span></span><br><span class="line"><span class="comment"># (1+2j)</span></span><br><span class="line"><span class="comment"># M</span></span><br><span class="line"><span class="comment"># 0b10010</span></span><br><span class="line"><span class="comment"># 0o22</span></span><br><span class="line"><span class="comment"># 0x12</span></span><br></pre></td></tr></table></figure></li><li><p>各种进制转换为10进制</p></li></ol><p>   使用int的强制转换的第二个参数</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num_two=<span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">16</span>),<span class="number">2</span>)</span><br><span class="line">num_eight=<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="number">16</span>),<span class="number">8</span>)</span><br><span class="line">num_16=<span class="built_in">int</span>(<span class="string">&quot;aB234&quot;</span>,<span class="number">16</span>);</span><br><span class="line"><span class="comment">#int 的第二个参数代表前面字符串的进制数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num_two&#125;</span>+++++++<span class="subst">&#123;num_eight&#125;</span>++++<span class="subst">&#123;num_16&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#16+++++++16++++700980</span></span><br></pre></td></tr></table></figure><h5 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="&#x3D;&#x3D;运算符和表达式&#x3D;&#x3D;"></a>&#x3D;&#x3D;运算符和表达式&#x3D;&#x3D;</h5><p>对数据进行加工处理的过程叫运算</p><p>表示运算的符号成为运算符</p><p>参加运算的数据叫做操作数</p><h6 id="2-71算数运算符"><a href="#2-71算数运算符" class="headerlink" title="2.71算数运算符"></a>2.71算数运算符</h6><ol><li><ul><li></li></ul></li><li><ul><li></li></ul></li><li><ul><li></li></ul></li><li>&#x2F;</li><li>%</li><li>**</li><li>&#x2F;&#x2F;</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">5</span>;b=<span class="number">2</span>;c=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="built_in">print</span>(a**b)</span><br><span class="line"><span class="comment">#a的b次方</span></span><br><span class="line"><span class="built_in">print</span>(c//b)</span><br><span class="line"><span class="comment">#c整除b，商的整数部分</span></span><br></pre></td></tr></table></figure><h6 id="2-72比较运算符"><a href="#2-72比较运算符" class="headerlink" title="2.72比较运算符"></a>2.72比较运算符</h6><ol><li>&#x3D;&#x3D;</li><li>!&#x3D;</li><li>&lt;&gt;类似!&#x3D; &#x3D;&#x3D;在Python中，<code>&lt;&gt;</code> 运算符已经被弃用，因此不再被支持。&#x3D;&#x3D;</li><li>&gt;</li><li>&lt;</li><li>&gt;&#x3D;</li><li>&lt;&#x3D;</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">2</span>;b=<span class="number">2</span>;c=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a&gt;b)</span><br><span class="line"><span class="built_in">print</span>(a==b)</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><h6 id="2-73逻辑运算符-与或非"><a href="#2-73逻辑运算符-与或非" class="headerlink" title="2.73逻辑运算符-与或非-"></a>2.73逻辑运算符-与或非-</h6><p>&#x3D;&#x3D;默认从左到右&#x3D;&#x3D;</p><ol><li><p>与and   <strong>&#x3D;&#x3D;第一个为0就返回0，第一个为1就返回第二个操作数&#x3D;&#x3D;</strong></p></li><li><h6 id="或or-第一个为1就返回1，第一个为0就返回第二个操作数"><a href="#或or-第一个为1就返回1，第一个为0就返回第二个操作数" class="headerlink" title="或or   &#x3D;&#x3D;第一个为1就返回1，第一个为0就返回第二个操作数&#x3D;&#x3D;"></a>或or   &#x3D;&#x3D;第一个为1就返回1，第一个为0就返回第二个操作数&#x3D;&#x3D;</h6></li><li><p>根据第一个操作数的真假来确定是否返回第二个操作数</p></li><li><p>非not</p></li><li><p>&#x3D;&#x3D;注意逻辑运算符左右不能直接与操作数直接接触&#x3D;&#x3D;</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">1</span></span><br><span class="line">c=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> a==b <span class="keyword">and</span> b==c:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;asddassd&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2-74赋值运算符"><a href="#2-74赋值运算符" class="headerlink" title="2.74赋值运算符"></a>2.74赋值运算符</h6><p>&#x3D;</p><p>x&#x3D;x+1</p><blockquote><ol><li>+&#x3D;</li><li>-&#x3D;</li><li>&#x2F;&#x3D;</li><li>*&#x3D;</li><li>%&#x3D;</li><li>**&#x3D;</li><li>&#x2F;&#x2F;&#x3D;</li></ol></blockquote><p>&#x3D;&#x3D;计算后并且赋值&#x3D;&#x3D;</p><h6 id="2-75位运算符（5）"><a href="#2-75位运算符（5）" class="headerlink" title="2.75位运算符（5）"></a>2.75位运算符（5）</h6><p>Python里面没有&amp;&amp;&#x2F;&#x2F;||</p><p>对八位二进制数进行运算，&amp;有假就0，|有真就1,异或&#x3D;&#x3D;同1异0&#x3D;&#x3D;</p><p>~1变-，0变1</p><p>左移整体左移，超出去的保留符号（1代表负，0代表正）右边补0</p><p>​</p><blockquote><ol><li>按位与&amp;</li><li>按位或|</li><li>按位异位~</li><li>左移&lt;&lt;</li><li>右移&gt;&gt;</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># a=3</span></span><br><span class="line"><span class="comment"># 0 0 0 0 0 0 1 1</span></span><br><span class="line"><span class="comment"># a&lt;&lt;2</span></span><br><span class="line"><span class="comment"># 0 0 0 0 1 1 0 0</span></span><br><span class="line"><span class="comment"># 12=3*2的2次方</span></span><br></pre></td></tr></table></figure><h6 id="2-76成员运算符"><a href="#2-76成员运算符" class="headerlink" title="2.76成员运算符"></a>2.76成员运算符</h6><p>&#x3D;&#x3D;用来判断序列中是否存在某个成员&#x3D;&#x3D;</p><blockquote><ol><li>in</li><li>not in</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arry=[<span class="string">&quot;电视&quot;</span>,<span class="string">&quot;冰箱&quot;</span>,<span class="string">&quot;电脑&quot;</span>,<span class="string">&quot;女盆友&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;电视&quot;</span><span class="keyword">in</span> arry)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;电视&#x27;</span><span class="keyword">in</span> arry)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;男朋友&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> arry)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h6 id="2-77标识运算符"><a href="#2-77标识运算符" class="headerlink" title="2.77标识运算符"></a>2.77标识运算符</h6><p>&#x3D;&#x3D;判断两个变量是否引用同一个对象&#x3D;&#x3D;</p><blockquote><ol><li>is</li><li>is not</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;电视&quot;</span></span><br><span class="line">b=<span class="string">&quot;冰箱&quot;</span></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a和b引用同一个对象&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a和b引用不同的对象&quot;</span>)</span><br><span class="line">    a=b</span><br><span class="line">    <span class="keyword">if</span> a <span class="keyword">is</span> b:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a和b引用同一个对象&quot;</span>)</span><br><span class="line"><span class="comment"># a和b引用不同的对象</span></span><br><span class="line"><span class="comment"># a和b引用同一个对象</span></span><br></pre></td></tr></table></figure><h5 id="2-8运算符优先级"><a href="#2-8运算符优先级" class="headerlink" title="2.8运算符优先级"></a>2.8运算符优先级</h5><blockquote><ol><li>括号：()</li><li>幂运算：**</li><li>正负号：+x, -x</li><li>乘除取模运算：*, &#x2F;, %</li><li>加减运算：+, -</li><li>比较运算：&lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;, &#x3D;&#x3D;, !&#x3D;</li><li>逻辑运算：not, and, or</li><li>赋值运算：&#x3D;, +&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D;, **&#x3D;, &#x2F;&#x2F;&#x3D;</li></ol></blockquote><p>&#x3D;&#x3D;使用括号：如果有任何疑问，可以使用括号明确指定运算的顺序。&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">3</span></span><br><span class="line">b=<span class="number">0</span></span><br><span class="line">d=a <span class="keyword">and</span> b</span><br><span class="line">e=a <span class="keyword">or</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment">#0</span></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="comment">#0</span></span><br><span class="line"><span class="comment">#3</span></span><br></pre></td></tr></table></figure><h3 id="3-1python控制语句"><a href="#3-1python控制语句" class="headerlink" title="3.1python控制语句"></a>3.1python控制语句</h3><p>&#x3D;&#x3D;不成文结论 ：相当于()&#x3D;&#x3D;</p><h5 id="3-123选择语句"><a href="#3-123选择语句" class="headerlink" title="3.123选择语句"></a>3.123选择语句</h5><ol><li>简单if语句</li><li>if-else语句</li><li>if-elif-else语句</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">aa=<span class="number">10</span>;bb=<span class="number">7</span></span><br><span class="line"><span class="keyword">if</span> aa&lt;bb:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我好啊&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>&lt;=aa&lt;=<span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">5</span>&lt;=aa&lt;=<span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello3&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意形式</strong></p><p>python中是这样写的不同于C&#x2F;C++</p><p>&#x3D;&#x3D;5&lt;&#x3D;aa&lt;&#x3D;7:&#x3D;&#x3D;</p><h5 id="3-14if嵌套语句"><a href="#3-14if嵌套语句" class="headerlink" title="3.14if嵌套语句"></a>3.14if嵌套语句</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> aa&gt;bb:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;helo&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> aa&gt;<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;heloowos&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;阿三大苏打&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;十大大苏打实打实&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-2循环语句"><a href="#3-2循环语句" class="headerlink" title="3.2循环语句"></a>3.2循环语句</h3><h5 id="For循环语句"><a href="#For循环语句" class="headerlink" title="For循环语句"></a>For循环语句</h5><blockquote><p>for 循环变量 in 循环对象（可迭代对象）</p><p>循环体</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># b</span></span><br><span class="line"><span class="comment"># c</span></span><br></pre></td></tr></table></figure><h6 id="整数序列range"><a href="#整数序列range" class="headerlink" title="&#x3D;&#x3D;整数序列range&#x3D;&#x3D;"></a>&#x3D;&#x3D;整数序列range&#x3D;&#x3D;</h6><p>range（start，end）</p><p>[start,end-1]</p><h6 id="for循环嵌套"><a href="#for循环嵌套" class="headerlink" title="for循环嵌套"></a>for循环嵌套</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">a1=<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">b1=<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> b1:</span><br><span class="line">        <span class="keyword">if</span> i&gt;=j:</span><br><span class="line">            <span class="built_in">sum</span>=i*j</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%dx%d=%d&quot;</span>%(i,j,<span class="built_in">sum</span>),end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>1x1&#x3D;1</p><p>2x1&#x3D;22x2&#x3D;4</p><p>3x1&#x3D;33x2&#x3D;63x3&#x3D;9</p><p>4x1&#x3D;44x2&#x3D;84x3&#x3D;124x4&#x3D;16</p><p>5x1&#x3D;55x2&#x3D;105x3&#x3D;155x4&#x3D;205x5&#x3D;25</p><p>6x1&#x3D;66x2&#x3D;126x3&#x3D;186x4&#x3D;246x5&#x3D;306x6&#x3D;36</p><p>7x1&#x3D;77x2&#x3D;147x3&#x3D;217x4&#x3D;287x5&#x3D;357x6&#x3D;427x7&#x3D;49</p><p>8x1&#x3D;88x2&#x3D;168x3&#x3D;248x4&#x3D;328x5&#x3D;408x6&#x3D;488x7&#x3D;568x8&#x3D;64</p><p>9x1&#x3D;99x2&#x3D;189x3&#x3D;279x4&#x3D;369x5&#x3D;459x6&#x3D;549x7&#x3D;639x8&#x3D;729x9&#x3D;81</p></blockquote><p>&#x3D;&#x3D;print(“%dx%d&#x3D;%d”%(i,j,sum),end&#x3D;’\t’)&#x3D;&#x3D;</p><h5 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h5><blockquote><h6 id="while-条件表达式："><a href="#while-条件表达式：" class="headerlink" title="while 条件表达式："></a>while 条件表达式：</h6><p>循环体</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> k&lt;=<span class="number">10</span>:</span><br><span class="line">    sum1+=k</span><br><span class="line">    k+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(sum1)</span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 15</span></span><br><span class="line"><span class="comment"># 21</span></span><br><span class="line"><span class="comment"># 28</span></span><br><span class="line"><span class="comment"># 36</span></span><br><span class="line"><span class="comment"># 45</span></span><br><span class="line"><span class="comment"># 55</span></span><br></pre></td></tr></table></figure><h6 id="while-for混合嵌套-while-while-互相嵌套"><a href="#while-for混合嵌套-while-while-互相嵌套" class="headerlink" title="while for混合嵌套 while while 互相嵌套"></a>while for混合嵌套 while while 互相嵌套</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pp=<span class="number">0</span></span><br><span class="line">sum2=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> pp&lt;=<span class="number">10</span>:</span><br><span class="line">    pp+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(pp)</span><br><span class="line">    <span class="keyword">for</span> o <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        sum2=pp+o</span><br><span class="line">        <span class="comment"># print(o)</span></span><br><span class="line">        <span class="keyword">if</span> pp&gt;=o:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%d+%d=%d&quot;</span>%(pp,o,sum2),end=<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果:</p><p>1<br>1+1&#x3D;2\2<br>2+1&#x3D;3\2+2&#x3D;4\3<br>3+1&#x3D;4\3+2&#x3D;5\3+3&#x3D;6\4<br>4+1&#x3D;5\4+2&#x3D;6\4+3&#x3D;7\4+4&#x3D;8\5<br>5+1&#x3D;6\5+2&#x3D;7\5+3&#x3D;8\5+4&#x3D;9\5+5&#x3D;10\6<br>6+1&#x3D;7\6+2&#x3D;8\6+3&#x3D;9\6+4&#x3D;10\6+5&#x3D;11\6+6&#x3D;12\7<br>7+1&#x3D;8\7+2&#x3D;9\7+3&#x3D;10\7+4&#x3D;11\7+5&#x3D;12\7+6&#x3D;13\7+7&#x3D;14\8<br>8+1&#x3D;9\8+2&#x3D;10\8+3&#x3D;11\8+4&#x3D;12\8+5&#x3D;13\8+6&#x3D;14\8+7&#x3D;15\8+8&#x3D;16\9<br>9+1&#x3D;10\9+2&#x3D;11\9+3&#x3D;12\9+4&#x3D;13\9+5&#x3D;14\9+6&#x3D;15\9+7&#x3D;16\9+8&#x3D;17\9+9&#x3D;18\10<br>10+1&#x3D;11\10+2&#x3D;12\10+3&#x3D;13\10+4&#x3D;14\10+5&#x3D;15\10+6&#x3D;16\10+7&#x3D;17\10+8&#x3D;18\10+9&#x3D;19\10+10&#x3D;20\11<br>11+1&#x3D;12\11+2&#x3D;13\11+3&#x3D;14\11+4&#x3D;15\11+5&#x3D;16\11+6&#x3D;17\11+7&#x3D;18\11+8&#x3D;19\11+9&#x3D;20\11+10&#x3D;21\</p></blockquote><h5 id="while循环和for循环的对比"><a href="#while循环和for循环的对比" class="headerlink" title="while循环和for循环的对比"></a>while循环和for循环的对比</h5><p>while循环和for循环，都是循环语句，但细节不同:<br>在循环控制上:<br>while循环可以<strong>自定循环条件，并自行控制</strong><br>for循环不可以自定循环条件,只可以一个个从容器内取出数据<br>●<br>在无限循环上:<br>while循环可以通过条件控制做到无限循环<br>●<br>for循环理论上不可以,因为被遍历的容器容量不是无限的<br>在使用场景上:<br>while循环适用于任何想要循环的场景<br>for循环适用于，遍历数据容器的场景或简单的固定次数循环场景</p><h3 id="3-3跳转语句"><a href="#3-3跳转语句" class="headerlink" title="3.3跳转语句"></a>3.3跳转语句</h3><h5 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h5><blockquote><p>跳出当前层的循环。****</p></blockquote><h5 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h5><blockquote><p>这次循环到这里结束下面的不要执行了，然后进入下一次循环</p></blockquote><h5 id="pass语句"><a href="#pass语句" class="headerlink" title="&#x3D;&#x3D;pass语句&#x3D;&#x3D;"></a>&#x3D;&#x3D;pass语句&#x3D;&#x3D;</h5><blockquote><p>空代码块，占位符作用。</p></blockquote><h5 id="else但配合循环使用"><a href="#else但配合循环使用" class="headerlink" title="&#x3D;&#x3D;else但配合循环使用&#x3D;&#x3D;"></a>&#x3D;&#x3D;else但配合循环使用&#x3D;&#x3D;</h5><blockquote><p>&#x3D;&#x3D;循环正常结束或者while条件判断为False执行else后面的语句&#x3D;&#x3D;</p><p>如果循环break提前结束了，那么不执行else后面的语句</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环正常结束捏&quot;</span>)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 循环正常结束捏</span></span><br></pre></td></tr></table></figure><h4 id="循环综合案例"><a href="#循环综合案例" class="headerlink" title="循环综合案例"></a>循环综合案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span>=<span class="number">10000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>!=<span class="number">0</span>:</span><br><span class="line">        num = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;员工<span class="subst">&#123;i&#125;</span>,绩效分<span class="subst">&#123;num&#125;</span>,不发工资，下一位&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">sum</span>=<span class="built_in">sum</span>-<span class="number">1000</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;向员工<span class="subst">&#123;i&#125;</span>发放工资1000元，账户余额还剩<span class="subst">&#123;<span class="built_in">sum</span>&#125;</span>元&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;工资发完了醉了&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 向员工1发放工资1000元，账户余额还剩9000元</span></span><br><span class="line"><span class="comment"># 向员工2发放工资1000元，账户余额还剩8000元</span></span><br><span class="line"><span class="comment"># 员工3,绩效分4,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 向员工4发放工资1000元，账户余额还剩7000元</span></span><br><span class="line"><span class="comment"># 向员工5发放工资1000元，账户余额还剩6000元</span></span><br><span class="line"><span class="comment"># 员工6,绩效分2,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 员工7,绩效分4,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 员工8,绩效分1,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 向员工9发放工资1000元，账户余额还剩5000元</span></span><br><span class="line"><span class="comment"># 向员工10发放工资1000元，账户余额还剩4000元</span></span><br><span class="line"><span class="comment"># 向员工11发放工资1000元，账户余额还剩3000元</span></span><br><span class="line"><span class="comment"># 向员工12发放工资1000元，账户余额还剩2000元</span></span><br><span class="line"><span class="comment"># 向员工13发放工资1000元，账户余额还剩1000元</span></span><br><span class="line"><span class="comment"># 员工14,绩效分3,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 员工15,绩效分4,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 向员工16发放工资1000元，账户余额还剩0元</span></span><br><span class="line"><span class="comment"># 工资发完了醉了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="4-0数据结构"><a href="#4-0数据结构" class="headerlink" title="4.0数据结构"></a>4.0数据结构</h3><h4 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h4><table><thead><tr><th align="center">类型</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td align="center">整数</td><td>整数(int)，如: 10、-10</td><td>整数(int)，如: 10、-10</td></tr><tr><td align="center">浮点数(float)</td><td>浮点数(float)</td><td>,如: 13.14、 -13.14</td></tr><tr><td align="center">复数(complex)</td><td>复数(complex)，</td><td>如: 4+3j,以j结尾表示复数</td></tr><tr><td align="center">布尔(bool)</td><td>布尔(bool) 表达现实生活中的逻辑，即真和假，True表示真,False表示假</td><td>True本质上是一个数字记作1,  False记作0</td></tr><tr><td align="center">字符串(String)</td><td>描述文本的一种数据类型</td><td>字符串(string) 由任意数量的字符组成</td></tr><tr><td align="center">列表(List)</td><td><strong>有序的可变序列</strong></td><td>Python中使用最频繁的数据类型，可有序记录一堆数据</td></tr><tr><td align="center">元组(Tuple)</td><td><strong>有序的不可变序列.</strong></td><td>可有序记录一堆不可变的Python数据集合</td></tr><tr><td align="center">集合(Set)</td><td><strong>无序不重复集合</strong></td><td>可无序记录一堆不重复的Python数据集合</td></tr><tr><td align="center">字典(Dictionary)</td><td>无序Key-Value集合</td><td>可无序记录-堆Key-Value型的Python数据集合</td></tr></tbody></table><h4 id="4-1列表-有序可变序列"><a href="#4-1列表-有序可变序列" class="headerlink" title="4.1列表(有序可变序列)"></a>4.1列表(有序可变序列)</h4><h5 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h5><blockquote><p>列表用来存储任意大小的数据集合，可以有任意个数据，可以是不同的数据类型，也可以是列表（嵌套）</p></blockquote><ol><li><p>使用方括号创建列表</p></li><li><p>使用构造函数创建列表</p></li><li><p>使用列表推导式创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>=<span class="built_in">list</span>(<span class="string">&quot;我喜欢你&quot;</span>)</span><br><span class="line">list1=[<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="string">&quot;我&quot;</span>,<span class="string">&quot;喜欢&quot;</span>,<span class="literal">True</span>]</span><br><span class="line">list2=[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x&gt;<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>在Python中，可以使用构造函数来创建列表。构造函数是一种特殊的方法，用于在创建对象时进行初始化操作。</p><p>使用构造函数创建列表的方式是通过调用list()函数，并将一个可迭代对象作为参数传递给它。可迭代对象可以是一个字符串、元组、集合、字典等。</p><p>下面是一些使用构造函数创建列表的示例：</p><ol><li><p>使用字符串创建列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;my_list = <span class="built_in">list</span>(<span class="string">&quot;abc&quot;</span>) </span><br><span class="line">&gt;<span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>使用元组创建列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;my_list = <span class="built_in">list</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) </span><br><span class="line">&gt;<span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p>使用集合创建列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;my_list = <span class="built_in">list</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;) </span><br><span class="line">&gt;<span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p>使用字典创建列表（只包含键）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;my_list = <span class="built_in">list</span>(&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>, <span class="string">&quot;c&quot;</span>: <span class="number">3</span>&#125;)  </span><br><span class="line">&gt;<span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure></li></ol><p>需要注意的是，&#x3D;&#x3D;构造函数创建的列表是一个新的对象，与原始的可迭代对象是独立的。修改原始的可迭代对象不会影响到使用构造函数创建的列表。&#x3D;&#x3D;</p><p>此外，还可以使用列表推导式来创建列表，它提供了一种更简洁的语法。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;my_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]  </span><br><span class="line">&gt;<span class="comment"># [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></blockquote><p><em><strong>还可以加一些判断条件</strong></em></p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ddd=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span>(x&gt;<span class="number">5</span>))</span><br><span class="line"><span class="comment"># [6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="列表的访问"><a href="#列表的访问" class="headerlink" title="列表的访问"></a><strong>列表的访问</strong></h5><p><strong>下标[0，len-1]</strong></p><h5 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># [1, 2, 4]</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h5 id="列表的操作和常见的方法"><a href="#列表的操作和常见的方法" class="headerlink" title="列表的操作和常见的方法"></a>列表的操作和常见的方法</h5><table><thead><tr><th align="center">编号</th><th align="left">使用方式</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">列表.append(元素)</td><td align="center">向列表中追加一个元素</td></tr><tr><td align="center">2</td><td align="left">列表.extend(容器)</td><td align="center">将数据容器的内容依次取出，追加到列表尾部</td></tr><tr><td align="center">3</td><td align="left">列表.insert(下标，元素)</td><td align="center">在指定下标处，插入指定的元素</td></tr><tr><td align="center"><strong>4</strong></td><td align="left"><strong>del列表[下标]</strong></td><td align="center"><strong>删除列表指定下标元素</strong></td></tr><tr><td align="center">5</td><td align="left">列表.pop(下标)</td><td align="center">删除列表指定下标元素并且返回,如果指定了index就把他给删除了默认是-1下标</td></tr><tr><td align="center">6</td><td align="left">列表.remove(元素)</td><td align="center">从前向后，删除此元素第一个匹配项</td></tr><tr><td align="center"><strong>7</strong></td><td align="left"><strong>列表.clear()</strong></td><td align="center"><strong>清空列表</strong></td></tr><tr><td align="center">8</td><td align="left">列表.count(元素)</td><td align="center">统计此元素在列表中出现的次数</td></tr><tr><td align="center">9</td><td align="left">列表.index(元素)</td><td align="center">查找指定元素在列表的下标  找不到报错ValueError</td></tr><tr><td align="center">10</td><td align="left">len(列表)</td><td align="center">统计容器内有多少元素</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ddd=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span>(x&gt;<span class="number">5</span>))</span><br><span class="line"><span class="comment"># [6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="built_in">print</span>(ddd)</span><br><span class="line"><span class="keyword">for</span> ppp <span class="keyword">in</span> ddd:</span><br><span class="line">    <span class="built_in">print</span>(ppp)</span><br><span class="line">    <span class="comment"># 6</span></span><br><span class="line">    <span class="comment"># 7</span></span><br><span class="line">    <span class="comment"># 8</span></span><br><span class="line">    <span class="comment"># 9</span></span><br><span class="line">    <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>列表名.append在列表的&#x3D;&#x3D;屁股&#x3D;&#x3D;加新成员</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.append(<span class="number">11</span>)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.<strong>inset(i,x)在下标为i的地方加入一个新的x,也就是说新来的在a[i]，其他的往后去</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.insert(<span class="number">1</span>,<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, &#x27;x&#x27;, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.<strong>extend（新的 列表）把新的列表&#x3D;&#x3D;续&#x3D;&#x3D;在操作对象的后面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>列表名.remove(x)移除列表里的x</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.remove(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>列表名.pop（obj）&#x3D;&#x3D;删除obj指定的下标&#x3D;&#x3D;</strong>***&#x3D;&#x3D;并返回删除的对象&#x3D;&#x3D;**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line">c=a.pop(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 10]</span></span><br></pre></td></tr></table></figure></li><li><p>del 列表名[下标]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># [1, 2, 4]</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.clear() 清空列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.clear()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, 2, 4]</span></span><br><span class="line"><span class="comment"># []</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.index(x)方法，查x在列表中的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="number">8</span>))</span><br><span class="line"><span class="comment">#7</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.count(x)，查x在列表中出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6]</span></span><br><span class="line"><span class="built_in">print</span>(a.count(<span class="number">6</span>))</span><br><span class="line"><span class="comment">#2</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.reverse()将列表顺序反转———————&#x3D;&#x3D;不需要传入任何参数&#x3D;&#x3D;而且也没有返回值相当于返回none</p></li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.reverse()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><ol start="11"><li><p>len(列表名)得到列表的元素个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"><span class="comment"># [1, 2, 4]</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>列表名.sort（key,reverse）三个参数，key比较时的关键字，reverse比较完是否逆序</strong> </p><blockquote><ol><li><h6 id="在Python-3中，cmp参数已被移除，所以无法直接使用cmp函数进行排序。-取而代之的是使用key参数来指定一个函数"><a href="#在Python-3中，cmp参数已被移除，所以无法直接使用cmp函数进行排序。-取而代之的是使用key参数来指定一个函数" class="headerlink" title="在Python 3中，cmp参数已被移除，所以无法直接使用cmp函数进行排序。&#x3D;&#x3D;取而代之的是使用key参数来指定一个函数&#x3D;&#x3D;"></a>在Python 3中，cmp参数已被移除，所以无法直接使用cmp函数进行排序。&#x3D;&#x3D;取而代之的是使用key参数来指定一个函数&#x3D;&#x3D;</h6></li><li><h6 id="默认是排序后不进行逆序的，默认升序》"><a href="#默认是排序后不进行逆序的，默认升序》" class="headerlink" title="&#x3D;&#x3D;默认是排序后不进行逆序的，默认升序》&#x3D;&#x3D;"></a>&#x3D;&#x3D;默认是排序后不进行逆序的，默认升序》&#x3D;&#x3D;</h6></li><li><h6 id="可以单独使用并排序真身，返回值是个none，可以自定义key，默认升序》"><a href="#可以单独使用并排序真身，返回值是个none，可以自定义key，默认升序》" class="headerlink" title="可以单独使用并排序真身，返回值是个none，可以自定义key，默认升序》"></a>可以单独使用并排序真身，返回值是个none，可以自定义key，默认升序》</h6><p>k.sort(<em>key</em><strong>&#x3D;lambda</strong> <em>a</em>:a[1])有三个参数，不能默认指定，要指定对应的参数&#x3D;&#x3D;k.sort(<em>key</em><strong>&#x3D;lambda</strong> <em>a</em>:a[1])&#x3D;&#x3D;注意使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">l=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(l))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(l,reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">sorted</span>(l)))</span><br><span class="line">   <span class="comment"># [1, 2, 2, 3, 4, 5, 9]</span></span><br><span class="line"><span class="comment"># [9, 5, 4, 3, 2, 2, 1]</span></span><br><span class="line"></span><br><span class="line">l.sort()</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="built_in">print</span>(l.sort())</span><br><span class="line"><span class="comment"># None</span></span><br><span class="line">   <span class="comment"># [1, 2, 2, 3, 4, 5, 9]</span></span><br><span class="line"><span class="comment"># [9, 5, 4, 3, 2, 2, 1]</span></span><br><span class="line"></span><br><span class="line">k=[[<span class="string">&quot;a&quot;</span>,<span class="number">15</span>],[<span class="string">&quot;b&quot;</span>,<span class="number">12</span>],[<span class="string">&quot;c&quot;</span>,<span class="number">13</span>]]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br><span class="line">k.sort(key=cmp)</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment"># [[&#x27;b&#x27;, 12], [&#x27;c&#x27;, 13], [&#x27;a&#x27;, 15]]</span></span><br><span class="line">   k=[[<span class="string">&quot;a&quot;</span>,<span class="number">15</span>],[<span class="string">&quot;b&quot;</span>,<span class="number">12</span>],[<span class="string">&quot;c&quot;</span>,<span class="number">13</span>]]</span><br><span class="line"></span><br><span class="line">      k.sort(key=<span class="keyword">lambda</span> y :y[<span class="number">1</span>])</span><br><span class="line">   <span class="built_in">print</span>(k)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># [[&#x27;b&#x27;, 12], [&#x27;c&#x27;, 13], [&#x27;a&#x27;, 15]]</span></span><br></pre></td></tr></table></figure></li></ol></blockquote></li></ol><p><strong>python内置的len作为关键字（函数）使用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b=[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;dasdasdas&#x27;</span>,<span class="string">&#x27;h1&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, 4, 9, 3, 6, 7, 2]</span></span><br><span class="line">b.sort(key=<span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># [&#x27;h1&#x27;, &#x27;apple&#x27;, &#x27;dasdasdas&#x27;]</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;在Python中，默认的排序函数<code>sort()</code>需要接受一个返回值为布尔类型的比较函数作为参数，而不是返回值为整数类型的比较函数。&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">k=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line">k.sort(key=<span class="keyword">lambda</span> x:x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;默认升序的排序<span class="subst">&#123;k&#125;</span>&quot;</span>)</span><br><span class="line">k.sort(key=<span class="keyword">lambda</span> x:-x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;稍微修改降序的排序<span class="subst">&#123;k&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 默认升序的排序[1, 2, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment"># 稍微修改降序的排序[5, 4, 3, 2, 2, 1]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最简单的降序排列—–因为默认是升序，&#x3D;&#x3D;排序再逆转&#x3D;&#x3D;一下就🆗了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原状态&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;默认升序&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;逆转后的降序&quot;</span>)</span><br><span class="line">a.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 原状态</span></span><br><span class="line"><span class="comment"># [1, 4, 9, 3, 6, 7, 2]</span></span><br><span class="line"><span class="comment"># 默认升序</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 6, 7, 9]</span></span><br><span class="line"><span class="comment"># 逆转后的降序</span></span><br><span class="line"><span class="comment"># [9, 7, 6, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><hr><h4 id="4-2元组（有序的不可变序列）"><a href="#4-2元组（有序的不可变序列）" class="headerlink" title="4.2元组（有序的不可变序列）"></a>4.2元组（有序的不可变序列）</h4><h5 id="元组的创建-有两个带turple的"><a href="#元组的创建-有两个带turple的" class="headerlink" title="元组的创建(有两个带turple的)"></a>元组的创建(有两个带turple的)</h5><p><strong>&#x3D;&#x3D;元组用来存储任意大小的数据集合，可以有任意个数据，可以是不同的数据类型，也可以是元组（嵌套）&#x3D;&#x3D;</strong></p><blockquote><ol><li><p>括号创建—-注意区别&#x3D;&#x3D;-创建只含有一个元素的元组要在元素的后面加上,&#x3D;&#x3D;            不加逗号的时候会被理解为优先级的（）而不是元组的括号,就被理解为字符串而非元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=(<span class="number">1</span>)</span><br><span class="line">b=(<span class="number">1</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用构造函数 和列表非常的相似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组的三种创建&quot;</span>)</span><br><span class="line">t1=(<span class="string">&quot;dsadsa&quot;</span>,)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))</span><br><span class="line">/////////</span><br><span class="line"> t1=<span class="built_in">tuple</span>(<span class="string">&quot;dsadsad&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"> <span class="built_in">print</span>(<span class="built_in">type</span>(t1))</span><br><span class="line">//////////</span><br><span class="line">t1=(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">//默认是生成器对象</span><br><span class="line">t1=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x&gt;<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))</span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="元组的访问和遍历"><a href="#元组的访问和遍历" class="headerlink" title="元组的访问和遍历"></a>元组的访问和遍历</h5><blockquote><ol><li><p><strong>下标[0，len-1]</strong></p></li><li><p>&#x3D;&#x3D;可以像列表一样访问但是不可以修改，别说什么删除 了&#x3D;&#x3D;</p></li><li><pre><code class="python">d=tuple(x*2 for x in range(1,6) if x&gt;=3)print(d)(6, 8, 10)for i in d:    print(i)    # 6    # 8    # 10<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 元组与列表的区别</span><br><span class="line"></span><br><span class="line">==唯一就是可修改与不可修改的区别，元组是不可以通过元素的下标修改的，列表是可以的。==</span><br><span class="line"></span><br><span class="line">##### 元组的相关操作</span><br><span class="line"></span><br><span class="line">1. 由于元组的数据不可以被修改</span><br><span class="line"></span><br><span class="line">2. ###### 元组名.count(x),查询x出现的次数</span><br><span class="line"></span><br><span class="line">3. ###### 元组名.index(x)查询x的下标</span><br><span class="line"></span><br><span class="line">4. len(元素名)查询元组的元素个数</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   p=tuple(f)</span><br><span class="line">   print(p)</span><br><span class="line">   # (&#x27;张&#x27;, &#x27;三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;, &#x27;李六&#x27;)</span><br><span class="line">   print(p.index(&quot;李四&quot;))</span><br><span class="line">   print(p.count(&quot;王五&quot;))</span><br><span class="line">   # 2</span><br><span class="line">   # 1</span><br></pre></td></tr></table></figure></code></pre></li></ol></blockquote><hr><h5 id="元组的注意事项-总结"><a href="#元组的注意事项-总结" class="headerlink" title="元组的注意事项&#x2F;总结"></a>元组的注意事项&#x2F;总结</h5><p>虽然元组的元素不能修改</p><p>&#x3D;&#x3D;但是如果元组里面放了一个list的时候，可以修改&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># (1, 2, 3, [4, 5, 6])</span></span><br><span class="line">m[<span class="number">3</span>][<span class="number">0</span>]=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(m[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># [5, 5, 6]</span></span><br></pre></td></tr></table></figure><blockquote><p>经过.上述对元组的学习，可以总结出列表有如下特点:</p><ol><li>可以容纳多个数据</li><li>可以容纳不同类型的数据(混装)</li><li>数据是有序存储的(下标索引)</li><li>允许重复数据存在</li><li>不可以修改( 增加或删除元素等)</li><li>支持for循环</li><li>&#x3D;&#x3D;多数特性和list-致，不同点在于不可修改的特性。&#x3D;&#x3D;</li></ol></blockquote><h4 id="4-3序列"><a href="#4-3序列" class="headerlink" title="4.3序列"></a>4.3序列</h4><p><strong>序列是最基本的数据结构，序列中的每一个元素都分配一个下标，[0,n-1],[-n,-1],n是元素个数&#x3D;len(序列)</strong></p><p><em><strong>常见的序列，字符串，元组，列表</strong></em></p><h5 id="序列和通用操作（切片操作）"><a href="#序列和通用操作（切片操作）" class="headerlink" title="序列和通用操作（切片操作）"></a>序列和通用操作（切片操作）</h5><h6 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h6><blockquote><p>序列名[i:j:k]</p><p><code>根据ij索引切除片，并返回对应类型的对象</code></p><p>&#x3D;&#x3D;i表示起始位置，j代表索引结束位置，k代表步长，默认是1。[i,j-1]&#x3D;&#x3D;</p><p>&#x3D;&#x3D;这些操作都没有真正改变原来的序列，而是返回了一个新的序列。原来的序列仍然保持不变。如果要改变原来的字符串，可以将新的字符串赋值给原来的变量。例如：&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;0123456789&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">3</span>]))</span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>切片的注意事项</p><ol><li><p>如果切片的索引i&#x3D;0，那么从第一个到j-1的元素</p></li><li><p>如果切片的索引j&#x3D;0，那么会从i切到以后的元素</p></li><li><p>如果开始和结束都为空，那么得到整个序列</p></li><li><p>&#x3D;&#x3D;如果i&gt;j且步长&gt;0，得到一个空的序列&#x3D;&#x3D;’’’’;;如果步长为&lt;0且就理解为反向走</p></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">d=d[<span class="number">2</span>:<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># (6, 8, 10)</span></span><br><span class="line"><span class="comment"># ()</span></span><br></pre></td></tr></table></figure></li><li><p>如果步长为负数，就逆序获取元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># ///////</span></span><br><span class="line">d=d[<span class="number">0</span>:<span class="built_in">len</span>(d)]</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">d=d[::]</span><br><span class="line"><span class="comment"># ///////</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">d=d[<span class="number">4</span>:<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="comment">#理解为从4到0反向走一次走1</span></span><br><span class="line"><span class="comment"># 而且最终的个数等于绝对值这两个差</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><hr><p>&#x3D;&#x3D;综合案例，[::-1]常用来倒把序列给倒序&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="string">&quot;万过薪月，员序程马牛来，nohtyP学&quot;</span></span><br><span class="line">c=c[::-<span class="number">1</span>][<span class="number">9</span>:<span class="number">14</span>]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">c=<span class="string">&quot;万过薪月，员序程马牛来，nohtyP学&quot;</span></span><br><span class="line">c=c[<span class="number">5</span>:<span class="number">10</span>][::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">c=<span class="string">&quot;万过薪月，员序程马牛来，nohtyP学&quot;</span></span><br><span class="line">c=c.split(<span class="string">&#x27;，&#x27;</span>)[<span class="number">1</span>][:<span class="number">5</span>][::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># 牛马程序员</span></span><br><span class="line"><span class="comment"># 牛马程序员</span></span><br><span class="line"><span class="comment"># 牛马程序员</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h6 id="连接和复制"><a href="#连接和复制" class="headerlink" title="连接和复制"></a>连接和复制</h6><p><a href="#%E5%AD%97%E5%85%B8">去字典</a></p><blockquote><ol><li><p>连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line">e=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line">f=d+e</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5)</span></span><br><span class="line"><span class="comment"># (6, 7, 8, 9, 10)</span></span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span></span><br></pre></td></tr></table></figure></li><li><p>复制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(d*<span class="number">3</span>)</span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5)</span></span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h6 id="成员检查（成员运算符in-not-in）"><a href="#成员检查（成员运算符in-not-in）" class="headerlink" title="成员检查（成员运算符in not in）"></a>成员检查（成员运算符in not in）</h6><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> d)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">11</span> <span class="keyword">in</span> d)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="内置函数max-min-len"><a href="#内置函数max-min-len" class="headerlink" title="内置函数max,min,len"></a>内置函数max,min,len</h6><blockquote><ol><li><p>len()计算序列的长度，也就是元素&#x2F;字符的个数</p></li><li><p>max()寻找序列中的最大值</p></li><li><p>min()寻找序列中的最小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(d))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(d))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(d))</span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5, 6)</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="序列的相互转换-（字符串，列表，元组之间的转换）"><a href="#序列的相互转换-（字符串，列表，元组之间的转换）" class="headerlink" title="&#x3D;&#x3D;序列的相互转换&#x3D;&#x3D;（字符串，列表，元组之间的转换）"></a>&#x3D;&#x3D;序列的相互转换&#x3D;&#x3D;（字符串，列表，元组之间的转换）</h5><p><strong>并没有改变真身，但可以赋值给真身</strong></p><blockquote><ol><li><p>字符串转为列表和元组—–list(),tuple()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="string">&#x27;你好啊小盆友&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(d))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(d))</span><br><span class="line"><span class="comment"># 你好啊小盆友</span></span><br><span class="line"><span class="comment"># [&#x27;你&#x27;, &#x27;好&#x27;, &#x27;啊&#x27;, &#x27;小&#x27;, &#x27;盆&#x27;, &#x27;友&#x27;]</span></span><br><span class="line"><span class="comment"># (&#x27;你&#x27;, &#x27;好&#x27;, &#x27;啊&#x27;, &#x27;小&#x27;, &#x27;盆&#x27;, &#x27;友&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><p>列表与元组的相互转换—————–list(),tuple()，只不过里面放的不是字符串了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">d=[<span class="number">1</span>,<span class="string">&quot;我&quot;</span>,<span class="number">2</span>,<span class="string">&#x27;取&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(d))</span><br><span class="line"><span class="comment"># [1, &#x27;我&#x27;, 2, &#x27;取&#x27;]</span></span><br><span class="line"><span class="comment"># (1, &#x27;我&#x27;, 2, &#x27;取&#x27;)</span></span><br><span class="line"></span><br><span class="line">e=(<span class="number">3</span>,<span class="string">&quot;你&quot;</span>,<span class="number">5</span>,<span class="string">&#x27;曲&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(e))</span><br><span class="line"><span class="comment"># (3, &#x27;你&#x27;, 5, &#x27;曲&#x27;)</span></span><br><span class="line"><span class="comment"># [3, &#x27;你&#x27;, 5, &#x27;曲&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;列表和元组转换为字符串&#x3D;&#x3D;——–用到了字符串的join方法。需要一个字符串来把新的序列转换为字符串并连接到已有的字符串上面。 ————&#x3D;&#x3D;前提是列表里面都是字符串类型或者字符类型&#x3D;&#x3D;，“ ” ‘ ’，纯数字不可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f=[<span class="string">&#x27;张&#x27;</span>,<span class="string">&#x27;三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;李六&#x27;</span>]</span><br><span class="line">e=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"><span class="built_in">print</span>(e.join(f))</span><br><span class="line"><span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 张三李四王五李六</span></span><br><span class="line"><span class="built_in">str</span>()只是把对象转化为人容易看懂的字符串</span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="Str-函数"><a href="#Str-函数" class="headerlink" title="Str()函数"></a>Str()函数</h4><blockquote><p><code>str()</code>函数是Python内置的一个函数，用于将对象转换为字符串形式。</p><p><code>str()</code>函数的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure><p>其中，<code>object</code>是要转换为字符串的对象。<code>object</code>可以是数字、字符串、列表、元组、字典、集合等等。</p><p><code>str()</code>函数的工作原理如下：</p><ul><li><p>如果<code>object</code>是字符串类型，则返回该字符串本身。</p></li><li><p>如果<code>object</code>是数字类型（整数、浮点数等），则返回对应的字符串表示。</p></li><li><p>如果<code>object</code>是列表、元组、字典、集合等可迭代对象，则返回一个包含各个元素的字符串表示。</p></li><li><p>如果<code>object</code>是自定义的对象，则根据对象的<code>__str__()</code>方法返回字符串表示。</p></li><li><p>以下是一些示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">10</span>))  <span class="comment"># 将整数转换为字符串 &#x27;10&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">3.14</span>) ) <span class="comment"># 将浮点数转换为字符串 &#x27;3.14&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># 将列表转换为字符串 &#x27;[1, 2, 3]&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)))  <span class="comment"># 将元组转换为字符串 &quot;(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;))  <span class="comment"># 将字典转换为字符串 &quot;&#123;&#x27;name&#x27;: &#x27;John&#x27;, &#x27;age&#x27;: 25&#125;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><hr><p><a name="字典"></a></p><h4 id="4-4字典（无序Key-Value集合）"><a href="#4-4字典（无序Key-Value集合）" class="headerlink" title="4.4字典（无序Key-Value集合）"></a>4.4字典（无序Key-Value集合）</h4><h5 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a>字典的创建</h5><blockquote><ol><li><h4 id="使用花括号-创建字典"><a href="#使用花括号-创建字典" class="headerlink" title="使用花括号{}创建字典"></a>使用花括号{}创建字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a=&#123;<span class="string">&quot;key1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># &#123;&#x27;key1&#x27;: 1, &#x27;key2&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line">a[<span class="string">&quot;key1&quot;</span>]=<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a</span><br><span class="line"><span class="comment"># &#123;&#x27;key1&#x27;: 2, &#x27;key2&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line">b=&#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="使用函数创建字典"><a href="#使用函数创建字典" class="headerlink" title="使用函数创建字典"></a>使用函数创建字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="built_in">dict</span>()</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br><span class="line">c=<span class="built_in">dict</span>(red=<span class="number">1</span>,blue=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># &#123;&#x27;red&#x27;: 1, &#x27;blue&#x27;: 2&#125;</span></span><br><span class="line">l=[(<span class="string">&quot;red&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;green&quot;</span>,<span class="number">3</span>)]</span><br><span class="line">c=<span class="built_in">dict</span>(l)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># &#123;&#x27;red&#x27;: 1, &#x27;green&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="使用推导式创建字典—–-p-x-x-for-x-in-range-1-6-严格按照格式，不带dict（）"><a href="#使用推导式创建字典—–-p-x-x-for-x-in-range-1-6-严格按照格式，不带dict（）" class="headerlink" title="使用推导式创建字典—–&#x3D;&#x3D;p&#x3D;{x: x for x in range(1,6)} 严格按照格式，不带dict（）&#x3D;&#x3D;"></a>使用推导式创建字典—–&#x3D;&#x3D;p&#x3D;{x: x for x in range(1,6)} 严格按照格式，不带dict（）&#x3D;&#x3D;</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p=&#123;x: x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment"># &#123;1: 2, 2: 4, 3: 6, 4: 8, 5: 10&#125;</span></span><br><span class="line">p=&#123;x: x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment"># &#123;2: 4, 3: 6, 4: 8, 5: 10&#125;</span></span><br><span class="line"><span class="comment">#=----------------</span></span><br><span class="line">l=[(<span class="string">&quot;red&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;green&quot;</span>,<span class="number">3</span>)]</span><br><span class="line">ll=&#123;x:j <span class="keyword">for</span> x,j <span class="keyword">in</span> l&#125;</span><br><span class="line"><span class="built_in">print</span>(ll)</span><br><span class="line"><span class="comment"># &#123;&#x27;red&#x27;: 1, &#x27;green&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="字典的使用场景"><a href="#字典的使用场景" class="headerlink" title="字典的使用场景"></a>字典的使用场景</h5><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zd=&#123;<span class="string">&quot;王力宏&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">60</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">22</span>,<span class="string">&quot;英语&quot;</span>:<span class="number">50</span>&#125;,<span class="string">&quot;周杰伦&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">20</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">42</span>,<span class="string">&quot;英语&quot;</span>:<span class="number">60</span>&#125;&#125;</span><br><span class="line"><span class="built_in">print</span>(zd)</span><br><span class="line"><span class="built_in">print</span>(zd[<span class="string">&quot;王力宏&quot;</span>][<span class="string">&quot;语文&quot;</span>])</span><br><span class="line"><span class="comment"># &#123;&#x27;王力宏&#x27;: &#123;&#x27;语文&#x27;: 60, &#x27;数学&#x27;: 22, &#x27;英语&#x27;: 50&#125;, &#x27;周杰伦&#x27;: &#123;&#x27;语文&#x27;: 20, &#x27;数学&#x27;: 42, &#x27;英语&#x27;: 60&#125;&#125;</span></span><br><span class="line"><span class="comment"># 60</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="字典的访问-更新"><a href="#字典的访问-更新" class="headerlink" title="字典的访问&#x2F;更新"></a>字典的访问&#x2F;更新</h5><blockquote><p>字典名[键]&#x3D;新的值</p><ol><li><p>如果新增的key原来字典不存在，那么就新增一个键值对,&#x3D;&#x3D;加在字典的后面&#x3D;&#x3D;</p></li><li><p>如果新增的key原来存在，那么就会覆盖原来的键值对（更新）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">zd=&#123;<span class="string">&quot;王力宏&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">60</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">22</span>,<span class="string">&quot;英语&quot;</span>:<span class="number">50</span>&#125;,<span class="string">&quot;周杰伦&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">20</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">42</span>,<span class="string">&quot;英语&quot;</span>:<span class="number">60</span>&#125;&#125;</span><br><span class="line">zd[<span class="string">&quot;许闰博&quot;</span>]=&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">100</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">98</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(zd)</span><br><span class="line"><span class="comment"># &#123;&#x27;王力宏&#x27;: &#123;&#x27;语文&#x27;: 60, &#x27;数学&#x27;: 22, &#x27;英语&#x27;: 50&#125;, &#x27;周杰伦&#x27;: &#123;&#x27;语文&#x27;: 20, &#x27;数学&#x27;: 42, &#x27;英语&#x27;: 60&#125;, &#x27;许闰博&#x27;: &#123;&#x27;语文&#x27;: 100, &#x27;数学&#x27;: 98&#125;&#125;</span></span><br><span class="line">zd[<span class="string">&quot;王力宏&quot;</span>][<span class="string">&quot;语文&quot;</span>]=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(zd[<span class="string">&quot;王力宏&quot;</span>][<span class="string">&quot;语文&quot;</span>])</span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">zd=&#123;<span class="string">&#x27;王力宏&#x27;</span>: &#123;<span class="string">&#x27;语文&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;数学&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">50</span>&#125;, <span class="string">&#x27;周杰伦&#x27;</span>: &#123;<span class="string">&#x27;语文&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;数学&#x27;</span>: <span class="number">42</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">60</span>&#125;, <span class="string">&#x27;许闰博&#x27;</span>: &#123;<span class="string">&#x27;语文&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;数学&#x27;</span>: <span class="number">98</span>&#125;&#125;</span><br><span class="line">key=zd.keys()</span><br><span class="line">value=zd.values()</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> key:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;键是<span class="subst">&#123;k&#125;</span>,对应的值是<span class="subst">&#123;zd[k]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># dict_keys([&#x27;王力宏&#x27;, &#x27;周杰伦&#x27;, &#x27;许闰博&#x27;])</span></span><br><span class="line"><span class="comment"># dict_values([&#123;&#x27;语文&#x27;: 60, &#x27;数学&#x27;: 22, &#x27;英语&#x27;: 50&#125;, &#123;&#x27;语文&#x27;: 20, &#x27;数学&#x27;: 42, &#x27;英语&#x27;: 60&#125;, &#123;&#x27;语文&#x27;: 100, &#x27;数学&#x27;: 98&#125;])</span></span><br><span class="line"><span class="comment"># 键是王力宏, 对应的值是</span></span><br><span class="line"><span class="comment"># &#123;&#x27;语文&#x27;: 60, &#x27;数学&#x27;: 22, &#x27;英语&#x27;: 50&#125;</span></span><br><span class="line"><span class="comment"># 键是周杰伦, 对应的值是</span></span><br><span class="line"><span class="comment"># &#123;&#x27;语文&#x27;: 20, &#x27;数学&#x27;: 42, &#x27;英语&#x27;: 60&#125;</span></span><br><span class="line"><span class="comment"># 键是许闰博, 对应的值是</span></span><br><span class="line"><span class="comment"># &#123;&#x27;语文&#x27;: 100, &#x27;数学&#x27;: 98&#125;</span></span><br></pre></td></tr></table></figure><hr><blockquote><h5 id="其实是等价的"><a href="#其实是等价的" class="headerlink" title="其实是等价的"></a>其实是等价的</h5></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">j=&#123;x:x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;2: 4, 3: 6, 4: 8, 5: 10&#125;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> j:</span><br><span class="line">    <span class="built_in">print</span>(i,j[i])</span><br><span class="line"><span class="comment"># 2 4</span></span><br><span class="line"><span class="comment"># 3 6</span></span><br><span class="line"><span class="comment"># 4 8</span></span><br><span class="line"><span class="comment"># 5 10</span></span><br></pre></td></tr></table></figure><h5 id="删除字典元素和删除字典和清空字典"><a href="#删除字典元素和删除字典和清空字典" class="headerlink" title="删除字典元素和删除字典和清空字典"></a>删除字典元素和删除字典和清空字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pop(key[, default])</span></span><br><span class="line">d=&#123;<span class="string">&quot;key1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">d.pop(<span class="string">&quot;key1&quot;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">d.pop(<span class="string">&quot;key3&quot;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> d[<span class="string">&quot;key2&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><h5 id="字典的常用方法"><a href="#字典的常用方法" class="headerlink" title="字典的常用方法"></a>字典的常用方法</h5><table><thead><tr><th>编号</th><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>字典[Key]</td><td>获取指定Key对应的Value值</td></tr><tr><td>2</td><td>字典[Key]&#x3D; Value</td><td>添加或更新键值对  ，原来有的就覆盖，原来没有就添加</td></tr><tr><td>3</td><td>字典.pop(Key)</td><td># pop(key[, default])取出Key对应的Value并在字典内删除此Key的键值对</td></tr><tr><td>4</td><td>字典.clear()</td><td>清空字典,主要看第一个参数就算第二个喝第一个对应不住也是ok的</td></tr><tr><td>5</td><td>字典.keys()</td><td>获取字典的全部Key,可用于for循环遍历字典</td></tr><tr><td>6</td><td>len(字典)</td><td>计算字典内的元素数量</td></tr></tbody></table><blockquote><ol><li><h4 id="keys（）方法-以列表的形式-返回字典的所有键"><a href="#keys（）方法-以列表的形式-返回字典的所有键" class="headerlink" title="keys（）方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典的所有键"></a>keys（）方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典的所有键</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.keys())</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># dict_keys([&#x27;k1&#x27;, &#x27;k2&#x27;])</span></span><br></pre></td></tr></table></figure></li><li><h4 id="values-方法-以列表的形式-返回字典的所有值"><a href="#values-方法-以列表的形式-返回字典的所有值" class="headerlink" title="values()方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典的所有值"></a>values()方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典的所有值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.values())</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># dict_values([1, 9])</span></span><br></pre></td></tr></table></figure></li><li><h4 id="items-方法-以列表的形式-返回字典键值对-对应的元组的可视对象"><a href="#items-方法-以列表的形式-返回字典键值对-对应的元组的可视对象" class="headerlink" title="items()方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典键值对&#x3D;&#x3D;对应的元组的可视对象&#x3D;&#x3D;"></a>items()方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典键值对&#x3D;&#x3D;对应的元组的可视对象&#x3D;&#x3D;</h4><p>使用下标运算符<code>[]</code>来访问一个<code>dict_items</code>对象。<code>dict_items</code>对象是由字典的<code>items()</code>方法返回的一个视图对象，&#x3D;&#x3D;它不支持下标运算符。&#x3D;&#x3D;</p><p>要访问<code>dict_items</code>对象中的元素，您可以使用&#x3D;&#x3D;迭代器&#x3D;&#x3D;或将其&#x3D;&#x3D;转换为列表&#x3D;&#x3D;后再进行访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.items())</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># dict_items([(&#x27;k1&#x27;, 1), (&#x27;k2&#x27;, 9)])</span></span><br><span class="line">一般强制转换为<span class="built_in">list</span>使用</span><br></pre></td></tr></table></figure></li><li><h4 id="get-键-default-方法-返回指定键对应的值，如果没有就返回default，默认是none"><a href="#get-键-default-方法-返回指定键对应的值，如果没有就返回default，默认是none" class="headerlink" title="&#x3D;&#x3D;get(键,default)方法&#x3D;&#x3D;||返回指定键对应的值，如果没有就返回default，默认是none"></a>&#x3D;&#x3D;get(键,default)方法&#x3D;&#x3D;||返回指定键对应的值，如果没有就返回default，默认是none</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.get(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;该键不存在啊&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(aaa.get(<span class="string">&quot;k3&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(aaa.get(<span class="string">&quot;k3&quot;</span>,<span class="string">&quot;该键不存在啊&quot;</span>))</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># 该键不存在啊</span></span><br></pre></td></tr></table></figure></li><li><h4 id="copy-方法-返回一个新的字典，新开辟的"><a href="#copy-方法-返回一个新的字典，新开辟的" class="headerlink" title="copy()方法||返回一个新的字典，新开辟的"></a>copy()方法||返回一个新的字典，新开辟的</h4><ol><li><h6 id="copy与直接赋值一份字典的区别-–二者公用同一份。也就是后者指向前者。"><a href="#copy与直接赋值一份字典的区别-–二者公用同一份。也就是后者指向前者。" class="headerlink" title="copy与直接赋值一份字典的区别  –二者公用同一份。也就是后者指向前者。"></a>copy与直接赋值一份字典的区别  –二者公用同一份。也就是后者指向前者。</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line">bbb=aaa</span><br><span class="line"><span class="built_in">print</span>(bbb)</span><br><span class="line">aaa[<span class="string">&quot;k1&quot;</span>]=<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(bbb)</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 2, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 2, &#x27;k2&#x27;: 9&#125;</span></span><br></pre></td></tr></table></figure></li><li><h6 id="copy就不一样了，直接开辟一个新的字典"><a href="#copy就不一样了，直接开辟一个新的字典" class="headerlink" title="copy就不一样了，直接开辟一个新的字典"></a>copy就不一样了，直接开辟一个新的字典</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line">bbb=aaa.copy();</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(bbb)</span><br><span class="line">aaa[<span class="string">&quot;k1&quot;</span>]=<span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(bbb)</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 100, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="clear-方-清空字典，删除字典的全部元素，得到空字典-与del-字典名不同，区别在于是否完全删除字典"><a href="#clear-方-清空字典，删除字典的全部元素，得到空字典-与del-字典名不同，区别在于是否完全删除字典" class="headerlink" title="clear()方||清空字典，删除字典的全部元素，得到空字典 与del 字典名不同，区别在于是否完全删除字典"></a>clear()方||清空字典，删除字典的全部元素，得到空字典 与del 字典名不同，区别在于是否完全删除字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line">aaa.clear()</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="pop（键，default）-方法-返回指定的-键对应的值，并在字典中将其移除-如果没有就直接报错或者default对应的值"><a href="#pop（键，default）-方法-返回指定的-键对应的值，并在字典中将其移除-如果没有就直接报错或者default对应的值" class="headerlink" title="&#x3D;&#x3D;pop（键，default）&#x3D;&#x3D;方法||返回指定的 键对应的值，并在字典中将其移除. 如果没有就直接报错或者default对应的值"></a>&#x3D;&#x3D;pop（键，default）&#x3D;&#x3D;方法||返回指定的 键对应的值，并在字典中将其移除. 如果没有就直接报错或者default对应的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.pop(<span class="string">&quot;k1&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.pop(<span class="string">&quot;k4&quot;</span>,<span class="number">101</span>))</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># 101</span></span><br></pre></td></tr></table></figure></li><li><h5 id="popitem-方法，随机删除字典中的一组键值对，默认是最后一对，-并且以元组的形式返回这一对"><a href="#popitem-方法，随机删除字典中的一组键值对，默认是最后一对，-并且以元组的形式返回这一对" class="headerlink" title="popitem()方法，随机删除字典中的一组键值对，默认是最后一对，&#x3D;&#x3D;并且以元组的形式返回这一对&#x3D;&#x3D;"></a>popitem()方法，随机删除字典中的一组键值对，默认是最后一对，&#x3D;&#x3D;并且以元组的形式返回这一对&#x3D;&#x3D;</h5></li></ol></blockquote><h5 id="字典的注意事项"><a href="#字典的注意事项" class="headerlink" title="字典的注意事项"></a>字典的注意事项</h5><blockquote><h5 id="key不可以重复，类比生活中的字典"><a href="#key不可以重复，类比生活中的字典" class="headerlink" title="&#x3D;&#x3D;key不可以重复，类比生活中的字典&#x3D;&#x3D;"></a>&#x3D;&#x3D;key不可以重复，类比生活中的字典&#x3D;&#x3D;</h5><h5 id="没有下标索引，但可以使用key来查找对应的value"><a href="#没有下标索引，但可以使用key来查找对应的value" class="headerlink" title="没有下标索引，但可以使用key来查找对应的value"></a>没有下标索引，但可以使用key来查找对应的value</h5></blockquote><h4 id="4-5-集合（无序不重复集合）"><a href="#4-5-集合（无序不重复集合）" class="headerlink" title="4.5&#x3D;&#x3D;集合（无序不重复集合）&#x3D;&#x3D;"></a>4.5&#x3D;&#x3D;集合（<strong>无序不重复集合</strong>）&#x3D;&#x3D;</h4><blockquote><p>集合与列表相似，可以放多个数据，并且元素的存放是无序的，—-&#x3D;&#x3D;集合元素不可以是列表，字典，集合等可变对象不能有重复数据&#x3D;&#x3D;，</p></blockquote><h5 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h5><p><em><strong>集合的创建与字典的创建类似，但是又有区别。无序，元素的位置跟集合创建的位置无关，每次打印的顺序也不同,不能出现重复的元素，可以用来消除重复元素</strong></em></p><ol><li><h5 id="使用花括号创建集合"><a href="#使用花括号创建集合" class="headerlink" title="使用花括号创建集合"></a>使用花括号创建集合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-s---------------------------------------&quot;</span>)</span><br><span class="line">s1=&#123;<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&quot;白色&quot;</span>,<span class="string">&quot;蓝色&quot;</span>,<span class="string">&quot;蓝色&quot;</span>,<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s1))</span><br><span class="line"><span class="comment"># &#123;&#x27;白色&#x27;, &#x27;蓝色&#x27;, &#x27;黑色&#x27;, &#x27;1&#x27;&#125;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="使用set（）函数创建"><a href="#使用set（）函数创建" class="headerlink" title="使用set（）函数创建"></a>使用set（）函数创建</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">s1=<span class="built_in">set</span>(<span class="string">&quot;hellword&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">m1=[<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">m2=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m2))</span><br><span class="line">s1=<span class="built_in">set</span>(m1)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s1=<span class="built_in">set</span>(m2)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s1=<span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;&#x27;r&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;o&#x27;, &#x27;w&#x27;, &#x27;d&#x27;, &#x27;l&#x27;&#125;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;1&#x27;, 2, 3, 4&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;2&#x27;, 1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># set()</span></span><br></pre></td></tr></table></figure></li><li><h5 id="使用推导式创建"><a href="#使用推导式创建" class="headerlink" title="使用推导式创建"></a>使用推导式创建</h5><blockquote><p>与列表的推导式相同只不过用的是{}</p><p>s1&#x3D;{x for x in 可迭代对象 判断语句}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">s=<span class="built_in">set</span>(<span class="string">&quot;dasdsadddddd&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">s=&#123;i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure></blockquote></li></ol><h5 id="访问集合-的元素"><a href="#访问集合-的元素" class="headerlink" title="访问集合 的元素"></a>访问集合 的元素</h5><blockquote><h5 id="因为集合是无序的，所以无法使用下标来操作"><a href="#因为集合是无序的，所以无法使用下标来操作" class="headerlink" title="因为集合是无序的，所以无法使用下标来操作"></a>因为集合是无序的，所以无法使用下标来操作</h5><h5 id="但可以通过for循环来访问集合的元素"><a href="#但可以通过for循环来访问集合的元素" class="headerlink" title="但可以通过for循环来访问集合的元素"></a>但可以通过for循环来访问集合的元素</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s1:</span><br><span class="line"> <span class="built_in">print</span>(x)</span><br><span class="line"> <span class="comment"># </span></span><br><span class="line"> <span class="comment"># 3</span></span><br><span class="line"> <span class="comment"># 4</span></span><br><span class="line"> <span class="comment"># 5</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="集合添加元素"><a href="#集合添加元素" class="headerlink" title="集合添加元素"></a>集合添加元素</h5><blockquote><h5 id="使用add（）方法，因为集合是无序的，只把新的元素添加进去。不考虑位置，"><a href="#使用add（）方法，因为集合是无序的，只把新的元素添加进去。不考虑位置，" class="headerlink" title="使用add（）方法，因为集合是无序的，只把新的元素添加进去。不考虑位置，"></a>使用add（）方法，因为集合是无序的，只把新的元素添加进去。不考虑位置，</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line">s1.add(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># &#123;8, 3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="集合中常用的方法"><a href="#集合中常用的方法" class="headerlink" title="集合中常用的方法"></a>集合中常用的方法</h5><table><thead><tr><th align="center">编号</th><th>操作</th><th>说明</th></tr></thead><tbody><tr><td align="center">1</td><td>集合.add(元素)</td><td>集合内添加一个元素  不管位置，只管添加进去</td></tr><tr><td align="center">2</td><td>集合.remove(元素)</td><td>移除集合内指定的元素  没有的话就报错</td></tr><tr><td align="center">3</td><td>集合.pop()</td><td>&#x3D;&#x3D;从集合中随机取出一个元素,并且返回她&#x3D;&#x3D;</td></tr><tr><td align="center">4</td><td>集合.clear()</td><td>将集合清空</td></tr><tr><td align="center">5</td><td>集合1.difference(集合2)   集合1&gt;集合2</td><td>&#x3D;&#x3D;得到一个新集合&#x3D;&#x3D;，集合的差集   原有的2个集合内容不变,,,1-2</td></tr><tr><td align="center">6</td><td>集合1.difference_update(集合2)  对称</td><td>在集合1中，求差集 不反悔新的集合而是把结果保存再集合1中,,,1-2</td></tr><tr><td align="center">7</td><td>集合1.union(集合2)   并集</td><td>&#x3D;&#x3D;得到1个新集合，内含2个集合的全部元素&#x3D;&#x3D;   原有的2个集合内容不变,,,1+2</td></tr><tr><td align="center">8</td><td>len(集合)</td><td>得到一个整数，记录了集合的元素数量</td></tr></tbody></table><blockquote><ol><li><h5 id="remove-x-删除集合中的x元素，2-如果不存在就报错"><a href="#remove-x-删除集合中的x元素，2-如果不存在就报错" class="headerlink" title="remove(x),删除集合中的x元素，2.如果不存在就报错"></a>remove(x),删除集合中的x元素，2.如果不存在就报错</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line">s1.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># &#123;3, 5&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line">s1.remove(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;E:\PYTHON\字典.py&quot;, line 247, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     s1.remove(6)</span></span><br><span class="line"><span class="comment"># KeyError: 6</span></span><br></pre></td></tr></table></figure></li><li><h5 id="discard（x），删除集合中的x元素，如果不存在，程序不做任何操作-★★★★★★★★推荐且默认返回none"><a href="#discard（x），删除集合中的x元素，如果不存在，程序不做任何操作-★★★★★★★★推荐且默认返回none" class="headerlink" title="discard（x），删除集合中的x元素，如果不存在，程序不做任何操作-★★★★★★★★推荐且默认返回none"></a>discard（x），删除集合中的x元素，如果不存在，程序不做任何操作-★★★★★★★★推荐且默认返回none</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s1.discard(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># &#123;4, 5&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="pop（）方法，删除集合中的-任意一个元-素，并且返回该元素的值。因为集合没有下标操作，所以随机删"><a href="#pop（）方法，删除集合中的-任意一个元-素，并且返回该元素的值。因为集合没有下标操作，所以随机删" class="headerlink" title="pop（）方法，删除集合中的&#x3D;&#x3D;任意一个元&#x3D;&#x3D;素，并且返回该元素的值。因为集合没有下标操作，所以随机删"></a>pop（）方法，删除集合中的&#x3D;&#x3D;任意一个元&#x3D;&#x3D;素，并且返回该元素的值。因为集合没有下标操作，所以随机删</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s1.pop())</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># &#123;4, 5&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="clear（）方法，清空集合，删除集合中的所有元素。"><a href="#clear（）方法，清空集合，删除集合中的所有元素。" class="headerlink" title="clear（）方法，清空集合，删除集合中的所有元素。"></a>clear（）方法，清空集合，删除集合中的所有元素。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s1.clear()</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># set()</span></span><br></pre></td></tr></table></figure></li><li><h5 id="union-方法-联合起来，相当于并集"><a href="#union-方法-联合起来，相当于并集" class="headerlink" title="union()方法  联合起来，相当于并集"></a>union()方法  联合起来，相当于并集</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.union((s2)))</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="difference-方法-得到差集，注意顺序"><a href="#difference-方法-得到差集，注意顺序" class="headerlink" title="difference()方法 得到差集，注意顺序"></a>difference()方法 得到差集，注意顺序</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2.difference(s1))</span><br><span class="line"><span class="built_in">print</span>(s1.difference(s2))</span><br><span class="line"><span class="comment"># &#123;4, 5, 6, 7&#125;</span></span><br><span class="line"><span class="comment"># set()</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="删除集合本身del"><a href="#删除集合本身del" class="headerlink" title="删除集合本身del"></a><strong>删除集合本身del</strong></h5><blockquote><h4 id="直接不存在整个数据结构了"><a href="#直接不存在整个数据结构了" class="headerlink" title="直接不存在整个数据结构了"></a>直接不存在整个数据结构了</h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="keyword">del</span> s1</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;E:\PYTHON\字典.py&quot;, line 272, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     print(s1)</span></span><br><span class="line"><span class="comment">#           ^^</span></span><br><span class="line"><span class="comment"># NameError: name &#x27;s1&#x27; is not defined. Did you mean: &#x27;m1&#x27;?</span></span><br></pre></td></tr></table></figure><h5 id="成员操作同于序列"><a href="#成员操作同于序列" class="headerlink" title="成员操作同于序列"></a>成员操作同于序列</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">in</span> s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><h5 id="集合比较运算"><a href="#集合比较运算" class="headerlink" title="集合比较运算"></a>集合比较运算</h5><table><thead><tr><th>比较运算符</th><th>相关描述</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>比较两个集合是否相等，相等返回True</td></tr><tr><td>！&#x3D;</td><td>比较两个集合是否不相等，不相等返回True</td></tr><tr><td>&lt;</td><td>判断一个集合是否是另一个集合的严格子集</td></tr><tr><td>&lt;&#x3D;</td><td>判断一个集合是否是另一个集合的子集</td></tr><tr><td>&gt;</td><td>判断一个集合是否是另一个集合的严格超集</td></tr><tr><td>&gt;&#x3D;</td><td>判断一个集合是否是另一个集合的超集</td></tr></tbody></table><blockquote><ol><li><h5 id="a是b的子集-》a"><a href="#a是b的子集-》a" class="headerlink" title="a是b的子集&#x3D;》a&lt;&#x3D;b    意思就是a的元素b都有，且b的元素个数大于a的元素个数，但b没有a没有的"></a>a是b的子集&#x3D;》a&lt;&#x3D;b    意思就是a的元素b都有，且b的元素个数大于a的元素个数，但b没有a没有的</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1&lt;s2)</span><br><span class="line"><span class="built_in">print</span>(s1&lt;=s2)</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure></li><li><h5 id="a是b的严格子集，a"><a href="#a是b的严格子集，a" class="headerlink" title="a是b的严格子集，a&lt;b.意思就是a的元素b都有，且b的元素个数大于a的元素个数，但b有a没有的"></a>a是b的严格子集，a&lt;b.意思就是a的元素b都有，且b的元素个数大于a的元素个数，但b有a没有的</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1&lt;s2)</span><br><span class="line"><span class="built_in">print</span>(s1&lt;=s2)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h5><blockquote><ol><li><h5 id="交集运算-得到-两个集合共有的部分-，类型还是集合"><a href="#交集运算-得到-两个集合共有的部分-，类型还是集合" class="headerlink" title="交集运算 &amp; 得到&#x3D;&#x3D;两个集合共有的部分&#x3D;&#x3D;，类型还是集合"></a>交集运算 &amp; 得到&#x3D;&#x3D;两个集合共有的部分&#x3D;&#x3D;，类型还是集合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">s3=s1 &amp; s2</span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="并集运算-得到两个集合并起来的整体，类型还是集合"><a href="#并集运算-得到两个集合并起来的整体，类型还是集合" class="headerlink" title="并集运算 | 得到两个集合并起来的整体，类型还是集合"></a>并集运算 | 得到两个集合并起来的整体，类型还是集合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1 | s2)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="差集运算-得到两个集合元素的减法，类型还是集合"><a href="#差集运算-得到两个集合元素的减法，类型还是集合" class="headerlink" title="差集运算 - 得到两个集合元素的减法，类型还是集合"></a>差集运算 - 得到两个集合元素的减法，类型还是集合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2-s1)</span><br><span class="line"><span class="comment"># &#123;4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="对称差集运算-得到两个集合的并集挖去交集，类型还是集合"><a href="#对称差集运算-得到两个集合的并集挖去交集，类型还是集合" class="headerlink" title="&#x3D;&#x3D;对称差集运算&#x3D;&#x3D; ^ 得到两个集合的并集挖去交集，类型还是集合"></a>&#x3D;&#x3D;对称差集运算&#x3D;&#x3D; ^ 得到两个集合的并集挖去交集，类型还是集合</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1|s2)</span><br><span class="line"><span class="built_in">print</span>(s1&amp;s2)</span><br><span class="line"><span class="built_in">print</span>((s1|s2)-(s1&amp;s2))</span><br><span class="line"><span class="built_in">print</span>(s1^s2)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"><span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># &#123;4, 5, 6&#125;</span></span><br><span class="line"><span class="comment"># &#123;4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="union运算，-相当于并集"><a href="#union运算，-相当于并集" class="headerlink" title="union运算，&#x3D;&#x3D;相当于并集&#x3D;&#x3D;"></a>union运算，&#x3D;&#x3D;相当于并集&#x3D;&#x3D;</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.union((s2)))</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><hr><p><strong>经过.上述对集合的学习，可以总结出集合有如下特点:</strong><br><strong>可以容纳多个数据</strong><br><strong>●</strong><br><strong>可以容纳不同类型的数据(混装)</strong><br><strong>●</strong><br><strong>数据是无序存储的(不支持下标索引)</strong><br><strong>不允许重复数据存在</strong><br><strong>●</strong><br><strong>可以修改(增加或删除元素等)</strong><br><strong>●</strong><br><strong>支持for循环</strong></p><p><strong>不可以用while循环，因为不支持下标索引</strong></p><hr><hr><hr><h4 id="综合回顾"><a href="#综合回顾" class="headerlink" title="综合回顾"></a>综合回顾</h4><h6 id="数据容器分类"><a href="#数据容器分类" class="headerlink" title="数据容器分类"></a>数据容器分类</h6><blockquote><h6 id="数据容器可以从以下视角进行简单的分类"><a href="#数据容器可以从以下视角进行简单的分类" class="headerlink" title="数据容器可以从以下视角进行简单的分类:"></a>数据容器可以从以下视角进行简单的分类:</h6><hr><h6 id="是否支持下标索引"><a href="#是否支持下标索引" class="headerlink" title="是否支持下标索引"></a>是否支持下标索引</h6><h6 id="支持-列表、元组、字符串一序列类型"><a href="#支持-列表、元组、字符串一序列类型" class="headerlink" title="支持:列表、元组、字符串一序列类型"></a>支持:列表、元组、字符串一序列类型</h6><h6 id="不支持-集合、字典-非序列类型"><a href="#不支持-集合、字典-非序列类型" class="headerlink" title="不支持:集合、字典-非序列类型"></a>不支持:集合、字典-非序列类型</h6><hr><h6 id="是否支持重复元素"><a href="#是否支持重复元素" class="headerlink" title="是否支持重复元素:"></a>是否支持重复元素:</h6><h6 id="支持-列表、元组、字符串-序列类型"><a href="#支持-列表、元组、字符串-序列类型" class="headerlink" title="支持:列表、元组、字符串-序列类型,"></a>支持:列表、元组、字符串-序列类型,</h6><h6 id="不支持-集合、字典-非序列类型-1"><a href="#不支持-集合、字典-非序列类型-1" class="headerlink" title="不支持:集合、字典-非序列类型"></a>不支持:集合、字典-非序列类型</h6><hr><h6 id="是否可以修改"><a href="#是否可以修改" class="headerlink" title="是否可以修改"></a>是否可以修改</h6><h6 id="支持-列表、集合、字典"><a href="#支持-列表、集合、字典" class="headerlink" title="支持:列表、集合、字典"></a>支持:列表、集合、字典</h6><h6 id="不支持-元组、字符串"><a href="#不支持-元组、字符串" class="headerlink" title="不支持:元组、字符串"></a>不支持:元组、字符串</h6></blockquote><h6 id="数据特点对比"><a href="#数据特点对比" class="headerlink" title="数据特点对比"></a>数据特点对比</h6><table><thead><tr><th></th><th>列表</th><th>元组</th><th>字符串</th><th>集合</th><th>字典</th></tr></thead><tbody><tr><td>元素数量</td><td>支持多个</td><td>支持多个</td><td>支持多个</td><td>支持多个</td><td>支持多个</td></tr><tr><td>元素类型</td><td>任意</td><td>任意</td><td>仅字符</td><td>任意</td><td>Key: Value  Key:除字典外任意类型  Value:任意类型</td></tr><tr><td>下标索引</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>重复元素</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>可修改性</td><td>支持</td><td>不支持</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>数据有序</td><td>是</td><td>是</td><td>是</td><td>否</td><td>否</td></tr><tr><td>使用场景</td><td>可修改、可重复的一批数据</td><td>不可修改、可重复的一批数据记</td><td>一串字符的记录</td><td>不可重复的数据</td><td>以Key检索Value</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(<span class="string">&quot;dasdasd&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[&#x27;d&#x27;, &#x27;a&#x27;, &#x27;s&#x27;, &#x27;d&#x27;, &#x27;a&#x27;, &#x27;s&#x27;, &#x27;d&#x27;]</span></span><br><span class="line">a=[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))<span class="comment">#&lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------&quot;</span>)</span><br><span class="line">b=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#(1, 2, 3, 5)</span></span><br><span class="line">b=<span class="built_in">tuple</span>(<span class="string">&quot;sdadasd&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#(&#x27;s&#x27;, &#x27;d&#x27;, &#x27;a&#x27;, &#x27;d&#x27;, &#x27;a&#x27;, &#x27;s&#x27;, &#x27;d&#x27;)</span></span><br><span class="line">b=(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))<span class="comment">#</span></span><br><span class="line"><span class="comment">#生成器对象默认是</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))<span class="comment">#&lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line">b=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------&quot;</span>)</span><br><span class="line">c=<span class="built_in">dict</span>(a=<span class="number">1</span>,b=<span class="number">3</span>,c=<span class="number">2</span>)<span class="comment">#&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 3, &#x27;c&#x27;: 2&#125;</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">c=&#123;<span class="string">&quot;1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">l=[(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>)];</span><br><span class="line">c=&#123;x:j <span class="keyword">for</span> x,j <span class="keyword">in</span> l&#125;</span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&#123;&#x27;1&#x27;: 1, &#x27;key2&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line">c=&#123;x:y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="number">11</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&#123;1: 10, 2: 10, 3: 10, 4: 10, 5: 10&#125;</span></span><br></pre></td></tr></table></figure><h4 id="数据结构的通用操作"><a href="#数据结构的通用操作" class="headerlink" title="数据结构的通用操作"></a>数据结构的通用操作</h4><table><thead><tr><th>功能</th><th>描述</th></tr></thead><tbody><tr><td>通用for循环</td><td>遍历容器( 字典是遍历key)</td></tr><tr><td>max</td><td>容器内最大元素</td></tr><tr><td>min()</td><td>容器内最小元素</td></tr><tr><td>len()</td><td>容器元素个数</td></tr><tr><td>list()</td><td>转换为列表</td></tr><tr><td>tuple()</td><td>转换为元组</td></tr><tr><td>str()</td><td>转换为字符串</td></tr><tr><td>set()</td><td>转换为集合</td></tr><tr><td>排序，reverse&#x3D;True表示降序</td><td>sorted(序列，[reverse&#x3D;True])  得到一个排好序的列表  默认是从小到大  没有改变真身</td></tr></tbody></table><hr><blockquote><ol><li><h6 id="都支持遍历操作"><a href="#都支持遍历操作" class="headerlink" title="都支持遍历操作"></a>都支持遍历操作</h6><blockquote><p>首先，在遍历上:<br>●<br>5类数据容器都支持for循环遍历<br>●<br>&#x3D;&#x3D;列表、元组、字符串支持while循环，集合、字典不支持(无法下标索引)&#x3D;&#x3D;<br>尽管遍历的形式各有不同，但是，它们都支持遍历操作。</p></blockquote></li><li><h6 id="通用内置函数"><a href="#通用内置函数" class="headerlink" title="通用内置函数"></a>通用内置函数</h6><blockquote><ol><li><p><strong>len()计算数据容器的长度，也就是元素&#x2F;字符的个数</strong></p></li><li><p><strong>max()寻找数据容器中的最大值</strong></p></li><li><p><strong>min()寻找数据容器中的最小值</strong></p></li><li><h5 id="特殊的字典-返回的是键而不是值"><a href="#特殊的字典-返回的是键而不是值" class="headerlink" title="特殊的字典,返回的是键而不是值"></a>特殊的字典,返回的是键而不是值</h5></li><li><pre><code>b=(1,2,4,6)l=[1,3,5,7,9]k=&#123;&quot;key1&quot;:1,&quot;key2&quot;:3&#125;e=&#123;1,23,4,5,6&#125;print(max(b),max(l),max(k),max(e))# 6 9 key2 23<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 通用转换</span><br><span class="line"></span><br><span class="line">##### list(容器)</span><br><span class="line"></span><br><span class="line">##### 将给定容器转换为列表</span><br><span class="line"></span><br><span class="line">##### str(容器)</span><br><span class="line"></span><br><span class="line">##### 将给定容器转换为字符串</span><br><span class="line"></span><br><span class="line">##### tuple(容器)</span><br><span class="line"></span><br><span class="line">##### 将给定容器转换为元组</span><br><span class="line"></span><br><span class="line">##### set(容器)</span><br><span class="line"></span><br><span class="line">##### 将给定容器转换为集合</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">字典转化为列表，元组，集合都会忽略掉他的value,转为字符串的时候不省略</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">p=&#123;&quot;k1&quot;:1,&quot;k2&quot;:2,&quot;k3&quot;:3&#125;</span><br><span class="line">print(list(p))</span><br><span class="line">print(tuple(p))</span><br><span class="line">print(set(p))</span><br><span class="line">print(f&quot;转为人容易读的字符串&#123;str(p)&#125;&quot;)</span><br><span class="line">print(&quot;转为真正的字符串&quot;,&quot;&quot;.join(p))</span><br><span class="line"># [&#x27;k1&#x27;, &#x27;k2&#x27;, &#x27;k3&#x27;]</span><br><span class="line"># (&#x27;k1&#x27;, &#x27;k2&#x27;, &#x27;k3&#x27;)</span><br><span class="line"># &#123;&#x27;k3&#x27;, &#x27;k1&#x27;, &#x27;k2&#x27;&#125;</span><br><span class="line"># 转为人容易读的字符串&#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 2, &#x27;k3&#x27;: 3&#125;</span><br><span class="line"># 转为真正的字符串 k1k2k3</span><br></pre></td></tr></table></figure></code></pre></li></ol><h5 id="但是将他们转换为真正的字符串的时候要用一个空串的join函数哦"><a href="#但是将他们转换为真正的字符串的时候要用一个空串的join函数哦" class="headerlink" title="但是将他们转换为真正的字符串的时候要用一个空串的join函数哦"></a>但是将他们转换为真正的字符串的时候要用一个空串的join函数哦</h5><h6 id="转化成集合的时候，1去重操作，2顺序打乱"><a href="#转化成集合的时候，1去重操作，2顺序打乱" class="headerlink" title="转化成集合的时候，1去重操作，2顺序打乱"></a>转化成集合的时候，1去重操作，2顺序打乱</h6></blockquote></li><li><h6 id="通用排序功能"><a href="#通用排序功能" class="headerlink" title="通用排序功能"></a>通用排序功能</h6><blockquote><p>sorted(容器，reverse&#x3D;false)</p><p>默认是从小到大,&#x3D;&#x3D;但没有真正改变原本的数据&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p=[<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(p))</span><br><span class="line"><span class="comment"># [1, 2, 5, 7]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(p,reverse=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1, 2, 5, 7]</span></span><br><span class="line"><span class="comment"># [7, 5, 2, 1]</span></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment"># [5, 2, 7, 1]</span></span><br></pre></td></tr></table></figure></blockquote></li></ol></blockquote><h5 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h5><hr><p>按位比较，一位一位的比较，例如ab&gt;aa,ab&gt;a,比较对应的ancii码</p><p>从头到尾一位一位的比较，其中一位大，后面就不用比较了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc&quot;</span>&gt;<span class="string">&quot;abd&quot;</span>)</span><br></pre></td></tr></table></figure><hr><hr><h3 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h3><h4 id="函数和方法的区别"><a href="#函数和方法的区别" class="headerlink" title="函数和方法的区别"></a>函数和方法的区别</h4><blockquote><p>函数直接传入参数就可以使用</p><p>方法需要用.来引用，例如num&#x3D;student.pop(1)</p></blockquote><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p><strong>&#x3D;&#x3D;<code>random.randint(x, y)</code>函数返回一个在闭区间<code>[x, y]</code>内的随机整数，包括<code>x</code>和<code>y</code>在内。&#x3D;&#x3D;</strong></p><blockquote><ol><li><p>提前写好的</p></li><li><p>可以重复使用的</p></li><li><p>把重复性的工作给封装起来 了</p></li><li><p>针对特定功能</p></li><li><p><strong>len()计算数据容器的长度，也就是元素&#x2F;字符的个数</strong></p></li><li><p><strong>max()寻找数据容器中的最大值</strong></p></li><li><p><strong>min()寻找数据容器中的最小值</strong></p></li></ol></blockquote><p>自定义函数</p><h4 id="函数的基础定义语法"><a href="#函数的基础定义语法" class="headerlink" title="函数的基础定义语法"></a>函数的基础定义语法</h4><blockquote><p>def 函数名字(参数1，参数…..):</p><pre><code>函数体</code></pre><p>return 返回值</p><p>函数定义里面的x，y是&#x3D;&#x3D;形参&#x3D;&#x3D;，函数调用时候传入的为&#x3D;&#x3D;实参&#x3D;&#x3D;</p><p>多个参数用，隔开</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myf1</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span>+y*<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myf1(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 8</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myf</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是大帅逼&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    myf()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br></pre></td></tr></table></figure><blockquote><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="&#x3D;&#x3D;注意事项&#x3D;&#x3D;"></a>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</h6><ol><li>如果没有参数就省略</li><li>返回值不需要也可以省略</li><li>函数必须先定义再使用</li></ol></blockquote><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><p><em><strong>没有返回值的函数实际上返回了NONE</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result=myf()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">result=myf1(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># 8</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><h6 id="函数可以返回一个值或多个值。在函数中使用return语句后，-函数将会立即停止执行-，并将指定的值返回给调用者。如果没有使用return语句，函数将默认返回None。"><a href="#函数可以返回一个值或多个值。在函数中使用return语句后，-函数将会立即停止执行-，并将指定的值返回给调用者。如果没有使用return语句，函数将默认返回None。" class="headerlink" title="函数可以返回一个值或多个值。在函数中使用return语句后，&#x3D;&#x3D;函数将会立即停止执行&#x3D;&#x3D;，并将指定的值返回给调用者。如果没有使用return语句，函数将默认返回None。"></a>函数可以返回一个值或多个值。在函数中使用<code>return</code>语句后，&#x3D;&#x3D;函数将会立即停止执行&#x3D;&#x3D;，并将指定的值返回给调用者。如果没有使用<code>return</code>语句，函数将默认返回<code>None</code>。</h6></li><li><p><strong>函数&#x3D;&#x3D;可以返回任意类型的值&#x3D;&#x3D;，包括整数、浮点数、字符串、列表、字典、元组等。</strong></p></li><li><p>如果函数返回多个值，可以使用元组、列表或字典等数据结构来存储这些值，并一起返回。</p></li><li><p>可以使用函数的返回值来赋值给一个变量，或者作为另一个函数的参数。</p></li><li><p>如果函数没有返回值，即没有使用<code>return</code>语句，或者<code>return</code>语句没有指定返回值，则函数默认返回<code>None</code>。</p></li><li><p>可以使用<code>return</code>语句提前结束函数的执行，并返回指定的值。</p></li><li><p>如果函数没有返回值，可以省略<code>return</code>语句。</p></li></ol></blockquote><h4 id="函数的说明文档（帮助理解自己的函数）"><a href="#函数的说明文档（帮助理解自己的函数）" class="headerlink" title="函数的说明文档（帮助理解自己的函数）"></a>函数的说明文档（帮助理解自己的函数）</h4><blockquote><ol><li><p>‘’‘回车自动弹出</p></li><li><p>用于解释函数</p></li><li><p>鼠标放在函数上的时候会现实相关的说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myf1</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    第一个参数*2+第二个参数*3 的和</span></span><br><span class="line"><span class="string">    :param x:第一额加的数</span></span><br><span class="line"><span class="string">    :param y:第二个加的数</span></span><br><span class="line"><span class="string">    :return:返回值是运算结果</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span>+y*<span class="number">3</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h4><p>一个函数里用另一个函数的方法</p><p>直接运用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------1------&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------2-------&quot;</span>)</span><br><span class="line">    fun1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------3---------&quot;</span>)</span><br><span class="line">fun2()</span><br><span class="line"><span class="comment"># --------2-------</span></span><br><span class="line"><span class="comment"># ------1------</span></span><br><span class="line"><span class="comment"># --------3---------</span></span><br></pre></td></tr></table></figure><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="&#x3D;&#x3D;变量的作用域&#x3D;&#x3D;"></a>&#x3D;&#x3D;变量的作用域&#x3D;&#x3D;</h4><blockquote><h6 id="python中并不是所有的语句块都会产生作用域，只有在函数，类中定义的语句块，才会产生作用域。"><a href="#python中并不是所有的语句块都会产生作用域，只有在函数，类中定义的语句块，才会产生作用域。" class="headerlink" title="&#x3D;&#x3D;python中并不是所有的语句块都会产生作用域，只有在函数，类中定义的语句块，才会产生作用域。&#x3D;&#x3D;"></a>&#x3D;&#x3D;python中并不是所有的语句块都会产生作用域，只有在函数，类中定义的语句块，才会产生作用域。&#x3D;&#x3D;</h6><h6 id="在if-else，for，while，等关键字里面定义的语句块并不会擦还是你哼作用域，仍然创建的是全局变量"><a href="#在if-else，for，while，等关键字里面定义的语句块并不会擦还是你哼作用域，仍然创建的是全局变量" class="headerlink" title="&#x3D;&#x3D;在if-else，for，while，等关键字里面定义的语句块并不会擦还是你哼作用域，仍然创建的是全局变量&#x3D;&#x3D;"></a>&#x3D;&#x3D;在if-else，for，while，等关键字里面定义的语句块并不会擦还是你哼作用域，仍然创建的是全局变量&#x3D;&#x3D;</h6></blockquote><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><p>在函数内部定义的，只能在函数返回内使用</p><p>函数执行完毕后局部变量就被销毁了</p><p>全局变量，在函数体内体外都可以使用的变量</p><p>就算同名也不一样</p><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>***&#x3D;&#x3D;global关键字把在函数内部声明的变量变成全局变量&#x3D;&#x3D;***，外面没有的话就创建一个全局变量，外边有的话，二者就为同一个全局变量。</p><p>在Python中，&#x3D;&#x3D;函数内部默认情况下只能访问局部范围内的变量&#x3D;&#x3D;。要在函数内部使用外部变量，需要使用<code>global</code>关键字将其声明为全局变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a=100</span><br><span class="line">def fun3():</span><br><span class="line">    a+=100</span><br><span class="line">    print(f&quot;我现在是&#123;a&#125;&quot;)</span><br><span class="line"></span><br><span class="line">fun3()</span><br><span class="line">#直接报错</span><br><span class="line"># Traceback (most recent call last):</span><br><span class="line">#   File &quot;E:\PYTHON\函数.py&quot;, line 62, in &lt;module&gt;</span><br><span class="line">#     fun3()</span><br><span class="line">#   File &quot;E:\PYTHON\函数.py&quot;, line 59, in fun3</span><br><span class="line">#     a+=100</span><br><span class="line">#     ^</span><br><span class="line"># UnboundLocalError: cannot access local variable &#x27;a&#x27; where it is not associated with a value</span><br></pre></td></tr></table></figure><p>用了global关键字后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    <span class="comment">#==global使用的时候不能初始化，也就是说只能声明==</span></span><br><span class="line">    a+=<span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;我现在是<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">fun3()</span><br><span class="line"><span class="comment"># 我现在是200</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事项</p><ol><li>&#x3D;&#x3D;global使用的时候不能初始化，也就是说只能声明&#x3D;&#x3D;</li><li>定义：定义是指在程序中为变量分配内存空间，并为其分配一个唯一的标识符（即变量名）。定义变量时，编译器会为其分配内存空间，以便在程序执行期间存储和操作数据。</li><li>声明：声明是指在程序中引入变量的标识符，以便在后续的代码中使用该变量。声明变量时，编译器会告诉程序变量的数据类型和名称，但不会为其分配内存空间。因此，在声明变量之后，变量是不可用的。</li><li>初始化：初始化是指在声明变量的同时为其赋予一个初始值。初始化变量时，编译器会为其分配内存空间，并将初始值存储在该内存空间中。初始化变量可以在声明时进行，也可以在稍后的代码中进行。</li></ol></blockquote><h4 id="综合案例-1"><a href="#综合案例-1" class="headerlink" title="综合案例"></a>综合案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">money=<span class="number">120</span></span><br><span class="line">name=<span class="string">&quot;猫饼&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1\t查询余额函数\n&quot;</span><span class="string">&quot;2\t存款函数\n&quot;</span><span class="string">&quot;3\t取款函数\n&quot;</span><span class="string">&quot;4\t主菜单函数&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcsearch</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;您现在的余额为<span class="subst">&#123;money&#125;</span>元&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funccunkuan</span>():</span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;你要存多少？&quot;</span>))</span><br><span class="line">    money+=a</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcqukuan</span>():</span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;你要取多少？&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> a&lt;=money:</span><br><span class="line">        money-=a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>你特么有多少你没点b数？&quot;</span>)</span><br><span class="line">name=<span class="built_in">input</span>(<span class="string">&quot;请输入你姓名&quot;</span>)</span><br><span class="line"><span class="comment"># menu()</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    menu()</span><br><span class="line">    p=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;您要干神马？&quot;</span>))</span><br><span class="line">    <span class="comment"># print(p)</span></span><br><span class="line">    <span class="keyword">if</span> p==<span class="number">1</span>:</span><br><span class="line">        funcsearch()</span><br><span class="line">    <span class="keyword">elif</span> p==<span class="number">2</span>:</span><br><span class="line">        funccunkuan()</span><br><span class="line">        funcsearch()</span><br><span class="line">    <span class="keyword">elif</span> p==<span class="number">3</span>:</span><br><span class="line">        funcqukuan()</span><br><span class="line">        funcsearch()</span><br><span class="line">    <span class="keyword">elif</span> p==<span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; 1 查询余额函数\n&quot;</span>, <span class="string">&quot;2 存款函数\n&quot;</span>, <span class="string">&quot;3 取款函数\n&quot;</span>, <span class="string">&quot;4 主菜单函数&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> p==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;谢谢你使用牛马ATM自助存取一体机&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="python函数进阶"><a href="#python函数进阶" class="headerlink" title="python函数进阶"></a>python函数进阶</h3><h5 id="函数有多个返回值"><a href="#函数有多个返回值" class="headerlink" title="函数有多个返回值,"></a>函数有多个返回值,</h5><blockquote><h5 id="函数有多个返回值-—对应多个变量来接受它。变量之间用，隔开，而且可以是不同的数据类型-。如果直接返回的话，得到对应的元组"><a href="#函数有多个返回值-—对应多个变量来接受它。变量之间用，隔开，而且可以是不同的数据类型-。如果直接返回的话，得到对应的元组" class="headerlink" title="函数有多个返回值,—对应多个变量来接受它。变量之间用，隔开，而且可以是不同的数据类型.。如果直接返回的话，得到对应的元组"></a>函数有多个返回值,—对应多个变量来接受它。变量之间用，隔开，而且可以是不同的数据类型.。如果直接返回的话，得到对应的元组</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">x,y=func()</span><br><span class="line"><span class="built_in">print</span>(x,y)</span><br><span class="line"><span class="comment"># 1 2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">True</span></span><br><span class="line">a,b,c=func1()</span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"><span class="built_in">print</span>(func1())</span><br><span class="line"><span class="comment"># 1 hello True</span></span><br><span class="line"><span class="comment"># (1, &#x27;hello&#x27;, True)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(func1()))</span><br><span class="line"><span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="位置参数和关键字参数"><a href="#位置参数和关键字参数" class="headerlink" title="位置参数和关键字参数"></a>位置参数和关键字参数</h5><p><strong>位置参数就默认的，需要严格的对应。</strong></p><p><strong>关键字参数键值对的形式，更加清晰。原始的情况需要严格对应。混合使用的时候，位置参数必须在前面。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------位置参数----------------&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">x,y,z</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line"><span class="built_in">print</span>(func3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------关键字参数----------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(func3(x=<span class="number">1</span>,y=<span class="number">2</span>,z=<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><blockquote><h5 id="在函数定义的时候就给形参一个默认的赋值，以后调用函数的时候，如果不给默认参数对应的实参，就用默认参数，如果给了就用实参。"><a href="#在函数定义的时候就给形参一个默认的赋值，以后调用函数的时候，如果不给默认参数对应的实参，就用默认参数，如果给了就用实参。" class="headerlink" title="在函数定义的时候就给形参一个默认的赋值，以后调用函数的时候，如果不给默认参数对应的实参，就用默认参数，如果给了就用实参。"></a>在函数定义的时候就给形参一个默认的赋值，以后调用函数的时候，如果不给默认参数对应的实参，就用默认参数，如果给了就用实参。</h5><hr><h5 id="默认参数需要写在形参的最后"><a href="#默认参数需要写在形参的最后" class="headerlink" title="默认参数需要写在形参的最后"></a>默认参数需要写在形参的最后</h5><h6 id="否则就会报错"><a href="#否则就会报错" class="headerlink" title="否则就会报错"></a>否则就会报错</h6><h5 id="SyntaxError-non-default-argument-follows-default-argument"><a href="#SyntaxError-non-default-argument-follows-default-argument" class="headerlink" title="SyntaxError: non-default argument follows default argument"></a>SyntaxError: non-default argument follows default argument</h5></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">x,y,z=<span class="number">9</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line"><span class="built_in">print</span>(func3(x=<span class="number">1</span>,y=<span class="number">2</span>,z=<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(func3(x=<span class="number">1</span>,y=<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 12</span></span><br></pre></td></tr></table></figure><h5 id="位置不定长—元组"><a href="#位置不定长—元组" class="headerlink" title="位置不定长—元组"></a>位置不定长—元组</h5><p>传入时候的参数数量是不受限制的</p><p>*<strong>标记一个形参， 以元组的形式接受实参</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funcc</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;args的类型是<span class="subst">&#123;<span class="built_in">type</span>(args)&#125;</span>,值是<span class="subst">&#123;args&#125;</span>&quot;</span>)</span><br><span class="line">funcc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line"><span class="comment"># args的类型是&lt;class &#x27;tuple&#x27;&gt;,值是(1, 2, 3, &#x27;小明&#x27;)</span></span><br></pre></td></tr></table></figure><h5 id="关键字不定长—字典"><a href="#关键字不定长—字典" class="headerlink" title="关键字不定长—字典"></a>关键字不定长—字典</h5><p>传入时候的参数数量是不受限制的</p><p><strong>标记一个形参，以字典的形式接受实参</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funccc</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;kwargs的类型是<span class="subst">&#123;<span class="built_in">type</span>(kwargs)&#125;</span>,值是<span class="subst">&#123;kwargs&#125;</span>&quot;</span>)</span><br><span class="line">funccc(key1=<span class="number">1</span>,key2=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># kwargs的类型是&lt;class &#x27;dict&#x27;&gt;,值是&#123;&#x27;key1&#x27;: 1, &#x27;key2&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure><h5 id="函数作为参数传递（计算逻辑的传递）"><a href="#函数作为参数传递（计算逻辑的传递）" class="headerlink" title="函数作为参数传递（计算逻辑的传递）"></a>函数作为参数传递（计算逻辑的传递）</h5><p><strong>函数名作为传递的方式</strong></p><p><strong>形参和实参没有强制一致</strong></p><p><em>数据是确定的，计算逻辑是可变的。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line">a=<span class="number">19</span>;b=<span class="number">20</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">computee</span>):</span><br><span class="line">    result=compute(a,b)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="built_in">print</span>(compute(a,b))</span><br><span class="line"><span class="built_in">print</span>(text(compute(<span class="number">9</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="comment"># 39</span></span><br><span class="line"><span class="comment"># 40</span></span><br></pre></td></tr></table></figure><p>二者的区别</p><blockquote><h5 id="普通的函数def-add-x-y"><a href="#普通的函数def-add-x-y" class="headerlink" title="普通的函数def add(x,y):"></a>普通的函数def add(x,y):</h5><h5 id="return-x-y"><a href="#return-x-y" class="headerlink" title="return x+y"></a>return x+y</h5><h5 id="传入的是数据，确定的是代码的执行逻辑，不确定的是数据"><a href="#传入的是数据，确定的是代码的执行逻辑，不确定的是数据" class="headerlink" title="传入的是数据，确定的是代码的执行逻辑，不确定的是数据"></a>传入的是数据，确定的是代码的执行逻辑，不确定的是数据</h5><h5 id="函数作为函数的参数-def-func-add"><a href="#函数作为函数的参数-def-func-add" class="headerlink" title="函数作为函数的参数  def func(add):"></a>函数作为函数的参数  def func(add):</h5><h5 id="result-add-1-2"><a href="#result-add-1-2" class="headerlink" title="result&#x3D;add(1,2)"></a>result&#x3D;add(1,2)</h5><h5 id="return-result"><a href="#return-result" class="headerlink" title="return result"></a>return result</h5><h5 id="传入的是函数的代码执行-逻辑，确定的是数据，不确定的是代码的执行逻辑"><a href="#传入的是函数的代码执行-逻辑，确定的是数据，不确定的是代码的执行逻辑" class="headerlink" title="传入的是函数的代码执行 逻辑，确定的是数据，不确定的是代码的执行逻辑"></a>传入的是函数的代码执行 逻辑，确定的是数据，不确定的是代码的执行逻辑</h5></blockquote><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><p>def定义带有名称的函数</p><p>lambda定义匿名函数</p><p><strong>lambda x,y:x+y</strong></p><p><strong>有名称的可以基于名称重复使用</strong></p><p><strong>匿名函数，只可以临时使用一次</strong></p><p>&#x3D;&#x3D;<strong>自带返回return功能</strong>&#x3D;&#x3D;</p><p><strong>匿名函数的函数体只能写一行，无法写多行代码，且参数不带括号</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line">a=<span class="number">19</span>;b=<span class="number">20</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">computee</span>):</span><br><span class="line">    result=compute(a,b)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="built_in">print</span>(text(<span class="keyword">lambda</span> x,y:x+y))</span><br><span class="line"><span class="comment"># 39</span></span><br></pre></td></tr></table></figure><h3 id="文件的操作"><a href="#文件的操作" class="headerlink" title="文件的操作"></a>文件的操作</h3><h5 id="文件的编码"><a href="#文件的编码" class="headerlink" title="文件的编码"></a>文件的编码</h5><blockquote><h5 id="翻译的规则，如何将内容翻译为二进制，然后电脑使用的时候再翻译为文本就ok了"><a href="#翻译的规则，如何将内容翻译为二进制，然后电脑使用的时候再翻译为文本就ok了" class="headerlink" title="翻译的规则，如何将内容翻译为二进制，然后电脑使用的时候再翻译为文本就ok了"></a>翻译的规则，如何将内容翻译为二进制，然后电脑使用的时候再翻译为文本就ok了</h5><h6 id="utf-8-逐渐通用"><a href="#utf-8-逐渐通用" class="headerlink" title="utf-8,逐渐通用"></a>utf-8,逐渐通用</h6><p>gbk</p><p>big5等等</p><p>不同的编码格式会翻译不同的结果</p><h5 id="我喜欢你-我讨厌你……"><a href="#我喜欢你-我讨厌你……" class="headerlink" title="我喜欢你-&gt;我讨厌你……."></a>我喜欢你-&gt;我讨厌你…….</h5></blockquote><hr><h5 id="文件的打开-读取操作"><a href="#文件的打开-读取操作" class="headerlink" title="文件的打开-读取操作"></a>文件的打开-读取操作</h5><p>默认都把\n也读进来了</p><p><strong>没有这个文件的时候就报错</strong></p><p>&#x3D;&#x3D;如果没有这个文件在异常捕获的时候会返回一个none，if语句会把none当作false看作&#x3D;&#x3D;★★★★★★★★</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_file_info</span>(<span class="params">file_name</span>):</span><br><span class="line">    f=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f=<span class="built_in">open</span>(file_name,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> reason:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文件tm打不开啊&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(f.read())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># print(f)</span></span><br><span class="line">        <span class="keyword">if</span> f:</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打开文件&quot;</span>)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><h5 id="文件对象-read（num）方法-num代表的是要读取的长度单位是字节-没有传入就默认读取全部数据，-以字符串返回"><a href="#文件对象-read（num）方法-num代表的是要读取的长度单位是字节-没有传入就默认读取全部数据，-以字符串返回" class="headerlink" title="文件对象.read（num）方法,num代表的是要读取的长度单位是字节,没有传入就默认读取全部数据，&#x3D;&#x3D;以字符串返回&#x3D;&#x3D;"></a>文件对象.read（num）方法,num代表的是要读取的长度单位是字节,没有传入就默认读取全部数据，&#x3D;&#x3D;以字符串返回&#x3D;&#x3D;</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打开文件&quot;</span>)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span></span><br><span class="line"><span class="comment"># print(f.read())</span></span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 哈利大苏打阿达阿松大 |第一次读到这里，第二次继续读</span></span><br><span class="line"><span class="comment"># 啊啊</span></span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br></pre></td></tr></table></figure></li><li><h6 id="文件对象-readlines（）方法，读取全部行并且封装到列表中返回-以列表返回"><a href="#文件对象-readlines（）方法，读取全部行并且封装到列表中返回-以列表返回" class="headerlink" title="文件对象.readlines（）方法，读取全部行并且封装到列表中返回  &#x3D;&#x3D;以列表返回&#x3D;&#x3D;"></a>文件对象.readlines（）方法，读取全部行并且封装到列表中返回  &#x3D;&#x3D;以列表返回&#x3D;&#x3D;</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;打开文件&quot;)</span><br><span class="line">f=open(&quot;./1.txt&quot;,&quot;r&quot;,encoding=&quot;UTF-8&quot;)</span><br><span class="line">print(type(f))</span><br><span class="line"># 打开文件</span><br><span class="line"># &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span><br><span class="line">print(f.readlines())</span><br><span class="line"># [&#x27;哈利大苏打阿达阿松大啊啊\n&#x27;, &#x27;dadasdasdasdsad&#x27;]</span><br></pre></td></tr></table></figure></li><li><h6 id="文件对象-readline（num）方法，读取一行的内容，返回字符串-以字符串返回"><a href="#文件对象-readline（num）方法，读取一行的内容，返回字符串-以字符串返回" class="headerlink" title="文件对象.readline（num）方法，读取一行的内容，返回字符串   &#x3D;&#x3D;以字符串返回&#x3D;&#x3D;"></a>文件对象.readline（num）方法，读取一行的内容，返回字符串   &#x3D;&#x3D;以字符串返回&#x3D;&#x3D;</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打开文件&quot;</span>)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(f.readline())</span><br><span class="line"><span class="comment"># 哈利大苏打阿达阿松大啊啊</span></span><br></pre></td></tr></table></figure></li><li><h5 id="for循环方法读取-以字符串返回"><a href="#for循环方法读取-以字符串返回" class="headerlink" title="for循环方法读取   &#x3D;&#x3D;以字符串返回&#x3D;&#x3D;"></a>for循环方法读取   &#x3D;&#x3D;以字符串返回&#x3D;&#x3D;</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打开文件&quot;</span>)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># 哈利大苏打阿达阿松大啊啊</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># dadasdasdasdsad</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><hr><blockquote><h5 id="文件对象-close-关闭文件，取消对文件的占用。"><a href="#文件对象-close-关闭文件，取消对文件的占用。" class="headerlink" title="文件对象.close(),关闭文件，取消对文件的占用。"></a>文件对象.close(),关闭文件，取消对文件的占用。</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure></blockquote><h5 id="with-open语法★★★★★"><a href="#with-open语法★★★★★" class="headerlink" title="with-open语法★★★★★"></a>with-open语法★★★★★</h5><blockquote><h5 id="对文件的操作完成后，会自动的把文件给close掉"><a href="#对文件的操作完成后，会自动的把文件给close掉" class="headerlink" title="对文件的操作完成后，会自动的把文件给close掉"></a>对文件的操作完成后，会自动的把文件给close掉</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打开文件&quot;</span>)</span><br><span class="line"><span class="comment"># f=open(&quot;./1.txt&quot;,&quot;r&quot;,encoding=&quot;UTF-8&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf=8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> <span class="built_in">print</span>(f.readlines())</span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="comment">#关闭后的文件是不能再读取的</span></span><br><span class="line"><span class="comment"># [&#x27;哈利大苏打阿达阿松大啊啊\n&#x27;, &#x27;dadasdasdasdsad&#x27;]</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;e:\Bluecode\code\python\code\文件的操作.py&quot;, line 6, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     print(f.read())</span></span><br><span class="line"><span class="comment">#           ^^^^^^^^</span></span><br><span class="line"><span class="comment"># ValueError: I/O operation on closed file.</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="文件的写操作"><a href="#文件的写操作" class="headerlink" title="文件的写操作"></a>文件的写操作</h5><blockquote><p>write()方法，文件写入，并没有真正的写入硬盘上，仅写在内存的某一个区域中，也就是缓冲区。</p><h6 id="直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中"><a href="#直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中" class="headerlink" title="直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中"></a>直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中</h6><h6 id="避免频繁的操作硬盘"><a href="#避免频繁的操作硬盘" class="headerlink" title="避免频繁的操作硬盘"></a>避免频繁的操作硬盘</h6><p>flush（）方法，内容刷新，</p><hr><h6 id="使用w操作，如果这个文件存在，就覆盖原来的内容，如果文件不存在，就创建一个"><a href="#使用w操作，如果这个文件存在，就覆盖原来的内容，如果文件不存在，就创建一个" class="headerlink" title="使用w操作，如果这个文件存在，就覆盖原来的内容，如果文件不存在，就创建一个"></a>使用w操作，如果这个文件存在，就覆盖原来的内容，如果文件不存在，就创建一个</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;./2.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;我去&quot;</span>)</span><br><span class="line">f.flush()</span><br><span class="line"><span class="comment"># 我去</span></span><br></pre></td></tr></table></figure><h6 id="直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中-1"><a href="#直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中-1" class="headerlink" title="直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中"></a>直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./2.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> f.write(<span class="string">&quot;你好啊&quot;</span>)</span><br><span class="line"><span class="comment"># 你好啊</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="文件的追加"><a href="#文件的追加" class="headerlink" title="文件的追加"></a>文件的追加</h5><p>和文件的w操作类似，&#x3D;&#x3D;只不过如果文件存在的话会在后面追加内容，不会覆盖。&#x3D;&#x3D;</p><p><strong>直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中</strong></p><p>&#x3D;&#x3D;如果要换行加\n&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#运行三次后</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./3.txt&quot;</span>,<span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;这是追加模式&quot;</span>)</span><br><span class="line"><span class="comment"># 这是追加模式这是追加模式这是追加模式</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h5 id="文件操作综合案例"><a href="#文件操作综合案例" class="headerlink" title="文件操作综合案例"></a>文件操作综合案例</h5><blockquote><h5 id="1读取文件并查单词个数"><a href="#1读取文件并查单词个数" class="headerlink" title="1读取文件并查单词个数"></a>1读取文件并查单词个数</h5></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        k=line.strip()</span><br><span class="line">        w=k.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(w)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(k,end=&quot; &quot;)</span></span><br><span class="line">        <span class="comment"># print(w)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> w:</span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">&quot;the&quot;</span>:</span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;the出现的次数是<span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># print(f.readlines())</span></span><br><span class="line">    k=f.read()</span><br><span class="line"><span class="comment"># print(k)</span></span><br><span class="line">p=k.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line"><span class="comment"># print(type(k))    </span></span><br><span class="line"><span class="built_in">print</span>(p.count(<span class="string">&quot;the&quot;</span>))</span><br></pre></td></tr></table></figure><blockquote><h5 id="2-读取文件，筛选部分写入文件"><a href="#2-读取文件，筛选部分写入文件" class="headerlink" title="2 读取文件，筛选部分写入文件"></a>2 读取文件，筛选部分写入文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./bill.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">  <span class="comment"># print(line)</span></span><br><span class="line">  line.strip()</span><br><span class="line">  <span class="comment"># print(line,end=&quot;&quot;)</span></span><br><span class="line">  <span class="keyword">if</span> <span class="string">&quot;测试&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> line:</span><br><span class="line">      g=<span class="built_in">open</span>(<span class="string">&quot;./bill副本.txt&quot;</span>,<span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">      g.write(<span class="string">f&quot;<span class="subst">&#123;line&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># name,date,money,type,remarks</span></span><br><span class="line"><span class="comment"># 周杰轮,2022-01-01,100000,消费,正式</span></span><br><span class="line"><span class="comment"># 周杰轮,2022-01-02,300000,收入,正式</span></span><br><span class="line"><span class="comment"># 林俊节,2022-01-01,300000,收入,正式</span></span><br><span class="line"><span class="comment"># 林俊节,2022-01-03,100000,消费,正式</span></span><br><span class="line"><span class="comment"># 林俊节,2022-01-05,500000,收入,正式</span></span><br><span class="line"><span class="comment"># 张学油,2022-01-01,100000,消费,正式</span></span><br><span class="line"><span class="comment"># 张学油,2022-01-02,500000,收入,正式</span></span><br><span class="line"><span class="comment"># 王力鸿,2022-01-01,500000,消费,正式</span></span><br><span class="line"><span class="comment"># 王力鸿,2022-01-03,950000,收入,正式</span></span><br><span class="line"><span class="comment"># 刘德滑,2022-01-02,100000,消费,正式</span></span><br><span class="line"><span class="comment"># 刘德滑,2022-01-03,300000,消费,正式</span></span><br></pre></td></tr></table></figure><h6 id="3删除目标数据，切片操作"><a href="#3删除目标数据，切片操作" class="headerlink" title="3删除目标数据，切片操作"></a>3删除目标数据，切片操作</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;E:\PYTHON\code\啊.tax&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">data=f.read()</span><br><span class="line">data=data.replace(<span class="string">&quot;删掉我，&quot;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">data=data[:-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># 删掉我，</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 大撒大撒</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># dsadasdasdasdasdasd)&#125;</span></span><br><span class="line"><span class="comment"># 大撒大撒</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># dsadasdasdasdasdasd</span></span><br></pre></td></tr></table></figure></blockquote><hr><h3 id="异常BUG"><a href="#异常BUG" class="headerlink" title="异常BUG"></a>异常BUG</h3><h4 id="了解异常"><a href="#了解异常" class="headerlink" title="了解异常"></a>了解异常</h4><blockquote><h6 id="python解释器遇到一个错误，就会停止程序的执行，并演示一些错误信息。通过了解常见的异常类型，方便检查错误。"><a href="#python解释器遇到一个错误，就会停止程序的执行，并演示一些错误信息。通过了解常见的异常类型，方便检查错误。" class="headerlink" title="python解释器遇到一个错误，就会停止程序的执行，并演示一些错误信息。通过了解常见的异常类型，方便检查错误。"></a>python解释器遇到一个错误，就会停止程序的执行，并演示一些错误信息。通过了解常见的异常类型，方便检查错误。</h6></blockquote><h4 id="为什么要捕获异常"><a href="#为什么要捕获异常" class="headerlink" title="为什么要捕获异常"></a>为什么要捕获异常</h4><p><strong>当程序遇到了bug，有两种选择</strong>，后者才是想要的 </p><blockquote><ol><li><h6 id="整个程序直接停止运行"><a href="#整个程序直接停止运行" class="headerlink" title="整个程序直接停止运行"></a>整个程序直接停止运行</h6></li><li><h6 id="对bug进行提醒，整个程序继续运行"><a href="#对bug进行提醒，整个程序继续运行" class="headerlink" title="&#x3D;&#x3D;对bug进行提醒，整个程序继续运行&#x3D;&#x3D;"></a>&#x3D;&#x3D;对bug进行提醒，整个程序继续运行&#x3D;&#x3D;</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数&quot;</span>))</span><br><span class="line">    result=<span class="number">8</span>/a</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出错了草&quot;</span>,<span class="built_in">str</span>(reason))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误%s&quot;</span>%<span class="built_in">str</span>(reason))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哎嘿&quot;</span>)</span><br><span class="line"><span class="comment"># 请输入一个数0</span></span><br><span class="line"><span class="comment"># 未知错误division by zero</span></span><br><span class="line"><span class="comment"># 哎嘿</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="常见的异常"><a href="#常见的异常" class="headerlink" title="常见的异常"></a>常见的异常</h4><blockquote><ol><li>assertionError assert后面的条件为假的时候就会抛出异常</li><li>attributeError 尝试访问未知的对象属性</li><li>indexError 索引超出序列范围</li><li>keyError 字典中找一个不存在的关键字</li><li>osError 操作系统产生的异常</li><li>nameError 尝试访问一个不存在的变量</li><li>syntaxError python语法错误</li><li>typeError 不同类型之间的无效操作</li><li>zerodivisionError 除数为0的时候</li></ol></blockquote><h4 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h4><h6 id="捕获指定的异常"><a href="#捕获指定的异常" class="headerlink" title="捕获指定的异常"></a><em><strong>捕获指定的异常</strong></em></h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">检测范围</span><br><span class="line">except Exception[as reason]</span><br><span class="line">出现异常后的处理代码</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./4.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出错了草&quot;</span>,<span class="built_in">str</span>(reason))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#出错了草 [Errno 2] No such file or directory: &#x27;./4.txt&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="捕获多种类型异常"><a href="#捕获多种类型异常" class="headerlink" title="捕获多种类型异常"></a>捕获多种类型异常</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">检测范围</span><br><span class="line">except Exception1[as reason]</span><br><span class="line">出现异常后的处理代码</span><br><span class="line">except Exception2[as reason]</span><br><span class="line">出现异常后的处理代码</span><br><span class="line">except Exception3[as reason]</span><br><span class="line">出现异常后的处理代码</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">except (NameError,zerodivisionerroe) as e:</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./4.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出错了草&quot;</span>,<span class="built_in">str</span>(reason))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#顶级的捕获方式-----1</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数&quot;</span>))</span><br><span class="line">    result=<span class="number">8</span>/a</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;好像出错了啊&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哎嘿&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#等价于------捕获全部的异常------2  顶级异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误%s&quot;</span>%result)</span><br><span class="line"><span class="comment"># 请输入一个数0</span></span><br><span class="line"><span class="comment"># 好像出错了啊</span></span><br><span class="line"><span class="comment"># 哎嘿</span></span><br></pre></td></tr></table></figure><h4 id="配合else使用–-可选"><a href="#配合else使用–-可选" class="headerlink" title="配合else使用–(可选)"></a>配合else使用–(可选)</h4><p><strong>也就是没有异常就执行else后面的语句</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数&quot;</span>))</span><br><span class="line">    result=<span class="number">8</span>/a</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;好像出错了啊&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有异常啊&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哎嘿&quot;</span>)</span><br><span class="line"><span class="comment"># 请输入一个数9</span></span><br><span class="line"><span class="comment"># 0.8888888888888888</span></span><br><span class="line"><span class="comment"># 没有异常啊</span></span><br><span class="line"><span class="comment"># 哎嘿</span></span><br></pre></td></tr></table></figure><h4 id="异常的finally–-可选"><a href="#异常的finally–-可选" class="headerlink" title="异常的finally–(可选)"></a>异常的finally–(可选)</h4><p><strong>就是有没有异常，都要执行这句话了。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数&quot;</span>))</span><br><span class="line">    result=<span class="number">8</span>/a</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;好像出错了啊&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有异常啊&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无所谓，有没有异常我都要执行&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哎嘿&quot;</span>)</span><br><span class="line"><span class="comment"># 请输入一个数0</span></span><br><span class="line"><span class="comment"># 好像出错了啊</span></span><br><span class="line"><span class="comment"># 无所谓，有没有异常我都要执行</span></span><br><span class="line"><span class="comment"># 哎嘿</span></span><br></pre></td></tr></table></figure><h4 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h4><p>一层一层的向上传递，如果最高层级调用了异常就抛出。</p><blockquote><h5 id="没有捕获的时候，从出现异常的位置开始往外冒"><a href="#没有捕获的时候，从出现异常的位置开始往外冒" class="headerlink" title="没有捕获的时候，从出现异常的位置开始往外冒"></a>没有捕获的时候，从出现异常的位置开始往外冒</h5></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1开始&quot;</span>)</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1结束&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2开始&quot;</span>)</span><br><span class="line">    func1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2结束&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">     func2()</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># func2开始</span></span><br><span class="line"><span class="comment"># func1开始</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;e:\Bluecode\code\python\code\异常的传递.py&quot;, line 13, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     func2()</span></span><br><span class="line"><span class="comment">#   File &quot;e:\Bluecode\code\python\code\异常的传递.py&quot;, line 7, in func2</span></span><br><span class="line"><span class="comment">#     func1()</span></span><br><span class="line"><span class="comment">#   File &quot;e:\Bluecode\code\python\code\异常的传递.py&quot;, line 3, in func1</span></span><br><span class="line"><span class="comment">#     1/0</span></span><br><span class="line"><span class="comment">#     ~^~</span></span><br><span class="line"><span class="comment"># ZeroDivisionError: division by zero</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="当最高级有捕获的时候"><a href="#当最高级有捕获的时候" class="headerlink" title="当最高级有捕获的时候"></a>当最高级有捕获的时候</h5></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1开始&quot;</span>)</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1结束&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2开始&quot;</span>)</span><br><span class="line">    func1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2结束&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        func2()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> op:</span><br><span class="line">        <span class="built_in">print</span>(op)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># func2开始</span></span><br><span class="line"><span class="comment"># func1开始</span></span><br><span class="line"><span class="comment"># division by zero</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;在最顶级就可以捕获到低级出发生的异常&#x3D;&#x3D;</p><h3 id="Python模块和包"><a href="#Python模块和包" class="headerlink" title="Python模块和包"></a>Python模块和包</h3><h4 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块"></a>什么是模块</h4><blockquote><h6 id="python文件"><a href="#python文件" class="headerlink" title="python文件"></a>python文件</h6><h6 id="提供的现成的变量，函数，来使用"><a href="#提供的现成的变量，函数，来使用" class="headerlink" title="提供的现成的变量，函数，来使用"></a>提供的现成的变量，函数，来使用</h6></blockquote><h4 id="如何导入模块"><a href="#如何导入模块" class="headerlink" title="如何导入模块"></a>如何导入模块</h4><p><em><strong>写在开头</strong></em></p><blockquote><ol><li><h6 id="from-模块名-import-模块-类-变量-函数-as-别名"><a href="#from-模块名-import-模块-类-变量-函数-as-别名" class="headerlink" title="[from 模块名]  import [模块 |类|变量|函数|*] [as 别名]"></a>[from 模块名]  import [模块 |类|变量|函数|*] [as 别名]</h6><hr><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法:"></a>基本语法:</h5><p>import 模块名</p><p>import 模块1，模块2</p><h5 id="用法-通过-就可以使用模块的全部功能了。确定层级关系"><a href="#用法-通过-就可以使用模块的全部功能了。确定层级关系" class="headerlink" title="用法,&#x3D;&#x3D;通过.&#x3D;&#x3D;就可以使用模块的全部功能了。确定层级关系"></a>用法,&#x3D;&#x3D;通过.&#x3D;&#x3D;就可以使用模块的全部功能了。确定层级关系</h5><p>模块.功能名()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line">10s后</span><br><span class="line"><span class="comment"># 结束</span></span><br></pre></td></tr></table></figure><h5 id="直接引入模块对应的功能-只需要模块的部分功能"><a href="#直接引入模块对应的功能-只需要模块的部分功能" class="headerlink" title="直接引入模块对应的功能,只需要模块的部分功能"></a>直接引入模块对应的功能,只需要模块的部分功能</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line"><span class="comment"># 3s后</span></span><br><span class="line"><span class="comment"># 结束</span></span><br></pre></td></tr></table></figure><h6 id="引入模块全部的功能，直接使用"><a href="#引入模块全部的功能，直接使用" class="headerlink" title="引入模块全部的功能，直接使用"></a>引入模块全部的功能，直接使用</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line"><span class="comment"># 3s后</span></span><br><span class="line"><span class="comment"># 结束</span></span><br></pre></td></tr></table></figure><h6 id="用别名来代替对应的功能-相当于改名，对于那些难听的，臭长臭长的功能"><a href="#用别名来代替对应的功能-相当于改名，对于那些难听的，臭长臭长的功能" class="headerlink" title="用别名来代替对应的功能,相当于改名，对于那些难听的，臭长臭长的功能"></a>用别名来代替对应的功能,相当于改名，对于那些难听的，臭长臭长的功能</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep <span class="keyword">as</span> op</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">op(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line"><span class="comment"># 3s后</span></span><br><span class="line"><span class="comment"># 结束</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">t.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line"><span class="comment"># 3s后</span></span><br><span class="line"><span class="comment"># 结束</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="自定义模块-main-all"><a href="#自定义模块-main-all" class="headerlink" title="自定义模块(__main__ __all__)"></a>自定义模块(__main__ __all__)</h4><blockquote><h5 id="import-自定义模块的python文件名字"><a href="#import-自定义模块的python文件名字" class="headerlink" title="import 自定义模块的python文件名字"></a>import 自定义模块的python文件名字</h5><hr><h5 id="自定义模块-mymodul"><a href="#自定义模块-mymodul" class="headerlink" title="自定义模块 mymodul"></a>自定义模块 mymodul</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure><h5 id="导入自定义模块"><a href="#导入自定义模块" class="headerlink" title="导入自定义模块"></a>导入自定义模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mymolul <span class="keyword">as</span> a</span><br><span class="line"><span class="built_in">print</span>(a.add(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">#4</span></span><br></pre></td></tr></table></figure><hr><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><h5 id="自定义模块mymodul1"><a href="#自定义模块mymodul1" class="headerlink" title="自定义模块mymodul1"></a>自定义模块mymodul1</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="keyword">return</span> x-y</span><br></pre></td></tr></table></figure><h5 id="引用两个具有相同名字但不同功能的模块"><a href="#引用两个具有相同名字但不同功能的模块" class="headerlink" title="引用两个具有相同名字但不同功能的模块"></a>引用两个具有相同名字但不同功能的模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mymolul <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> mymolul1 <span class="keyword">import</span> add</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># -2</span></span><br></pre></td></tr></table></figure><h5 id="后者会覆盖前者"><a href="#后者会覆盖前者" class="headerlink" title="后者会覆盖前者"></a>后者会覆盖前者</h5><hr><h5 id="自定义模块-main"><a href="#自定义模块-main" class="headerlink" title="自定义模块(__main__)"></a>自定义模块(__main__)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="built_in">print</span>(x-y)</span><br><span class="line"> <span class="keyword">return</span> x-y</span><br><span class="line">add(<span class="number">1</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h5 id="导入自定义模块-但没有任何操作"><a href="#导入自定义模块-但没有任何操作" class="headerlink" title="导入自定义模块 但没有任何操作"></a>导入自定义模块 但没有任何操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mymolul1 <span class="keyword">import</span> add</span><br><span class="line"><span class="comment">#-4</span></span><br></pre></td></tr></table></figure><p>from 模块的时候就直接把模块给执行了</p><h6 id="在模块中用-main-实现在模块中可以测试，import引入模块的时候不立刻执行测试的语句"><a href="#在模块中用-main-实现在模块中可以测试，import引入模块的时候不立刻执行测试的语句" class="headerlink" title="在模块中用__main__实现在模块中可以测试，import引入模块的时候不立刻执行测试的语句"></a>在模块中用__main__实现在模块中可以测试，import引入模块的时候不立刻执行测试的语句</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="built_in">print</span>(x-y)</span><br><span class="line"> <span class="keyword">return</span> x-y</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> add(<span class="number">1</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h6 id="就实现导入模块的时候不执行模块的测试语句"><a href="#就实现导入模块的时候不执行模块的测试语句" class="headerlink" title="就实现导入模块的时候不执行模块的测试语句"></a>就实现导入模块的时候不执行模块的测试语句</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mymolul1 <span class="keyword">import</span> add</span><br></pre></td></tr></table></figure><hr><p>自定义模块的__all__</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="built_in">print</span>(x-y)</span><br><span class="line"> <span class="keyword">return</span> x-y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add1</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="built_in">print</span>(x+y)</span><br><span class="line"> <span class="keyword">return</span> x-y</span><br><span class="line">__all__=[<span class="string">&#x27;add&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mymolul1 <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(add1(<span class="number">1</span>,<span class="number">2</span>)) add1为被定义。手动导入是可以的，仅限制导入*的时候</span><br></pre></td></tr></table></figure><h6 id="这样导入模块的时候尽管使用from-模块名-import-也只能限制all里面的可使用功能"><a href="#这样导入模块的时候尽管使用from-模块名-import-也只能限制all里面的可使用功能" class="headerlink" title="这样导入模块的时候尽管使用from 模块名 import *也只能限制all里面的可使用功能"></a>这样导入模块的时候尽管使用from 模块名 import *也只能限制all里面的可使用功能</h6></blockquote><hr><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><blockquote><h5 id="1-如何自定义模块并导入"><a href="#1-如何自定义模块并导入" class="headerlink" title="1.如何自定义模块并导入?"></a>1.如何自定义模块并导入?</h5><p>在Python代码文件中正常写代码即可,通过import、from关键字和导<br>入Python内置模块一样导入即可使用。</p><ol start="2"><li>main_ 变量的功能是?<br>if__ main__ &#x3D;&#x3D; “_ __main____“</li></ol><p> &#x3D;&#x3D;测试语句里面的相对路径是对包的文件夹而言的不是模块文件&#x3D;&#x3D;</p><h6 id="4-txt是在包的外面的文件"><a href="#4-txt是在包的外面的文件" class="headerlink" title="4.txt是在包的外面的文件"></a>4.txt是在包的外面的文件</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">append_to_file</span>(<span class="params">file_name,data</span>):</span><br><span class="line">    p=<span class="built_in">open</span>(file_name,<span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    p.write(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    append_to_file(<span class="string">&quot;./4.txt&quot;</span>,<span class="string">&quot;卧槽&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="表示，只有当程序是直接执行的才会进入"><a href="#表示，只有当程序是直接执行的才会进入" class="headerlink" title="表示，只有当程序是直接执行的才会进入"></a>表示，只有当程序是直接执行的才会进入</h6><h6 id="if内部，如果是被导入的，则if无法进入"><a href="#if内部，如果是被导入的，则if无法进入" class="headerlink" title="&#x3D;&#x3D;if内部，如果是被导入的，则if无法进入&#x3D;&#x3D;"></a>&#x3D;&#x3D;if内部，如果是被导入的，则if无法进入&#x3D;&#x3D;</h6><ol start="3"><li>注意事项<br> ●<br> 不同模块，同名的功能，如果都被导入，那么后导入的会覆盖先导<br> 入的<br> ●<br> <em>all</em> 变量可以控制import *的时候哪些功能可以被导入</li></ol></blockquote><h4 id="自定义Python包"><a href="#自定义Python包" class="headerlink" title="自定义Python包"></a>自定义Python包</h4><blockquote><p>如果导入的模块太多，就需要一个包来管理大部分模块。相当于一个文件夹，文件夹里面一大堆模块.py</p><p>还有一个额外的 __init__.py</p><h5 id="和普通的文件夹区分主要是看有无-init-py文件"><a href="#和普通的文件夹区分主要是看有无-init-py文件" class="headerlink" title="&#x3D;&#x3D;和普通的文件夹区分主要是看有无 __init__.py文件&#x3D;&#x3D;"></a>&#x3D;&#x3D;和普通的文件夹区分主要是看有无 __init__.py文件&#x3D;&#x3D;</h5></blockquote><h5 id="自定义包"><a href="#自定义包" class="headerlink" title="自定义包"></a>自定义包</h5><h5 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h5><blockquote><p>import 包名.模块名字<br>使用相关的功能<br>包.模块.功能</p><p>导入包里的具体模块，导入具体模块的时候，用对应功能的时候，模块名字.功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mypython包.mk</span><br><span class="line"><span class="built_in">print</span>(mypython包.mk.add(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">#4</span></span><br></pre></td></tr></table></figure><p>导入包里的具体模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mypython包 <span class="keyword">import</span> mk</span><br><span class="line"><span class="built_in">print</span>(mk.add(<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment">#7</span></span><br></pre></td></tr></table></figure><p>导入具体包模块的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mypython包.mk <span class="keyword">import</span> add <span class="keyword">as</span> a</span><br><span class="line"><span class="built_in">print</span>(a(<span class="number">1</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>__all__写在init文件里可以控制*导入的范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from mypython包 import *</span><br><span class="line">把包里所有模块都导入了，直接用模块的名和对应的功能</span><br><span class="line">mk1不存在</span><br></pre></td></tr></table></figure><hr><blockquote><p>1.什么是Python的包?<br>包就是一个文件夹，里面可以存放许多Python的模块(代码文件)，通<br>过包，在逻辑上将一批模块归为一类，方便使用。</p><ol start="2"><li>_ init_ .py文件的作用 ?<br> 创建包会默认自动创建的文件，通过这个文件来表示一-个文件夹是;<br> Python的包，而非普通的文件夹。</li><li>__all__ 变量的作用?<br>同模块中学习到的是一个作用，控制import *能够导入的内容</li></ol></blockquote></blockquote><h4 id="第三方包"><a href="#第三方包" class="headerlink" title="第三方包"></a>第三方包</h4><p><strong>安装第三方python包</strong></p><p><strong>一个包就是一堆同类型功能的集合体</strong></p><h6 id="如何安装第三方包"><a href="#如何安装第三方包" class="headerlink" title="如何安装第三方包"></a>如何安装第三方包</h6><blockquote><h6 id="利用python内置的pipi程序"><a href="#利用python内置的pipi程序" class="headerlink" title="利用python内置的pipi程序"></a>利用python内置的pipi程序</h6><h6 id="win-r-cmd-输入命令"><a href="#win-r-cmd-输入命令" class="headerlink" title="win+r cmd 输入命令"></a>win+r cmd 输入命令</h6><h6 id="pip-install-第三方包名-国外"><a href="#pip-install-第三方包名-国外" class="headerlink" title="pip install 第三方包名 国外"></a>pip install 第三方包名 国外</h6><h6 id="pip-install-i-https-pypi-tuna-tsinghua-edu-cn-simple-包名-国内"><a href="#pip-install-i-https-pypi-tuna-tsinghua-edu-cn-simple-包名-国内" class="headerlink" title="pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名  国内"></a>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> 包名  国内</h6><h5 id="在pychrm里去解释器的设置安装"><a href="#在pychrm里去解释器的设置安装" class="headerlink" title="在pychrm里去解释器的设置安装"></a>在pychrm里去解释器的设置安装</h5></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="json文件"><a href="#json文件" class="headerlink" title="json文件"></a>json<strong>文件</strong></h5><blockquote><h6 id="轻量级的数据交互格式"><a href="#轻量级的数据交互格式" class="headerlink" title="轻量级的数据交互格式"></a>轻量级的数据交互格式</h6><h6 id="相当于字符串"><a href="#相当于字符串" class="headerlink" title="&#x3D;&#x3D;相当于字符串&#x3D;&#x3D;"></a>&#x3D;&#x3D;相当于字符串&#x3D;&#x3D;</h6><h6 id="带有特定格式的字符串"><a href="#带有特定格式的字符串" class="headerlink" title="带有特定格式的字符串"></a>带有特定格式的字符串</h6><h6 id="按照json指定的格式去组织和封装数据"><a href="#按照json指定的格式去组织和封装数据" class="headerlink" title="按照json指定的格式去组织和封装数据"></a>按照json指定的格式去组织和封装数据</h6><h6 id="json相当于国际语言，在各个编程语言中流通的数据格式，负责不同编程语言中的数据传递和交互"><a href="#json相当于国际语言，在各个编程语言中流通的数据格式，负责不同编程语言中的数据传递和交互" class="headerlink" title="json相当于国际语言，在各个编程语言中流通的数据格式，负责不同编程语言中的数据传递和交互"></a>json相当于国际语言，在各个编程语言中流通的数据格式，负责不同编程语言中的数据传递和交互</h6><h6 id="普通话，英语"><a href="#普通话，英语" class="headerlink" title="普通话，英语"></a>普通话，英语</h6><hr><p>python格式数据——json格式数据—–C语言接受json格式数据并转换为python格式数据继续使用</p><ul><li><code>json.loads()</code>: 该方法用于将JSON格式的字符串转换为Python对象。它接受一个JSON字符串作为参数，并返回一个对应的Python对象。</li><li><code>json.dumps()</code>: 该方法用于将Python对象&#x3D;&#x3D;转换为JSON格式的字符串&#x3D;&#x3D;。它接受一个Python对象作为参数，并返回一个对应的JSON字符串。</li></ul><h6 id="json格式数据化-、、、字典"><a href="#json格式数据化-、、、字典" class="headerlink" title="json格式数据化 、、、字典"></a>json格式数据化 、、、字典</h6><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">data = &#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span> <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;New York&quot;</span><span class="punctuation">&#125;</span>&#x27;</span><br><span class="line">obj = json.loads(data)</span><br><span class="line"></span><br><span class="line">print(obj)  # 输出：<span class="punctuation">&#123;</span>&#x27;name&#x27;<span class="punctuation">:</span> &#x27;John&#x27;<span class="punctuation">,</span> &#x27;age&#x27;<span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span> &#x27;city&#x27;<span class="punctuation">:</span> &#x27;New York&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">print(type(obj))  # 输出：dict</span><br></pre></td></tr></table></figure><p>python-&gt;json</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">obj = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>&#125;</span><br><span class="line">data = json.dumps(obj)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># 输出：&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))  <span class="comment"># 输出：str</span></span><br></pre></td></tr></table></figure><p><code>json.dumps()</code>方法默认使用ASCII编码来生成JSON字符串，如果需要使用其他编码，可以通过<code>ensure_ascii</code>参数进行设置。此外，还可以通过<code>indent</code>参数设置缩进空格数，以使生成的JSON字符串更易读。</p></blockquote><p><code>json.dump()</code>和<code>json.dumps()</code>都是Python中用于将数据对象转换为JSON格式的方法，但它们之间有一些区别。</p><ul><li><p><code>json.dump()</code>: 这个方法用于将数据对象转换为JSON格式，并将其写入文件对象中。它接受两个参数：第一个参数是要转换为JSON的数据对象，第二个参数是要写入的文件对象。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.json&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump(data, file)</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>data</code>是一个字典对象，我们使用<code>json.dump()</code>方法将其转换为JSON格式，并将结果写入名为”data.json”的文件中。</p></li><li><p><code>json.dumps()</code>: 这个方法用于将数据对象转换为JSON格式，并返回一个字符串。它只接受一个参数，即要转换为JSON的数据对象。示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line">json_str = json.dumps(data)</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>data</code>是一个字典对象，我们使用<code>json.dumps()</code>方法将其转换为JSON格式，并将结果赋值给<code>json_str</code>变量。</p></li></ul><p>总结来说，<code>json.dump()</code>用于将数据对象转换为JSON格式，并将其写入文件对象中，而<code>json.dumps()</code>用于将数据对象转换为JSON格式，并返回一个字符串。你可以根据具体的需求选择使用哪个方法。</p><hr><h5 id="python内置的json模块，数据相互转换"><a href="#python内置的json模块，数据相互转换" class="headerlink" title="python内置的json模块，数据相互转换"></a>python内置的json模块，数据相互转换</h5><h6 id="把json的数据转为python的形式，不一定是json文件"><a href="#把json的数据转为python的形式，不一定是json文件" class="headerlink" title="&#x3D;&#x3D;把json的数据转为python的形式，不一定是json文件&#x3D;&#x3D;"></a>&#x3D;&#x3D;把json的数据转为python的形式，不一定是json文件&#x3D;&#x3D;</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data=&#123;<span class="string">&quot;key1&quot;</span>:<span class="number">2</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;python数据转为json&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(json.dumps(data))</span><br><span class="line">data=json.dumps(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;json数据转为python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(json.loads(data))</span><br><span class="line"><span class="comment"># python数据转为json</span></span><br><span class="line"><span class="comment"># &#123;&quot;key1&quot;: 2, &quot;key2&quot;: 2&#125;</span></span><br><span class="line"><span class="comment"># json数据转为python</span></span><br><span class="line"><span class="comment"># &#123;&#x27;key1&#x27;: 2, &#x27;key2&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line">data1=[&#123;<span class="string">&quot;key1&quot;</span>:<span class="number">2</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&quot;key11&quot;</span>:<span class="number">2</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;王大锤&quot;</span>,<span class="string">&quot;key22&quot;</span>:<span class="number">2</span>&#125;]</span><br><span class="line">data1_json=json.dumps(data1,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data1_json))</span><br><span class="line"><span class="built_in">print</span>(data1_json)</span><br><span class="line"><span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment"># [&#123;&quot;key1&quot;: 2, &quot;key2&quot;: 2&#125;, &#123;&quot;key11&quot;: 2, &quot;key2&quot;: 2&#125;, &#123;&quot;name&quot;: &quot;\u738b\u5927\u9524&quot;, &quot;key22&quot;: 2&#125;]</span></span><br><span class="line"><span class="comment"># 不用ancii码转换，原样输出</span></span><br><span class="line"><span class="comment"># [&#123;&quot;key1&quot;: 2, &quot;key2&quot;: 2&#125;, &#123;&quot;key11&quot;: 2, &quot;key2&quot;: 2&#125;, &#123;&quot;name&quot;: &quot;王大锤&quot;, &quot;key22&quot;: 2&#125;]</span></span><br></pre></td></tr></table></figure><blockquote><p>1.json: 是一种轻量级的数据交互格式,采用完全独立于编程语言的文本<br>格式来存储和表示数据( 就是字符串)<br>Python语言使用JSON有很大优势，因为: JSON无非就是-个单独的字典或-个内部元素都<br>是字典的列表<br>所以JSON可以直接和Python的字典或列表进行无缝转换。</p><ol start="2"><li>json格式数据转化</li></ol><h5 id="通过json-dumps-data-方法把python数据转化为了json数-据data-json-dumps-data"><a href="#通过json-dumps-data-方法把python数据转化为了json数-据data-json-dumps-data" class="headerlink" title="通过json. dumps (data)方法把python数据转化为了json数 据data &#x3D; json. dumps (data)"></a>通过json. dumps (data)方法把python数据转化为了json数 据data &#x3D; json. dumps (data)</h5><p>  如果有中文可以带上: ensure_ _ascii&#x3D;Fal se参数来确保中<br>  文正常转换.</p><h5 id="通过json-loads-data-方法把josn数据转化为了python列表或字典"><a href="#通过json-loads-data-方法把josn数据转化为了python列表或字典" class="headerlink" title="通过json. loads (data)方法把josn数据转化为了python列表或字典."></a>通过json. loads (data)方法把josn数据转化为了python列表或字典.</h5><p>data &#x3D; json. loads (data) </p></blockquote><h5 id="pyecharts模块—-利用鼠标放上去的提示写"><a href="#pyecharts模块—-利用鼠标放上去的提示写" class="headerlink" title="pyecharts模块—-利用鼠标放上去的提示写"></a>pyecharts模块—-利用鼠标放上去的提示写</h5><p>&#x3D;&#x3D;<em><strong>bar.reversal_axis()</strong></em>&#x3D;&#x3D;</p><h5 id="1折线图2基础可视化地图map"><a href="#1折线图2基础可视化地图map" class="headerlink" title="1折线图2基础可视化地图map"></a>1折线图2基础可视化地图map</h5><blockquote><ol><li><h5 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">import</span> json</span><br><span class="line">   <span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line">   <span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./数据/日本.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">       data=file.read().replace(<span class="string">&quot;jsonp_1629350871167_29498(&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">       data=data[:-<span class="number">2</span>]</span><br><span class="line">       <span class="comment"># print(data)</span></span><br><span class="line">       data=json.loads(data)</span><br><span class="line">       <span class="comment"># print(data)</span></span><br><span class="line">       data=data[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;trend&quot;</span>]</span><br><span class="line">       xdata=data[<span class="string">&quot;updateDate&quot;</span>][:<span class="number">315</span>]</span><br><span class="line">       ydata=data[<span class="string">&quot;list&quot;</span>][<span class="number">0</span>][<span class="string">&quot;data&quot;</span>][:<span class="number">315</span>]</span><br><span class="line">       <span class="comment"># print(xdata)</span></span><br><span class="line">       <span class="comment"># print(ydata)</span></span><br><span class="line">   <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./数据/美国.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       data=f.read()</span><br><span class="line">       data=data.replace(<span class="string">&quot;jsonp_1629344292311_69436(&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">       data=data[:-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       pydata=json.loads(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment"># x轴数据</span></span><br><span class="line">       timedata=pydata[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;trend&quot;</span>][<span class="string">&quot;updateDate&quot;</span>][:<span class="number">314</span>]</span><br><span class="line">       <span class="comment"># print(timedata)</span></span><br><span class="line">       <span class="comment"># y轴数据</span></span><br><span class="line">       listdata=pydata[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;trend&quot;</span>][<span class="string">&quot;list&quot;</span>][<span class="number">0</span>][<span class="string">&quot;data&quot;</span>][:<span class="number">314</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       line=Line()</span><br><span class="line">    </span><br><span class="line">       line.add_xaxis(xdata)</span><br><span class="line">    </span><br><span class="line">       line.add_yaxis(<span class="string">&quot;日本疫情数据&quot;</span>,ydata,label_opts=LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">       line.add_yaxis(<span class="string">&quot;美国疫情数据&quot;</span>,listdata,label_opts=LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       line.set_global_opts(</span><br><span class="line">           toolbox_opts=ToolboxOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">           tooltip_opts=TooltipOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">           legend_opts=LegendOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">           visualmap_opts=VisualMapOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">           title_opts=TitleOpts(title=<span class="string">&quot;疫情数据&quot;</span>,pos_left=<span class="string">&quot;center&quot;</span>,pos_top=<span class="string">&quot;5%&quot;</span>),</span><br><span class="line">           datazoom_opts=DataZoomOpts(is_show=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">       )</span><br><span class="line">    </span><br><span class="line">       line.render(<span class="string">&quot;./两国数据.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="number">2.</span> <span class="comment">##### **基础可视化地图**</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">   <span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./数据/疫情.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data=file.read()</span><br><span class="line">    data=json.loads(data)</span><br><span class="line"></span><br><span class="line">    fordata=data[<span class="string">&quot;areaTree&quot;</span>][<span class="number">0</span>][<span class="string">&quot;children&quot;</span>]</span><br><span class="line">    <span class="comment"># print(fordata)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    listdata=[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> fordata:</span><br><span class="line">        <span class="comment"># print(k)</span></span><br><span class="line">        address=k[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">        peoples=k[<span class="string">&quot;total&quot;</span>][<span class="string">&quot;confirm&quot;</span>]</span><br><span class="line">        <span class="comment"># print(address,peoples)</span></span><br><span class="line">        listdata.append((address,peoples))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(listdata),listdata)</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>=Map()</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.add(<span class="string">&quot;各省疫情总览&quot;</span>,listdata,<span class="string">&quot;china&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.set_global_opts(</span><br><span class="line">    visualmap_opts=VisualMapOpts(</span><br><span class="line">        is_show=<span class="literal">True</span>,</span><br><span class="line">        is_piecewise=<span class="literal">True</span>,</span><br><span class="line">        pieces=[</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>:<span class="number">1</span>,<span class="string">&quot;max&quot;</span>:<span class="number">1000</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;#87ceeb&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;1-1000人&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>:<span class="number">10</span>,<span class="string">&quot;max&quot;</span>:<span class="number">20</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;10-20人&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>:<span class="number">20</span>,<span class="string">&quot;max&quot;</span>:<span class="number">100</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;20-100人&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>:<span class="number">2000</span>,<span class="string">&quot;max&quot;</span>:<span class="number">3000</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;2000-3000人&quot;</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    ),</span><br><span class="line">    title_opts=TitleOpts(title=<span class="string">&quot;全国疫情&quot;</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.render(<span class="string">&quot;./疫情大地图.html&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol></blockquote><hr><h5 id="柱状图，时间柱状图-动态柱状图"><a href="#柱状图，时间柱状图-动态柱状图" class="headerlink" title="柱状图，时间柱状图,动态柱状图"></a>柱状图，时间柱状图,动态柱状图</h5><p><strong>基础柱状图—————————————————————————————————————————————————————-</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bar.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>))</span><br></pre></td></tr></table></figure><p><em><strong>实现数值标签的位置</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar=Bar()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>])</span><br><span class="line">bar.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line">bar.set_global_opts(</span><br><span class="line">    legend_opts=LegendOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    toolbox_opts=ToolboxOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    tooltip_opts=TooltipOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    visualmap_opts=VisualMapOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    datazoom_opts=DataZoomOpts(is_show=<span class="literal">True</span>)</span><br><span class="line">)</span><br><span class="line">bar.reversal_axis() </span><br><span class="line">bar.render(<span class="string">&quot;./基础柱状图.html&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><h5 id="1-通过Bar-构建一个柱状图对象"><a href="#1-通过Bar-构建一个柱状图对象" class="headerlink" title="1.通过Bar()构建一个柱状图对象"></a>1.通过Bar()构建一个柱状图对象</h5><h5 id="2-和折线图一样，通过add-xaxis-和add-yaxis-添加"><a href="#2-和折线图一样，通过add-xaxis-和add-yaxis-添加" class="headerlink" title="2.和折线图一样，通过add xaxis()和add_yaxis()添加"></a>2.和折线图一样，通过add xaxis()和add_yaxis()添加</h5><h5 id="x和y轴数据"><a href="#x和y轴数据" class="headerlink" title="x和y轴数据"></a>x和y轴数据</h5><h5 id="3-通过柱状图对象的-reversal-axis-，反转x和y轴"><a href="#3-通过柱状图对象的-reversal-axis-，反转x和y轴" class="headerlink" title="3.通过柱状图对象的:reversal axis()，反转x和y轴"></a>3.通过柱状图对象的:reversal axis()，反转x和y轴</h5><h5 id="4-通过label-opts-LabelOpts-position-”right”-设置"><a href="#4-通过label-opts-LabelOpts-position-”right”-设置" class="headerlink" title="4.通过label opts&#x3D;LabelOpts(position&#x3D;”right”)设置"></a>4.通过label opts&#x3D;LabelOpts(position&#x3D;”right”)设置</h5><h5 id="数值标签在右侧显示"><a href="#数值标签在右侧显示" class="headerlink" title="数值标签在右侧显示"></a>数值标签在右侧显示</h5></blockquote><hr><p><strong>时间柱状图——————————————————————————————————————————————————————</strong></p><p><strong>在有多个柱状图bar对象的前提下，创建一个时间线timeline对象，然后给时间线对象的add方法添加多个bar对象和标题</strong></p><p><strong>from</strong> pyecharts.charts <strong>import</strong> Timeline</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Timeline</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar=Bar()</span><br><span class="line">bar1=Bar()</span><br><span class="line">bar2=Bar()</span><br><span class="line">bar3=Bar()</span><br><span class="line">bar4=Bar()</span><br><span class="line">bar5=Bar()</span><br><span class="line">bar6=Bar()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>))</span><br><span class="line">bar.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar1.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">35</span>,<span class="number">45</span>,<span class="number">45</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>))</span><br><span class="line">bar1.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar2.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">40</span>,<span class="number">60</span>,<span class="number">40</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>))</span><br><span class="line">bar2.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar3.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">45</span>,<span class="number">30</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>,font_size=<span class="string">&quot;30px&quot;</span>))</span><br><span class="line">bar3.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar4.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">205</span>,<span class="number">30</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>,font_size=<span class="string">&quot;30px&quot;</span>))</span><br><span class="line">bar4.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar5.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">100</span>,<span class="number">30</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>,font_size=<span class="string">&quot;30px&quot;</span>))</span><br><span class="line">bar5.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar6.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">205</span>,<span class="number">30</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>,font_size=<span class="string">&quot;30px&quot;</span>))</span><br><span class="line">bar6.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar.set_global_opts(</span><br><span class="line">    title_opts=TitleOpts(title=<span class="string">&quot;时间线柱状图666666&quot;</span> ),</span><br><span class="line">    legend_opts=LegendOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    toolbox_opts=ToolboxOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    tooltip_opts=TooltipOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    visualmap_opts=VisualMapOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    datazoom_opts=DataZoomOpts(is_show=<span class="literal">True</span>,pos_top=<span class="string">&quot;20px&quot;</span>)</span><br><span class="line">)</span><br><span class="line">time=Timeline()</span><br><span class="line"></span><br><span class="line">time.add(bar,<span class="string">&quot;2001&quot;</span>)</span><br><span class="line">time.add(bar1,<span class="string">&quot;2002&quot;</span>)</span><br><span class="line">time.add(bar2,<span class="string">&quot;2003&quot;</span>)</span><br><span class="line">time.add(bar3,<span class="string">&quot;2004&quot;</span>)</span><br><span class="line">time.add(bar4,<span class="string">&quot;2010&quot;</span>)</span><br><span class="line">time.add(bar5,<span class="string">&quot;2024&quot;</span>)</span><br><span class="line">time.add(bar6,<span class="string">&quot;2034&quot;</span>)</span><br><span class="line"></span><br><span class="line">time.add_schema(</span><br><span class="line">    play_interval=<span class="number">700</span>,</span><br><span class="line">    is_auto_play=<span class="literal">True</span>,</span><br><span class="line">    is_loop_play=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># bar.reversal_axis()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time.render(<span class="string">&quot;./时间线柱状图.html&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;控制时间线的属性&#x3D;&#x3D;</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time.add_schema(</span><br><span class="line">    play_interval=<span class="number">700</span>,</span><br><span class="line">    is_auto_play=<span class="literal">True</span>,</span><br><span class="line">    is_loop_play=<span class="literal">True</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h6 id="主题类型模块"><a href="#主题类型模块" class="headerlink" title="&#x3D;&#x3D;主题类型模块&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;主题类型模块&#x3D;&#x3D;</strong></h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType</span><br><span class="line">time=Timeline(</span><br><span class="line">    &#123;<span class="string">&quot;theme&quot;</span>:ThemeType.BUILTIN_THEMES&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="综合案例-2"><a href="#综合案例-2" class="headerlink" title="综合案例"></a>综合案例</h5><p><em><strong>循环中每创建一个bar就add到时间线里面，是不会有问题的</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Timeline</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./数据/1960-2019全球GDP数据.csv&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;GB2312&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data=file.readlines()</span><br><span class="line">    data.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">zd=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">    <span class="comment"># print(line)</span></span><br><span class="line">    <span class="built_in">list</span>=line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="comment"># print(list)</span></span><br><span class="line">    year=<span class="built_in">int</span>(<span class="built_in">list</span>[<span class="number">0</span>])</span><br><span class="line">    country=<span class="built_in">list</span>[<span class="number">1</span>]</span><br><span class="line">    gdp=<span class="built_in">float</span>(<span class="built_in">list</span>[<span class="number">2</span>])</span><br><span class="line">    <span class="comment"># print(year,country,gdp)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        zd[year].append([country,gdp])</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        zd[year]=[]</span><br><span class="line">        zd[year].append([country,gdp])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(zd)</span></span><br><span class="line">timeline=Timeline(</span><br><span class="line">    &#123;<span class="string">&quot;theme&quot;</span>:ThemeType.WALDEN&#125;</span><br><span class="line">)</span><br><span class="line">timedata=zd.keys()</span><br><span class="line"><span class="comment"># print(type(timedata))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> year <span class="keyword">in</span> timedata:</span><br><span class="line">    zd[year].sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line">    yeardata=zd[year][<span class="number">0</span>:<span class="number">8</span>]</span><br><span class="line">    x_data=[]</span><br><span class="line">    y_data=[]</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> yeardata:</span><br><span class="line">        x_data.append(data[<span class="number">0</span>])</span><br><span class="line">        y_data.append(<span class="built_in">int</span>(data[<span class="number">1</span>]/<span class="number">100000000</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bar=Bar()</span><br><span class="line">        <span class="comment"># x_data.reverse()</span></span><br><span class="line">        <span class="comment"># y_data.reverse()</span></span><br><span class="line"></span><br><span class="line">        bar.add_xaxis(x_data)</span><br><span class="line">        bar.add_yaxis(<span class="string">&quot;GDP/亿&quot;</span>,y_data,label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>,font_size=<span class="string">&quot;20px&quot;</span>))</span><br><span class="line"></span><br><span class="line">        bar.set_global_opts(</span><br><span class="line">            <span class="comment"># visualmap_opts=VisualMapOpts(is_show=True),</span></span><br><span class="line">            <span class="comment"># toolbox_opts=ToolboxOpts(is_show=True),</span></span><br><span class="line">            <span class="comment"># tooltip_opts=TooltipOpts(is_show=True),</span></span><br><span class="line">            <span class="comment"># datazoom_opts=DataZoomOpts(is_show=True),</span></span><br><span class="line">            <span class="comment"># legend_opts=LegendOpts(is_show=True)</span></span><br><span class="line">            title_opts=TitleOpts(title=<span class="string">f&quot;gdp<span class="subst">&#123;year&#125;</span>前八争霸&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">        bar.reversal_axis()</span><br><span class="line">        timeline.add(bar,<span class="built_in">str</span>(year))</span><br><span class="line"></span><br><span class="line">timeline.add_schema(</span><br><span class="line">    is_auto_play=<span class="literal">True</span>,</span><br><span class="line">    is_loop_play=<span class="literal">True</span>,</span><br><span class="line">    play_interval=<span class="number">300</span>,</span><br><span class="line">    is_timeline_show=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timeline.render(<span class="string">&quot;./动态gdp.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><blockquote><ol><li><h5 id="创建一个类，-》设计表格"><a href="#创建一个类，-》设计表格" class="headerlink" title="创建一个类，-》设计表格"></a>创建一个类，-》设计表格</h5></li><li><h5 id="创建具体的对象，-》打印出来"><a href="#创建具体的对象，-》打印出来" class="headerlink" title="创建具体的对象，-》打印出来"></a>创建具体的对象，-》打印出来</h5></li><li><h5 id="设置对象的属性值，-》学生填写"><a href="#设置对象的属性值，-》学生填写" class="headerlink" title="设置对象的属性值，-》学生填写"></a>设置对象的属性值，-》学生填写</h5></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设计类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    name=<span class="literal">None</span></span><br><span class="line">    number=<span class="literal">None</span></span><br><span class="line">    address=<span class="literal">None</span></span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line">student1=student()</span><br><span class="line"></span><br><span class="line">student1.age=<span class="number">11</span></span><br><span class="line">student1.name=<span class="string">&quot;林军姐&quot;</span></span><br><span class="line">student1.address=<span class="string">&quot;日本&quot;</span></span><br><span class="line">student1.number=<span class="number">1982830095</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(student1.address,student1.age,student1.name,student1.number)</span><br><span class="line"><span class="comment"># 日本 11 林军姐 1982830095</span></span><br></pre></td></tr></table></figure><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><h5 id="类的定义和使用"><a href="#类的定义和使用" class="headerlink" title="类的定义和使用"></a>类的定义和使用</h5><hr><p><strong>在类内定义和变量叫成员变量</strong></p><p><strong>在类内定义和函数叫成员方法</strong></p><p>&#x3D;&#x3D;<strong>类的属性和行为都是类的成员</strong>&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">类的属性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">类的行为</span><br></pre></td></tr></table></figure><h5 id="创建类对象的语法"><a href="#创建类对象的语法" class="headerlink" title="创建类对象的语法"></a>创建类对象的语法</h5><h6 id="对象名-类名字"><a href="#对象名-类名字" class="headerlink" title="&#x3D;&#x3D;对象名&#x3D;类名字()&#x3D;&#x3D;"></a>&#x3D;&#x3D;对象名&#x3D;类名字()&#x3D;&#x3D;</h6><hr><h5 id="类的成员方法的创建"><a href="#类的成员方法的创建" class="headerlink" title="类的成员方法的创建"></a>类的成员方法的创建</h5><blockquote><h5 id="1，和普通函数构造没太大区别，2，-只不过必须有一个形参是self，必须要有-3，self形参不需要给对应的实参。"><a href="#1，和普通函数构造没太大区别，2，-只不过必须有一个形参是self，必须要有-3，self形参不需要给对应的实参。" class="headerlink" title="1，和普通函数构造没太大区别，2，&#x3D;&#x3D;只不过必须有一个形参是self，必须要有&#x3D;&#x3D;,3，self形参不需要给对应的实参。"></a>1，和普通函数构造没太大区别，2，&#x3D;&#x3D;只不过必须有一个形参是self，必须要有&#x3D;&#x3D;,3，self形参不需要给对应的实参。</h5><p>  <strong>&#x3D;&#x3D;实例方法需要通过类的实例来调用，而不是直接通过类来调用。&#x3D;&#x3D;</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line"> name=<span class="string">&quot;黑马&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line">father.a5g()</span><br></pre></td></tr></table></figure><h5 id="2-访问成员变量的时候也要用到self"><a href="#2-访问成员变量的时候也要用到self" class="headerlink" title="2. 访问成员变量的时候也要用到self"></a>2. 访问成员变量的时候也要用到self</h5></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设计类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    name=<span class="literal">None</span></span><br><span class="line">    number=<span class="literal">None</span></span><br><span class="line">    address=<span class="literal">None</span></span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sayhi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;你好,我叫<span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line">student1=student()</span><br><span class="line"></span><br><span class="line">student1.age=<span class="number">11</span></span><br><span class="line">student1.name=<span class="string">&quot;林军姐&quot;</span></span><br><span class="line">student1.address=<span class="string">&quot;日本&quot;</span></span><br><span class="line">student1.number=<span class="number">1982830095</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(student1.address,student1.age,student1.name,student1.number)</span><br><span class="line"><span class="comment"># 日本 11 林军姐 1982830095</span></span><br><span class="line">student1.sayhi()</span><br><span class="line"><span class="comment"># 你好,我叫林军姐</span></span><br></pre></td></tr></table></figure><h5 id="面向对象编程-属性和行为"><a href="#面向对象编程-属性和行为" class="headerlink" title="面向对象编程(属性和行为)"></a>面向对象编程(属性和行为)</h5><blockquote><h5 id="类-设计图纸"><a href="#类-设计图纸" class="headerlink" title="类&#x3D;&#x3D;设计图纸"></a>类&#x3D;&#x3D;设计图纸</h5><h5 id="对象-基于图纸生产的实体"><a href="#对象-基于图纸生产的实体" class="headerlink" title="对象&#x3D;&#x3D;基于图纸生产的实体"></a>对象&#x3D;&#x3D;基于图纸生产的实体</h5></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">clock</span>:</span><br><span class="line">    <span class="built_in">id</span>=<span class="literal">None</span></span><br><span class="line">    price=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ring</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">import</span> winsound</span><br><span class="line">        winsound.Beep(<span class="number">2000</span>,<span class="number">3000</span>)</span><br><span class="line">类==设计图纸</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对象==基于图纸生产的实体</span><br><span class="line">clock1=clock()</span><br><span class="line">clock2=clock()</span><br><span class="line"></span><br><span class="line">clock1.<span class="built_in">id</span>=<span class="string">&quot;0001&quot;</span></span><br><span class="line">clock1.price=<span class="number">100</span></span><br><span class="line"></span><br><span class="line">clock2.<span class="built_in">id</span>=<span class="string">&quot;0002&quot;</span></span><br><span class="line">clock2.price=<span class="number">200</span></span><br><span class="line">clock1.ring()</span><br><span class="line">clock2.ring()</span><br></pre></td></tr></table></figure><h4 id="类内置的方法—-魔术方法"><a href="#类内置的方法—-魔术方法" class="headerlink" title="类内置的方法—-魔术方法"></a>类内置的方法—-魔术方法</h4><p>魔术方法__魔术名字__</p><p>很多很多，常用的</p><blockquote><ol><li><h4 id="init-—构造方法"><a href="#init-—构造方法" class="headerlink" title="__init__—构造方法"></a>__init__—构造方法</h4><h5 id="特点：对象实例化的时候自动执行，把参数自动传递-inie-方法使用"><a href="#特点：对象实例化的时候自动执行，把参数自动传递-inie-方法使用" class="headerlink" title="&#x3D;&#x3D;特点：对象实例化的时候自动执行，把参数自动传递__inie__方法使用&#x3D;&#x3D;"></a>&#x3D;&#x3D;特点：对象实例化的时候自动执行，把参数自动传递__inie__方法使用&#x3D;&#x3D;</h5><p>与最基本的声明变量相比</p><p><strong>定义—》定义加赋值，二合一</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name:<span class="literal">None</span></span><br><span class="line">address=<span class="literal">None</span></span><br><span class="line">number=<span class="literal">None</span></span><br><span class="line">age=<span class="literal">None</span></span><br><span class="line">这一步可以被构造方法来代替</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">       name:<span class="literal">None</span></span><br><span class="line">       address=<span class="literal">None</span></span><br><span class="line">       number=<span class="literal">None</span></span><br><span class="line">       age=<span class="literal">None</span></span><br><span class="line">   </span><br><span class="line">       <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,address,number,age</span>):</span><br><span class="line">   </span><br><span class="line">           self.name= name</span><br><span class="line">           self.age=age</span><br><span class="line">           self.number=number</span><br><span class="line">           self.address=address</span><br><span class="line">   </span><br><span class="line">   xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="string">&quot;日本&quot;</span>,<span class="number">198283095</span>,<span class="number">17</span>)</span><br><span class="line">   <span class="built_in">print</span>(xrb.address)</span><br><span class="line">   <span class="built_in">print</span>(xrb.age)</span><br><span class="line">   <span class="built_in">print</span>(xrb.name)</span><br><span class="line">   <span class="built_in">print</span>(xrb.number)</span><br><span class="line">      <span class="comment"># 日本</span></span><br><span class="line">   </span><br><span class="line">      <span class="comment"># 17</span></span><br><span class="line">   </span><br><span class="line">      <span class="comment"># 王大山</span></span><br><span class="line">   </span><br><span class="line">      <span class="comment"># 198283095</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### \_\_str\_\_方法---字符串方法</span></span><br><span class="line"></span><br><span class="line">&gt; 问题引入</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">       name:<span class="literal">None</span></span><br><span class="line">       address=<span class="literal">None</span></span><br><span class="line">       number=<span class="literal">None</span></span><br><span class="line">       age=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,address,number,age</span>):</span><br><span class="line"></span><br><span class="line">           self.name= name</span><br><span class="line">           self.age=age</span><br><span class="line">           self.number=number</span><br><span class="line">           self.address=address</span><br><span class="line"></span><br><span class="line">   xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="string">&quot;日本&quot;</span>,<span class="number">198283095</span>,<span class="number">17</span>)</span><br><span class="line">   <span class="built_in">print</span>(xrb)</span><br><span class="line">   <span class="comment"># &lt;__main__.student object at 0x0000024AD5537450&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用str魔术方法，可以直接输出对象的属性"><a href="#使用str魔术方法，可以直接输出对象的属性" class="headerlink" title="使用str魔术方法，可以直接输出对象的属性"></a>使用str魔术方法，可以直接输出对象的属性</h5><h5 id="替换了原来的str方法-原来的str（对象）是内存地址-也替换了对象的打印方式"><a href="#替换了原来的str方法-原来的str（对象）是内存地址-也替换了对象的打印方式" class="headerlink" title="&#x3D;&#x3D;替换了原来的str方法 ,原来的str（对象）是内存地址,也替换了对象的打印方式&#x3D;&#x3D;"></a>&#x3D;&#x3D;替换了原来的str方法 ,原来的str（对象）是内存地址,也替换了对象的打印方式&#x3D;&#x3D;</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    name:<span class="literal">None</span></span><br><span class="line">    address=<span class="literal">None</span></span><br><span class="line">    number=<span class="literal">None</span></span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,address,number,age</span>):</span><br><span class="line"></span><br><span class="line">        self.name= name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.number=number</span><br><span class="line">        self.address=address</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>,<span class="subst">&#123;self.age&#125;</span>,<span class="subst">&#123;self.address&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="string">&quot;日本&quot;</span>,<span class="number">198283095</span>,<span class="number">17</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(xrb))</span><br><span class="line"><span class="comment"># 王大山,17,日本</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><hr><h5 id="lt-方法"><a href="#lt-方法" class="headerlink" title="__lt__方法"></a>__lt__方法</h5><blockquote><h5 id="操控原来的"><a href="#操控原来的" class="headerlink" title="操控原来的&lt;,原来是比较内存位置的大小"></a>操控原来的&lt;,原来是比较内存位置的大小</h5></blockquote>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line"></span><br><span class="line">        self.name= name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>,<span class="subst">&#123;self.age&#125;</span>,<span class="subst">&#123;self.address&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.age&gt;other.age</span><br><span class="line"></span><br><span class="line">xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="number">17</span>)</span><br><span class="line">xrb1=student(<span class="string">&quot;周杰伦&quot;</span>,<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(xrb.age,xrb1.age)</span><br><span class="line"><span class="built_in">print</span>(xrb&gt;xrb1)</span><br><span class="line"><span class="built_in">print</span>(xrb.__lt__(xrb1))</span><br><span class="line"><span class="number">17</span>,<span class="number">32</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对于给定的代码，输出结果应该是不同的。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 在 `<span class="built_in">print</span>(xrb&gt;xrb1)` 中，使用了 `&gt;` 操作符进行比较。`&gt;` 操作符实际上调用了对象的 `__gt__` 方法。由于 `student` 类中没有定义 `__gt__` 方法，Python 会使用默认的比较规则进行比较。默认的比较规则是基于对象的内存地址进行比较，而不是基于对象的属性。</span><br><span class="line"><span class="number">2.</span> 在 `<span class="built_in">print</span>(xrb.__lt__(xrb1))` 中，使用了 `__lt__` 方法进行比较。`__lt__` 方法定义了对象之间的比较规则。根据 `__lt__` 方法中的逻辑，如果 `self` 对象的 `age` 属性大于 `other` 对象的 `age` 属性，它将返回 `<span class="literal">True</span>`，否则返回 `<span class="literal">False</span>`。</span><br><span class="line">在这种情况下，`xrb` 对象的 `age` 是 <span class="number">17</span>，`xrb1` 对象的 `age` 是 <span class="number">32</span>。因此，`xrb.__lt__(xrb1)` 返回 `<span class="literal">False</span>`，而不是 `<span class="literal">True</span>`。</span><br><span class="line">所以，根据提供的代码，`<span class="built_in">print</span>(xrb&gt;xrb1)` 的输出结果应该是 `<span class="literal">False</span>`，而 `<span class="built_in">print</span>(xrb.__lt__(xrb1))` 的输出结果应该是 `<span class="literal">False</span>`。</span><br></pre></td></tr></table></figure><p>   &#x3D;&#x3D;最好使用具体的方法，因为&gt;,&lt;都需要定义，默认是比较内存地址的大小，现在之定义了&lt;号，而&gt;还默认是比较内存地址&#x3D;&#x3D;</p><h5 id="print-xrb-lt-xrb1-，或者"><a href="#print-xrb-lt-xrb1-，或者" class="headerlink" title="print(xrb.lt(xrb1))，或者&lt;，才是自己定义的方法，如果符合return后面的式子就返回true"></a>print(xrb.<strong>lt</strong>(xrb1))，或者&lt;，才是自己定义的方法，如果符合return后面的式子就返回true</h5><hr><ol start="3"><li>__lt__方法</li></ol><blockquote><h5 id="操控原来-的"><a href="#操控原来-的" class="headerlink" title="操控原来 的&lt;&#x3D; ，原来是比较内存位置的大小"></a>操控原来 的&lt;&#x3D; ，原来是比较内存位置的大小</h5></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line"></span><br><span class="line">         self.name= name</span><br><span class="line">         self.age=age</span><br><span class="line"></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>,<span class="subst">&#123;self.age&#125;</span>,<span class="subst">&#123;self.address&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self,other</span>):</span><br><span class="line">         <span class="keyword">return</span> self.age&lt;other.age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self,other</span>):</span><br><span class="line">         <span class="keyword">return</span> self.age&lt;=other.age</span><br><span class="line"></span><br><span class="line"> xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="number">32</span>)</span><br><span class="line"> xrb1=student(<span class="string">&quot;周杰伦&quot;</span>,<span class="number">32</span>)</span><br><span class="line">xrb2=student(<span class="string">&quot;林俊杰&quot;</span>,<span class="number">11</span>)</span><br><span class="line"> <span class="comment"># print(xrb.age,xrb1.age)</span></span><br><span class="line"> <span class="built_in">print</span>(xrb2&lt;=xrb1)</span><br><span class="line"> <span class="built_in">print</span>(xrb.__le__(xrb1))</span><br><span class="line"> <span class="comment"># True</span></span><br><span class="line"> <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="在-Python-中，-操作符和-操作符的默认行为是比较对象的内存位置，"><a href="#在-Python-中，-操作符和-操作符的默认行为是比较对象的内存位置，" class="headerlink" title="&#x3D;&#x3D;在 Python 中，&gt; 操作符和 &gt;= 操作符的默认行为是比较对象的内存位置，&#x3D;&#x3D;"></a>&#x3D;&#x3D;在 Python 中，<code>&gt;</code> 操作符和 <code>&gt;=</code> 操作符的默认行为是比较对象的内存位置，&#x3D;&#x3D;</h4><p>  lt le,gt ge   &lt; &lt;&#x3D; &gt; &gt;&#x3D;</p><ol start="4"><li>__eq__方法</li></ol><blockquote><h5 id="操控-原来的-是比较内存位置是否相同的"><a href="#操控-原来的-是比较内存位置是否相同的" class="headerlink" title="操控=&#x3D;,原来的&#x3D;&#x3D;是比较内存位置是否相同的"></a>操控=&#x3D;,原来的&#x3D;&#x3D;是比较内存位置是否相同的</h5></blockquote>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line"></span><br><span class="line">        self.name= name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>,<span class="subst">&#123;self.age&#125;</span>,<span class="subst">&#123;self.address&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.age&lt;other.age</span><br><span class="line">       <span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.age&lt;=other.age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.age==other.age</span><br><span class="line"></span><br><span class="line">xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="number">98</span>)</span><br><span class="line">xrb1=student(<span class="string">&quot;周杰伦&quot;</span>,<span class="number">98</span>)</span><br><span class="line">   xrb2=student(<span class="string">&quot;林俊杰&quot;</span>,<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(xrb==xrb1)</span><br><span class="line"><span class="built_in">print</span>(xrb==xrb2)</span><br></pre></td></tr></table></figure></blockquote><hr><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p><strong>把现实世界的，属性，行为，封装道类中，描述为成员变量，成员方法，从而完成程序对现实世界事物的描述</strong></p><blockquote><p>苹果越狱，安卓root</p><p>就是突破权限</p><hr><h4 id="私有成员变量，私有成员方法"><a href="#私有成员变量，私有成员方法" class="headerlink" title="私有成员变量，私有成员方法"></a>私有成员变量，私有成员方法</h4><p>如何私有？</p><hr><h5 id="1-如果一个属性或方法的名称以两个下划线开头，并且不以两个下划线结尾，那么它将被视为私有的。"><a href="#1-如果一个属性或方法的名称以两个下划线开头，并且不以两个下划线结尾，那么它将被视为私有的。" class="headerlink" title="1. &#x3D;&#x3D;如果一个属性或方法的名称以两个下划线开头，并且不以两个下划线结尾，那么它将被视为私有的。&#x3D;&#x3D;"></a>1. &#x3D;&#x3D;如果一个属性或方法的名称以两个下划线开头，并且不以两个下划线结尾，那么它将被视为私有的。&#x3D;&#x3D;</h5><h5 id="2-私有成员变量和私有成员方法在类的外部是无法直接访问的。"><a href="#2-私有成员变量和私有成员方法在类的外部是无法直接访问的。" class="headerlink" title="2. &#x3D;&#x3D;私有成员变量和私有成员方法在类的外部是无法直接访问的。&#x3D;&#x3D;"></a>2. &#x3D;&#x3D;私有成员变量和私有成员方法在类的外部是无法直接访问的。&#x3D;&#x3D;</h5><p>3&#x3D;&#x3D;<strong>私有成员通过公共的成员函数去调用和操作</strong>&#x3D;&#x3D;</p><p>类对象无法使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sb</span>:</span><br><span class="line"> __name=<span class="string">&quot;王大山&quot;</span></span><br><span class="line"> age=<span class="literal">None</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__getage</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="keyword">return</span> self.age</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">public</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span>(self.__getage())</span><br><span class="line">     <span class="keyword">return</span> self.__name</span><br><span class="line">sbson=sb()</span><br><span class="line">sbson.age=<span class="number">18</span></span><br><span class="line"><span class="comment"># print(sbson.__getage())</span></span><br><span class="line"></span><br><span class="line">sbson.__name=<span class="string">&quot;周杰伦&quot;</span></span><br><span class="line"><span class="built_in">print</span>(sbson.__name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;公共方法可以访问私有成员变量和私有成员方法,<span class="subst">&#123;sbson.public()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __name 是私有成员变量，但是在 sbson 对象上赋值 sbson.__name = &quot;周杰伦&quot; 并不会修改类中的私有成员变量 __name。相反，它会创建一个新的公有成员变量 __name 并将其赋值为 &quot;周杰伦&quot;。因此，当你打印 sbson.__name 时，它将输出 &quot;周杰伦&quot;。</span></span><br><span class="line"><span class="comment"># 周杰伦</span></span><br><span class="line"><span class="comment"># 18</span></span><br><span class="line"><span class="comment"># 公共方法可以访问私有成员变量和私有成员方法,王大山</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a><strong>单继承</strong></h5><blockquote><h5 id="class-类名（父类名）"><a href="#class-类名（父类名）" class="headerlink" title="class 类名（父类名）"></a>class 类名（父类名）</h5><h5 id="类内容体"><a href="#类内容体" class="headerlink" title="类内容体"></a>类内容体</h5><h6 id="就把父亲的成员都继承过来了。"><a href="#就把父亲的成员都继承过来了。" class="headerlink" title="&#x3D;&#x3D;就把父亲的成员都继承过来了。&#x3D;&#x3D;"></a>&#x3D;&#x3D;就把父亲的成员都继承过来了。&#x3D;&#x3D;</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span>:</span><br><span class="line"> name=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone2022</span>(<span class="title class_ inherited__">phone</span>):</span><br><span class="line"> age=<span class="literal">None</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">a6g</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;6g&quot;</span>)</span><br><span class="line">a=phone2022()</span><br><span class="line">a.a5g()</span><br><span class="line">a.a6g()</span><br><span class="line">5g</span><br><span class="line">6g</span><br></pre></td></tr></table></figure></blockquote><h5 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a><strong>多继承</strong></h5><blockquote><h5 id="class-类名-父类1，父类2，父类3-。。。"><a href="#class-类名-父类1，父类2，父类3-。。。" class="headerlink" title="class 类名(父类1，父类2，父类3.。。。)"></a>class 类名(父类1，父类2，父类3.。。。)</h5><h5 id="类内容提体"><a href="#类内容提体" class="headerlink" title="类内容提体"></a>类内容提体</h5><p>就把所有父亲的成员继承下来了。</p></blockquote><p>&#x3D;&#x3D;<em><strong>如果有同名的成员，从左到右，最左边继承的优先级最高</strong></em>&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span>:</span><br><span class="line">    name=<span class="string">&quot;黑马&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone1</span>:</span><br><span class="line">    name=<span class="string">&quot;牛马&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone2022</span>(phone1,phone):</span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a6g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;6g&quot;</span>)</span><br><span class="line">a=phone2022()</span><br><span class="line"><span class="built_in">print</span>(a.name)</span><br><span class="line">牛马</span><br></pre></td></tr></table></figure><h4 id="复写"><a href="#复写" class="headerlink" title="复写"></a>复写</h4><p><strong>&#x3D;&#x3D;子类对父亲的成员不满意，就在子类重新定义父亲继承下来的那个，名字相同，就是复写&#x3D;&#x3D;</strong></p><p><strong>复写后。子类调用类实体对象的成员是复写后 的成员</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    name=<span class="string">&quot;黑马&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line">    name=<span class="string">&quot;牛马&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a6g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;6g&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;555555g&quot;</span>)</span><br><span class="line">a=son()</span><br><span class="line"><span class="built_in">print</span>(a.name)</span><br><span class="line">a.a5g()</span><br><span class="line"><span class="comment"># 牛马</span></span><br><span class="line"><span class="comment"># 555555g</span></span><br></pre></td></tr></table></figure><p><strong>但复写后，还想使用父类原来的成员，也就是复写前的父类成员</strong></p><blockquote><ol><li><h4 id="用父类名-成员-类外-，子类内都可以使用"><a href="#用父类名-成员-类外-，子类内都可以使用" class="headerlink" title="用父类名.成员   类外&#x3D;&#x3D;，子类内都可以使用&#x3D;&#x3D;"></a>用父类名.成员   类外&#x3D;&#x3D;，子类内都可以使用&#x3D;&#x3D;</h4><p><strong>在类外调用成员行为需要实例化一个对象先</strong></p><p><strong>在子类里面调用父类的行为需要加（self）参数</strong></p></li><li><h4 id="super-父类成员-只能在子类的类体内使用-★★★★★★★★"><a href="#super-父类成员-只能在子类的类体内使用-★★★★★★★★" class="headerlink" title="super().父类成员  &#x3D;&#x3D;只能在子类的类体内使用&#x3D;&#x3D; ★★★★★★★★"></a>super().父类成员  &#x3D;&#x3D;只能在子类的类体内使用&#x3D;&#x3D; ★★★★★★★★</h4></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    name=<span class="string">&quot;黑马&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line">    name=<span class="string">&quot;牛马&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a6g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">super</span>().name)</span><br><span class="line">        <span class="built_in">print</span>(father.name)</span><br><span class="line"></span><br><span class="line">        father.a5g(self)</span><br><span class="line">        <span class="built_in">super</span>().a5g()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">a=son()</span><br><span class="line"><span class="built_in">print</span>(a.name)</span><br><span class="line">a.a6g()</span><br><span class="line"><span class="built_in">print</span>(father.name)</span><br><span class="line"><span class="comment"># 牛马</span></span><br><span class="line"><span class="comment"># 黑马</span></span><br><span class="line"><span class="comment"># 黑马</span></span><br><span class="line"><span class="comment"># 黑马</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h4><p><strong>方便开发者看</strong></p><p><strong>帮助ide代码提示</strong></p><p><strong>标记错了也不影响运行</strong></p><p><strong>变量:类型</strong></p><p><strong>数据容器:类型[类型注解挨个，如果统一写一个就ok]</strong></p><p><strong>数据容器都用[]</strong></p><h5 id="变量，数据容器的类型注解"><a href="#变量，数据容器的类型注解" class="headerlink" title="变量，数据容器的类型注解"></a>变量，数据容器的类型注解</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="built_in">int</span>=<span class="number">10</span></span><br><span class="line">b=<span class="number">10</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sb</span>:</span><br><span class="line">    name:<span class="built_in">str</span>=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">xrb:sb=sb()</span><br><span class="line">mylist:<span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">mylist1:<span class="built_in">list</span>[<span class="built_in">int</span>]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">mytuple:<span class="built_in">tuple</span>=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">mytuple1:<span class="built_in">tuple</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]=(<span class="number">1</span>,<span class="string">&quot;adsad&quot;</span>)</span><br><span class="line"></span><br><span class="line">myset:<span class="built_in">set</span>=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">myset1:<span class="built_in">set</span>[<span class="built_in">int</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mydict:<span class="built_in">dict</span>=&#123;<span class="string">&quot;ky1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;ky2&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line">mydict1:<span class="built_in">dict</span>[<span class="built_in">str</span>,<span class="built_in">int</span>]</span><br></pre></td></tr></table></figure><blockquote><h5 id="给无法直接看出变量类型的变量添加类型注解"><a href="#给无法直接看出变量类型的变量添加类型注解" class="headerlink" title="给无法直接看出变量类型的变量添加类型注解"></a><strong>给无法直接看出变量类型的变量添加类型注解</strong></h5></blockquote><hr><h5 id="函数参数的类型注解"><a href="#函数参数的类型注解" class="headerlink" title="函数参数的类型注解"></a><strong>函数参数的类型注解</strong></h5><p><em><strong>就会有类型提示了，ide知道了</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="string">&quot;你好&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="函数返回值的类型注解"><a href="#函数返回值的类型注解" class="headerlink" title="函数返回值的类型注解"></a>函数返回值的类型注解</h5><p><em><strong>-&gt;就会帮函数的返回值给予提示</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">str</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h5 id="Union类型注解"><a href="#Union类型注解" class="headerlink" title="Union类型注解"></a>Union类型注解</h5><ol><li><h5 id="导入Union模块"><a href="#导入Union模块" class="headerlink" title="导入Union模块"></a>导入Union模块</h5></li><li><h5 id="注释的时候如果里面的数据多，且是混合的，之前的挨个注释就不太方便了"><a href="#注释的时候如果里面的数据多，且是混合的，之前的挨个注释就不太方便了" class="headerlink" title="注释的时候如果里面的数据多，且是混合的，之前的挨个注释就不太方便了"></a>注释的时候如果里面的数据多，且是混合的，之前的挨个注释就不太方便了</h5></li><li><h5 id="union-数据类型1，数据类型2"><a href="#union-数据类型1，数据类型2" class="headerlink" title="union[数据类型1，数据类型2]"></a>union[数据类型1，数据类型2]</h5></li><li><h5 id="表示要么是数据类型1，要么是数据类型2"><a href="#表示要么是数据类型1，要么是数据类型2" class="headerlink" title="表示要么是数据类型1，要么是数据类型2"></a>表示要么是数据类型1，要么是数据类型2</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line">mylist:<span class="built_in">list</span>[<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="string">&quot;s&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line">mydict=&#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">3</span>,<span class="string">&quot;1&quot;</span>:<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;2&quot;</span>:<span class="string">&quot;我去&quot;</span>&#125;</span><br><span class="line">mydict:<span class="built_in">dict</span>[<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>],<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]]=&#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">3</span>,<span class="string">&quot;1&quot;</span>:<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;2&quot;</span>:<span class="string">&quot;我去&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">data:<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]</span>)-&gt;<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">a()提示</span><br><span class="line">(variable) <span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">data: <span class="built_in">int</span> | <span class="built_in">str</span></span>) -&gt; (<span class="built_in">int</span> | <span class="built_in">str</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ol><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p><strong>多种状态，完成某个行为的时候，使用不同的对象得到不同的结果</strong></p><p><strong>animal；相当于顶层设计，设计一个标准</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;喵喵喵&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jiao</span>(<span class="params">a:animal</span>):</span><br><span class="line">    a.speak()</span><br><span class="line"></span><br><span class="line">dog=dog()</span><br><span class="line">cat=cat()</span><br><span class="line"></span><br><span class="line">jiao(dog)</span><br><span class="line">jiao(cat)</span><br><span class="line">汪汪汪</span><br><span class="line">喵喵喵</span><br></pre></td></tr></table></figure><p><strong>抽象类（接口）：含有抽象方法的类</strong></p><p><strong>抽象方法：方法体的实现是空的PASS</strong></p><p><strong>顶层设计有多少个抽象方法，以后就要有对应几个函数。</strong></p><p><strong>顶层设计标准，子类来实现具体的功能</strong></p><p><strong>要求子类必须复写实现具体的功能</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">airconditioner</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cool</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_hot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">geli</span>(<span class="title class_ inherited__">airconditioner</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cool</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;格力的制冷&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_hot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;格力的制热&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;格力的左右摇摆&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">meidi</span>(<span class="title class_ inherited__">airconditioner</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cool</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;美的的制冷&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_hot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;美的的制热&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;美的的左右摇摆&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mc</span>(<span class="params"><span class="built_in">object</span>:airconditioner</span>):</span><br><span class="line">    <span class="built_in">object</span>.make_cool()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mh</span>(<span class="params"><span class="built_in">object</span>:airconditioner</span>):</span><br><span class="line">    <span class="built_in">object</span>.make_hot()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params"><span class="built_in">object</span>:airconditioner</span>):</span><br><span class="line">    <span class="built_in">object</span>.swing()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">airmeidi=meidi()</span><br><span class="line">airgeli=geli()</span><br><span class="line"></span><br><span class="line">mc(airgeli)</span><br><span class="line">mc(airmeidi)</span><br><span class="line"><span class="comment"># 格力的制冷</span></span><br><span class="line"><span class="comment"># 美的的制冷</span></span><br><span class="line">mh(airgeli)</span><br><span class="line">mh(airmeidi)</span><br><span class="line"><span class="comment"># 格力的制热</span></span><br><span class="line"><span class="comment"># 美的的制热</span></span><br><span class="line">swing(airgeli)</span><br><span class="line">swing(airmeidi)</span><br><span class="line"><span class="comment"># 格力的左右摇摆</span></span><br><span class="line"><span class="comment"># 美的的左右摇摆</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SQL数据库（简单入门）"><a href="#SQL数据库（简单入门）" class="headerlink" title="SQL数据库（简单入门）"></a>SQL数据库（简单入门）</h3><p><strong>&#x3D;&#x3D;字符串的值，出现在sql语句中，必须用单引号包起来&#x3D;&#x3D;</strong></p><p><strong>后端&#x3D;sql+编程语言</strong></p><p><strong>SQL开发人员必备技能</strong></p><p><strong>SQL{pyspark，pyflink,BI可视化}</strong></p><p><em><strong>数据的存储，数据库管理系统</strong></em></p><hr><p><strong>&#x3D;&#x3D;数据库是对数据库数据的操作管理查询&#x3D;&#x3D;</strong></p><p><em><strong>而操控数据库需要用到SQL语言</strong></em></p><p>组织数据：库-&gt;表-&gt;数据</p><blockquote><ol><li><p>进入mysql开发环境</p><p>mysql -uroot -p</p><blockquote><p> 在命令行环境中</p><ol><li>show databases;查看有哪些数据库</li><li>use 数据库名  使用某个数据库</li><li>show tables 查看数据库内有哪些表</li><li>exit 退出数据库</li></ol></blockquote></li></ol></blockquote><p><strong>mysql图形化工具DBeaver免费开源</strong></p><p>SQL语言的分类</p><blockquote><ol><li><p>数据定义</p><ol><li>数据定义D D L   -define</li><li>数据操纵D M L   -manipulate</li><li>数据控制D C L   - control</li><li>数据查询D Q L   quer</li></ol></li><li><p>简单语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="keyword">SHOW</span> databases;</span><br><span class="line"><span class="keyword">show</span></span><br><span class="line">databases;</span><br><span class="line"># dsadsadasd</span><br><span class="line"><span class="comment">-- dasdadasd</span></span><br><span class="line"><span class="comment">/*三大</span></span><br><span class="line"><span class="comment"> * 大撒大撒</span></span><br><span class="line"><span class="comment"> * 撒大苏打</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span><span class="operator">*</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><h5 id="对大小写不敏感"><a href="#对大小写不敏感" class="headerlink" title="对大小写不敏感"></a>对大小写不敏感</h5><h5 id="可以换行写，但必须以-结尾"><a href="#可以换行写，但必须以-结尾" class="headerlink" title="可以换行写，但必须以;结尾"></a>可以换行写，但必须以;结尾</h5><h5 id="三种注释方法-单行-空格-空格"><a href="#三种注释方法-单行-空格-空格" class="headerlink" title="三种注释方法:单行:#(空格),-空格,"></a>三种注释方法:单行:#(空格),-空格,</h5><h5 id="多行"><a href="#多行" class="headerlink" title="多行:&#x2F;**&#x2F;"></a>多行:&#x2F;**&#x2F;</h5></li></ol></blockquote><h4 id="数据定义D-D-L"><a href="#数据定义D-D-L" class="headerlink" title="数据定义D D L"></a>数据定义D D L</h4><p><strong>库管理</strong></p><blockquote><ol><li><p>查看数据库</p><h5 id="show-databases"><a href="#show-databases" class="headerlink" title="show databases;"></a>show databases;</h5></li><li><p>使用数据库</p><h5 id="use-库名"><a href="#use-库名" class="headerlink" title="use 库名;"></a>use 库名;</h5></li><li><p>创建数据库</p><h5 id="create-database-库名-charset-utf-8"><a href="#create-database-库名-charset-utf-8" class="headerlink" title="create database 库名 [charset utf-8];"></a>create database 库名 [charset utf-8];</h5></li><li><p>删除数据库</p><h5 id="drop-database-库名"><a href="#drop-database-库名" class="headerlink" title="drop database 库名;"></a>drop database 库名;</h5></li><li><p>查看当前使用的数据库</p><h5 id="select-database"><a href="#select-database" class="headerlink" title="select database();"></a>select database();</h5></li></ol></blockquote><p>**表管理**</p><blockquote><ol><li><p>查看表</p><h5 id="先选择数据库"><a href="#先选择数据库" class="headerlink" title="先选择数据库"></a>先选择数据库</h5><h5 id="show-tables"><a href="#show-tables" class="headerlink" title="show tables;"></a>show tables;</h5></li><li><p>添加表</p><h5 id="creat-table-表（"><a href="#creat-table-表（" class="headerlink" title="creat table 表（"></a>creat table 表（</h5><h5 id="列名-列类型"><a href="#列名-列类型" class="headerlink" title="列名 列类型,"></a>列名 列类型,</h5><h5 id="列名-列类型-1"><a href="#列名-列类型-1" class="headerlink" title="列名 列类型,"></a>列名 列类型,</h5><h5 id="列名-列类型-2"><a href="#列名-列类型-2" class="headerlink" title="列名 列类型"></a>列名 列类型</h5><h5 id="）"><a href="#）" class="headerlink" title="）;"></a>）;</h5><p><strong>最后一个表的添加不需要,</strong></p></li><li><p>删除表</p><h5 id="drop-table-表名"><a href="#drop-table-表名" class="headerlink" title="drop table 表名;"></a>drop table 表名;</h5><h5 id="drop-table-if-exits-表名"><a href="#drop-table-if-exits-表名" class="headerlink" title="drop table if exits 表名;"></a>drop table if exits 表名;</h5></li></ol><p>&#x3D;&#x3D;<strong>选中要运行的语句然后执行</strong>&#x3D;&#x3D;</p></blockquote><hr><h4 id="数据操作D-M-L"><a href="#数据操作D-M-L" class="headerlink" title="数据操作D M L"></a>数据操作D M L</h4><p>对表的数据操作</p><blockquote><ol><li><p>数据插入insert</p><p>insert into 表名([列],,,,,) values (对应的值,,,,,,,,,)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id) <span class="keyword">values</span> (<span class="number">1001</span>),(<span class="number">1002</span>),(<span class="number">1003</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> student(id,name,age) <span class="keyword">values</span> (<span class="number">001</span>,&quot;林俊杰&quot;,<span class="number">18</span>),(<span class="number">002</span>,&quot;张杰&quot;,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span>  student <span class="keyword">values</span> (<span class="number">001</span>,&quot;林俊杰&quot;,<span class="number">18</span>),(<span class="number">002</span>,&quot;张杰&quot;,<span class="number">23</span>);</span><br></pre></td></tr></table></figure></li><li><p>数据的删除delete</p><h5 id="delete-from-表名-where-条件判断"><a href="#delete-from-表名-where-条件判断" class="headerlink" title="delete from 表名 [where 条件判断];"></a>delete from 表名 [where 条件判断];</h5><h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断:&gt; &lt; &#x3D; &gt;&#x3D; &lt;&#x3D; !&#x3D;"></a>条件判断:&gt; &lt; &#x3D; &gt;&#x3D; &lt;&#x3D; !&#x3D;</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">删除具体的</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student;</span><br><span class="line">删除整张表</span><br></pre></td></tr></table></figure></li><li><p>数据的更新update</p><h5 id="update-表-set-列-值-where-条件判断"><a href="#update-表-set-列-值-where-条件判断" class="headerlink" title="update 表 set 列&#x3D;值 [where 条件判断];"></a>update 表 set 列&#x3D;值 [where 条件判断];</h5><h5 id="条件判断-1"><a href="#条件判断-1" class="headerlink" title="条件判断:&gt; &lt; &#x3D; &gt;&#x3D; &lt;&#x3D; !&#x3D;"></a>条件判断:&gt; &lt; &#x3D; &gt;&#x3D; &lt;&#x3D; !&#x3D;</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> name<span class="operator">=</span>&quot;牛马程序员&quot; <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="数据查找-D-Q-L"><a href="#数据查找-D-Q-L" class="headerlink" title="数据查找 D Q L"></a>数据查找 D Q L</h4><blockquote><ol><li><h5 id="最基础的数据查找"><a href="#最基础的数据查找" class="headerlink" title="最基础的数据查找"></a>最基础的数据查找</h5><p>select  列表 from 表</p><p>*代表该表的所有列</p><p>where 条件判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name,age,gender <span class="keyword">from</span> students;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students age<span class="operator">&gt;=</span><span class="number">18</span>;</span><br></pre></td></tr></table></figure></li><li><p>分组聚合</p><p>基础语法: group by 列，按照列分组</p><h6 id="SELECT-字段-聚合函数-FROM-表-WHERE条件-GROUP-BY列"><a href="#SELECT-字段-聚合函数-FROM-表-WHERE条件-GROUP-BY列" class="headerlink" title="SELECT&#x3D;&#x3D;字段&#x3D;&#x3D;|聚合函数 FROM 表[WHERE条件] &#x3D;&#x3D;GROUP BY列&#x3D;&#x3D;"></a>SELECT&#x3D;&#x3D;字段&#x3D;&#x3D;|聚合函数 FROM 表[WHERE条件] &#x3D;&#x3D;GROUP BY列&#x3D;&#x3D;</h6><p><strong>&#x3D;&#x3D;GROUP BY中出现了哪个列，哪个列才能出现在SELECT中的非聚合中。&#x3D;&#x3D;</strong></p><p>聚合函数有:<br>SUM(列)求和<br>AVG(列)求平均值<br>MIN(列)求最小值<br>MAX(列)求最大值<br>COUNT(列| *）:求数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sex,<span class="built_in">avg</span>(age) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="数据排序-D-C-L"><a href="#数据排序-D-C-L" class="headerlink" title="数据排序 D C L"></a>数据排序 D C L</h4><blockquote><h5 id="select-列-from-student-where-条件判断-order-by-字段-asc-desc"><a href="#select-列-from-student-where-条件判断-order-by-字段-asc-desc" class="headerlink" title="select 列|* from student [where 条件判断] order by 字段 [asc|desc] ;"></a><strong>select</strong> 列|* <strong>from</strong> student [<strong>where</strong> 条件判断] <strong>order</strong> <strong>by</strong> 字段 [asc|desc] ;</h5><p>默认是asc，也就是升序。</p><p>按照字段排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">&gt;=</span><span class="number">18</span> <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p>加个限制条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">&gt;=</span><span class="number">18</span> <span class="keyword">order</span> <span class="keyword">by</span> age limit n[,m];</span><br></pre></td></tr></table></figure><p>只有n的时候就取前n条数据</p><p>既有n又有m的时候是取n（不包含第n条)之后的m条数据</p></blockquote><p>where,group by ,order by,limit 都可以省略，按照需求</p><hr><p>执行顺序:<br>FROM -&gt; WHERE -&gt; GROUP BY和聚合函数-&gt; SELECT -&gt; ORDER BY -&gt;LIMIT</p><h4 id="PYTHON-mysql"><a href="#PYTHON-mysql" class="headerlink" title="PYTHON&amp;mysql"></a>PYTHON&amp;mysql</h4><p><strong>获取链接对象</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#导入模块</span><br><span class="line"><span class="keyword">from</span> pymysql import <span class="keyword">Connect</span></span><br><span class="line"></span><br><span class="line">#connection(主机，端口，用户，密码)得到链接对象</span><br><span class="line"><span class="keyword">sql</span><span class="operator">=</span><span class="keyword">Connect</span>(</span><br><span class="line">    host<span class="operator">=</span>&quot;localhost&quot;,</span><br><span class="line">    port<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">    <span class="keyword">user</span><span class="operator">=</span>&quot;root&quot;,</span><br><span class="line">    passwd<span class="operator">=</span>&quot;zzuli4514&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#关闭链接</span><br><span class="line">sql.close()</span><br></pre></td></tr></table></figure><p><strong>sql执行语句创建表单</strong></p><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#导入模块</span><br><span class="line"><span class="keyword">from</span> pymysql import <span class="keyword">Connect</span></span><br><span class="line">#创建链接对象</span><br><span class="line"><span class="keyword">sql</span><span class="operator">=</span><span class="keyword">Connect</span>(</span><br><span class="line">    host<span class="operator">=</span>&quot;localhost&quot;,</span><br><span class="line">    port<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">    <span class="keyword">user</span><span class="operator">=</span>&quot;root&quot;,</span><br><span class="line">    passwd<span class="operator">=</span>&quot;zzuli4514&quot;</span><br><span class="line">)</span><br><span class="line">print(sql.get_server_info())</span><br><span class="line">#链接数据库</span><br><span class="line">sql.select_db(&quot;text001&quot;)</span><br><span class="line">#创建对应的游标对象</span><br><span class="line"><span class="keyword">cursor</span><span class="operator">=</span>sql.cursor()</span><br><span class="line">#执行<span class="keyword">sql</span></span><br><span class="line">cursor.execute(&quot;create table sb2(id int)&quot;)</span><br><span class="line">#关闭链接</span><br><span class="line"></span><br><span class="line">sql.close()</span><br></pre></td></tr></table></figure><p>查询相关功能</p><p>利用游标对象执行不同的excute语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#导入模块</span><br><span class="line"><span class="keyword">from</span> pymysql import <span class="keyword">Connect</span></span><br><span class="line">#创建链接对象</span><br><span class="line"><span class="keyword">sql</span><span class="operator">=</span><span class="keyword">Connect</span>(</span><br><span class="line">    host<span class="operator">=</span>&quot;localhost&quot;,</span><br><span class="line">    port<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">    <span class="keyword">user</span><span class="operator">=</span>&quot;root&quot;,</span><br><span class="line">    passwd<span class="operator">=</span>&quot;zzuli4514&quot;</span><br><span class="line">)</span><br><span class="line">print(sql.get_server_info())</span><br><span class="line">#链接数据库</span><br><span class="line">sql.select_db(&quot;text001&quot;)</span><br><span class="line">#创建对应的游标对象</span><br><span class="line"><span class="keyword">cursor</span><span class="operator">=</span>sql.cursor()</span><br><span class="line"></span><br><span class="line">#执行<span class="keyword">sql</span></span><br><span class="line">cursor.execute(&quot;select * from student&quot;)</span><br><span class="line">data:tuple<span class="operator">=</span>cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    print(i)</span><br><span class="line"># (<span class="number">4</span>, <span class="string">&#x27;尼干吗&#x27;</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">1</span>, <span class="string">&#x27;周杰伦&#x27;</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">2</span>, <span class="string">&#x27;王大山&#x27;</span>, <span class="number">43</span>, <span class="number">2</span>, <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"># (<span class="number">3</span>, <span class="string">&#x27;周星驰&#x27;</span>, <span class="number">23</span>, <span class="number">3</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">4</span>, <span class="string">&#x27;尼干吗&#x27;</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">1</span>, <span class="string">&#x27;周杰伦&#x27;</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">2</span>, <span class="string">&#x27;王大山&#x27;</span>, <span class="number">43</span>, <span class="number">2</span>, <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"># (<span class="number">3</span>, <span class="string">&#x27;周星驰&#x27;</span>, <span class="number">23</span>, <span class="number">3</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">4</span>, <span class="string">&#x27;尼干吗&#x27;</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#关闭链接</span><br><span class="line">sql.close()</span><br></pre></td></tr></table></figure><p>对数据的更改，需要使用connection对象的commit方法来确认</p><p><strong>1,直接在创建connection对象的时候直接设置自动确认属性</strong></p><p><strong>2，在执行mysql语句后手动确认</strong></p><p><strong>只有确认的修改才能生效</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">connect=connect(</span><br><span class="line">    host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    autocommit=<span class="literal">True</span>,</span><br><span class="line">    password=<span class="string">&quot;zzuli4514&quot;</span>,</span><br><span class="line">    user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    port=<span class="number">3306</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">connect.select_db(<span class="string">&quot;text001&quot;</span>)</span><br><span class="line"></span><br><span class="line">cursor=connect.cursor()</span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">&quot;insert into student values (9,&#x27;林俊杰&#x27;,20,3,&#x27;男&#x27;);&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect.commit()</span></span><br><span class="line">connect.close()</span><br></pre></td></tr></table></figure><h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><blockquote><p><strong>不定义全局变量，让函数持续的访问和修改一个外部的变量</strong></p></blockquote><p><strong><code>nonlocal</code>是一个关键字，用于在嵌套函数中声明一个变量为非局部变量。当在一个函数内部定义了另一个函数时，内部函数可以访问外部函数的变量。然而，&#x3D;&#x3D;默认情况下，内部函数只能读取外部函数的变量，而不能修改它们。&#x3D;&#x3D;</strong></p><p><strong>在内部函数中使用<code>nonlocal</code>关键字声明一个变量时，Python会沿着作用域链向上查找，找到最近的外部函数中具有相同名称的变量，并将其标记为非局部变量。</strong></p><p><strong>&#x3D;&#x3D;<code>nonlocal</code>关键字只能在嵌套函数中使用，而不能在全局作用域或单独的函数中使用。&#x3D;&#x3D;</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">account_mount</span>(<span class="params">total=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">atm</span>(<span class="params">money,choose=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> total</span><br><span class="line">        <span class="keyword">if</span> choose:</span><br><span class="line">            total+=money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;取款:+<span class="subst">&#123;money&#125;</span>,账户余额:<span class="subst">&#123;total&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total-=money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;取款:-<span class="subst">&#123;money&#125;</span>,账户余额:<span class="subst">&#123;total&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> atm</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;无需通过定义全局变量，就可以通过函数实现持续访问，操作某个值&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;闭包使用的变量在函数内，很难被错误的误改&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;缺点，由于一直持续的引用外部函数的变量，会占用内存&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">atm=account_mount()</span><br><span class="line">atm(<span class="number">100</span>)</span><br><span class="line">atm(<span class="number">100</span>)</span><br><span class="line">atm(<span class="number">100</span>,choose=<span class="literal">False</span>)</span><br><span class="line">无需通过定义全局变量，就可以通过函数实现持续访问，操作某个值</span><br><span class="line">闭包使用的变量在函数内，很难被错误的误改</span><br><span class="line">缺点，由于一直持续的引用外部函数的变量，会占用内存</span><br><span class="line">取款:+<span class="number">100</span>,账户余额:<span class="number">100</span></span><br><span class="line">取款:+<span class="number">100</span>,账户余额:<span class="number">200</span></span><br><span class="line">取款:-<span class="number">100</span>,账户余额:<span class="number">100</span></span><br></pre></td></tr></table></figure><hr><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p><strong>在不修改原函数的内容的情况下</strong></p><p>实现给原函数添加新的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠中。。。&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">0</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">sleep</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要汤姆睡觉了&quot;</span>)</span><br><span class="line">        sleep()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要汤姆起床了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">sheep=outer(sleep)</span><br><span class="line">sheep()</span><br><span class="line"><span class="comment"># 我要汤姆睡觉了</span></span><br><span class="line"><span class="comment"># 睡眠中。。。</span></span><br><span class="line"><span class="comment"># 我要汤姆起床了</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>改进后的写法，@**outer **</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">sleep</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要汤姆睡觉了&quot;</span>)</span><br><span class="line">        sleep()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要汤姆起床了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠中。。。&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">0</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep()</span><br><span class="line"><span class="comment"># 我要汤姆睡觉了</span></span><br><span class="line"><span class="comment"># 睡眠中。。。</span></span><br><span class="line"><span class="comment"># 我要汤姆起床了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p><strong>编程套路</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sb</span>:</span><br><span class="line">    name=<span class="literal">None</span></span><br><span class="line">SB=sb()</span><br></pre></td></tr></table></figure><pre><code>**减少内存损耗，提供多个接口，只实例一个对象，导包传入一个对象。**</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 包 <span class="keyword">import</span> sb,SB</span><br><span class="line"></span><br><span class="line">s1=SB</span><br><span class="line">s2=SB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="comment"># &lt;包.sb object at 0x00000247FA22B590&gt;</span></span><br><span class="line"><span class="comment"># &lt;包.sb object at 0x00000247FA22B590&gt;</span></span><br></pre></td></tr></table></figure><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>当要创建很多很多对象的时候</p><p>有统一的getperson（）入口  易于维护</p><p>当发生修改的时候只修改工厂的方法就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">teacher</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">worker</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">factory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getperson</span>(<span class="params">self,<span class="built_in">type</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>==<span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> worker()</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>==<span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> teacher()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> student()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person=factory()</span><br><span class="line">worker=person.getperson(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">teacher=person.getperson(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">student=person.getperson(<span class="string">&#x27;s&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="进程，线程-并行执行"><a href="#进程，线程-并行执行" class="headerlink" title="进程，线程, 并行执行"></a>进程，线程, 并行执行</h4><p><strong>一个操作系统中可以有多个进程，多任务运行</strong></p><p><strong>一个进程可以运行多个线程，多线程运行</strong></p><p><img src="D:\Myblog\myblog\source_posts\new-page.assets\image-20230717134650413.png" alt="image-20230717134650413"></p><p><strong>一个进程可以有多个线程，线程之间内存是共享的。</strong></p><p><strong>不同线程之间的内存是隔离的</strong></p><p><strong>并行执行</strong></p><p>同一时间做多个事情。</p><h4 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h4><p><strong>调用threading模块，创造一个线程对象就是一个线程</strong></p><p><strong>线程一般都持久干活</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading,time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我在唱歌啦啦啦啦啦&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我在跳舞嘎嘎&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sing=threading.Thread(target=sing)</span><br><span class="line">dance=threading.Thread(target=dance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sing.start()</span><br><span class="line">dance.start()</span><br><span class="line"></span><br><span class="line">一边唱歌一边跳舞</span><br></pre></td></tr></table></figure><p>参数</p><pre><code>group: *None* **=** None,**忽略**target: ((...) -&gt; **object**) **|** *None* **=** None, **执行任务名称**name: **str** **|** *None* **=** None, **线程名一般不设置**args: Iterable[Any] **=** (), **以元组的形式传参**kwargs: Mapping[**str**, Any] **|** *None* **=** None,  **以字典的形式传参**</code></pre><p>因为target&#x3D;任务名字，没有直接调用函数,所以要另一种方式传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading,time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sing=threading.Thread(target=sing,args=(<span class="string">&quot;我在唱歌啊啊啊啊啊&quot;</span>,))</span><br><span class="line">dance=threading.Thread(target=dance,kwargs=&#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;我在跳舞蹬蹬咚咚&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sing.start()</span><br><span class="line">dance.start()</span><br></pre></td></tr></table></figure><h4 id="网络编程Socket"><a href="#网络编程Socket" class="headerlink" title="网络编程Socket"></a>网络编程Socket</h4><p>进程之间的网路通信需要<strong>socket</strong>,数据的搬运工</p><hr><p><strong>两个进程之间要想进行通讯,就必须有服务端和客户端</strong></p><p><strong>socket服务端</strong></p><blockquote><h4 id="等待其他进程的连接-可以收发信息"><a href="#等待其他进程的连接-可以收发信息" class="headerlink" title="等待其他进程的连接,可以收发信息."></a>等待其他进程的连接,可以收发信息.</h4><ol><li><p>导入内置的socket对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">import</span> socket</span><br><span class="line">   <span class="comment">#创建一个socket对象</span></span><br><span class="line">   socket_severe=socket.socket()</span><br><span class="line">   </span><br><span class="line">   <span class="comment">#服务端绑定在本机和端口</span></span><br><span class="line">   socket_severe.bind((<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>))</span><br><span class="line">   </span><br><span class="line">   <span class="comment">#设置服务端允许连接的数量</span></span><br><span class="line">   socket_severe.listen(<span class="number">1</span>)</span><br><span class="line">   <span class="comment">#等待客户端连接，这是一个阻塞语句，只有成功链接了才会执行下一句,返回一个二元元组.</span></span><br><span class="line">   client_socket,client_address=socket_severe.accept()</span><br><span class="line">   <span class="comment">#表示连接的socket对象，以及客户端的地址信息。</span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;蛙趣，客户端连接成功!,并且客户端的地址信息是<span class="subst">&#123;client_address&#125;</span>&quot;</span>)</span><br><span class="line">   <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">       client_msg=client_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">       <span class="comment">#这是一个阻塞语句，只有成功链接了才会执行下一句</span></span><br><span class="line">       <span class="built_in">print</span>(<span class="string">f&quot;客户端发送来的信息是:<span class="subst">&#123;client_msg&#125;</span>&quot;</span>)</span><br><span class="line">   </span><br><span class="line">       severe_sentmsg=<span class="built_in">input</span>(<span class="string">&quot;要给客户端回应的信息是:&quot;</span>)</span><br><span class="line">       client_socket.send(severe_sentmsg.encode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">       <span class="keyword">if</span> severe_sentmsg==<span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">   </span><br><span class="line">      client_socket.close()</span><br><span class="line">   socket_severe.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**socket客户端**</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 主动连接服务端,可以收发信息.</span></span><br><span class="line"></span><br><span class="line">**全程使用client\_\_socket对象**,**先发送后接受**</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 导入socket模块</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   <span class="keyword">import</span> socket</span><br><span class="line">   <span class="comment">#创建一个socket对象</span></span><br><span class="line">   client_socket=socket.socket()</span><br><span class="line">   <span class="comment">#客户端连接具体的服务端</span></span><br><span class="line">   </span><br><span class="line">   client_socket.connect((<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>))</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">       sent_data=<span class="built_in">input</span>(<span class="string">&quot;要给服务端发送的信息是:&quot;</span>)</span><br><span class="line">       <span class="keyword">if</span> sent_data==<span class="string">&quot;exit&quot;</span>:</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">       client_socket.send(sent_data.encode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">   </span><br><span class="line">       recv_data=client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">   </span><br><span class="line">       <span class="built_in">print</span>(<span class="string">f&quot;服务端返回来的信息是:<span class="subst">&#123;recv_data.decode(<span class="string">&#x27;UTF-8&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">         <span class="comment">#关闭链接</span></span><br><span class="line">   client_socket.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 正则表达式</span></span><br><span class="line"></span><br><span class="line">**正则表达式,又称规则表达式( Regular Expression),是使用单个字符串来描述、匹配某个句法规则的字符串,常被用**</span><br><span class="line">**来检索、替换那些符合某个模式(规则)的文本。**</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> **<span class="keyword">match</span>,search,findall方法**</span><br><span class="line"><span class="number">1.</span> **span得到的是对应的(起始下标，末下标+<span class="number">1</span>)**</span><br><span class="line"><span class="number">1.</span> <span class="keyword">match</span>是从头到尾开始匹配，如果刚开始都没有，后面又也没用。</span><br><span class="line"><span class="number">1.</span> search也从头开始找，但只找第一个。</span><br><span class="line"><span class="number">1.</span> findall，全部找，不管在哪能找到，并以列表的形式返回</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#导入正则表达式的RE模块</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------match-------------------    &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;python itniuma python itniuma&quot;</span></span><br><span class="line"><span class="comment">#目标字符串</span></span><br><span class="line">result=re.<span class="keyword">match</span>(<span class="string">&quot;python&quot;</span>,<span class="built_in">str</span>)</span><br><span class="line"><span class="comment">#re模块的match对象实例化</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(result.span())</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># &lt;re.Match object; span=(0, 6), match=&#x27;python&#x27;&gt;</span></span><br><span class="line"><span class="comment"># (0, 6)</span></span><br><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="comment">#从前到后开始找，如果刚开始就匹配不到，就算后面又有也没用</span></span><br><span class="line"><span class="comment"># 如果没有就返回none</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;--------------------search---------------------    &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;1python itniuma python itniuma&quot;</span></span><br><span class="line"></span><br><span class="line">result=re.search(<span class="string">&quot;python&quot;</span>,<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(result.span())</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment">#  &lt;re.Match object; span=(1, 7), match=&#x27;python&#x27;&gt;</span></span><br><span class="line"><span class="comment"># (1, 7)</span></span><br><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="comment">#有的话只找一个！</span></span><br><span class="line"><span class="comment"># 如果没有就返回none</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------------------findall-----------------------    &quot;</span>)</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;1python itniuma python itniuma&quot;</span></span><br><span class="line">result=re.findall(<span class="string">&quot;python&quot;</span>,<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># print(result.count(&quot;python&quot;))</span></span><br><span class="line"><span class="comment"># [&#x27;python&#x27;, &#x27;python&#x27;]</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><hr><h4 id="正则表达式——元字符匹配"><a href="#正则表达式——元字符匹配" class="headerlink" title="正则表达式——元字符匹配"></a>正则表达式——元字符匹配</h4><table><thead><tr><th align="center">字符</th><th>功能</th></tr></thead><tbody><tr><td align="center">.</td><td>匹配任意1个字符(除了\n) ，.匹配点本身</td></tr><tr><td align="center">[]</td><td>匹配[ ]中列举的字符</td></tr><tr><td align="center">\d</td><td>匹配数字，即0-9</td></tr><tr><td align="center">\D</td><td>匹配非数字</td></tr><tr><td align="center">\s</td><td>匹配空白，即空格、tab键 .</td></tr><tr><td align="center">\S</td><td>匹配非空白</td></tr><tr><td align="center">\w</td><td>匹配单词字符，即a-Z、A-Z、  日-9、 _</td></tr><tr><td align="center">\W</td><td>匹配非单词字符</td></tr></tbody></table><p>r标记是查找原始的字符串，转义字符无效</p><p><strong>数量匹配</strong></p><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个规则的字符出现0至无数次  [0,+∞)</td></tr><tr><td>+</td><td>匹配前一个规则的字符出现1至无数次   [1,+∞)</td></tr><tr><td>？</td><td>匹配前一个规则的字符出现0次或1次     o||1</td></tr><tr><td>{m}</td><td>匹配前一个规则的字符出现m次    &#x3D;&#x3D;m</td></tr><tr><td>{m,}</td><td>匹配前一个规则的字符出现最少m次  &gt;&#x3D;m</td></tr><tr><td>{m,n}</td><td>匹配前一个规则的字符出现m到n次   [m,n]</td></tr></tbody></table><p><strong>边界匹配</strong></p><p>^$匹配整体需要加这个</p><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td></tr><tr><td>\b</td><td>匹配一个单词的边界</td></tr><tr><td>\B</td><td>匹配非单词边界</td></tr></tbody></table><p>分组匹配</p><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">|</td><td align="left">匹配左右任意一个表达式</td></tr><tr><td align="center">（）</td><td align="left">将括号中字符作为一个分组</td></tr></tbody></table><p><img src="D:\Myblog\myblog\source_posts\new-page.assets\image-20230720182736642.png" alt="image-20230720182736642"></p><p>如果正则表达式里面有（），会把每一个（）都列出来，findall，每一个组的匹配返回，可以外加一个大括号.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
