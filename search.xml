<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git入门</title>
      <link href="/xu-runbo/post/8e7db504.html"/>
      <url>/xu-runbo/post/8e7db504.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>&#x3D;&#x3D;Git&#x3D;&#x3D;</p><p>git介绍</p><p>git安装</p><p>git命令</p><p>git分支</p><p>idea 继承git</p><hr><p>&#x3D;&#x3D;Github&#x3D;&#x3D;</p><p>创建远程库</p><p>代码推送 push</p><p>代码拉取 pull</p><p>代码克隆 clone</p><p>SSH免密登录</p><p>idea继承github</p><hr><p>&#x3D;&#x3D;Gitee码云&#x3D;&#x3D;</p><p>码云创建远程库</p><p>idea继承gitee码云</p><p>码云连接github进行代码的复制和迁徙</p><hr><p>&#x3D;&#x3D;Gitlab&#x3D;&#x3D;</p><p>GitLab服务器的搭建和部署</p><p>Idea继承GitLab</p></blockquote><h2 id="Git介绍"><a href="#Git介绍" class="headerlink" title="Git介绍"></a>Git介绍</h2><p><a href="https://git-scm.com/">git-scm.com</a></p><p>Git是一个&#x3D;&#x3D;<strong>分布式版本控制系统</strong>&#x3D;&#x3D;，用于跟踪文件和代码的修改。</p><p>它最初由Linus Torvalds创建，用于管理Linux内核的开发。</p><p>Git的设计目标是速度、数据完整性和支持分布式、非线性工作流程。</p><p>Git与其他&#x3D;&#x3D;<strong><a href="#%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">版本控制系统</a></strong>&#x3D;&#x3D;（如SVN）的主要区别在于它是&#x3D;&#x3D;<strong>分布式</strong>&#x3D;&#x3D;的。</p><p>这意味着&#x3D;&#x3D;<strong>每个开发者都可以在本地完整地拥有代码库的副本</strong>&#x3D;&#x3D;</p><p><strong><em>并可以在没有网络连接的情况下进行工作</em>。</strong></p><p>分布式架构使得Git在协作开发和并行开发方面更加灵活，有助于<strong>避免单点故障</strong>和提高开发效率。</p><p>使用Git，可以：</p><ol><li>创建代码仓库（repository）：Git将您的项目存储为一个代码仓库，可以<strong>跟踪文件和目录的变化</strong>。</li><li>记录版本历史：<strong>Git会记录每次提交（commit），包括更改的内容、作者、时间等信息，形成一个完整的版本历史</strong>。history</li><li>分支和合并：<strong>Git允许您创建不同的分支，以便并行开发不同的功能或解决不同的问题，并能够合并分支的更改。</strong></li><li>远程仓库协作：Git支持与远程仓库进行协作，方便团队成员之间的<strong>代码共享</strong>和<strong>合作开发</strong>。</li></ol><blockquote><p>通过学习Git，您可以更好地跟踪和管理代码的变化，协作开发，避免代码冲突，并且在需要时轻松回滚到之前的版本。无论是个人开发者还是团队成员，掌握Git都是很有价值的技能。</p></blockquote><p><em>git可以随意使用Linux命令</em></p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a><a name="版本控制">版本控制</a></h3><p>&#x3D;&#x3D;<strong>个人开发过度到团队协作</strong>&#x3D;&#x3D;<img src="/xu-runbo/post/8e7db504/image-20231021150047145.png" class="" title="image-20231021150047145"></p><ol><li><p>集中式版本控制工具</p><blockquote><p>集中式版本控制工具（Centralized Version Control System，简称CVCS）是一种软件工具，用于&#x3D;&#x3D;<strong>管理和控制文件的版本</strong>&#x3D;&#x3D;。它具有以下特点：</p><ol><li>中央服务器：CVCS使用一个中央服务器作为代码仓库，所有开发者从该服务器拉取代码，并将代码提交到服务器上。服务器存储所有文件的历史版本和变更记录。</li><li>协作开发：开发者可以从中央服务器上获取最新版本的代码，并在自己的工作副本上进行修改。他们可以将修改后的代码提交到服务器，**以便其他人可以获取并&#x3D;&#x3D;继续开发&#x3D;&#x3D;**。</li><li>文件锁定：CVCS通常支持文件级别的锁定机制，<strong>即当一个开发者正在编辑某个文件时，其他开发者无法同时编辑该文件</strong>，以避免冲突和覆盖修改。</li><li>必须联网：CVCS需要开发者与中央服务器进行通信，因此必须处于联网状态才能正常使用。</li></ol><p>一些常见的集中式版本控制工具包括SVN（Subversion）和Perforce。</p><blockquote><p>如果服务器单点故障，如果服务器宕机一个小时，那么一个小时内谁都不能个更新，无法协同工作。</p></blockquote><p>尽管集中式版本控制工具在过去被广泛使用，但随着分布式版本控制系统（如Git）的兴起，越来越多的开发者转向了分布式方式，因为分布式版本控制系统具有更强大的分支和合并功能，并且更适用于协作开发和灵活的工作流程。</p></blockquote></li><li><p>分布式版本控制系统</p><blockquote><p>分布式版本控制工具（Distributed Version Control System，简称DVCS）是一种软件工具，用于管理和控制文件的版本。相比于集中式版本控制工具（如SVN），它具有以下特点：</p><ol><li><p>分布式架构：&#x3D;&#x3D;每个开发者都可以在本地拥有完整的代码仓库，并能够处理版本控制操作。&#x3D;&#x3D;</p></li><li><p>没有文件锁定：因为<strong>每个开发者都拥有完整的代码仓库，所以他们可以同时进行修改而无需锁定文件。</strong>系统可以自动合并代码变更。</p></li><li><p>离线工作：由于每个开发者都有本地版本库，因此他们可以脱机工作，对代码进行修改，然后在联网时将变更推送到其他人。</p></li><li><p>易于分支和合并：DVCS具有强大的分支和合并功能，使得开发者可以创建和管理多个分支，以便开发新特性、修复问题或测试代码，而且合并变得更加容易和安全。</p></li></ol><p>一些常见的DVCS版本控制工具包括Git、Mercurial和Bazaar。</p><p>总体而言，DVCS比CVCS更适合于大型项目和分布式团队开发，因为它具有<strong>更强大的分支和合并能力</strong>，以及更好的<strong>离线工作方式和版本库备份机制。</strong></p></blockquote></li><li><p>&#x3D;&#x3D;二者区别&#x3D;&#x3D;</p><blockquote><p>集中式版本控制系统（Centralized Version Control System，CVCS）和分布式版本控制系统（Distributed Version Control System，DVCS）区别:</p><ol><li><p>架构：CVCS采用集中式架构，&#x3D;&#x3D;所有的代码库和版本历史都保存在中央服务器上&#x3D;&#x3D;，开发者通过连接到服务器进行操作。而DVCS采用&#x3D;&#x3D;<strong>分布式架构，每个开发者都有一个完整的本地代码库</strong>&#x3D;&#x3D;，包含完整的版本历史和所有文件。</p></li><li><p>依赖性：&#x3D;&#x3D;CVCS对中央服务器有较大的依赖性，开发者需要实时连接服务器才能进行版本控制操作。&#x3D;&#x3D;而DVCS不依赖于中央服务器，开发者可以在本地进行版本控制操作，只在需要与他人协作或推送变更时才连接服务器。</p></li><li><p>并发性：&#x3D;&#x3D;CVCS在处理并发修改时存在文件锁定的机制&#x3D;&#x3D;，即同一时间只能有一个开发者对某文件进行修改。而DVCS没有文件锁定，&#x3D;&#x3D;开发者可以同时对同一个文件进行修改，并通过合并操作将修改结果合并到共享的代码库中。&#x3D;&#x3D;</p></li><li><p>分支和合并：CVCS的分支和合并功能相对较弱，需要通过服务器的支持进行操作，并且合并过程可能较为复杂。而DVCS具有强大的分支和合并功能，开发者可以随时创建和管理本地分支，并轻松进行分支合并操作。</p></li><li><p>灵活性和离线工作：<code>CVCS在没有网络连接时无法进行版本控制操作，</code><strong>依赖于中央服务器</strong>。而DVCS由于每个开发者都有完整的代码库，可以在离线状态下进行版本控制操作，只需要在联网时将变更推送到其他人。</p></li></ol><p>总体而言，DVCS相比CVCS更加灵活、强大和适应分布式团队开发，而CVCS适用于中小团队或者需要严格控制权限和集中管理的项目。选择使用哪种版本控制系统取决于项目的规模、团队协作方式和开发流程的需求。</p></blockquote></li></ol><h3 id="Git发展历史"><a href="#Git发展历史" class="headerlink" title="Git发展历史"></a>Git发展历史</h3><p>Git是由Linux之父Linus Torvalds在2005年创立的分布式版本控制系统。Git的历史可以追溯到2002年，当时开源版本控制系统BitKeeper公司禁止Linux社区继续使用免费的BitKeeper工具。此时，Linus Torvalds开始着手开发自己的版本控制系统。</p><p>以下是Git的主要发展历程：</p><ol><li><p>2005年：Git项目正式启动，&#x3D;&#x3D;<strong>Linus Torvalds</strong>&#x3D;&#x3D;发布了Git的第一版，并开始为Linux内核的管理和维护使用Git。</p></li><li><p>2008年：GitHub网站上线，Git得到了广泛的应用和推广。GitHub提供了一个基于Git的代码托管平台，允许开发者协作开发和分享代码。</p></li><li><p>2010年：Git成为了Apache软件基金会的顶级项目之一，进一步推动了Git的普及和应用。</p></li><li><p>2012年：GitHub的用户数量超过一百万，Git在开源社区和商业领域都变得越来越流行。</p></li><li><p>2016年：Git 2.0发布，引入了一些新功能和改进，并且进一步提高了Git的性能和稳定性。</p></li><li><p>2018年：微软宣布收购GitHub，这标志着Git作为全球最大的代码托管平台进入了一个新的发展阶段。</p></li></ol><h3 id="Git工作机制"><a href="#Git工作机制" class="headerlink" title="Git工作机制"></a>Git工作机制</h3><img src="/xu-runbo/post/8e7db504/image-20231021232411424.png" class="" title="image-20231021232411424"> <p>工作区: 我们代码在本地磁盘的位置</p><p>暂存区：git<strong>追踪到我们工作区</strong>，也就是把工作区添加到暂存区git add,<strong>这个时候还没有历史版本</strong></p><p><strong><a href="#%E6%9C%AC%E5%9C%B0%E5%BA%93">本地库</a>: git commit到本地库之后，就有了历史版本啦！</strong></p><p>&#x3D;&#x3D;工作区和暂存区都是自己可以想删就删的&#x3D;&#x3D;</p><blockquote><ol><li>本地仓库：每个开发者都有一个本地仓库，用于保存项目的完整历史记录和文件版本。本地仓库包含了项目的所有文件、文件夹以及与项目相关的元数据，如提交历史、分支信息等。</li><li>提交：在 Git 中，你可以通过将文件的修改内容提交（commit）到本地仓库来记录项目的变更。提交是一个原子操作，它会生成一个唯一的标识符（SHA-1 值）来标记这个提交对象，并记录作者、时间戳、提交消息等相关信息。</li><li>分支：Git 使用分支（branch）来管理不同的代码版本。默认情况下，每个 Git 仓库都有一个主分支（通常命名为 “master”），其他分支则可以基于主分支衍生出来。通过创建和切换分支，你可以在不破坏主分支的前提下进行实验性的开发或并行开发。</li><li>远程仓库：除了本地仓库，Git 还支持远程仓库，用于团队协作和代码共享。远程仓库通常位于网络上的服务器上，开发者可以与其进行交互，例如推送（push）自己的本地提交到远程仓库，或者从远程仓库拉取（pull）最新的更新到本地。</li><li>分布式：Git 的分布式特性使得每个开发者都可以具备完整的项目历史记录和文件版本，不依赖于中央服务器。这意味着即使没有网络连接，你仍然可以对代码进行提交、切换分支等操作。当网络恢复后，你可以将本地仓库与远程仓库同步。</li><li>版本合并和冲突解决：当多个开发者在不同的分支上进行开发，并且试图将它们的修改合并到一起时，可能会出现冲突。Git 提供了强大的合并和冲突解决机制，可以帮助开发者协调共享的代码变更。</li></ol></blockquote><p>本地仓库<a name="本地库"></a></p><p>在 Git 中，<strong>本地仓库是指存储在您的计算机上的代码仓库</strong>。它不是虚拟的，而是实际存在于您的文件系统中的目录。</p><p>当您克隆（或初始化）一个 Git 仓库时，Git 将在您的计算机上创建一个&#x3D;&#x3D;<strong>包含项目所有历史记录和代码的目录</strong>&#x3D;&#x3D;。<strong>这个目录就是本地仓库</strong>。</p><p><strong>它包含了存储在 <code>.git</code> 子目录下的各种文件和子目录，这些文件和子目录记录了项目的元数据、分支、提交历史等信息。</strong></p><p>&#x3D;&#x3D;<strong>本地仓库是与远程仓库（例如 GitHub、GitLab）同步的基础。</strong>&#x3D;&#x3D;</p><p>本地仓库中进行代码修改、创建新分支、提交更改等操作，然后将这些更改推送到远程仓库或从远程仓库拉取最新的更改。</p><p><code>及时的进行git add和commit</code>提交到本地库</p><h3 id="Git和代码托管中心"><a href="#Git和代码托管中心" class="headerlink" title="&#x3D;&#x3D;Git和代码托管中心&#x3D;&#x3D;"></a>&#x3D;&#x3D;Git和代码托管中心&#x3D;&#x3D;</h3><p><a href="#%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C">团队协作</a></p><p>代码托管中心是基于网络服务器的远程代码仓库&#x3D;&#x3D;远程库&#x3D;&#x3D;</p><p>在本地库之后可以推送到远程库push</p><hr><blockquote><p>局域网：GitLab</p><p>互联网:Github，Gitee码云</p></blockquote><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p><a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">淘宝镜像Git</a></p><p><a href="https://blog.csdn.net/qq_38952352/article/details/127656385?ops_request_misc=&request_id=&biz_id=102&utm_term=git%E7%9A%84%E5%AE%89%E8%A3%85&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-127656385.nonecase&spm=1018.2226.3001.4187">git安装教程</a></p><img src="/xu-runbo/post/8e7db504/image-20231021233410692.png" class="" title="image-20231021233410692"> <p>&#x3D;&#x3D;<strong>非中文的，没有空格的！路径</strong>&#x3D;&#x3D;</p><img src="/xu-runbo/post/8e7db504/image-20231021233500875.png" class="" title="image-20231021233500875"> <img src="/xu-runbo/post/8e7db504/image-20231021233700181.png" class="" title="image-20231021233700181"> <p>默认好了</p><img src="/xu-runbo/post/8e7db504/image-20231021233753226.png" class="" title="image-20231021233753226"> 再次确认是否在Git下<img src="/xu-runbo/post/8e7db504/image-20231021233817468.png" class="" title="image-20231021233817468"> 选择默认的编辑器VIM好了<img src="/xu-runbo/post/8e7db504/image-20231021233836700.png" class="" title="image-20231021233836700"> 是否要修改初始化分支的名<img src="/xu-runbo/post/8e7db504/image-20231021234006030.png" class="" title="image-20231021234006030"> <p>第二个是在cmd里面也可以用git，</p><img src="/xu-runbo/post/8e7db504/image-20231021234151676.png" class="" title="image-20231021234151676"> 默认的协议<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/8e7db504/image-20231021234458443.png" class="" title="image-20231021234458443"> <p>检查是否安装成功，和版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">where git</span><br></pre></td></tr></table></figure><p>就能看到我们git安装的位置了</p><img src="/xu-runbo/post/8e7db504/image-20231022193442970.png" class="" title="image-20231022193442970"> <h2 id="Git的常用命令"><a href="#Git的常用命令" class="headerlink" title="Git的常用命令"></a>Git的常用命令</h2><p><strong>最好用github的邮箱，git不会检查你的邮箱格式是否正确</strong></p><p>&#x3D;&#x3D;<strong>签名的作用就是区分不同操作者身份</strong>&#x3D;&#x3D;</p><p><strong>去windows的用户下面找到.gitconfig</strong>就能看到我们的信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = xurunbo</span><br><span class="line">email = 1982830095@qq.com</span><br><span class="line">[credential &quot;https://gitee.com&quot;]</span><br><span class="line">provider = generic</span><br><span class="line">[http]</span><br><span class="line">sslverify = false</span><br><span class="line">[gui]</span><br><span class="line">recentrepo = D:/gitBOx/j3dr</span><br><span class="line">[credential]</span><br><span class="line">helper = cache</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="设置用户签名-git-cfg"><a href="#设置用户签名-git-cfg" class="headerlink" title="设置用户签名 git cfg"></a>设置用户签名 git cfg</h3><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 用户邮箱</td><td>设置用户签名</td></tr><tr><td><strong>git init</strong></td><td>初始化本地库</td></tr><tr><td><strong>git status</strong></td><td>查看本地库状态</td></tr><tr><td><strong>git add 文件名</strong></td><td>添加到暂存区</td></tr><tr><td><strong>git commit -m “日志信息” 文件名</strong></td><td>提交到本地库</td></tr><tr><td><strong>git reflog</strong></td><td>查看历史记录</td></tr><tr><td><strong>git reset –hard 版本号</strong></td><td>版本穿梭</td></tr></tbody></table><p>想在哪里使用git</p><blockquote><ol><li>cd到相关路径</li><li>在目标路径下右键git</li></ol></blockquote><h3 id="git-init初始化本地库"><a href="#git-init初始化本地库" class="headerlink" title="git init初始化本地库"></a>git init初始化本地库</h3><img src="/xu-runbo/post/8e7db504/image-20231021235734901.png" class="" title="image-20231021235734901"> <p>git init就可以初始化本地库了</p><p>默认是隐藏的</p><p>Linux语法 -a看到隐藏的文件</p><img src="/xu-runbo/post/8e7db504/image-20231021235820736.png" class="" title="image-20231021235820736"> <h3 id="git-status-查看本地库的状态"><a href="#git-status-查看本地库的状态" class="headerlink" title="git status 查看本地库的状态"></a>git status 查看本地库的状态</h3><img src="/xu-runbo/post/8e7db504/image-20231021235919516.png" class="" title="image-20231021235919516"> <p>on branch master默认在主分支上</p><p>no commits yet没有任何提交过</p><p>nothiing to commit 也没有什么东西需要提交</p><p>现在我们修改一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim hello.txt</span><br></pre></td></tr></table></figure><p>输入一些内容</p><p>再次查看本地库的状态</p><img src="/xu-runbo/post/8e7db504/image-20231022000218413.png" class="" title="image-20231022000218413"> <p>说明发现了未被追踪的文件，没有追踪，只是在工作区</p><p>没有添加任何东西，但是已经有一个未被追踪的文件</p><hr><h3 id="git-add-文件添加到暂存区"><a href="#git-add-文件添加到暂存区" class="headerlink" title="git add 文件添加到暂存区"></a>git add 文件添加到暂存区</h3><p>换行？windows是crlf，Linux是lf</p><img src="/xu-runbo/post/8e7db504/image-20231022093307605.png" class="" title="image-20231022093307605"> <p>说明git知道你的hello.txt,git已经追踪这个文件了。也可以删除</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rem --cached 文件</span><br></pre></td></tr></table></figure><p>把暂存区的给删除了</p><h3 id="git-commit-m-“日志信息”-文件"><a href="#git-commit-m-“日志信息”-文件" class="headerlink" title="git commit -m “日志信息” 文件"></a>git commit -m “日志信息” 文件</h3><img src="/xu-runbo/post/8e7db504/image-20231022093702717.png" class="" title="image-20231022093702717"> <p>965c6a1就是版本号</p><img src="/xu-runbo/post/8e7db504/image-20231022093756704.png" class="" title="image-20231022093756704"> <p>跳过了，工作树是干净的</p><h3 id="查看日志git-reflog-log"><a href="#查看日志git-reflog-log" class="headerlink" title="&#x3D;&#x3D;查看日志git reflog&#x2F;log&#x3D;&#x3D;"></a>&#x3D;&#x3D;查看日志git reflog&#x2F;log&#x3D;&#x3D;</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><blockquote><p><code>git reflog</code> 命令可以列出所有本地仓库中的 Git 引用的修改历史，&#x3D;&#x3D;<strong>包括分支、标签和 HEAD 引用。它显示的是每个引用上的操作历史，</strong>&#x3D;&#x3D;哪些提交对该引用进行了修改以及何时进行了修改。这些操作包括新建、删除、重命名或移动引用等。</p></blockquote><p>领导的身份查看，能看不同分支的提交</p><img src="/xu-runbo/post/8e7db504/image-20231022094239014.png" class="" title="image-20231022094239014"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>更详细，能看到谁提交的以及日期</p><p>&#x3D;&#x3D;看的是当前分支当前HEAD指向的版本以前的提交记录&#x3D;&#x3D;</p><p>假如说我的master提交了两次</p><p>我现在新建了一个分支a</p><p>我在分支a上相当于复制了master的两次提交，是独立的.</p><p>但是当我reset 让head指向master带来的第一次提交时候</p><p>git log就只能看到第一次提交了</p><p>我reset让head指向master带来的第二次提交时候</p><p>git log就看到第一和第二次提交了</p><p>同理，我让head指向我现在所在分支的new 提交的时候就能看所有的提交了，包括从master带来的</p><p>总之让HEAD指向你所在分支的最新一次提交，就能看到所有的log记录了</p><p>&#x3D;&#x3D;<strong>通过 <code>git reset</code> 命令移动 HEAD 指针可以让您查看不同的提交记录。当您让 HEAD 指向某个分支或提交时，Git 会重新计算从该提交版本开始的提交历史，并将其作为新的基准点。这样，之前隐藏的提交记录就会被包含在 Git 日志中。</strong>&#x3D;&#x3D;</p><blockquote><p><code>git log</code> 命令用于查看&#x3D;&#x3D;<strong>指定分支的提交历史（或者默认情况下查看当前分支的历史）</strong>&#x3D;&#x3D;，它会按照时间倒序列出所有的提交记录，并显示每个提交的 SHA-1 校验和、作者、提交时间、提交注释等信息。您还可以使用 <code>git log</code> 命令的一些选项来限制要查看的提交数量、显示特定的文件变更等。</p></blockquote><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><img src="/xu-runbo/post/8e7db504/image-20231022094410088.png" class="" title="image-20231022094410088"><p>说明我们现在工作区的文件还&#x3D;&#x3D;<strong>没有被git追踪没有添加到暂存区</strong>&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add hello.txt</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/8e7db504/image-20231022094519847.png" class="" title="image-20231022094519847"> <p>被添加到暂存区了，然后开始提交到远程库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;第二次提交&quot; hello.txt</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/8e7db504/image-20231022100935420.png" class="" title="image-20231022100935420"> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/8e7db504/image-20231022095011497.png" class="" title="image-20231022095011497"><p>说明当前指针指向的是第三个版本</p><p>直接cat 看的就是第三个版本的内容</p><blockquote><p>工作区文件被修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>就会冒红</p><p>把被修改的文件添加到暂存区就变绿了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add 文件</span><br></pre></td></tr></table></figure><p>，就可以提交到远程库了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m&quot;第n次提交&quot; 文件</span><br></pre></td></tr></table></figure><p>提交历史中每个提交都有一个唯一的标识符，这个标识符通常称为 “提交哈希值” 或 “提交ID”。它是一个由40个十六进制字符组成的字符串，用于唯一标识一个提交。</p><p>提交哈希值</p><p>060b457964e4daa7b8c4445445521b473d802f6f</p><p>前7位 <code>060b457</code> 是这个提交的简短版本号,用来快速识别提交</p></blockquote><h3 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>能看到有多少个版本号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p><strong>更详细的日志，能看到谁提交的.以及提交日期</strong></p><img src="/xu-runbo/post/8e7db504/image-20231022100912826.png" class="" title="image-20231022100912826"> <h3 id="版本穿梭-git-reset-–hard-版本号"><a href="#版本穿梭-git-reset-–hard-版本号" class="headerlink" title="版本穿梭 git reset –hard 版本号"></a>版本穿梭 git reset –hard 版本号</h3><ol><li><p>先查看版本号信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>直接就看到七位的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;当前分支下&#x3D;&#x3D;拿到版本号<em>前七位</em></p></li><li><pre><code>git reset --hard 要穿梭的版本号<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   指针就实现了要穿梭的版本</span><br><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022101122174.png image-20231022101122174 %&#125; </span><br><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022101146000.png image-20231022101146000 %&#125; </span><br><span class="line"></span><br><span class="line">   ==**第一行是说明我们的命令要穿梭到4638f14这个版本**==</span><br><span class="line"></span><br><span class="line">3. 此时cat就可以看到历史的版本内容了</span><br><span class="line"></span><br><span class="line">文件的变化</span><br><span class="line"></span><br><span class="line">&gt; &#123;% asset_img image-20231022100200296.png image-20231022100200296 %&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; 当前是在master这个分支下</span><br><span class="line">&gt;</span><br><span class="line">&gt; 哪个版本呢？</span><br><span class="line">&gt;</span><br><span class="line">&gt; &#123;% asset_img image-20231022100553199.png image-20231022100553199 %&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; git切换版本，==**底层是移动的HEAD指针**==：</span><br><span class="line">&gt;</span><br><span class="line">&gt; &#123;% asset_img image-20231022101249678.png image-20231022101249678 %&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br><span class="line">&gt; 在 Git 中，`git checkout` 命令可以通过两种方式指定要切换的提交：</span><br><span class="line">&gt;</span><br><span class="line">&gt; *一种是使用简短版本号，另一种是使用完整的提交哈希值。*</span><br><span class="line">&gt;</span><br><span class="line">&gt; 当您使用简短版本号（通常是提交哈希值的前几位字符）作为参数执行 `git checkout` 命令时，Git 会尝试根据提供的简短版本号匹配到唯一的提交。如果找到了唯一的匹配项，Git 就会将 HEAD 指向该提交，并切换到该提交。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 例如，如果有一个提交哈希值为 `060b457964e4daa7b8c4445445521b473d802f6f`，那么您可以使用 `git checkout 060b457` 或 `git checkout 060b4579` 来切换到该提交。</span><br><span class="line">&gt;</span><br><span class="line">&gt; **使用完整的提交哈希值作为参数执行 `git checkout` 命令则更加明确和精确。无论提交哈希值有多长（通常是40个字符），Git 都可以直接定位到对应的提交，并进行切换。**</span><br><span class="line">&gt;</span><br><span class="line">&gt; 使用简短版本号或完整的提交哈希值都可以用于 `git checkout` 命令来切换到特定的提交。简短版本号是提交哈希值的一部分，用于快速识别提交，而完整的提交哈希值则是唯一且精确地标识一个提交。</span><br><span class="line">&gt;</span><br><span class="line">&gt; ---</span><br><span class="line">&gt;</span><br><span class="line">&gt; `git checkout` 命令提供一个具体的提交哈希值时，Git 会将 HEAD 指向该提交，并处于 &quot;detached HEAD&quot; 状态。这意味着**不在位于任何分支上**，而是直接位于特定的提交上。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 为了防止在 &quot;detached HEAD&quot; 状态下进行的提交被丢失，Git 帮您自动创建了一个临时分支，以便保留您所做的更改。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 这个临时分支没有名称，通常称为 &quot;无名分支&quot; 或 &quot;匿名分支&quot;。它只存在于您当前的工作区中，不会影响到其他分支的进展。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 您可以在这个 &quot;无名分支&quot; 上进行实验性的更改和提交。如果您希望保留这些提交，可以随时将其转换为具有名称的分支，如命令输出中所示：</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>&gt; git switch -c &lt;new-branch-name&gt;&gt; <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这将创建一个新的分支，并将它指向当前的 &quot;无名分支&quot;。然后，您可以在新分支上继续进行提交，并且这些提交将得到保留。</span><br><span class="line"></span><br><span class="line">如果您希望放弃当前的 &quot;无名分支&quot;，可以使用以下命令撤销操作：</span><br><span class="line"></span><br></pre></td></tr></table></figure>&gt; git switch -&gt; <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这将使 HEAD 返回到之前的位置，即切换回原来分支的状态。</span><br><span class="line"></span><br><span class="line">请注意，创建临时分支的目的是为了保护您在 &quot;detached HEAD&quot; 状态下所做的更改，以防止意外丢失。在实际开发中，建议基于这个临时分支创建一个具有合适名称的新分支，并在那里继续工作，以确保提交的持久性和可追溯性。</span><br><span class="line"></span><br><span class="line">### Git快速复制和粘贴</span><br><span class="line"></span><br><span class="line">鼠标左键两下    复制</span><br><span class="line"></span><br><span class="line">鼠标中键    粘贴</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Git删除跟踪</span><br><span class="line"></span><br><span class="line">删除已经被 Git 跟踪的这些文件。您可以使用以下命令将这些文件从 Git 的跟踪中移除（注意，这不会删除实际的文件）：</span><br><span class="line"></span><br></pre></td></tr></table></figure>git rm --cached -r .ideagit rm --cached -r *.iml<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Git分支操作</span><br><span class="line"></span><br><span class="line">### 分支的介绍</span><br><span class="line"></span><br><span class="line">在版本控制过程中，同时推进多个任务，为了每个都可以独立的玩</span><br><span class="line"></span><br><span class="line">开启副本,(分支)</span><br><span class="line"></span><br><span class="line">:同时并行推进多个功能开发，提高效率</span><br><span class="line"></span><br><span class="line">### 分支的操作</span><br><span class="line"></span><br><span class="line">| 命令名称            | 作用                             |      |</span><br><span class="line">| ------------------- | -------------------------------- | ---- |</span><br><span class="line">| git branch 分支名   | 创建分支                         |      |</span><br><span class="line">| git branch -v       | 查看分支                         |      |</span><br><span class="line">| git checkout 分支名 | 切换分支                         |      |</span><br><span class="line">| git merge 分支名    | 把指定的分支**合并到当前分支上** |      |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 查看分支git branch -v</span><br><span class="line"></span><br></pre></td></tr></table></figure>git branch -v<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022102129352.png image-20231022102129352 %&#125; </span><br><span class="line"></span><br><span class="line">*代表我们当前所在的分支</span><br><span class="line"></span><br><span class="line">后面代表的是HEAD指针当前指的本本，和对应的日志信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 创建分支git branch 分支名</span><br><span class="line"></span><br></pre></td></tr></table></figure>git branch hot-fix<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022102325382.png image-20231022102325382 %&#125; </span><br><span class="line"></span><br><span class="line">&gt; 新分支会在当前所在的提交上创建。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 这意味着新分支将包含==**与当前分支相同的代码快照**==（即**相同的提交历史和文件内容**）。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 创建分支后，默认情况下，您仍然停留在当前分支，新分支并未成为当前活动分支。</span><br><span class="line">&gt;</span><br><span class="line">&gt; ==**每个分支都有自己独立的提交历史和文件状态**==</span><br><span class="line"></span><br><span class="line">### 切换分支git chekout 分支名</span><br><span class="line"></span><br></pre></td></tr></table></figure>git checkout 要切换到的分支<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022102712638.png image-20231022102712638 %&#125; </span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022102856571.png image-20231022102856571 %&#125; </span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022102920495.png image-20231022102920495 %&#125; </span><br><span class="line"></span><br><span class="line">### 合并分支git merge 分支名</span><br><span class="line"></span><br><span class="line">#### 正常合并</span><br><span class="line"></span><br></pre></td></tr></table></figure>git merge 要合并到当前分支的分支<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> &#123;% asset_img image-20231022121438260.png image-20231022121438260 %&#125; </span><br><span class="line"></span><br><span class="line">git merge后git的历史记录的基点还在原来的位置</span><br><span class="line"></span><br><span class="line">#### 冲突合并</span><br><span class="line"></span><br><span class="line">&gt; 两次修改</span><br><span class="line">&gt;</span><br><span class="line">&gt; 两次提交</span><br><span class="line">&gt;</span><br><span class="line">&gt; 一次merge</span><br><span class="line">&gt;</span><br><span class="line">&gt; </span><br><span class="line"></span><br><span class="line">==**两个分支在同一个位置出有两套完全不同的修改**==Git无法选择的时候,需要人为的修改</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022122940097.png image-20231022122940097 %&#125; 原来的状态</span><br><span class="line"></span><br><span class="line">1. 在master下对hello.txt文件的第一行进行修改</span><br><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022123013671.png image-20231022123013671 %&#125; </span><br><span class="line"></span><br><span class="line">2. 提交到暂存区和本地库</span><br><span class="line"></span><br></pre></td></tr></table></figure>git add hello.txtgit commit -m &quot;mastertest&quot; hello.txt<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022123059354.png image-20231022123059354 %&#125; </span><br><span class="line"></span><br><span class="line">3. 切换到hot_fix分支</span><br><span class="line"></span><br><span class="line">4. 也对同一个文件进行编辑</span><br><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022123140100.png image-20231022123140100 %&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>vim hello.txt在第一行也修改<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5. 提交到暂存区和本地库</span><br><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022123234810.png image-20231022123234810 %&#125; </span><br><span class="line"></span><br><span class="line">6. 回到master分支进行合并</span><br><span class="line"></span><br></pre></td></tr></table></figure>git merge hot_fix<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022123335887.png image-20231022123335887 %&#125; </span><br><span class="line"></span><br><span class="line">   Git帮我i们自动合并不了了</span><br><span class="line"></span><br><span class="line">   此时会进入master|merge状态</span><br><span class="line"></span><br><span class="line">7. 编辑冲突的文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>vim hello.txt<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022123436508.png image-20231022123436508 %&#125; </span><br><span class="line"></span><br><span class="line">   &lt;&lt;&lt;&lt;&lt;和=包起来的是当前分支的内容，=和&gt;&gt;&gt;&gt;&gt;&gt;抱起来的是和过来的分支的内容</span><br><span class="line"></span><br><span class="line">   手动保留并且删掉现在用于区分的行</span><br><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022123549247.png image-20231022123549247 %&#125; </span><br><span class="line"></span><br><span class="line">8. ==**然后提交暂存区和本地库**==</span><br><span class="line"></span><br></pre></td></tr></table></figure>git add hello.txt<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">★★★★★★</span><br><span class="line"></span><br></pre></td></tr></table></figure>git commit -m &quot;mergecommit&quot;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022124055271.png image-20231022124055271 %&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure># 完成合并并解决冲突git merge &lt;branch-name&gt;# 确保所有更改都正确添加到工作区# 提交整个合并结果git commit -m &quot;Merge branch &lt;branch-name&gt;&quot;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">这时不需要指定文件名</span><br><span class="line"></span><br><span class="line">如果指定了就会报错</span><br><span class="line"></span><br></pre></td></tr></table></figure>git commit -m &quot;mergecommit&quot; hello.txt<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022123910704.png image-20231022123910704 %&#125; </span><br><span class="line"></span><br><span class="line">   并且会合并一个分支在master下</span><br><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022124155578.png image-20231022124155578 %&#125; </span><br><span class="line"></span><br><span class="line">   **但是不影响hot_fix下的内容，独立哦**智慧修改合并的分支不会修改来合并的那个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 合并的原理</span><br><span class="line"></span><br><span class="line">&gt; HEAD是指向那个分支的指针 </span><br><span class="line">&gt;</span><br><span class="line">&gt; refs下单分支名文件存的是对应的版本号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## &lt;a name=&quot;团队协作&quot;&gt;Git团队协作&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">团队协作</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022151510299.png image-20231022151510299 %&#125;</span><br><span class="line"></span><br><span class="line">跨团队协作</span><br><span class="line"></span><br><span class="line">作为团队外 的人修改。</span><br><span class="line"></span><br><span class="line">先fork再clone修改</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022151847436.png image-20231022151847436 %&#125;</span><br><span class="line"></span><br><span class="line">## GitHub操作</span><br><span class="line"></span><br><span class="line">### 创建远程仓库</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022152417413.png image-20231022152417413 %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建好后</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022153942795.png image-20231022153942795 %&#125;</span><br><span class="line"></span><br><span class="line">得到远程库的链接</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 创建别名</span><br><span class="line"></span><br><span class="line">前提确保当前所在的目录是一个 Git 仓库</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ol><p>git remote add 别名 远程库链接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022154210775.png image-20231022154210775 %&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git remote -v</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">查看别名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 本地库推送到远程库push</span><br><span class="line"></span><br><span class="line">不是谁都可以push的，一是我们自己，[加入成员](#V)的成员</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git push 别名&#x2F;远程库链接 分支</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">最小单位是分支</span><br><span class="line"></span><br><span class="line">不是文件</span><br><span class="line"></span><br><span class="line">然后刷新网页久能看到</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022154408168.png image-20231022154408168 %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 更新(拉取远程库到)本地库pull</span><br><span class="line"></span><br><span class="line">拉取是在原有基础上合并当前代码，克隆是克隆到文件夹，前者要登录</span><br><span class="line"></span><br><span class="line">修改内容</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022154658735.png image-20231022154658735 %&#125;</span><br><span class="line"></span><br><span class="line">拉取本地库</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git pull 远程库别名&#x2F;链接 分支</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022154746072.png image-20231022154746072 %&#125; </span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022154757238.png image-20231022154757238 %&#125; </span><br><span class="line"></span><br><span class="line">拉取动作会自动帮我们提交本地库</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022154847881.png image-20231022154847881 %&#125; </span><br><span class="line"></span><br><span class="line">### 克隆远程库到本地</span><br><span class="line"></span><br><span class="line">==**克隆是不需要登录账号的**，也没有认证，也不需要加入团队，Public==</span><br><span class="line"></span><br><span class="line">克隆是我们现在本地库没有的</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022155252914.png image-20231022155252914 %&#125; </span><br><span class="line"></span><br><span class="line">先拿到项目的远程库链接</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git clone 远程库的链接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">起别名需要我们当前目录下是个git仓库，也就是有.git文件夹</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022155942539.png image-20231022155942539 %&#125; </span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022155637868.png image-20231022155637868 %&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Git clone会帮我们干三件事</span><br><span class="line"></span><br><span class="line">&gt; 1. 拉取源代码</span><br><span class="line">&gt;</span><br><span class="line">&gt;    &#123;% asset_img image-20231022160104315.png image-20231022160104315 %&#125; </span><br><span class="line">&gt;</span><br><span class="line">&gt; 2. 初始化本地仓库</span><br><span class="line">&gt;</span><br><span class="line">&gt;    &#123;% asset_img image-20231022160039509.png image-20231022160039509 %&#125; </span><br><span class="line">&gt;</span><br><span class="line">&gt; 3. origin作为这个远程库的别名</span><br><span class="line">&gt;</span><br><span class="line">&gt;    &#123;% asset_img image-20231022160048548.png image-20231022160048548 %&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### &lt;a name=&quot;加入团队&quot;&gt;github加入团队&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建一个团队工作的项目在github上</span><br><span class="line"></span><br><span class="line">进入项目</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022161240189.png image-20231022161240189 %&#125; </span><br><span class="line"></span><br><span class="line">只需要对方的名就可以了</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022161421305.png image-20231022161421305 %&#125;</span><br><span class="line"></span><br><span class="line">然后复制这个邀请函给对方就可以了</span><br><span class="line"></span><br><span class="line">对方点击后</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022161544666.png image-20231022161544666 %&#125; 就可以选择接受和委婉拒绝了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### ssh免密登录</span><br><span class="line"></span><br><span class="line">==**个人的windows连接到github就不需要频繁登录了**==</span><br><span class="line"></span><br><span class="line">&gt; 要在本地生成 SSH 密钥对，可以按照以下步骤进行操作：</span><br><span class="line">&gt;</span><br><span class="line">&gt; 1. 打开终端或命令提示符窗口。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 2. 输入以下命令来生成 SSH 密钥：</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><blockquote><p>   shellCopy Codessh-keygen -t rsa -b 4096 -C “<a href="mailto:&#121;&#x6f;&#117;&#x72;&#95;&#x65;&#109;&#x61;&#x69;&#108;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;">&#121;&#x6f;&#117;&#x72;&#95;&#x65;&#109;&#x61;&#x69;&#108;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#x63;&#111;&#x6d;</a>“<br>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   这里将 `your_email@example.com` 替换为**您关联的电子邮件地址**。此邮箱将作为 SSH 密钥标识符的一部分。</span><br><span class="line"></span><br><span class="line">   &gt; 这两个参数是用于生成 SSH 密钥对时指定密钥类型和密钥长度的。`-t` 参数指定密钥类型，常见的有 RSA、DSA 和 ECDSA；`-b` 参数指定密钥长度。4096 是一般安全性设置下的推荐值，可以提供更加安全的密钥。的机器资源有限或者您要求更快的操作速度，也可以使用更短的密钥长度。</span><br><span class="line"></span><br><span class="line">3. 按 Enter 键接受默认的文件保存路径和文件名（通常是 `~/.ssh/id_rsa`）。</span><br><span class="line"></span><br><span class="line">4. 接下来，您可以选择为密钥对设置一个密码。如果您希望在使用私钥时输入密码以提高安全性，请设置密码，并确保记住它。如果不想设置密码，直接按 Enter 跳过。</span><br><span class="line"></span><br><span class="line">5. 此时，`ssh-keygen` 命令会生成两个文件：私钥文件（`id_rsa`）和公钥文件（`id_rsa.pub`）。</span><br><span class="line"></span><br><span class="line">6. 公钥 (`id_rsa.pub`) 是需要在远程服务器上进行配置的部分。使用文本编辑器打开公钥文件，将其中的内容复制到粘贴板中。</span><br><span class="line"></span><br><span class="line">7. 登录到您要访问的远程服务器的帐户（例如 GitHub、GitLab 或其他主机）。</span><br><span class="line"></span><br><span class="line">8. 在远程服务器的用户设置或配置页面上，找到 SSH 密钥相关的选项，然后添加公钥。</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022164655760.png image-20231022164655760 %&#125;  </span><br><span class="line"></span><br><span class="line">在~/.ssh生成两个钥</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022165526266.png image-20231022165526266 %&#125; </span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022170013157.png image-20231022170013157 %&#125; </span><br><span class="line"></span><br><span class="line">就可以免密登录了，使用ssh来pull</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>git pull ssh的协议链接</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Git跨团队协作</span><br><span class="line"></span><br><span class="line">作为团队外的人</span><br><span class="line"></span><br><span class="line">先fork有问题的项目</span><br><span class="line"></span><br><span class="line">然后增添修改，可以在github上修改</span><br><span class="line"></span><br><span class="line">也可以clone，在本地库上修改.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022164204585.png image-20231022164204585 %&#125; </span><br><span class="line"></span><br><span class="line">可以发起pull请求</span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022164355990.png image-20231022164355990 %&#125; </span><br><span class="line"></span><br><span class="line">可留下一段话，可以看哪里被修改了</span><br><span class="line"></span><br><span class="line">然后就发起pull request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## [2023最新版IntelliJ IDEA安装教程](https://blog.csdn.net/Javachichi/article/details/131302807?ops_request_misc=%7B%22request%5Fid%22%3A%22169796587616800225570949%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=169796587616800225570949&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131302807-null-null.142^v96^control&amp;utm_term=idea安装教程2023&amp;spm=1018.2226.3001.4187)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## IDEA集成Git</span><br><span class="line"></span><br><span class="line">### 配置Git忽略文件</span><br><span class="line"></span><br><span class="line">### 什么是ignore文件</span><br><span class="line"></span><br><span class="line">&gt; `.gitignore` 文件（通常称为 &quot;ignore 文件&quot;）是 Git 版本控制系统中的一个文件。它用于指定哪些文件和目录应该被 Git 忽略，从而使 Git 在执行诸如提交、合并等操作时不会将这些文件包含在内。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 例如，您可能需要忽略以下文件或目录：</span><br><span class="line">&gt;</span><br><span class="line">&gt; - 临时文件或日志文件</span><br><span class="line">&gt; - 编译生成的二进制文件</span><br><span class="line">&gt; - IDE 或编辑器生成的配置文件</span><br><span class="line">&gt; - 敏感信息、密码或机密信息的配置文件</span><br><span class="line">&gt;</span><br><span class="line">&gt; 如果这些文件被包含在 Git 版本库中，会导致版本库变得庞大且难以维护。使用 `.gitignore` 文件，您可以确保这些文件被 Git 忽略，同时保持版本库的清洁和可维护性。</span><br><span class="line"></span><br><span class="line">为什么忽略？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% asset_img image-20231022192725698.png image-20231022192725698 %&#125; 不想要这些东西</span><br><span class="line"></span><br><span class="line">与项目的实际功能无关。不参与在服务器的运行.</span><br><span class="line"></span><br><span class="line">屏蔽掉久能忽略IDE之间的差异</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">创建xxx.ignore文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.jar<br>.zip<br>.gzip<br>.xml<br>###忽略.json文件<br>*.json</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### IDEA继承git步骤</span><br><span class="line"></span><br><span class="line">1. 先找到我们git安装的位置</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   whiere git<br>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. idea配置</span><br><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231022195245336.png image-20231022195245336 %&#125;</span><br><span class="line"></span><br><span class="line">3. &#123;% asset_img image-20231022195337154.png image-20231022195337154 %&#125; </span><br><span class="line"></span><br><span class="line">   VCS 是 Version Control System</span><br><span class="line"></span><br><span class="line">   这一步是</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>   git init</p><pre><code>本地库的初始化,生成.git文件4. &#123;% asset_img image-20231022195427361.png image-20231022195427361 %&#125; 选择文件/文件进行add或者commit5. &#123;% asset_img image-20231022195647169.png image-20231022195647169 %&#125; 6. 外部git验证&#123;% asset_img image-20231022195716702.png image-20231022195716702 %&#125; ### ignore的作用&#123;% asset_img image-20231022200029504.png image-20231022200029504 %&#125; 上传后没有idea什么的文件&#123;% asset_img image-20231026183309330.png image-20231026183309330 %&#125;idea创建新的 分支&#123;% asset_img image-20231026183434147.png image-20231026183434147 %&#125; ### 分支合并&#123;% asset_img image-20231026185355657.png image-20231026185355657 %&#125;### Idea添加github&#123;% asset_img image-20231026220145439.png image-20231026220145439 %&#125;权限拉满-生成&#123;% asset_img image-20231026220318878.png image-20231026220318878 %&#125;### 分享项目到GitHub### 克隆远程库到本地## 码云### IDEa继承码云操作同github## GitHlab&#123;% asset_img image-20231027111418585.png image-20231027111418585 %&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 版本管理系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤器Filter</title>
      <link href="/xu-runbo/post/31fabe4c.html"/>
      <url>/xu-runbo/post/31fabe4c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><p>JavaWeb三大组件</p><blockquote><ol><li>Filter</li><li>Servlet</li><li>Listener</li></ol></blockquote><h2 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h2><p>可以把对资源的请求</p><p>给拦截下来</p><p>从而实现一些特殊的功能</p><hr><p>过滤器一般完成一些通用的操作，比如：权限控制、统一编码处理、敏感字符处理等等.</p><p>权限控制，我们现在的可以直接访问项目下的&#x2F;index.jsp页面，直接可以去访问数据，我们的登录功能形同虚设。。。</p><p>我们的每个资源都要去判断用户是否登录</p><p>在过滤器里面去判断用户是否登录</p><h2 id="Filter的快速入门"><a href="#Filter的快速入门" class="headerlink" title="Filter的快速入门"></a>Filter的快速入门</h2><img src="/xu-runbo/post/31fabe4c/image-20240203105121830.png" class="" title="image-20240203105121830"><p> 代码实现</p><img src="/xu-runbo/post/31fabe4c/image-20240203110547211.png" class="" title="image-20240203110547211"> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.fliter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">//配置拦截路径</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fliterdemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器被初始化啦&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//放行前的逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤器的内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放行 ！</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//放行后的逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器被销毁啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意导包，然后重写她的所有方法</p><p>主要是写doFilter方法</p><h2 id="Filter的使用细节"><a href="#Filter的使用细节" class="headerlink" title="Filter的使用细节"></a>Filter的使用细节</h2><h3 id="Filter的执行流程"><a href="#Filter的执行流程" class="headerlink" title="Filter的执行流程"></a>Filter的执行流程</h3><img src="/xu-runbo/post/31fabe4c/image-20240203111540482.png" class="" title="image-20240203111540482"> <h3 id="Filter拦截路径配置"><a href="#Filter拦截路径配置" class="headerlink" title="Filter拦截路径配置"></a>Filter拦截路径配置</h3><img src="/xu-runbo/post/31fabe4c/image-20240203112632033.png" class="" title="image-20240203112632033"> <h3 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h3><p>结合拦截路径配置</p><img src="/xu-runbo/post/31fabe4c/image-20240203113206661.png" class="" title="image-20240203113206661">   <h3 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h3><hr><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span> <span class="comment">// 注解方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter1</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1. Filter的创建时机是 服务器启动的时候</span></span><br><span class="line"><span class="comment">    * 2. init方法只调用一次，并紧跟构造器方法调用之后</span></span><br><span class="line"><span class="comment">    * 3. doFilter 方法，每次请求都会进入 该方法 ,并且 是在调用service之前，能不能进入service 方法，就要看 doFilter 方法有没有放行</span></span><br><span class="line"><span class="comment">    * 4. destroy 方法，在服务器正常关闭的请情况下，调用</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Filter1</span> <span class="params">()</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;我是构造器！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init()&quot;</span>); <span class="comment">// 这个是初始化方法，在服务器启动的时候就会执行</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//这个方法就是过滤和拦截的方法，当请求和拦截匹配时调用</span></span><br><span class="line">        System.out.println(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 这个方法是销毁方法，只有在项目正常关闭的情况下才会执行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;destroy&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="初始化方法"><a href="#初始化方法" class="headerlink" title="初始化方法:"></a><strong>初始化方法:</strong></h4><p><code>public void init(FilterConfig filterConfig);</code></p><p>和我们编写的Servlet程序一样，&#x3D;&#x3D;<strong>Filter的创建和销毁由WEB服务器负责</strong>&#x3D;&#x3D;。</p><p> web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作</p><p>（filter对象只会创建一次，init方法也只会执行一次）。</p><p>开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</p><h4 id="拦截请求方法"><a href="#拦截请求方法" class="headerlink" title="拦截请求方法"></a><strong>拦截请求方法</strong></h4><p><code>public void doFilter</code></p><p>这个方法完成实际的过滤操作。<strong>当客户请求访问与过滤器关联的URL的时候，Servlet过滤器将先执行doFilter方法。****FilterChain参数用于访问后续过滤器</strong>。</p><hr><p>例如过滤后的放行行为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//放行 ！</span></span><br><span class="line">filterChain.doFilter(servletRequest, servletResponse);</span><br></pre></td></tr></table></figure><h4 id="销毁方法"><a href="#销毁方法" class="headerlink" title="销毁方法"></a><strong>销毁方法</strong></h4><p><code>public void destroy();</code></p><p>Filter对象创建后会驻留在内存，当<strong>web应用移除或服务器停止时才销毁。</strong>在Web容器卸载 Filter 对象之前被调用。<strong>该方法在Filter的生命周期中仅执行一次。在这个方法中，可以释放过滤器使用的资源。</strong></p><h4 id="FilterConfig"><a href="#FilterConfig" class="headerlink" title="FilterConfig"></a>FilterConfig</h4><p>FilterConfig 类见名知义， 它是 <strong>Filter 过滤器的配置文件类。</strong><br>Tomcat 每次创建 Filter 的时候， 也会<strong>同时创建一个 FilterConfig 类</strong>， 这里包含了 <strong>Filter 配置文件的配置信息</strong>。<br>FilterConfig 类的作用是<strong>获取 filter 过滤器的配置内容</strong><br>1、 获取 Filter 的名称 filter-name 的内容<br>2、 获取在 Filter 中配置的 init-param 初始化参数<br>3、 获取 ServletContext 对象</p><p>FilterConfig的四个方法<br><code>getFilterName()：获取filter的名称</code><br><code>getServletContext()：获取ServletContext</code><br><code>getInitparamter(String var1)：获取配置的初始参数的值</code><br><code>getInitParamterNames()：获取配置的所有参数名称</code></p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><img src="/xu-runbo/post/31fabe4c/image-20240203113639180.png" class="" title="image-20240203113639180"><p>因为我们登陆成功会把用户对象存储倒session里</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.web.fliter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.net.HttpRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置拦截路径</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fliterdemo</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器被初始化啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//放行前的逻辑判断用户是否登录</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        String [] urls=&#123;<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/login.jsp&quot;</span>,<span class="string">&quot;/register&quot;</span>,<span class="string">&quot;/register.jsp&quot;</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        String url=req.getRequestURL().toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        ----</span></span><br><span class="line">        String test1=req.getRequestURL().toString();</span><br><span class="line">        String test2=req.getRequestURI().toString();</span><br><span class="line">        System.out.println(<span class="string">&quot;url是什么&quot;</span>+test1+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;uri是什么&quot;</span>+test2);</span><br><span class="line"><span class="comment">//        url是什么http://localhost:9527/untitled23_war/selectall</span></span><br><span class="line"><span class="comment">//        uri是什么/untitled23_war/selectall</span></span><br><span class="line"><span class="comment">//        ------</span></span><br><span class="line">        <span class="keyword">for</span> (String u : urls) &#123;</span><br><span class="line">            <span class="keyword">if</span>(url.contains(u))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//这些找到的要被放行</span></span><br><span class="line">                <span class="comment">//放行 ！</span></span><br><span class="line">                filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//break结束循环，return结束方法</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//user不能直接拿到那就手动拿</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        iter</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(object);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (object != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">            <span class="comment">//放行 ！</span></span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录失败！&quot;</span>);</span><br><span class="line"><span class="comment">//            拦截下来并且跳转到登陆页面，用到请求转发</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;login_msg&quot;</span>, <span class="string">&quot;您没有登录啊&quot;</span>);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(servletRequest, servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器被销毁啦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>跟登录&#x2F;注册有关的就要让行</p><p>iter可以快速迭代</p></blockquote><p>代码效果：就是实现登录后才能访问brand.jsp下的数据</p><p>不登陆的时候访问任何（除了登录注册以外的）其他资源都会跳转到让你登录</p><p>但是我们登录后访问brand.jsp没有设置对应的servlet也没用去selectall数据所以只是空页面</p><img src="/xu-runbo/post/31fabe4c/recording.gif" class="" title="recording"><p>项目结构: </p><img src="/xu-runbo/post/31fabe4c/image-20240204104248773.png" class="" title="image-20240204104248773"> <h2 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h2><p>用的并不多</p><p>简单介绍</p><img src="/xu-runbo/post/31fabe4c/image-20240204105236917.png" class="" title="image-20240204105236917"> <img src="/xu-runbo/post/31fabe4c/image-20240204105526482.png" class="" title="image-20240204105526482"> <img src="/xu-runbo/post/31fabe4c/image-20240204105539277.png" class="" title="image-20240204105539277"> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.web.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Listenerdemo</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加载资源....&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/31fabe4c/image-20240204105611808.png" class="" title="image-20240204105611808"> ]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> filter,listener </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie&amp;session</title>
      <link href="/xu-runbo/post/6880b471.html"/>
      <url>/xu-runbo/post/6880b471.html</url>
      
        <content type="html"><![CDATA[<h1 id="会话追踪技术"><a href="#会话追踪技术" class="headerlink" title="会话追踪技术"></a>会话追踪技术</h1><h2 id="会话-会话跟踪"><a href="#会话-会话跟踪" class="headerlink" title="会话&amp;会话跟踪"></a>会话&amp;会话跟踪</h2><p>会话：用户打开浏览器，<strong>访问web服务器的资源，会话建立</strong>，<strong>直到有一方断开连接，会话结束</strong>。在<strong>一次会话中可以包含多次请求和响应</strong></p><img src="/xu-runbo/post/6880b471/image-20240120161212251.png" class="" title="image-20240120161212251"><blockquote><p> 服务器是不知道请求1和请求2是否来自同一个会话</p> <img src="/xu-runbo/post/6880b471/image-20240120161957913.png" class="" title="image-20240120161957913"> </blockquote><p>会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在<strong>同一次会话的多次请求间共享数据</strong></p><blockquote><p>实现方式</p><ol><li>客户端会话跟踪技术Cookie</li><li>服务端会话跟踪技术Session</li></ol></blockquote><h2 id="通俗的描述"><a href="#通俗的描述" class="headerlink" title="通俗的描述"></a>通俗的描述</h2><p><strong>会话：</strong> 在互联网上，<strong>会话</strong>通常指的是<strong>用户在一段时间内与一个网站或应用程序的交互</strong>。</p><p><strong>一个会话可以包括用户打开网站、浏览多个页面、进行交互、提交表单等一系列动作</strong>。</p><p><strong>会话跟踪技术：</strong> 会话跟踪技术是<strong>一组用于在Web应用程序中追踪用户活动和状态的方法</strong>。这些技术允许开发人员在用户访问不同页面或执行不同操作时保持一致的用户状态。</p><ol><li><strong>Cookies（Cookie会话跟踪）：</strong><ul><li><strong>描述：</strong> 就像是给用户贴上一个小标签，标签上记录了一些信息，随着用户访问不同页面，浏览器会把这个标签带上，服务器通过这个标签认出用户，知道用户是谁。</li><li><strong>比喻：</strong> 就好像在商店里拿了一个小卡片，上面有你的信息，每次你走到不同的部门，店员都能通过这个卡片知道你是同一个顾客。</li></ul></li><li><strong>URL重写（URL Rewriting）：</strong><ul><li><strong>描述：</strong> 就像是在用户访问网站的时候，在URL后面夹带一些信息，告诉服务器这个请求是属于哪个用户的，服务器通过解析URL中的信息来追踪用户。</li><li><strong>比喻：</strong> 就好像在邮件中夹带了一封信，信上写着你的名字，快递员通过信上的信息知道这个包裹是送给你的。</li></ul></li><li><strong>隐藏表单域（Hidden Form Fields）：</strong><ul><li><strong>描述：</strong> 就像是在一个看不见的表单中放了一些信息，当用户提交表单时，这些信息会被一同发送到服务器，服务器通过这些信息来辨认用户。</li><li><strong>比喻：</strong> 就好像在寄信的信封里放了一张纸条，里面写着你的名字，邮局收到信件时通过这张纸条知道是你寄的信。</li></ul></li><li><strong>会话管理器（Session Management）：</strong><ul><li><strong>描述：</strong> 就像是在服务器上给每个用户分配了一个专属的房间，用户在网站上活动时，信息都被存储在这个房间里，服务器通过这个房间来管理用户。</li><li><strong>比喻：</strong> 就好像在商店里有一个专门的休息室，你在休息室里的活动都被记录下来，店员通过休息室来追踪你的活动。</li></ul></li></ol><h2 id="学习准备"><a href="#学习准备" class="headerlink" title="学习准备"></a>学习准备</h2><p><a href="https://xu-runbo.gitee.io/xu-runbo/post/fefee16a.html">HTTP&amp;TomCat&amp;Servelet | cout&lt;&lt;”金缕衣”; </a></p><ol><li>创建web项目框架</li></ol><img src="/xu-runbo/post/6880b471/image-20240120163919073.png" class="" title="image-20240120163919073"> <h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="Cookie的见解"><a href="#Cookie的见解" class="headerlink" title="Cookie的见解"></a>Cookie的见解</h3><blockquote><p>当我们谈论“Cookie发来发去”时，指的是在Web应用中，客户端（通常是浏览器）和服务器之间传递和使用Cookie的过程。让我们通过一个类比来理解这个过程：</p><h3 id="场景：邮递员和信件"><a href="#场景：邮递员和信件" class="headerlink" title="场景：邮递员和信件"></a>场景：邮递员和信件</h3><ol><li><p><strong>邮递员（浏览器）：</strong> 想象浏览器就像是一位邮递员，用户在网络上浏览不同的网站就相当于在城市中行走，而<strong>浏览器负责在用户和不同网站之间传递信息</strong>。</p></li><li><p><strong>信件（Cookie）：</strong> <strong>Cookie就像是一封信，里面可能包含了一些信息</strong>，比如用户的偏好、登录状态等。这封信由一个站点（服务器）发给另一个站点，随着用户的浏览活动被传递。</p></li><li><p><strong>寄信（服务器设置Cookie）：</strong> <strong>当用户访问一个网站时，服务器可能会给浏览器发一封信</strong>（设置Cookie）。这封信可能包含了用户的标识、偏好设置等信息。</p></li><li><p><strong>携带信件（用户浏览其他网站）：</strong> 用户在这个网站上浏览一会儿，然后<strong>转到了另一个网站</strong>。就像邮递员一样，浏览器会携带这封信（Cookie）继续用户的行程。</p></li><li><p><strong>接收信件（另一个站点的服务器接收Cookie）：</strong> 当用户到达另一个站点时，这个站点的服务器会接收到之前站点设置的信（Cookie）。这使得不同站点之间能够共享一些信息。</p></li><li><p><strong>打开信件查看信息（服务器读取Cookie）：</strong> 服务器可以打开这封信（读取Cookie），里面的信息可能帮助服务器了解用户的偏好、登录状态等，以提供更好的用户体验。</p></li></ol><p>解释Cookie在<strong>不同站点之间传递和共享信息的过程</strong>。通过Cookie，<strong>服务器可以在用户的不同请求之间保持一些状态信息，使得用户的互动更加连贯</strong></p><p>例如在购物网站中保持购物车的内容，或者在社交媒体中保持用户的登录状态。</p></blockquote><h3 id="Cookie的基本使用"><a href="#Cookie的基本使用" class="headerlink" title="Cookie的基本使用"></a>Cookie的基本使用</h3><img src="/xu-runbo/post/6880b471/image-20240120171813091.png" class="" title="image-20240120171813091"> <p>Cookie是一种在<strong>客户端存储信息的小型文本文件</strong>，用于在<strong>Web浏览器和服务器之间存储和传递信息。</strong></p><p>通常被用来<strong>跟踪用户的状态、存储用户首选项以及实现一些其他的客户端和服务器之间的通信</strong>。</p><p>Cookie使用方法：</p><ol><li><p><strong>设置Cookie：</strong> <strong>服务器通过HTTP响应头将Cookie信息发送给浏览器</strong>，浏览器会将这些信息存储在本地。</p><p>在HTTP响应头中使用 <code>Set-Cookie</code> 字段：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>name=value; expires=Sat, 31 Dec 2022 23:59:59 GMT; path=/; domain=example.com; secure; HttpOnly</span><br></pre></td></tr></table></figure><ul><li><code>name=value</code>：设置Cookie的键值对。</li><li><code>expires</code>：设置Cookie的过期时间。</li><li><code>path</code>：指定Cookie的路径。</li><li><code>domain</code>：指定Cookie的域。</li><li><code>secure</code>：仅在通过HTTPS连接时发送Cookie。</li><li><strong><code>HttpOnly</code>：禁止通过JavaScript访问Cookie，提高安全性。</strong></li></ul></li><li><p><strong>读取Cookie：</strong> 浏览器会在每个请求中通过HTTP头部将Cookie信息发送给服务器。</p><p>在HTTP请求头中，包含了 <code>Cookie</code> 字段：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>name=value; anotherCookie=anotherValue</span><br></pre></td></tr></table></figure></li><li><p><strong>JavaScript中的操作：</strong> 在JavaScript中，可以通过 <strong><code>document.cookie</code> 来读取和设置Cookie。</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置Cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username=John Doe; expires=Thu, 18 Dec 2023 12:00:00 UTC; path=/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取Cookie</span></span><br><span class="line"><span class="keyword">let</span> userCookie = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br></pre></td></tr></table></figure><p>注意：JavaScript中的 <code>document.cookie</code> 操作有一些限制，因为安全性考虑，<strong>不能直接访问所有Cookie。</strong></p></li><li><p><strong>服务器端处理：</strong> 在服务器端，可以通过读取HTTP请求头中的 <code>Cookie</code> 字段来获取客户端发送的Cookie信息。</p></li></ol><p>Cookie通常用于存储用户会话标识、首选项、跟踪用户活动等信息。 要注意使用Cookie时的安全性和隐私保护。</p><h3 id="发送cookie"><a href="#发送cookie" class="headerlink" title="发送cookie"></a>发送cookie</h3><img src="/xu-runbo/post/6880b471/image-20240120173707752.png" class="" title="image-20240120173707752"> <p>Aservlet.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Aservlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们创建会话</span></span><br><span class="line">        Cookie cookie=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送cookie</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="http://localhost:9527/cookiesession_war/hello">localhost:9527&#x2F;cookiesession_war&#x2F;hello</a></p><p>F12网络活动检测</p><img src="/xu-runbo/post/6880b471/image-20240120165345585.png" class="" title="image-20240120165345585"><p>或者到浏览器设置里 </p><img src="/xu-runbo/post/6880b471/image-20240120165429106.png" class="" title="image-20240120165429106"><p>默认是浏览会话结束就销毁了</p><h3 id="获取cookies"><a href="#获取cookies" class="headerlink" title="获取cookies"></a>获取cookies</h3><img src="/xu-runbo/post/6880b471/image-20240120173654448.png" class="" title="image-20240120173654448"> <p>Bservlet.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/world&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bservlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取浏览器发过来的所有cookies</span></span><br><span class="line">        Cookie[] cookies=req.getCookies();</span><br><span class="line">        <span class="comment">//遍历！</span></span><br><span class="line">        <span class="keyword">for</span>(Cookie c:cookies)</span><br><span class="line">        &#123;</span><br><span class="line">            String name=c.getName();</span><br><span class="line">            <span class="keyword">if</span>(name.equals(<span class="string">&quot;username&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                String value=c.getValue();</span><br><span class="line">                System.out.println(<span class="string">&quot;name是&quot;</span>+name+<span class="string">&quot;值是&quot;</span>+value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/6880b471/PixPin01-20_17-02-55.gif" class="" title="PixPin01-20_17-02-55"><p>当浏览器访问一个站点时，它会<strong>将与该站点相关的所有Cookie信息包含在HTTP请求头中的 <code>Cookie</code> 字段中</strong>。这些Cookie信息是由之前访问的站点设置的，并且通常包含了一些用户状态或其他需要在不同请求之间共享的数据。 </p><img src="/xu-runbo/post/6880b471/image-20240120171842359.png" class="" title="image-20240120171842359"> <h3 id="Cookie原理"><a href="#Cookie原理" class="headerlink" title="Cookie原理"></a>Cookie原理</h3><img src="/xu-runbo/post/6880b471/image-20240120173329899.png" class="" title="image-20240120173329899"> <p>Cookie的核心原理非常简单，它基于HTTP协议，用于在客户端（通常是浏览器）和服务器之间传递和存储少量数据。以下是Cookie的核心原理：</p><ol><li><p><strong>创建Cookie：</strong> 当用户访问一个网站时，服务器可以通过<strong>HTTP响应头的 <code>Set-Cookie</code> 字段</strong>在用户的浏览器中创建一个Cookie。这个<strong>Cookie包含了一些键值对，通常用于存储用户的状态、偏好设置等信息</strong>。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>username=John; expires=Sat, 31 Dec 2022 23:59:59 GMT; path=/; domain=example.com; secure; HttpOnly</span><br></pre></td></tr></table></figure><p>上述示例中，创建了一个名为 <code>username</code> 的Cookie，值为 <code>John</code>。</p></li><li><p><strong>存储在客户端：</strong> 浏览器在接收到这个Cookie后，会将它存储在本地，通常是在用户的Cookie存储区域。</p></li><li><p><strong>发送到服务器：</strong> 当用户再次访问同一站点时，浏览器会将之前存储的Cookie信息通过HTTP请求头的 <code>Cookie</code> 字段发送给服务器。</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>username=John</span><br></pre></td></tr></table></figure></li><li><p><strong>服务器读取Cookie：</strong> 服务器在接收到请求后，通过读取 <code>Cookie</code> 字段，可以获取之前设置的Cookie信息。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//获取浏览器发过来的所有cookies</span></span><br><span class="line">       Cookie[] cookies=req.getCookies();</span><br><span class="line">       <span class="comment">//遍历！</span></span><br><span class="line">    <span class="keyword">for</span>(Cookie c:cookies)</span><br><span class="line">       &#123;</span><br><span class="line">           String name=c.getName();</span><br><span class="line">           <span class="keyword">if</span>(name.equals(<span class="string">&quot;username&quot;</span>))</span><br><span class="line">           &#123;</span><br><span class="line">            String value=c.getValue();</span><br><span class="line">               System.out.println(<span class="string">&quot;name是&quot;</span>+name+<span class="string">&quot;值是&quot;</span>+value);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总体来说，**Cookie的核心原理就是通过HTTP响应头在服务器端创建**，然后由浏览器存储，之后在每次HTTP请求中通过**请求头发送给服务器**。实现了客户端和服务器之间的状态共享和信息传递。</span><br><span class="line"></span><br><span class="line">### Cookie使用细节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Cookie的存活时间</span><br><span class="line"></span><br><span class="line">![image-20240120174639307](CookieSession/image-20240120174639307.png) </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">对于会话cookie</span><br><span class="line"></span><br><span class="line">cookie是存储在浏览器的内存中的，会随着浏览器的关闭而销毁，所以</span><br><span class="line"></span><br><span class="line">我们先去访问hello让服务器给浏览器发送一个cookie</span><br><span class="line"></span><br><span class="line">现在我们关闭浏览器然后</span><br><span class="line"></span><br><span class="line">去访问world的适合，就不会看到任何输出了</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">Cookie的存活时间不仅与浏览器是否关闭有关，还与Cookie本身的设置有关。</span><br><span class="line"></span><br><span class="line">1. **会话Cookie：** 如果创建Cookie时没有设置 `Expires` 或 `Max-Age` 字段，这个Cookie就是**会话Cookie**。**会话Cookie的生命周期仅在用户会话期间有效。**当用户关闭浏览器时，这些Cookie通常会被删除。</span><br><span class="line"></span><br><span class="line">    ```http</span><br><span class="line">    Set-Cookie: username=John; // 会话Cookie</span><br></pre></td></tr></table></figure><pre><code>上述例子中，`username=John` 是一个会话Cookie，它将在**用户关闭浏览器时失效。**</code></pre><ol start="2"><li><p><strong>持久性Cookie：</strong> 如果创建Cookie时设置了 <strong><code>Expires</code> 或 <code>Max-Age</code> 字段</strong>，这个Cookie是<strong>持久性Cookie</strong>。它将在<strong>指定的过期时间之后失效，而不受浏览器关闭的影响。</strong></p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>username=John; expires=Sat, 31 Dec 2022 23:59:59 GMT; // 持久性Cookie</span><br></pre></td></tr></table></figure><p>上述例子中，<code>username=John</code> 是一个持久性Cookie，它将在2022年12月31日23时59分59秒（GMT时间）之后失效，不受浏览器关闭的影响。</p></li></ol><h4 id="方法测试"><a href="#方法测试" class="headerlink" title="&#x3D;&#x3D;方法测试&#x3D;&#x3D;"></a>&#x3D;&#x3D;方法测试&#x3D;&#x3D;</h4><p>发送cookie的适合就设置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Aservlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们创建会话</span></span><br><span class="line">        Cookie cookie=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//只能是字符串，字符串，可以有多个cookie</span></span><br><span class="line">        <span class="comment">//当然也可与给多个cookie设置存活时间</span></span><br><span class="line"></span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//一周，需要转换为秒</span></span><br><span class="line">        <span class="comment">//发送cookie</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果</p><img src="/xu-runbo/post/6880b471/image-20240120175012655.png" class="" title="image-20240120175012655"> <h4 id="Cookie存储中文"><a href="#Cookie存储中文" class="headerlink" title="Cookie存储中文"></a>Cookie存储中文</h4><p>cookie的键值对存储一个中文的时候是个怎么情况呢？</p><p>答案是。。</p><img src="/xu-runbo/post/6880b471/image-20240120175215084.png" class="" title="image-20240120175215084"> <p>默认是不可以存储中文的</p><p>如何存储中文呢？</p><h4 id="如何解决呢"><a href="#如何解决呢" class="headerlink" title="如何解决呢"></a>如何解决呢</h4><p>发送cookie的时候</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Aservlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们创建会话</span></span><br><span class="line">        String value= URLEncoder.encode(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        Cookie cookie=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>,value);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;cookie里的username是&quot;</span>+value);</span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//一周，需要转换为秒</span></span><br><span class="line">        <span class="comment">//发送cookie</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>world的servlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/world&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bservlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取浏览器发过来的所有cookies</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="comment">//遍历！</span></span><br><span class="line">        <span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> c.getName();</span><br><span class="line">            <span class="keyword">if</span> (name.equals(<span class="string">&quot;username&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> c.getValue();</span><br><span class="line"></span><br><span class="line">                value= URLDecoder.decode(value,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;name是&quot;</span> + name + <span class="string">&quot;值是&quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String s=req.getParameter(<span class="string">&quot;Cookie&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们访问<a href="http://localhost:9527/cookiesession_war/hello">localhost:9527&#x2F;cookiesession_war&#x2F;hello</a></p><img src="/xu-runbo/post/6880b471/image-20240120175744684.png" class="" title="image-20240120175744684"><img src="/xu-runbo/post/6880b471/image-20240120175855814.png" class="" title="image-20240120175855814"> <p>再访问<a href="http://localhost:9527/cookiesession_war/world">localhost:9527&#x2F;cookiesession_war&#x2F;world</a></p><img src="/xu-runbo/post/6880b471/image-20240120175749043.png" class="" title="image-20240120175749043"><img src="/xu-runbo/post/6880b471/image-20240120175906288.png" class="" title="image-20240120175906288"> <p>虽然浏览器传递的进制，服务端解码后就可以得到真正的汉字了！！！</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><h3 id="Session引入"><a href="#Session引入" class="headerlink" title="Session引入"></a>Session引入</h3><blockquote><p>服务端会话跟踪技术：将数据保存到服务端</p><p>JavaEE提供HttpSession接口，实现一次会话的多次请求间数据共享功能</p></blockquote><h4 id="Session概念和作用"><a href="#Session概念和作用" class="headerlink" title="Session概念和作用"></a>Session概念和作用</h4><blockquote><p>Session 是一种用于在Web应用中跟踪用户状态、维护用户身份和存储临时数据的机制。</p></blockquote><h4 id="Seesion的生命周期"><a href="#Seesion的生命周期" class="headerlink" title="Seesion的生命周期"></a>Seesion的生命周期</h4><blockquote><p>Session 的生命周期包括创建、维护和销毁，通常始于用户访问应用并在一段时间后结束。</p></blockquote><h4 id="会话标识符"><a href="#会话标识符" class="headerlink" title="会话标识符"></a>会话标识符</h4><blockquote><p>会话标识符是一种唯一的标志，用于标识用户在一个会话期间的身份和状态，通常通过Cookie、Token或其他机制来实现。</p></blockquote><h3 id="Session的基本使用"><a href="#Session的基本使用" class="headerlink" title="Session的基本使用"></a>Session的基本使用</h3><img src="/xu-runbo/post/6880b471/image-20240122164805309.png" class="" title="image-20240122164805309"> <p><strong>Session 可以实现在一次会话的多次请求之间共享数据</strong>，当用户首次访问服务器时，服务器会为该用户创建一个唯一的<strong>会话标识符</strong>。在<strong>服务器端分配存储空间用于存储与该会话相关的数据</strong>。接下来的每个用户请求中，<strong>该会话标识符会被包含在请求中</strong></p><p>服务器通<strong>过这个标识符来识别用户</strong>，在服务器端，可以存储用户的登录状态、购物车内容、用户首选项等信息。这样，<strong>无需在每个请求中都重新验证用户或重新获取这些数据</strong>，实现了在一次会话的多次请求之间共享数据的目的。</p><p>比如基于 Cookie 的 Session，会话数据可能存储在服务器端的内存、数据库或其他持久化存储中。而基于 Token 的 Session 则可能将数据加密在令牌中，并在每个请求中传递该令牌以实现状态的共享。</p><hr><p>Sessiondemo1.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service.sessions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/s1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sessiondemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//   获取 HttpSession 对象，如果不存在则创建一个新的</span></span><br><span class="line">        HttpSession httpSession=req.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将用户名 &quot;zs&quot; 存储在 HttpSession 中的 &quot;username&quot; 属性中</span></span><br><span class="line">        httpSession.setAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Sessiondemo2.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service.sessions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/s2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sessiondemo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 获取 HttpSession 对象，如果不存在则创建一个新的</span></span><br><span class="line">        HttpSession httpSession=req.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 HttpSession 中获取之前存储的 &quot;username&quot; 属性</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> httpSession.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印获取到的用户名信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;session中的用户名：&quot;</span> + object);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果就是</p><p>先访问<a href="http://localhost:9527/cookiesession_war/s1">localhost:9527&#x2F;cookiesession_war&#x2F;s1</a></p><blockquote><p>通过<code>req.getSession()</code>获取<code>HttpSession</code>对象时，<strong>Servlet容器会检查请求中是否包含会话标识符</strong>。如果请求中包含有效的会话标识符，它将返回与该标识符相关联的 <code>HttpSession</code> 对象；如果没有会话标识符，它将创建一个新的 <code>HttpSession</code> 对象，<strong>并将相应的会话标识符发送给客户端</strong>。这样就确保了在整个会话期间，<code>HttpSession</code> 对象能够在<strong>多次请求之间共享数据</strong>。</p></blockquote><p>访问<a href="http://localhost:9527/cookiesession_war/s2">localhost:9527&#x2F;cookiesession_war&#x2F;s2</a></p><p>现在访问就能用到创建好的session对象了,并且可以读取我们存入的信息</p><blockquote><p>会话标识符在客户端和服务器之间传递，通过这种机制，Servlet容器能够识别并关联同一用户的多个请求，从而创建或获取相应的 <code>HttpSession</code> 对象。</p><p><strong>两次获取的是同一个session</strong></p></blockquote><p>控制台输出</p><img src="/xu-runbo/post/6880b471/image-20240122164700178.png" class="" title="image-20240122164700178"> <h3 id="Session原理"><a href="#Session原理" class="headerlink" title="Session原理"></a>Session原理</h3><p>为什么<strong>两次获取的是同一个session</strong>？</p><p>服务器如何做到识别同一次会话里的不同请求呢？</p><img src="/xu-runbo/post/6880b471/image-20240122173428103.png" class="" title="image-20240122173428103"><p>代码演示：</p><p>当我们访问<a href="http://localhost:9527/cookiesession_war/s1">localhost:9527&#x2F;cookiesession_war&#x2F;s1</a></p><img src="/xu-runbo/post/6880b471/image-20240122174141730.png" class="" title="image-20240122174141730"><p> 然后访问<a href="http://localhost:9527/cookiesession_war/s2">localhost:9527&#x2F;cookiesession_war&#x2F;s2</a></p><p>浏览器拿着cookie去访问服务器了</p><img src="/xu-runbo/post/6880b471/image-20240122174435946.png" class="" title="image-20240122174435946"><blockquote><p>解释</p><p>涉及到 Session 的创建、标识符传递以及在后续请求中如何利用这个标识符来找回相应的 Session。以下是您描述的两次请求、两个 Servlet、一个 Session 的逻辑关系：</p><ol><li><p><strong>请求一：</strong></p><ul><li>用户首次访问服务器，请求 Servlet1。</li><li>Servlet1 通过 <code>req.getSession()</code> 获取 <code>HttpSession</code> 对象。</li><li>因为这是用户的第一次访问，服务器发现请求中没有包含会话标识符（例如，没有包含会话Cookie）。</li><li><strong>服务器为用户创建</strong>一个新的 <code>HttpSession</code> 对象，并生成一个唯一的会话标识符（例如，ID&#x3D;10）。</li><li>服务器将这个会话标识符通过响应的 Set-Cookie 头部发送给客户端浏览器，例如：<code>Set-Cookie: id=10</code>。</li><li>客户端浏览器收到响应后，将这个 Cookie 存储起来，以便在后续的请求中发送给服务器。</li></ul></li><li><p><strong>请求二：</strong></p><ul><li>用户再次访问服务器，请求 Servlet2。</li><li>Servlet2 通过 <code>req.getSession()</code> 获取 <code>HttpSession</code> 对象。</li><li>此时，请求中包含了之前存储的会话标识符（Cookie: id&#x3D;10）。</li><li>服务器根据这个会话标识符找到了之前创建的 <code>HttpSession</code> 对象，因此这次获取的 <code>HttpSession</code> 与请求一中创建的是同一个。</li><li>Servlet2 可以从这个 <code>HttpSession</code> 中获取先前存储的数据。</li></ul></li><li><p><strong>另一个请求（没有携带会话标识符的情况）：</strong></p><ul><li>如果另一个用户或客户端发起请求，但是请求中没有包含之前设置的会话标识符（Cookie: id&#x3D;10）。</li><li>服务器将认为这是一个新的会话，会为该请求创建一个新的 <code>HttpSession</code> 对象，并为其生成一个新的唯一会话标识符。</li><li>这个请求的 <code>HttpSession</code> 将与之前的会话无关，无法获取之前存储的数据。</li></ul></li></ol><p>总体而言，<strong>会话标识符的传递是通过 Cookie 来实现的</strong>，客户端浏览器在请求中携带这个 Cookie，服务器通过这个标识符来关联和获取相应的 <code>HttpSession</code> 对象，从而实现在一次会话中共享数据。</p></blockquote><h3 id="Session使用细节"><a href="#Session使用细节" class="headerlink" title="Session使用细节"></a>Session使用细节</h3><hr><blockquote><ol><li><p><strong>创建 Session：</strong> 通过 <code>HttpServletRequest</code> 的 <code>getSession()</code> 方法可以获取或创建一个 <code>HttpSession</code> 对象。如果客户端请求中包含有效的会话标识符，该方法会返回与该标识符关联的 <code>HttpSession</code> 对象，否则将创建一个新的 <code>HttpSession</code>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br></pre></td></tr></table></figure></li><li><p><strong>设置和获取 Session 属性：</strong> 使用 <code>HttpSession</code> 对象的 <code>setAttribute(String name, Object value)</code> 方法来设置 Session 属性，使用 <code>getAttribute(String name)</code> 方法来获取属性的值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置 Session 属性</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;John&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 Session 属性</span></span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>Session 过期时间：</strong> 可以<strong>通过配置或在代码中设置 Session 的过期时间</strong>。默认情况下，Session 将持续到浏览器关闭，但可以通过以下方式设置超时时间（以秒为单位）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置 Session 过期时间为30分钟</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">1800</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>手动使 Session 失效：</strong> 在某些情况下，您可能希望<strong>手动使 Session 失效</strong>。可以通过调用 <code>invalidate()</code> 方法来实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动使 Session 失效</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure></li><li><p><strong>检查 Session 是否存在：</strong> 可以使用 <code>isNew()</code> 方法<strong>检查当前请求的 <code>HttpSession</code> 是否是新创建的</strong>，即是否是用户的第一次访问。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (session.isNew()) &#123;</span><br><span class="line">    <span class="comment">// 处理新会话的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Cookie 配置：</strong> 默认情况下，Servlet容器会自动为每个新的 Session 创建一个包含会话标识符的 Cookie。如果需要更改 Cookie 的配置，可以使用 <code>Cookie</code> 对象进行调整。</p></li><li><p><strong>Session 监听器：</strong> 可以通过实现 <code>HttpSessionListener</code> 接口来创建 Session 监听器，监听 Session 的创建和销毁事件。这对于执行某些操作（例如记录日志）非常有用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySessionListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line">    <span class="comment">// 实现监听器的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>分布式环境：</strong> 在分布式系统中，确保多个服务器之间能够共享 Session 数据可能需要使用一些外部的存储机制，例如数据库或缓存系统。</p></li><li><p><strong>安全性：</strong> 避免在 Session 中存储敏感信息，因为 <strong>Session 数据通常存储在服务器端</strong>，但仍然可能受到某些攻击。确保使用 HTTPS 协议来加密数据传输，以增加安全性。</p></li></ol></blockquote><hr><h4 id="session钝化，活化："><a href="#session钝化，活化：" class="headerlink" title="session钝化，活化："></a>session钝化，活化：</h4><blockquote><p>服务器重启后，session种的数据是否还在？</p><p>钝化：在服务器正常关闭后，tomcat会自动将Session数据写入硬盘的文件种</p><p>活化：再次启动服务器后，从文件中加载数据到Session中</p><blockquote><p>将 Session 对象存储到外部存储介质（例如磁盘或数据库）和从外部存储介质中读取 Session 对象的过程</p><p>会有一个.sar文件的存在和删除，由tomcat自动完成的</p></blockquote><p>服务器关闭，session 数据不会丢失</p><p>但是浏览器不能关闭，才能实现共享数据。</p><p>id是通过cookie发送给浏览器的，在浏览器的内存里</p><p>浏览器一旦关闭，session就没了，session的id就随着cookie的销毁而销毁</p></blockquote><h4 id="Session的销毁"><a href="#Session的销毁" class="headerlink" title="Session的销毁"></a>Session的销毁</h4><p>默认是无操作，会造30mins自动销毁</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>tomcat里的配置是写死的</p><img src="/xu-runbo/post/6880b471/image-20240122191659020.png" class="" title="image-20240122191659020"><p>调用Session对象的invalidate方法，可以让session对象自动销毁 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>Cookie 和 Session 是 Web 开发中常用的两种机制，用于在客户端和服务器之间保持状态信息。</p><h3 id="Cookie："><a href="#Cookie：" class="headerlink" title="Cookie："></a>Cookie：</h3><ol><li><p><strong>定义：</strong> Cookie 是一小段存<strong>储在客户端浏览器中的数据</strong>，由服务器发送到浏览器，并在后续的请求中被包含在请求头中发送给服务器。</p></li><li><p><strong>用途：</strong> 主要用于跟踪用户的状态、识别用户，实现用户个性化设置，以及在客户端存储少量数据。</p></li><li><p><strong>存储位置：</strong> 存储在客户端浏览器中，每个 Cookie 都有一个过期时间。</p></li><li><p><strong>安全性：</strong> Cookies 可以被禁用或删除，因此不适合存储敏感信息。可以设置 HttpOnly 属性来增加安全性，防止被恶意脚本访问。</p></li><li><p><strong>容量：</strong> 单个 Cookie 大小有限，通常为4KB左右。</p></li></ol><h3 id="Session："><a href="#Session：" class="headerlink" title="Session："></a>Session：</h3><ol><li><p><strong>定义：</strong> Session 是<strong>在服务器端保存的关联于用户的信息</strong>，通过会话标识符在客户端和服务器之间传递。</p></li><li><p><strong>用途：</strong> 用于在一次用户访问期间跟踪用户状态、维护用户身份和存储临时数据。</p></li><li><p><strong>存储位置：</strong> 存储在服务器端，通常在内存中，可以选择存储到数据库或文件系统中，具体取决于服务器的配置。</p></li><li><p><strong>安全性：</strong> 相对于 Cookie 更安全，因为 Session 数据存储在服务器端，客户端只有一个会话标识符。</p></li><li><p><strong>容量：</strong> 理论上没有特定大小限制，但实际上受服务器配置和性能的影响。</p></li></ol><h3 id="Cookie-和-Session-的关系："><a href="#Cookie-和-Session-的关系：" class="headerlink" title="Cookie 和 Session 的关系："></a>Cookie 和 Session 的关系：</h3><ol><li><p><strong>会话管理：</strong> <strong>Session 通常使用 Cookie 来传递会话标识符</strong>。客户端浏览器会保存这个标识符，并在后续的请求中将其发送给服务器。</p></li><li><p><strong>共同点：</strong> 两者都用于在无状态的 HTTP 协议中保持用户状态，但存储的位置和安全性不同。</p></li><li><p><strong>合理使用：</strong> Cookie 适合存储少量信息，而 <strong>Session 更适合存储大量、敏感的用户数据</strong>。</p></li></ol></blockquote><img src="/xu-runbo/post/6880b471/image-20240122192729268.png" class="" title="image-20240122192729268"> <h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="案例要求"><a href="#案例要求" class="headerlink" title="案例要求"></a>案例要求</h3><img src="/xu-runbo/post/6880b471/image-20240129144524810.png" class="" title="image-20240129144524810"> <h3 id="web框架准备"><a href="#web框架准备" class="headerlink" title="web框架准备"></a>web框架准备</h3><ol><li><p>用maven创建项目</p><img src="/xu-runbo/post/6880b471/image-20240129144613830.png" class="" title="image-20240129144613830"> </li><li><p>pom.xml加入<code>&lt;packaging&gt;war&lt;/packaging&gt;</code>并且刷新</p></li><li><p>加入web框架(webapp)</p></li></ol><h4 id="pojo下的User-java"><a href="#pojo下的User-java" class="headerlink" title="pojo下的User.java"></a>pojo下的User.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String username ;</span><br><span class="line">    String password ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="pojo下的Brad-java"><a href="#pojo下的Brad-java" class="headerlink" title="pojo下的Brad.java"></a>pojo下的Brad.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐使用包装的类型，因为没有M默认值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer  id           ;</span><br><span class="line">    <span class="keyword">private</span> String  rand_name    ;</span><br><span class="line">    <span class="keyword">private</span> String  company_name ;</span><br><span class="line">    <span class="keyword">private</span> Integer ordered      ;</span><br><span class="line">    <span class="keyword">private</span> String  description  ;</span><br><span class="line">    <span class="comment">//0禁用，1正常</span></span><br><span class="line">    <span class="keyword">private</span> Integer   status       ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Brand</span><span class="params">(Integer id, String rand_name, String company_name, Integer ordered, String description, Integer status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.rand_name = rand_name;</span><br><span class="line">        <span class="built_in">this</span>.company_name = company_name;</span><br><span class="line">        <span class="built_in">this</span>.ordered = ordered;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Brand</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRand_name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rand_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRand_name</span><span class="params">(String rand_name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rand_name = rand_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCompany_name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> company_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany_name</span><span class="params">(String company_name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.company_name = company_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getOrdered</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ordered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrdered</span><span class="params">(Integer ordered)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ordered = ordered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Brand&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, rand_name=&#x27;&quot;</span> + rand_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, company_name=&#x27;&quot;</span> + company_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ordered=&quot;</span> + ordered +</span><br><span class="line">                <span class="string">&quot;, description=&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, status=&quot;</span> + status +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="service下的UserService-java"><a href="#service下的UserService-java" class="headerlink" title="service下的UserService.java"></a>service下的UserService.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.Getfactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory= Getfactory.getsqlsessionfactory();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(String username,String password)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取sqlsession</span></span><br><span class="line">        SqlSession sqlSession=factory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//获取usermapper</span></span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        User user=userMapper.select(username,password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>service下的BrandService.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.BrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.Getfactory;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.Getfactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory Factory= Getfactory.getsqlsessionfactory();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取sqlsession对象</span></span><br><span class="line">        SqlSession sqlsession=Factory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取mapper对象</span></span><br><span class="line">        BrandMapper brandMapper=sqlsession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行sql语句</span></span><br><span class="line">        List&lt;Brand&gt; brands=brandMapper.selectall();</span><br><span class="line">        sqlsession.close();</span><br><span class="line">        <span class="keyword">return</span> brands;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Brand brand)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SqlSession sqlsession=Factory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取mapper对象</span></span><br><span class="line">        BrandMapper brandMapper=sqlsession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        brandMapper.add(brand);</span><br><span class="line"></span><br><span class="line">        sqlsession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Brand <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SqlSession sqlsession=Factory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取mapper对象</span></span><br><span class="line">        BrandMapper brandMapper=sqlsession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        Brand brand=brandMapper.selectById(id);</span><br><span class="line">        sqlsession.close();</span><br><span class="line">        <span class="keyword">return</span> brand;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Brand brand)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SqlSession sqlsession=Factory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取mapper对象</span></span><br><span class="line">        BrandMapper brandMapper=sqlsession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        brandMapper.update(brand);</span><br><span class="line"></span><br><span class="line">        sqlsession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--            数据库的连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///db&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xurunbo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    加载SQl的映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hello.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>untitled23<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>servlet-api必须是provided，要不会出错！！！</p><h4 id="UserMapper接口"><a href="#UserMapper接口" class="headerlink" title="UserMapper接口"></a>UserMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user where username=#&#123;username&#125; and password=#&#123;password&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user;&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectall</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tb_user(username,password) values(#&#123;username&#125;,#&#123;password&#125;);&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">adduser</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="seervlet下的LoginServlet-java"><a href="#seervlet下的LoginServlet-java" class="headerlink" title="seervlet下的LoginServlet.java"></a>seervlet下的LoginServlet.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.Getfactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String path=req.getContextPath();</span></span><br><span class="line"><span class="comment">//        resp.getWriter().println(path);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;先获取信息&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String resource = &quot;mybatis-config.xml&quot;;</span></span><br><span class="line"><span class="comment">//        InputStream inputStream = Resources.getResourceAsStream(resource);</span></span><br><span class="line"><span class="comment">//        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //获取Sqlsussion对象</span></span><br><span class="line"><span class="comment">//        SqlSession sqlSession=sqlSessionFactory.openSession();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        优化为</span></span><br><span class="line">        SqlSession sqlSession= Getfactory.getsqlsessionfactory().openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user=userMapper.select(username,password);</span><br><span class="line">        <span class="comment">//调用完SQL就可以关闭了</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span>+username);</span><br><span class="line">        System.out.println(<span class="string">&quot;password:&quot;</span>+password);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;登录成功！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post!&quot;</span>);</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="seervlet下的RegisterServlet-java"><a href="#seervlet下的RegisterServlet-java" class="headerlink" title="seervlet下的RegisterServlet.java"></a>seervlet下的RegisterServlet.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.Getfactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;先获取用户填写的信息&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String resource = &quot;mybatis-config.xml&quot;;</span></span><br><span class="line"><span class="comment">//        InputStream inputStream = Resources.getResourceAsStream(resource);</span></span><br><span class="line"><span class="comment">//        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //获取Sqlsussion对象</span></span><br><span class="line"><span class="comment">//        SqlSession sqlSession=sqlSessionFactory.openSession(true);</span></span><br><span class="line">        SqlSession sqlSession= Getfactory.getsqlsessionfactory().openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//检查是否已经有这个用户了</span></span><br><span class="line">        User user=userMapper.select(username,password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//没有这个用户就创建这个用户</span></span><br><span class="line">            userMapper.adduser(username,password);</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;创建成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//注册失败！</span></span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;已经有这个账户拉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#45a049</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/untitled23_war/login&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Don&#x27;t have an account? <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;register.html&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="regiser-html"><a href="#regiser-html" class="headerlink" title="regiser.html"></a>regiser.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Register Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.register-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#45a049</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;register-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;registerForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/untitled23_war/register&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Already have an account? <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;login.html&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="brand-jsp"><a href="#brand-jsp" class="headerlink" title="brand.jsp"></a>brand.jsp</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Brand List&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        table &#123;</span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">            width: <span class="number">80</span>%;</span><br><span class="line">            margin: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th, td &#123;</span><br><span class="line">            border: 1px solid #dddddd;</span><br><span class="line">            text-align: left;</span><br><span class="line">            padding: 8px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th &#123;</span><br><span class="line">            background-color: #f2f2f2;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;Brand List&lt;/h2&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;add&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Company Name&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Ordered&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Description&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Status&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;状态&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">    &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;brand&quot;</span> items=<span class="string">&quot;$&#123;brands&#125;&quot;</span> varStatus=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;status.count&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;brand.rand_name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;brand.company_name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;brand.ordered&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;brand.description&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;brand.status&#125;&lt;/td&gt;</span><br><span class="line">            &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;brand.status==1&#125;&quot;</span>&gt;</span><br><span class="line">                &lt;td&gt;启用&lt;/td&gt;</span><br><span class="line">            &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;brand.status!=1&#125;&quot;</span>&gt;</span><br><span class="line">                &lt;td&gt; 禁用&lt;/td&gt;</span><br><span class="line">            &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=<span class="string">&quot;/untitled23_war/selectById?id=$&#123;brand.id&#125;&quot;</span>&gt;修改&lt;/a&gt; &lt;a href=<span class="string">&quot;#&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    document.getElementById(<span class="string">&quot;add&quot;</span>).onclick=function ()&#123;</span><br><span class="line">        location.href=<span class="string">&quot;/untitled23_war/add.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="update-jsp"><a href="#update-jsp" class="headerlink" title="update.jsp"></a>update.jsp</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Add Brand&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入Bootstrap样式文件，确保文件路径正确 --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            padding: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form &#123;</span><br><span class="line">            max-width: 400px;</span><br><span class="line">            margin: <span class="number">0</span> auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        label &#123;</span><br><span class="line">            margin-bottom: <span class="number">0.</span>5rem;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        textarea &#123;</span><br><span class="line">            resize: vertical;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;h2 class=<span class="string">&quot;mt-4&quot;</span>&gt;Add Brand&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;/anli_war/update&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;%--        隐藏域--%&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;$&#123;brand.id&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;randName&quot;</span>&gt;Brand Name:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;randName&quot;</span> name=<span class="string">&quot;rand_name&quot;</span> required value=<span class="string">&quot;$&#123;brand.rand_name&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;companyName&quot;</span>&gt;Company Name:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;companyName&quot;</span> name=<span class="string">&quot;company_name&quot;</span> required value=<span class="string">&quot;$&#123;brand.company_name&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;ordered&quot;</span>&gt;Ordered:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;number&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;ordered&quot;</span> name=<span class="string">&quot;ordered&quot;</span> required value=<span class="string">&quot;$&#123;brand.ordered&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;description&quot;</span>&gt;Description:&lt;/label&gt;</span><br><span class="line">            &lt;textarea class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;description&quot;</span> name=<span class="string">&quot;description&quot;</span> rows=<span class="string">&quot;4&quot;</span> required&gt;</span><br><span class="line">                $&#123;brand.description&#125;</span><br><span class="line">            &lt;/textarea&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;status&quot;</span>&gt;Status:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;number&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;status&quot;</span> name=<span class="string">&quot;status&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;btn btn-primary&quot;</span>&gt;Add Brand&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入Bootstrap的JavaScript文件，确保文件路径正确 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="add-jsp"><a href="#add-jsp" class="headerlink" title="add.jsp"></a>add.jsp</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Add Brand&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入Bootstrap样式文件，确保文件路径正确 --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            padding: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form &#123;</span><br><span class="line">            max-width: 400px;</span><br><span class="line">            margin: <span class="number">0</span> auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        label &#123;</span><br><span class="line">            margin-bottom: <span class="number">0.</span>5rem;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        textarea &#123;</span><br><span class="line">            resize: vertical;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;h2 class=<span class="string">&quot;mt-4&quot;</span>&gt;Add Brand&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;/untitled23_war/add&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;randName&quot;</span>&gt;Brand Name:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;randName&quot;</span> name=<span class="string">&quot;rand_name&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;companyName&quot;</span>&gt;Company Name:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;companyName&quot;</span> name=<span class="string">&quot;company_name&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;ordered&quot;</span>&gt;Ordered:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;number&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;ordered&quot;</span> name=<span class="string">&quot;ordered&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;description&quot;</span>&gt;Description:&lt;/label&gt;</span><br><span class="line">            &lt;textarea class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;description&quot;</span> name=<span class="string">&quot;description&quot;</span> rows=<span class="string">&quot;4&quot;</span> required&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;status&quot;</span>&gt;Status:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;number&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;status&quot;</span> name=<span class="string">&quot;status&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;btn btn-primary&quot;</span>&gt;Add Brand&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入Bootstrap的JavaScript文件，确保文件路径正确 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="utils下的Getfactory-java"><a href="#utils下的Getfactory-java" class="headerlink" title="utils下的Getfactory.java"></a>utils下的Getfactory.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Getfactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getsqlsessionfactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在可以实现之前的简单登录和注册</p><img src="/xu-runbo/post/6880b471/image-20240130165614172.png" class="" title="image-20240130165614172"> <img src="/xu-runbo/post/6880b471/image-20240130165617008.png" class="" title="image-20240130165617008"> <p>通常情况下，资源间转发用于普通的数据传输，而会话转发用于对网络流量进行安全检查和管理。</p><h3 id="Request请求转发"><a href="#Request请求转发" class="headerlink" title="Request请求转发"></a><a href="https://xu-runbo.gitee.io/xu-runbo/post/e770816f.html?highlight=request#Request%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91">Request请求转发</a></h3><p><a href="https://xu-runbo.gitee.io/xu-runbo/post/e770816f.html?highlight=request#Request%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91">Request请求转发</a></p><h3 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h3><p><a href="https://xu-runbo.gitee.io/xu-runbo/post/681c540e.html?highlight=jstl#EL%E8%A1%A8%E8%BE%BE%E5%BC%8F">JSTL标签</a></p><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><h4 id="实现XXX用户欢迎"><a href="#实现XXX用户欢迎" class="headerlink" title="实现XXX用户欢迎"></a>实现XXX用户欢迎</h4><img src="/xu-runbo/post/6880b471/image-20240130204506603.png" class="" title="image-20240130204506603"> <p>我们想要在登录后的 页面显示是谁登录了</p><p>XXX欢迎你！</p><p>登录成功是一个servlet</p><p>接下来我们重定向到新的servlet</p><p>不同的servlet之间共享信息</p><p>一次会话的两次请求之间，我们要共享信息</p><h4 id="LoginServlet-java"><a href="#LoginServlet-java" class="headerlink" title="LoginServlet.java"></a>LoginServlet.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.hello.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.Getfactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService=<span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;先获取信息&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        优化为</span></span><br><span class="line">        User user=userService.login(username,password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;登录成功！！&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// --------------------------------------------</span></span><br><span class="line">            <span class="comment">//登陆成功后我们把用户的信息传递给session</span></span><br><span class="line">            HttpSession httpSession=req.getSession();</span><br><span class="line">            httpSession.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">           <span class="comment">// --------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String contextPath=req.getContextPath();</span><br><span class="line">            resp.sendRedirect(contextPath+<span class="string">&quot;/selectall&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post!&quot;</span>);</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="brand-jsp-1"><a href="#brand-jsp-1" class="headerlink" title="brand.jsp"></a>brand.jsp</h4><img src="/xu-runbo/post/6880b471/image-20240130171307791.png" class="" title="image-20240130171307791"> <p>就可以实现不同用户登陆显示不同</p><img src="/xu-runbo/post/6880b471/image-20240130201431620.png" class="" title="image-20240130201431620"> <h4 id="session和req域"><a href="#session和req域" class="headerlink" title="session和req域"></a>session和req域</h4><p>Session和存入req域<strong>都是用来在不同的Servlet之间传递数据</strong>的方式。但它们有一些不同之处：</p><ol><li><p>生命周期：<strong>Session的生命周期是整个会话期间</strong>，而存入<strong>req域的数据只在请求处理期间有效</strong>。</p></li><li><p>共享范围：<strong>Session可以在不同的Servlet之间共享数据</strong>，而存入req域的数据<strong>只能在当前请求的处理期间共享。</strong></p></li></ol><p>当在一个Servlet中将数据存入Session或者req域中，这些数据会被保存在服务器端，然后在跳转到另一个Servlet时，可以通过Session或者req域来获取之前存入的数据。</p><h4 id="提示错误信息"><a href="#提示错误信息" class="headerlink" title="提示错误信息"></a>提示错误信息</h4><p>实现，当用户密码不匹配的时候提示一下</p><p>因为要用到el表达式，我们把html修改为jsp</p><p>只需要前面加上这两句</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">防止乱码</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>login.jsp</p><img src="/xu-runbo/post/6880b471/image-20240130204526328.png" class="" title="image-20240130204526328"> <figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;not empty login_msg&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;h3 style=<span class="string">&quot;color: red;&quot;</span>&gt;$&#123;login_msg&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><p>现在的loginservlet.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.hello.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.Getfactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService=<span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;先获取信息&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        优化为</span></span><br><span class="line">        User user=userService.login(username,password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">//------------------------------------</span></span><br><span class="line">            <span class="comment">//存入req域</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;login_msg&quot;</span>,<span class="string">&quot;用户密码不匹配&quot;</span>);</span><br><span class="line">            <span class="comment">//请求转发</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">            <span class="comment">//------------------------------------ </span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;登录成功！！&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//登陆成功后我们把用户的信息传递给session</span></span><br><span class="line">            HttpSession httpSession=req.getSession();</span><br><span class="line">            httpSession.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String contextPath=req.getContextPath();</span><br><span class="line">            resp.sendRedirect(contextPath+<span class="string">&quot;/selectall&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post!&quot;</span>);</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="记住用户"><a href="#记住用户" class="headerlink" title="记住用户"></a>记住用户</h3><img src="/xu-runbo/post/6880b471/image-20240130205218451.png" class="" title="image-20240130205218451"> <hr><img src="/xu-runbo/post/6880b471/image-20240130205255711.png" class="" title="image-20240130205255711"> <h4 id="login-jsp"><a href="#login-jsp" class="headerlink" title="login.jsp"></a>login.jsp</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#45a049</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>用户密码不匹配<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/untitled23_war/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;%--////////////////////////////////////////////////////////////--%&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-bottom: 10px;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;rememberMe&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin: 0;&quot;</span>&gt;</span>rememberMe<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;rememberMe&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:inline; width: 20px; margin: 0;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;%--////////////////////////////////////////////////////////////--%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Don&#x27;t have an account? <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;register.html&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明，我们等下根据getparmater来获取到复选框的值来判断是否被选中</p><p>获取到的remember的值是1说明被选中了</p><blockquote><p>定义了一个复选框元素。</p><p>它有一个id属性为”rememberMe”，name属性为”remember”，以及一个value属性为”1”。</p><p>当用户勾选了这个复选框后，我们可以使用JavaScript或者<strong>后端的Java代码</strong>来获<strong>取这个复选框的值</strong>。</p><p>在后端的Java代码中，我们可以使用request.getParameter(“remember”)来获取复选框的值。如果复选框被选中，那么返回的值就是”1”；如果没有被选中，那么返回的值就是null。</p></blockquote><blockquote><p>这种前后端的交互方式可以用于用户提交表单时，后端根据用户的输入来做出相应的处理，比如保存用户的选择或者进行其他操作。</p></blockquote><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><p><code>if(&quot;1&quot;.equals(checkvalue))</code>是在检查<code>checkvalue</code>的值是否等于字符串”1”。</p><p>如果<code>checkvalue</code>是null或空的话，调用它的<code>equals</code>方法</p><p>也就是<code>if(checkvalue.equals(&quot;1&quot;))</code></p><p>会导致<code>NullPointerException</code>。通过确保在进行比较之前<code>checkvalue</code>不为null或空，可以避免这个潜在问题。</p><p>注释强调了处理<code>checkvalue</code>可能为null或空值的重要性，作为代码设计中的细节。这有助于确保代码按预期方式运行，并避免意外错误。 </p><p>所以，让前者为字符串常量好啊啊啊啊</p><h4 id="改造loginservlet"><a href="#改造loginservlet" class="headerlink" title="改造loginservlet"></a>改造loginservlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.hello.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.Getfactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService=<span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;先获取信息&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------</span></span><br><span class="line">        <span class="comment">//获取我们前端传来的东西</span></span><br><span class="line">        String checkvalue=req.getParameter(<span class="string">&quot;remember&quot;</span>);</span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------        </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        优化为</span></span><br><span class="line">        User user=userService.login(username,password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">            <span class="comment">//存入req域</span></span><br><span class="line">            req.setAttribute(<span class="string">&quot;login_msg&quot;</span>,<span class="string">&quot;用户密码不匹配&quot;</span>);</span><br><span class="line">            <span class="comment">//请求转发</span></span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;登录成功！！&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//登录成功且勾选了复选框</span></span><br><span class="line">            </span><br><span class="line"> <span class="comment">//---------------------------------------------------------------------------------</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(checkvalue))<span class="comment">//细节在于，前这一直不为空，可以避免一些问题</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//发送cookie</span></span><br><span class="line">                Cookie username_cookie=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">                Cookie password_cookie=<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                username_cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br><span class="line">                password_cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">                resp.addCookie(username_cookie);</span><br><span class="line">                resp.addCookie(password_cookie);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------------------</span></span><br><span class="line">            <span class="comment">//登陆成功后我们把用户的信息传递给session</span></span><br><span class="line">            HttpSession httpSession=req.getSession();</span><br><span class="line">            httpSession.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String contextPath=req.getContextPath();</span><br><span class="line">            resp.sendRedirect(contextPath+<span class="string">&quot;/selectall&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post!&quot;</span>);</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当登陆成功而且还选中了复选框</p><p>F12检索就可以看到</p><p>服务端拿到了密码和账户，并且发送了cookie</p><img src="/xu-runbo/post/6880b471/image-20240130212434292.png" class="" title="image-20240130212434292"> <hr><p>把cookie存储在我们的浏览器</p><p>以后的访问就会带着cookie头去请求</p><img src="/xu-runbo/post/6880b471/image-20240130212841277.png" class="" title="image-20240130212841277"> <h4 id="获取cookie数据"><a href="#获取cookie数据" class="headerlink" title="获取cookie数据"></a>获取cookie数据</h4><img src="/xu-runbo/post/6880b471/image-20240130213015281.png" class="" title="image-20240130213015281"> <p>以后既然都携带cookie了，那我们在前端页面用cookie里的数据填充就好了！</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Login Page&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: Arial, sans-serif;</span><br><span class="line">            background-color: #f4f4f4;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">        .login-container &#123;</span><br><span class="line">            max-width: 400px;</span><br><span class="line">            margin: auto;</span><br><span class="line">            background: #fff;</span><br><span class="line">            padding: 20px;</span><br><span class="line">            border-radius: 8px;</span><br><span class="line">            box-shadow: <span class="number">0</span> <span class="number">0</span> 10px <span class="title function_">rgba</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        input &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            margin: 8px <span class="number">0</span>;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        button &#123;</span><br><span class="line">            background-color: #4caf50;</span><br><span class="line">            color: #fff;</span><br><span class="line">            padding: 10px 15px;</span><br><span class="line">            border: none;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">        button:hover &#123;</span><br><span class="line">            background-color: #45a049;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            color: #4caf50;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;login-container&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;Login&lt;/h2&gt;</span><br><span class="line">    &lt;h3 style=<span class="string">&quot;color: red;&quot;</span>&gt;用户密码不匹配&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;form id=<span class="string">&quot;loginForm&quot;</span> action=<span class="string">&quot;/untitled23_war/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;username&quot;</span>&gt;Username:&lt;/label&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &lt;%-----------------------------------------------------------------------%&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span> name=<span class="string">&quot;username&quot;</span> required value=<span class="string">&quot;$&#123;cookie.username.value&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;%-----------------------------------------------------------------------%&gt;</span><br><span class="line"></span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;password&quot;</span>&gt;Password:&lt;/label&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &lt;%-----------------------------------------------------------------------%&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;password&quot;</span> id=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> required value=<span class="string">&quot;$&#123;cookie.password.value&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;%-----------------------------------------------------------------------%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;div style=<span class="string">&quot;margin-bottom: 10px;&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;rememberMe&quot;</span> style=<span class="string">&quot;margin: 0;&quot;</span>&gt;rememberMe&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;rememberMe&quot;</span> name=<span class="string">&quot;remember&quot;</span> value=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;display:inline; width: 20px; margin: 0;&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;Login&lt;/button&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;reset&quot;</span>&gt;Reset&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;Don<span class="string">&#x27;t have an account? &lt;a href=&quot;register.html&quot;&gt;Register&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>google没有自动填补，edge自动填补</p><img src="/xu-runbo/post/6880b471/PixPin01-30_21-38-10.gif" class="" title="PixPin01-30_21-38-10"><h3 id="注册案例"><a href="#注册案例" class="headerlink" title="注册案例"></a>注册案例</h3><img src="/xu-runbo/post/6880b471/image-20240130214135304.png" class="" title="image-20240130214135304"> <img src="/xu-runbo/post/6880b471/image-20240130214126843.png" class="" title="image-20240130214126843"> <h4 id="UserService-java添加registter方法，优化"><a href="#UserService-java添加registter方法，优化" class="headerlink" title="UserService.java添加registter方法，优化"></a>UserService.java添加registter方法，优化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.Getfactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory factory= Getfactory.getsqlsessionfactory();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(String username,String password)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取sqlsession</span></span><br><span class="line">        SqlSession sqlSession=factory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//获取usermapper</span></span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        User user=userMapper.select(username,password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">register</span><span class="params">(String username,String password)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取sqlsession</span></span><br><span class="line">        SqlSession sqlSession=factory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//获取usermapper</span></span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//执行方法检查是否重复</span></span><br><span class="line">        User user=userMapper.select(username,password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user== <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            userMapper.adduser(username,password);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> user == <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="registerServlet-java修改"><a href="#registerServlet-java修改" class="headerlink" title="registerServlet.java修改"></a>registerServlet.java修改</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.hello.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.Getfactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegisterServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService=<span class="keyword">new</span> <span class="title class_">UserService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;先获取用户填写的信息&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户信息</span></span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> flag=userService.register(username,password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            req.setAttribute(<span class="string">&quot;register_msg&quot;</span>,<span class="string">&quot;注册成功，请登录&quot;</span>);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            req.setAttribute(<span class="string">&quot;register_msg&quot;</span>,<span class="string">&quot;用户名已经存在&quot;</span>);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;/register.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="regiset-jsp"><a href="#regiset-jsp" class="headerlink" title="regiset.jsp"></a>regiset.jsp</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Register Page&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: Arial, sans-serif;</span><br><span class="line">            background-color: #f4f4f4;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">        .register-container &#123;</span><br><span class="line">            max-width: 400px;</span><br><span class="line">            margin: auto;</span><br><span class="line">            background: #fff;</span><br><span class="line">            padding: 20px;</span><br><span class="line">            border-radius: 8px;</span><br><span class="line">            box-shadow: <span class="number">0</span> <span class="number">0</span> 10px <span class="title function_">rgba</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        input &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            margin: 8px <span class="number">0</span>;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        button &#123;</span><br><span class="line">            background-color: #4caf50;</span><br><span class="line">            color: #fff;</span><br><span class="line">            padding: 10px 15px;</span><br><span class="line">            border: none;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">        button:hover &#123;</span><br><span class="line">            background-color: #45a049;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;register-container&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;Register&lt;/h2&gt;</span><br><span class="line">    &lt;form id=<span class="string">&quot;registerForm&quot;</span> action=<span class="string">&quot;/untitled23_war/register&quot;</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;username&quot;</span>&gt;Username:&lt;/label&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span> name=<span class="string">&quot;username&quot;</span> required&gt;</span><br><span class="line"></span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;password&quot;</span>&gt;Password:&lt;/label&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;password&quot;</span> id=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> required&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p&gt;$&#123;register_msg&#125;&lt;/p&gt;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;Register&lt;/button&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;reset&quot;</span>&gt;Reset&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;p&gt;Already have an account? &lt;a href=<span class="string">&quot;login.jsp&quot;</span>&gt;Login&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="login-jsp-1"><a href="#login-jsp-1" class="headerlink" title="login.jsp"></a>login.jsp</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Login Page&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: Arial, sans-serif;</span><br><span class="line">            background-color: #f4f4f4;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">        .login-container &#123;</span><br><span class="line">            max-width: 400px;</span><br><span class="line">            margin: auto;</span><br><span class="line">            background: #fff;</span><br><span class="line">            padding: 20px;</span><br><span class="line">            border-radius: 8px;</span><br><span class="line">            box-shadow: <span class="number">0</span> <span class="number">0</span> 10px <span class="title function_">rgba</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        input &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            padding: 10px;</span><br><span class="line">            margin: 8px <span class="number">0</span>;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line">        button &#123;</span><br><span class="line">            background-color: #4caf50;</span><br><span class="line">            color: #fff;</span><br><span class="line">            padding: 10px 15px;</span><br><span class="line">            border: none;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">        button:hover &#123;</span><br><span class="line">            background-color: #45a049;</span><br><span class="line">        &#125;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            color: #4caf50;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;login-container&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;Login&lt;/h2&gt;</span><br><span class="line">    &lt;h3 style=<span class="string">&quot;color: red;&quot;</span>&gt;$&#123;login_msg&#125; $&#123;register_msg&#125;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;form id=<span class="string">&quot;loginForm&quot;</span> action=<span class="string">&quot;/untitled23_war/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;username&quot;</span>&gt;Username:&lt;/label&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span> name=<span class="string">&quot;username&quot;</span> required value=<span class="string">&quot;$&#123;cookie.username.value&#125;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;password&quot;</span>&gt;Password:&lt;/label&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;password&quot;</span> id=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> required value=<span class="string">&quot;$&#123;cookie.password.value&#125;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div style=<span class="string">&quot;margin-bottom: 10px;&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;rememberMe&quot;</span> style=<span class="string">&quot;margin: 0;&quot;</span>&gt;rememberMe&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;rememberMe&quot;</span> name=<span class="string">&quot;remember&quot;</span> value=<span class="string">&quot;1&quot;</span> style=<span class="string">&quot;display:inline; width: 20px; margin: 0;&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;Login&lt;/button&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;reset&quot;</span>&gt;Reset&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;Don<span class="string">&#x27;t have an account? &lt;a href=&quot;register.jsp&quot;&gt;Register&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h4 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h4><img src="/xu-runbo/post/6880b471/PixPin01-30_22-15-48.gif" class="" title="PixPin01-30_22-15-48"><p>因为我们比对的是用户名和用户密码，也就是只有这俩都不一样的时候才是不一样</p><p>只有用户名一样密码不一样，也是可以创建的。</p><p>自行修改，。。。</p>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cookie,session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构第1周</title>
      <link href="/xu-runbo/post/6373a81a.html"/>
      <url>/xu-runbo/post/6373a81a.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构第1周的内容"><a href="#数据结构第1周的内容" class="headerlink" title="数据结构第1周的内容"></a>数据结构第1周的内容</h1><h2 id="课前叮嘱"><a href="#课前叮嘱" class="headerlink" title="课前叮嘱"></a>课前叮嘱</h2><h3 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h3><img src="/xu-runbo/post/6373a81a/image-20240119112817074.png" class="" title="image-20240119112817074"> <h3 id="数据结构重要嘛？"><a href="#数据结构重要嘛？" class="headerlink" title="数据结构重要嘛？"></a>数据结构重要嘛？</h3><p><strong>程序&#x3D;数据结构+算法</strong></p><p>起着一个承上启下的核心地位。</p><img src="/xu-runbo/post/6373a81a/image-20240119113328355.png" class="" title="image-20240119113328355"> <h3 id="数据结构在计算机学科中的地位"><a href="#数据结构在计算机学科中的地位" class="headerlink" title="数据结构在计算机学科中的地位"></a>数据结构在计算机学科中的地位</h3><img src="/xu-runbo/post/6373a81a/image-20240119113029668.png" class="" title="image-20240119113029668"> <img src="/xu-runbo/post/6373a81a/image-20240119113128676.png" class="" title="image-20240119113128676"> <h3 id="这门课好学嘛"><a href="#这门课好学嘛" class="headerlink" title="这门课好学嘛"></a>这门课好学嘛</h3><img src="/xu-runbo/post/6373a81a/image-20240119113433436.png" class="" title="image-20240119113433436"> <h3 id="怎么才能学好这门课呢？"><a href="#怎么才能学好这门课呢？" class="headerlink" title="怎么才能学好这门课呢？"></a>怎么才能学好这门课呢？</h3><p>学习数据结构是一个渐进的过程，不要急于求成。</p><p>通过不断练习和实践，你将能够更好地理解和应用数据结构的概念</p><p>切忌，眼高手低！</p><img src="/xu-runbo/post/6373a81a/image-20240119113632837.png" class="" title="image-20240119113632837"> <h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章-绪论"></a>第一章-绪论</h2><h3 id="数据结构的研究内容"><a href="#数据结构的研究内容" class="headerlink" title="数据结构的研究内容"></a>数据结构的研究内容</h3><p>用计算机来解决实际问题的过程。。。</p><blockquote><ol><li><p>具体问题抽象为数学模型</p><p>分析问题：</p><p>提取操作对象</p><p>找出操作对象之间的联系</p><p>用数学语言描述—数据结构</p></li><li><p>设计算法</p></li><li><p>编译，调试，运行</p></li></ol></blockquote><img src="/xu-runbo/post/6373a81a/image-20240119113954737.png" class="" title="image-20240119113954737"> <h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><img src="/xu-runbo/post/6373a81a/image-20240119114154481.png" class="" title="image-20240119114154481"> <h4 id="随着计算机的发展，越来越用于非数值的运算"><a href="#随着计算机的发展，越来越用于非数值的运算" class="headerlink" title="随着计算机的发展，越来越用于非数值的运算"></a>随着计算机的发展，越来越用于非数值的运算</h4><img src="/xu-runbo/post/6373a81a/image-20240119114547309.png" class="" title="image-20240119114547309"><img src="/xu-runbo/post/6373a81a/image-20240119115110645.png" class="" title="image-20240119115110645">  <img src="/xu-runbo/post/6373a81a/image-20240119115205613.png" class="" title="image-20240119115205613"> <p>求最短路径</p><img src="/xu-runbo/post/6373a81a/image-20240119115435358.png" class="" title="image-20240119115435358"><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><img src="/xu-runbo/post/6373a81a/image-20240119115612695.png" class="" title="image-20240119115612695"> <h3 id="基本概念和术语"><a href="#基本概念和术语" class="headerlink" title="基本概念和术语"></a>基本概念和术语</h3><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>能输入计算机且能被计算机处理的</p><p><strong>数据（Data）</strong>：</p><ul><li>数据是对客观事物的符号表示，是所有能输入到计算机中并被计算机程序处理的符号集合。数据可以是数字、文字、声音、图像等。</li></ul><img src="/xu-runbo/post/6373a81a/image-20240119152421722.png" class="" title="image-20240119152421722"> <h4 id="数据元素-数据项"><a href="#数据元素-数据项" class="headerlink" title="数据元素&amp;数据项"></a>数据元素&amp;数据项</h4><ol><li><strong>数据元素（Data Element）</strong>：<ul><li>数据元素是数据的最小单位，是对一个数据的描述。例如，一个整数、一个字符或一个实数可以是一个数据元素。</li></ul></li><li><strong>数据项（Data Item）</strong>：<ul><li>数据项是组成数据元素的基本单位，是一个数据元素中的一个最小部分。例如，在一个学生的数据元素中，姓名、学号、成绩等可以是数据项。</li></ul></li></ol><img src="/xu-runbo/post/6373a81a/image-20240119152658813.png" class="" title="image-20240119152658813"><p>数据&gt;数据元素&gt;数据项 </p><h4 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h4><p>数据对象是<strong>具有相同性质的数据元素</strong>的集合，是对一组数据元素的整体描述。一个数据对象可以是一个简单的数据元素，也可以是一个复杂的结构。</p><img src="/xu-runbo/post/6373a81a/image-20240119152922176.png" class="" title="image-20240119152922176"><img src="/xu-runbo/post/6373a81a/image-20240119153045467.png" class="" title="image-20240119153045467">  <img src="/xu-runbo/post/6373a81a/image-20240119153408487.png" class="" title="image-20240119153408487"><h4 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h4> <img src="/xu-runbo/post/6373a81a/image-20240119163623592.png" class="" title="image-20240119163623592"> <img src="/xu-runbo/post/6373a81a/image-20240119153500605.png" class="" title="image-20240119153500605"><img src="/xu-runbo/post/6373a81a/image-20240119154048062.png" class="" title="image-20240119154048062"><img src="/xu-runbo/post/6373a81a/image-20240119155159822.png" class="" title="image-20240119155159822"> <img src="/xu-runbo/post/6373a81a/image-20240119163152767.png" class="" title="image-20240119163152767"> <h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="&#x3D;&#x3D;逻辑结构&#x3D;&#x3D;"></a>&#x3D;&#x3D;逻辑结构&#x3D;&#x3D;</h4><img src="/xu-runbo/post/6373a81a/image-20240119160603731.png" class="" title="image-20240119160603731"> <p><strong>逻辑结构（Logical Structure）</strong>：</p><ul><li>逻辑结构是指<strong>数据对象中数据元素之间的相互关系</strong>。它包括线性结构、树形结构和图状结构三种基本逻辑结构。<ul><li><strong>线性结构</strong>：元素之间存在一对一的关系，如线性表、栈、队列等。</li><li><strong>树形结构</strong>：元素之间存在一对多的关系，如树结构。</li><li><strong>图状结构</strong>：元素之间存在多对多的关系，如图结构。</li></ul></li></ul><hr><p>数据结构中，线性关系是<strong>一种数据元素之间存在一对一的关系</strong></p><p>每个元素都<strong>最多有一个直接前驱和直接后继</strong>。</p><p>这与非线性关系不同，非线性关系中元素之间的关系不是一对一的。</p><p>线性关系主要有两种基本结构：线性表和栈与队列。</p><ol><li><p><strong>线性表（Linear List）</strong>：</p><ul><li>线性表是一种最简单的数据结构，它是具有相同数据类型的 n 个数据元素的有限序列。线性表的两种存储结构分别是顺序存储结构和链式存储结构。</li><li>顺序存储结构：元素在内存中连续存储，通过数组实现。访问元素的时间复杂度为 O(1)。</li><li>链式存储结构：元素在内存中不必连续，通过指针相连。链表有单链表、双链表和循环链表等形式。</li></ul></li><li><p><strong>栈（Stack）</strong>：</p><ul><li>栈是一种特殊的线性表，它只允许在表的一端进行插入和删除操作，这一端称为栈顶。栈的特点是后进先出（Last In, First Out，LIFO）。</li><li>栈的应用场景很多，比如函数调用的执行过程、表达式求值、括号匹配、浏览器的前进和后退等。</li></ul></li><li><p><strong>队列（Queue）</strong>：</p><ul><li>队列也是一种特殊的线性表，它允许在表的一端插入元素，而在另一端删除元素，这两端分别称为队尾和队头。队列的特点是先进先出（First In, First Out，FIFO）。</li><li>队列的应用广泛，例如任务调度、广度优先搜索、打印队列等。</li></ul></li></ol><p>这些线性结构在数据结构中都有重要的应用，它们提供了基本的存储和操作方式，为许多算法和数据处理提供了基础。</p><table><thead><tr><th>特征</th><th>线性表</th><th>栈</th><th>队列</th></tr></thead><tbody><tr><td>基本结构</td><td>有限序列的线性表</td><td>具有一端限制的线性表</td><td>具有两端限制的线性表</td></tr><tr><td>操作</td><td>插入、删除、查找</td><td>入栈（Push）、出栈（Pop）</td><td>入队（Enqueue）、出队（Dequeue）</td></tr><tr><td>存储结构</td><td>顺序存储（数组）和链式存储（链表）</td><td>顺序存储（数组）和链式存储（链表）</td><td>顺序存储（数组）和链式存储（链表）</td></tr><tr><td>存取速度</td><td>取决于存储结构</td><td>取决于存储结构</td><td>取决于存储结构</td></tr><tr><td>操作复杂度</td><td>插入&#x2F;删除 O(n)，查找 O(1)</td><td>入栈&#x2F;出栈 O(1)</td><td>入队&#x2F;出队 O(1)</td></tr><tr><td>特殊性质</td><td>无</td><td>后进先出（LIFO）</td><td>先进先出（FIFO）</td></tr><tr><td>应用</td><td>通用结构，用于存储一组元素</td><td>函数调用、表达式求值、浏览器前进&#x2F;后退</td><td>任务调度、广度优先搜索、打印队列等</td></tr></tbody></table><hr><h5 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h5><img src="/xu-runbo/post/6373a81a/image-20240119155408009.png" class="" title="image-20240119155408009"> <h5 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h5><p>人机对弈，一对多，多对多。。。</p><p><strong>数据元素之间存在一对多或多对多的关系</strong>，与线性结构的一对一关系不同。</p><p>在非线性结构中，<strong>数据元素之间的连接不仅仅是简单的前后关系，而可以是多样的形式</strong>。两种主要的非线性结构是<strong>树形结构和图状结构。</strong></p><ol><li><p><strong>树形结构（Tree Structure）</strong>：</p><ul><li><p><strong>定义</strong>：树形结构是一种层次关系的结构，其中一个元素称为根，其他元素按照层次关系划分为若干层次，每个元素都有唯一的前驱（父节点）和零个或多个后继（子节点）。</p></li><li><p><strong>关键概念</strong>：</p><ul><li>根（Root）：树的顶端元素，没有父节点。</li><li>节点（Node）：树中的元素。</li><li>父节点（Parent）：一个节点的直接上层节点。</li><li>子节点（Child）：一个节点的直接下层节点。</li><li>叶子节点（Leaf）：没有子节点的节点。</li><li>层次（Level）：根节点为第1层，其子节点为第2层，以此类推。</li></ul></li><li><p><strong>示例</strong>：文件系统、家谱、组织结构等。</p></li></ul></li><li><p><strong>图状结构（Graph Structure）</strong>：</p><ul><li><p><strong>定义</strong>：图状结构是由节点和边组成的集合，节点表示数据元素，边表示节点之间的关系。图可以分为有向图和无向图，有向图中边有方向，无向图中边没有方向。</p></li><li><p><strong>关键概念</strong>：</p><ul><li>节点（Vertex）：图中的元素。</li><li>边（Edge）：连接节点的线段，描述节点之间的关系。</li><li>有向图（Directed Graph）：边有方向。</li><li>无向图（Undirected Graph）：边没有方向。</li><li>路径（Path）：由边连接的节点序列。</li><li>环（Cycle）：路径形成一个环。</li></ul></li><li><p><strong>示例</strong>：社交网络、网络拓扑结构、城市交通网络等。</p></li></ul></li></ol><hr><h5 id="逻辑结构的第二种划分"><a href="#逻辑结构的第二种划分" class="headerlink" title="逻辑结构的第二种划分"></a>逻辑结构的第二种划分</h5><img src="/xu-runbo/post/6373a81a/image-20240119160527183.png" class="" title="image-20240119160527183"><img src="/xu-runbo/post/6373a81a/image-20240119163331987.png" class="" title="image-20240119163331987">  <h4 id="存储结构（物理结构）"><a href="#存储结构（物理结构）" class="headerlink" title="&#x3D;&#x3D;存储结构（物理结构）&#x3D;&#x3D;"></a>&#x3D;&#x3D;存储结构（物理结构）&#x3D;&#x3D;</h4><img src="/xu-runbo/post/6373a81a/image-20240119163427377.png" class="" title="image-20240119163427377"><img src="/xu-runbo/post/6373a81a/image-20240119163521191.png" class="" title="image-20240119163521191">  <hr><h5 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="&#x3D;&#x3D;顺序存储结构&#x3D;&#x3D;"></a>&#x3D;&#x3D;顺序存储结构&#x3D;&#x3D;</h5><blockquote><p><strong>顺序存储结构（Sequential Storage Structure）</strong>：</p><ul><li><strong>定义</strong>：将<strong>数据元素存储在一块连续的存储区域</strong>中，通过<strong>线性关系依次排列</strong>，<strong>元素在内存中的存储位置相邻</strong>。</li><li><strong>特点</strong>：<ul><li>直观简单，适用于元素个数固定或很少变化的情况。</li><li>可以通过下标直接访问元素，查找速度较快。</li></ul></li><li><strong>示例</strong>：数组是顺序存储结构的一种典型实现。</li></ul></blockquote><img src="/xu-runbo/post/6373a81a/image-20240119162241153.png" class="" title="image-20240119162241153"> <h5 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="&#x3D;&#x3D;链式存储结构&#x3D;&#x3D;"></a>&#x3D;&#x3D;链式存储结构&#x3D;&#x3D;</h5><blockquote><p><strong>链式存储结构（Linked Storage Structure）</strong>：</p><ul><li><strong>定义</strong>：链式存储结构是指<strong>将数据元素存储在内存的任意位置</strong>，<strong>通过指针（链接）将相邻的元素连接在一起，形成一个链表。</strong></li><li><strong>特点</strong>：<ul><li>灵活，<strong>适用于元素个数不固定、经常变化的情况</strong>。</li><li><strong>不需要预先分配存储空间，动态分配和释放内存</strong>。</li><li><strong>查找速度相对较慢，需要遍历链表。</strong></li></ul></li><li><strong>示例</strong>：单链表、双链表等是链式存储结构的实现。</li></ul></blockquote><img src="/xu-runbo/post/6373a81a/image-20240119162552243.png" class="" title="image-20240119162552243"><p>存储一个元素的同时，还存储了下一个元素的位置<img src="/xu-runbo/post/6373a81a/image-20240119162632058.png" class="" title="image-20240119162632058"> </p><h5 id="索引存储结构"><a href="#索引存储结构" class="headerlink" title="索引存储结构"></a>索引存储结构</h5><blockquote><p><strong>索引存储结构（Indexed Storage Structure）</strong>：</p><ul><li><strong>定义</strong>：索引存储结构是在<strong>数据元素和关键字之间建立一个索引表</strong>，<strong>索引表中的每个元素都包含关键字和指向实际数据元素的指针</strong>。</li><li><strong>特点</strong>：<ul><li><strong>加快查找速度，通过索引表先找到关键字，再根据指针找到实际数据。</strong></li><li>需要<strong>额外的存储空间来存储索引表。</strong></li></ul></li><li><strong>示例</strong>：数据库中的B树、B+树等数据结构，以及某些文件系统的索引。</li></ul></blockquote><h5 id="散列存储结构"><a href="#散列存储结构" class="headerlink" title="散列存储结构"></a>散列存储结构</h5><blockquote><p><strong>散列存储结构（Hashed Storage Structure）</strong>：</p><ul><li><strong>定义</strong>：散列存储结构通过<strong>散列函数将数据元素的关键字映射到一个地址</strong>，<strong>将数据元素存储在该地址的位置。</strong></li><li><strong>特点</strong>：<ul><li><strong>高效的查找速度，通过散列函数直接计算存储位置。</strong></li><li>需要解决冲突问题，即<strong>多个关键字映射到相同的散列地址。</strong></li></ul></li><li><strong>示例</strong>：<strong>哈希表是散列存储结构的一种实现</strong>。</li></ul></blockquote><h4 id="数据类型和抽象数据类型"><a href="#数据类型和抽象数据类型" class="headerlink" title="数据类型和抽象数据类型"></a>数据类型和抽象数据类型</h4><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><img src="/xu-runbo/post/6373a81a/image-20240119164046369.png" class="" title="image-20240119164046369"> <img src="/xu-runbo/post/6373a81a/image-20240119164247066.png" class="" title="image-20240119164247066"> <img src="/xu-runbo/post/6373a81a/image-20240119164339871.png" class="" title="image-20240119164339871"> <h5 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h5><blockquote><p>抽象数据类型（Abstract Data Type，ADT）是一种数学模型</p><p><strong>描述数据对象和定义在这些对象上操作的数学规则</strong>。</p><p>&#x3D;&#x3D;<strong>就是对数据和操作进行了抽象</strong>&#x3D;&#x3D;</p><p>它将<strong>数据的表示</strong>和<strong>操作****与实际的实现细节分离</strong>，让用户可以通过操作来使用数据，而不必关心底层的实现。</p><ol><li><p><strong>比喻成实物</strong>：</p><ul><li>想象一个抽象数据类型就像一台自动售货机。你知道如何使用售货机（通过按钮选择商品，投入硬币，等待商品出货），但你并不需要了解售货机内部的工作原理，比如商品的储存方式、货币的验证过程等。</li></ul></li><li><p><strong>类比成自定义数据类型</strong>：</p><ul><li>创建一个抽象数据类型，比如<code>Student</code>，它有成员变量（数据）如姓名、年龄、学号等，以及成员函数（操作）如获取学生信息、修改年龄等。这个<code>Student</code>类就是一个抽象数据类型，可以使用它来表示学生，而不必关心它在内部是如何实现的。</li></ul></li><li><p><strong>接口和实现的分离</strong>：</p><ul><li>你知道如何点击图标来打开一个应用，但你并不需要知道应用是如何在底层的操作系统中运行的。<strong>这就是抽象数据类型的思想，用户只需要知道如何使用接口（操作），而不必关心实现的细节。</strong></li></ul></li><li><p><strong>数学模型</strong>：</p><ul><li>将抽象数据类型看作一种数学模型，就像数学中的集合或者图。你知道集合有哪些操作（并、交、补等），但对于集合内部的实现并不关心。A</li></ul></li></ol><p>抽象数据类型就是一种<strong>将数据和操作进行抽象</strong>，<strong>隐藏内部细节</strong>，提供清晰的接口供用户使用的概念。这样的设计使得代码更易维护、扩展，同时让用户更专注于问题的逻辑而不是底层实现。</p></blockquote><img src="/xu-runbo/post/6373a81a/image-20240119165146407.png" class="" title="image-20240119165146407"><h6 id="抽象数据类型的形式定义"><a href="#抽象数据类型的形式定义" class="headerlink" title="抽象数据类型的形式定义"></a>抽象数据类型的形式定义</h6><img src="/xu-runbo/post/6373a81a/image-20240119165253220.png" class="" title="image-20240119165253220"><img src="/xu-runbo/post/6373a81a/image-20240119165455237.png" class="" title="image-20240119165455237"><img src="/xu-runbo/post/6373a81a/image-20240119165826287.png" class="" title="image-20240119165826287"><p>​</p><h6 id="抽象数据类型的定义"><a href="#抽象数据类型的定义" class="headerlink" title="抽象数据类型的定义"></a>抽象数据类型的定义</h6>   <img src="/xu-runbo/post/6373a81a/image-20240119170344805.png" class="" title="image-20240119170344805"><p>复数的定义：</p><img src="/xu-runbo/post/6373a81a/image-20240119170449466.png" class="" title="image-20240119170449466"> <h3 id="抽象数据类型的表现与实现"><a href="#抽象数据类型的表现与实现" class="headerlink" title="抽象数据类型的表现与实现"></a>抽象数据类型的表现与实现</h3><img src="/xu-runbo/post/6373a81a/image-20240120092923163.png" class="" title="image-20240120092923163"> <p>类C语言（介于伪代码和C语言之间）的描述区别</p><h4 id="例1，抽象数据类型“复数”的实现"><a href="#例1，抽象数据类型“复数”的实现" class="headerlink" title="例1，抽象数据类型“复数”的实现"></a>例1，抽象数据类型“复数”的实现</h4><img src="/xu-runbo/post/6373a81a/image-20240120093238518.png" class="" title="image-20240120093238518"> <h4 id="复习C语言的结构体和typedef"><a href="#复习C语言的结构体和typedef" class="headerlink" title="复习C语言的结构体和typedef"></a>复习C语言的结构体和typedef</h4><ol><li><p>typedef</p><p><code>typedef</code> 是C语言中的一个关键字，用于为已存在的数据类型（包括基本数据类型和自定义数据类型）定义一个新的别名。这有助于提高代码的可读性和简化复杂的声明。</p><p><code>typedef</code> 的一些常见用法：</p><ol><li>为基本数据类型定义别名</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Integer;  <span class="comment">// 为 int 类型定义别名 Integer</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">float</span> RealNumber;  <span class="comment">// 为 float 类型定义别名 RealNumber</span></span><br></pre></td></tr></table></figure><p>这样可以使用 <code>Integer</code> 代替 <code>int</code>，<code>RealNumber</code> 代替 <code>float</code>。</p><ol start="2"><li>为结构体定义别名</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125; Point;  <span class="comment">// 为匿名结构体定义别名 Point</span></span><br></pre></td></tr></table></figure><p>这样可以直接使用 <code>Point</code> 作为结构体类型的名称。</p><ol start="3"><li>为指针定义别名</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span>* IntPtr;  <span class="comment">// 为 int 指针定义别名 IntPtr</span></span><br></pre></td></tr></table></figure><p>这样可以使用 <code>IntPtr</code> 作为 <code>int</code> 类型的指针的别名。</p><ol start="4"><li>为函数指针定义别名</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*FunctionPointer)</span><span class="params">(<span class="type">int</span>)</span>;  <span class="comment">// 为接受 int 参数并返回 void 的函数指针定义别名 FunctionPointer</span></span><br></pre></td></tr></table></figure><p>这样可以使用 <code>FunctionPointer</code> 作为<strong>函数指针类型</strong>的名称。</p><ol start="5"><li>为数组定义别名</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> String[<span class="number">50</span>];  <span class="comment">// 为字符数组定义别名 String</span></span><br></pre></td></tr></table></figure><p>这样可以使用 <code>String</code> 作为字符数组类型的名称。</p></li><li><p>struct的<code>.运算符</code>和<code>-&gt;运算符</code></p><p>当有一个结构体变量 <code>a</code> 时，你可以使用 <code>a.属性</code> 的形式来访问结构体的成员属性。</p><p>有一个指向结构体 <code>a</code> 的同类型指针，你可以使用 <code>a-&gt;属性</code> 的形式来通过指针访问结构体的成员属性。</p><p>箭头运算符允许你通过指针直接访问结构体的成员。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 声明结构体变量并初始化</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Point</span> <span class="title">p1</span> =</span> &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 声明指向结构体的指针，并将其指向 p1</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Point</span> *<span class="title">ptr</span> =</span> &amp;p1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用箭头运算符访问结构体成员</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Coordinates: (%d, %d)\n&quot;</span>, ptr-&gt;x, ptr-&gt;y);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="操作的实现："><a href="#操作的实现：" class="headerlink" title="操作的实现："></a>操作的实现：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//定义结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">float</span> real;</span><br><span class="line"><span class="type">float</span> virtul;</span><br><span class="line">&#125; Complex;</span><br><span class="line"><span class="type">void</span> <span class="title function_">assign</span><span class="params">(Complex* A, <span class="type">float</span> a, <span class="type">float</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">A-&gt;real = a;</span><br><span class="line">A-&gt;virtul = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">add</span><span class="params">(Complex* A, <span class="type">float</span> a, <span class="type">float</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">A-&gt;real = A-&gt;real + a;</span><br><span class="line">A-&gt;virtul = A-&gt;virtul + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">myminus</span><span class="params">(Complex* A, <span class="type">float</span> a, <span class="type">float</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">A-&gt;real = A-&gt;real - a;</span><br><span class="line">A-&gt;virtul = A-&gt;virtul - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">multiply</span><span class="params">(Complex* A, <span class="type">float</span> a, <span class="type">float</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">A-&gt;real = A-&gt;real * a;</span><br><span class="line">A-&gt;virtul = A-&gt;virtul * b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">mydevide</span><span class="params">(Complex* A, <span class="type">float</span> a, <span class="type">float</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">A-&gt;real = A-&gt;real / a;</span><br><span class="line">A-&gt;virtul = A-&gt;virtul / b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">myprint</span><span class="params">(Complex* A)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;A的实部是&quot;</span> &lt;&lt; A-&gt;real &lt;&lt; <span class="string">&quot;虚部是&quot;</span> &lt;&lt; A-&gt;virtul &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Complex a = &#123; <span class="number">1</span>,<span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line">Complex* ptr = &amp;a;</span><br><span class="line">myprint(ptr);</span><br><span class="line">assign(ptr, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">myprint(ptr);</span><br><span class="line"></span><br><span class="line">add(ptr, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">myprint(ptr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myminus(ptr,<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">myprint(ptr);</span><br><span class="line"></span><br><span class="line">multiply(ptr, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">myprint(ptr);</span><br><span class="line"></span><br><span class="line">mydevide(ptr, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">myprint(ptr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/6373a81a/image-20240120095347345.png" class="" title="image-20240120095347345"> <h3 id="算法和算法分析"><a href="#算法和算法分析" class="headerlink" title="算法和算法分析"></a>算法和算法分析</h3><h4 id="算法（Algorithm）"><a href="#算法（Algorithm）" class="headerlink" title="算法（Algorithm）"></a><strong>算法（Algorithm）</strong></h4><p> 是<strong>解决特定问题或执行特定任务的一系列步骤或规则</strong>。</p><p>是一种精确定义的计算过程，通常包括输入、输出、以及处理输入以产生输出的步骤。</p><p>算法是<strong>独立于特定编程语言</strong>的，而是<strong>描述了解决问题的一般步骤</strong>。</p><p>算法可以在各种领域中找到应用，例如计算机科学、数学、工程、生物学等。在计算机科学中，算法是设计和分析的核心概念，因为它们决定了计算机程序的执行步骤。</p><img src="/xu-runbo/post/6373a81a/image-20240120095954991.png" class="" title="image-20240120095954991"> <img src="/xu-runbo/post/6373a81a/image-20240120100124658.png" class="" title="image-20240120100124658"> <h4 id="算法特性"><a href="#算法特性" class="headerlink" title="算法特性"></a>算法特性</h4><blockquote><ol><li><p><strong>有限性（Finiteness）：</strong> 算法必须在<strong>有限的步骤内执行结束</strong>。</p></li><li><p><strong>确定性（Determinism）：</strong> <strong>对于相同的输入，算法必须产生相同的输出</strong>。</p></li><li><p><strong>输入（Input）：</strong> 算法<strong>有零个或多个输入。</strong></p></li><li><p><strong>输出（Output）：</strong> 算法<strong>至少有一个输出。</strong></p></li><li><p><strong>效率（Efficiency）：</strong> 算法解决问题的<strong>效率应该尽可能高</strong>，即在合理的时间内完成。</p></li><li><p><strong>清晰性（Clarity）：</strong> 算法应该<strong>以清晰、明确的方式描述，易于理解和实现</strong>。</p></li><li><p><strong>通用性（Generality）：</strong> 算法应该<strong>能够解决一类问题而不仅仅是特定实例</strong>。</p></li><li><p><strong>可行性（Feasibility）：</strong> 算法应该<strong>在实际中可行，考虑实际资源限制</strong>。</p></li></ol><p>这些特性是算法设计和分析中的基本原则，确保算法在解决问题时是可靠、有效且可理解的。</p></blockquote><h4 id="算法设计的要求"><a href="#算法设计的要求" class="headerlink" title="算法设计的要求"></a>算法设计的要求</h4><blockquote><ol><li><strong>正确性（Correctness）：</strong> 算法必须产生正确的输出，并解决问题的本质。这是最基本的要求，算法应该对所有输入都能给出正确的结果。</li><li><strong>可读性（Readability）：</strong> 算法应该以清晰、易读的方式描述，<strong>使其他人能够理解和实现</strong>。良好的可读性有助于代码的维护和团队协作。</li><li><strong>健壮性（Robustness）：</strong> 算法应该能够处理各种输入情况，<strong>包括异常情况</strong>。<strong>它不应该因为输入数据的变化而导致崩溃或不合理的输出。</strong></li><li><strong>高效性（Efficiency）：</strong> 算法应该在<strong>合理的时间内解决问题</strong>。高效性涉及到<strong>时间复杂度</strong>和<strong>空间复杂度</strong>的优化</li><li><strong>可维护性（Maintainability）：</strong> 算法的设计应该考虑到后续的维护工作，使得代码易于修改和更新。这包括合理的模块化、注释和命名规范等。</li><li><strong>通用性（Generality）：</strong> 算法设计应该考虑解决一类问题而不仅仅是特定实例。这有助于提高算法的重用性。</li><li><strong>最佳性（Optimality）：</strong> 在一些情况下，算法设计可能需要追求最佳解决方案。这涉及到在满足其他要求的前提下，尽量提高效率或减小资源使用。</li></ol></blockquote><h4 id="算法分析（Algorithm-Analysis）"><a href="#算法分析（Algorithm-Analysis）" class="headerlink" title="&#x3D;&#x3D;算法分析（Algorithm Analysis）&#x3D;&#x3D;"></a>&#x3D;&#x3D;<strong>算法分析（Algorithm Analysis）</strong>&#x3D;&#x3D;</h4><p> 是对<strong>算法性能的研究和评估</strong>。它涉及到确定算法在不同输入情况下的<strong>运行时间、空间需求等方面的性能特征</strong>。</p><p>常见的算法分析包括：</p><ol><li><strong>时间复杂度（Time Complexity）</strong></li><li><strong>空间复杂度（Space Complexity）</strong></li><li><strong>最坏情况、平均情况和最好情况复杂度</strong>：描述了算法在不同输入情况下的性能。</li><li><strong>稳定性和稳定性分析</strong>：稳定性表示对于相等的元素，排序算法是否保持它们的相对位置。</li><li><strong>可行性分析</strong>：算法是否在合理的时间内解决问题。</li></ol><blockquote><p>时间效率和空间效率有时是矛盾的</p></blockquote><p>算法分析的目标是找到一种对问题的解决方案，使得在不同的输入下，算法表现出较好的性能。选择合适的算法来解决特定问题，并优化程序的执行效率。</p><h5 id="时间复杂度（Time-Complexity）"><a href="#时间复杂度（Time-Complexity）" class="headerlink" title="时间复杂度（Time Complexity）"></a><strong>时间复杂度（Time Complexity）</strong></h5><img src="/xu-runbo/post/6373a81a/image-20240120150103790.png" class="" title="image-20240120150103790"> <img src="/xu-runbo/post/6373a81a/image-20240120103339282.png" class="" title="image-20240120103339282"> <hr><p><strong>时间复杂度（Time Complexity）</strong>：描述了**&#x3D;&#x3D;算法运行时间&#x3D;&#x3D;随&#x3D;&#x3D;输入规模&#x3D;&#x3D;增加而增加的&#x3D;&#x3D;趋势&#x3D;&#x3D;**。通常以“大O符号”表示，例如 O(n)，O(n^2)。</p><p>常见的时间复杂度有：</p><ol><li><p><strong>常数时间复杂度（O(1)）：</strong> 不论输入规模大小，算法的运行时间都是常数。</p></li><li><p><strong>线性时间复杂度（O(n)）：</strong> 算法的运行时间与输入规模成线性关系。</p></li><li><p><strong>对数时间复杂度（O(log n)）：</strong> 算法的运行时间与输入规模的对数成正比。</p></li><li><p><strong>线性对数时间复杂度（O(n log n)）：</strong> 通常出现在某些高效排序算法中。</p></li><li><p><strong>平方时间复杂度（O(n^2)）：</strong> 算法的运行时间与输入规模的平方成正比。</p></li><li><p><strong>指数时间复杂度（O(2^n)）：</strong> 算法的运行时间与输入规模的指数成正比。通常是一些暴力穷举的算法。</p></li><li><p><strong>多项式时间复杂度（O(n^k)）：</strong> 其中 k 是常数。</p></li></ol><p>关注算法的主要执行步骤，并根据这些步骤的数量级来确定时间复杂度。例如，循环结构、递归、嵌套循环等都会影响时间复杂度的分析。</p><p>关注算法的<strong>最坏情况时间复杂度</strong>，因为这给出了<strong>算法性能的一个上界</strong>。同时，平均情况时间复杂度也是一个重要的度量，但由于难以准确估算“平均”情况，所以<strong>最坏情况时间复杂度更为常用。</strong></p><blockquote><p>时间复杂度是对算法性能的一种抽象估计，具体的执行时间还受到硬件、编译器优化等因素的影响。</p></blockquote><img src="/xu-runbo/post/6373a81a/image-20240120101319158.png" class="" title="image-20240120101319158"> <h6 id="事前分析方法"><a href="#事前分析方法" class="headerlink" title="事前分析方法:"></a>事前分析方法:</h6><img src="/xu-runbo/post/6373a81a/image-20240120101503645.png" class="" title="image-20240120101503645"><img src="/xu-runbo/post/6373a81a/image-20240120101733879.png" class="" title="image-20240120101733879"> <h6 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h6><blockquote><p>若有某个<strong>辅助函数f(n)<strong>，使得当</strong>n趋近于无穷大时</strong>，T**(n)&#x2F;f(n)的极限值为不等于零的常数<strong>，则称</strong>f(n)是T(n)的同数量级函数<strong>。</strong>记作T(n)&#x3D;O(f(n))<strong>,称O（f(n))为</strong>算法的渐进时间复杂度（O是数量级的符号），简称时间复杂度**</p></blockquote><blockquote><p>算法的渐进时间复杂度（O是数量级的符号），简称时间复杂度</p></blockquote><p>假设有一个算法的运行时间 T(n) 是 n^2 + 3n + 5，我们想要找到它的<strong>渐进时间复杂度。</strong></p><ol><li><p><strong>辅助函数 f(n)：</strong> 可以选择 f(n) &#x3D; n^2，因为在 <strong>n 趋近于无穷大时，主导项 n^2 的影响最大。</strong></p></li><li><p><strong>T(n)&#x2F;f(n) 极限值：</strong> 计算极限值 lim(n→∞) (T(n)&#x2F;f(n))，<strong>如果这个极限值存在并不等于零的常数，那么 f(n) 就是 T(n) 的同数量级函数</strong>。</p><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">latexCopy codelim(n→∞) (n<span class="built_in">^</span>2 + 3n + 5) / n<span class="built_in">^</span>2</span><br><span class="line">= lim(n→∞) (1 + 3/n + 5/n<span class="built_in">^</span>2)</span><br><span class="line">= 1 (当 n 趋近于无穷大时，3/n 和 5/n<span class="built_in">^</span>2 的影响趋近于零)</span><br></pre></td></tr></table></figure></li><li><p><strong>渐进时间复杂度：</strong> 由于极限值为 1，不等于零的常数，我们可以说 <strong>T(n) 的渐进时间复杂度是 O(n^2)。</strong></p></li></ol><h6 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h6><img src="/xu-runbo/post/6373a81a/image-20240120102818995.png" class="" title="image-20240120102818995"> <img src="/xu-runbo/post/6373a81a/image-20240120102910517.png" class="" title="image-20240120102910517"><blockquote><p> 一般情况下，<strong>不必计算所有操作的执行次数，而只考虑算法中基本操作执行的次数</strong>，它是问题规模n的某个函数，用T(n)表示。</p> <img src="/xu-runbo/post/6373a81a/image-20240120103653014.png" class="" title="image-20240120103653014">  </blockquote><h6 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h6><img src="/xu-runbo/post/6373a81a/image-20240120103936259.png" class="" title="image-20240120103936259"><p>忽略所有低次幂项和最高次幂系数，体现出增长率的含义</p><img src="/xu-runbo/post/6373a81a/image-20240120104306603.png" class="" title="image-20240120104306603"><img src="/xu-runbo/post/6373a81a/image-20240120104451618.png" class="" title="image-20240120104451618"><img src="/xu-runbo/post/6373a81a/image-20240120104621834.png" class="" title="image-20240120104621834"><img src="/xu-runbo/post/6373a81a/image-20240120110743498.png" class="" title="image-20240120110743498"><img src="/xu-runbo/post/6373a81a/image-20240120111954109.png" class="" title="image-20240120111954109">    <blockquote><p>时间复杂度是<strong>由嵌套最深层语句的频度</strong>决定的 </p></blockquote><h6 id="语句频度"><a href="#语句频度" class="headerlink" title="语句频度"></a>语句频度</h6><blockquote><p>语句频度（Statement Frequency）是在算法分析中用于估计算法执行时间的一种度量。它表示<strong>某一条语句在算法中被执行的次数</strong>。通常，语句频度与输入规模有关。</p><p>在算法分析中，我们经常使用循环结构的语句频度来描述算法的执行次数。假设有一个循环结构，其中包含一条语句，我们想要计算这条语句的执行次数。以下是一些常见的情况：</p><ol><li><p><strong>常数频度：</strong> 如果某个语句在算法中是常数频度，表示它在算法执行的过程中只执行一次，与输入规模无关。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0</span>;  <span class="comment">// 常数频度语句，只执行一次</span></span><br></pre></td></tr></table></figure></li><li><p><strong>线性频度：</strong> 如果某个语句的执行次数与输入规模成线性关系，表示它在算法中会随着输入规模的增加而线性增加。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="comment">// 线性频度语句，执行次数与 n 成正比</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>对数频度：</strong> 如果某个语句的执行次数与输入规模的对数成正比，表示它在算法中具有对数频度。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 对数频度语句，执行次数与 log(n) 成正比</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>总结常见的时间复杂度及其对应的描述、例子表示：</p><table><thead><tr><th>时间复杂度</th><th>描述</th><th>例子</th><th>图形表示</th></tr></thead><tbody><tr><td>O(1)</td><td>常数时间复杂度</td><td>单个语句或操作</td><td></td></tr><tr><td>O(log n)</td><td>对数时间复杂度</td><td>二分查找</td><td></td></tr><tr><td>O(n)</td><td>线性时间复杂度</td><td>单层循环</td><td></td></tr><tr><td>O(n log n)</td><td>线性对数时间复杂度</td><td>快速排序、归并排序</td><td></td></tr><tr><td>O(n^2)</td><td>平方时间复杂度</td><td>双层嵌套循环</td><td></td></tr><tr><td>O(n^k)</td><td>多项式时间复杂度</td><td>k层嵌套循环</td><td></td></tr><tr><td>O(2^n)</td><td>指数时间复杂度</td><td>求解子集问题</td><td></td></tr><tr><td>O(n!)</td><td>阶乘时间复杂度</td><td>求解全排</td><td></td></tr></tbody></table><h6 id="复杂算法的复杂度的处理"><a href="#复杂算法的复杂度的处理" class="headerlink" title="复杂算法的复杂度的处理"></a>复杂算法的复杂度的处理</h6><p>处理复杂算法的渐进时间复杂度的两个重要法则。大O加法法则和乘法法则。</p><p>T(n)&#x3D;O(n);</p><ol><li><p><strong>大O加法法则：</strong></p><ul><li><p><strong>概念：</strong> 大O加法法则用于描述当算法包含多个独立操作时，其总体时间复杂度是如何计算的。</p></li><li><p><strong>表述：</strong> 如果一个算法的时间复杂度可以表示为<code>T1(n)+T(n)+....+T(n)</code>，那么总体的时间复杂度为</p><p><code>O(g(n))+O(f(n))+.....</code></p></li><li><img src="/xu-runbo/post/6373a81a/image-20240120151456875.png" class="" title="image-20240120151456875"> </li><li><p><strong>意义：</strong> 这个法则表示，&#x3D;&#x3D;<strong>当算法由多个独立操作组成时，总体时间复杂度由其中最高阶的部分决定&#x3D;&#x3D;<strong>。在</strong>渐进分析中，我们通常只关注最高阶项，忽略掉其他次要项和低次项</strong>。</p></li></ul></li><li><p><strong>大O乘法法则：</strong></p><ul><li><strong>概念：</strong> 大O乘法法则用于描述<strong>当算法的不同部分相互嵌套时</strong>，其总体时间复杂度是如何计算的。</li><li><strong>表述：</strong> 如果一个算法的时间复杂度可以表示为[ T(n) &#x3D; O(f(n)) \times O(g(n)) ]，那么总体的时间复杂度为[ O(T(n)) &#x3D; O(f(n) \times g(n)) ]。</li><li><img src="/xu-runbo/post/6373a81a/image-20240120151509353.png" class="" title="image-20240120151509353"> </li><li><strong>意义：</strong> 这个法则表示，当算法的各个部分相互嵌套时，总体时间复杂度等于各部分时间复杂度的乘积。在渐进分析中，我们关注的是最高阶的乘积。</li></ul></li></ol><p>这两个法则帮助我们对复杂算法进行更容易的时间复杂度分析，尤其是在算法的各个部分或操作具有独立性或相互嵌套的情况下。通过应用这些法则，我们可以更简洁地表示和理解算法的总体性能。</p><h6 id="算法时间效率的比较"><a href="#算法时间效率的比较" class="headerlink" title="算法时间效率的比较"></a>算法时间效率的比较</h6><img src="/xu-runbo/post/6373a81a/image-20240120151942586.png" class="" title="image-20240120151942586"> <h5 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h5><hr><p><strong>空间复杂度（Space Complexity）</strong>：描述了<strong>算法在执行过程中所需的额外空间或内存随输入规模增加而增加的趋势。</strong></p><img src="/xu-runbo/post/6373a81a/image-20240120152114711.png" class="" title="image-20240120152114711"> <blockquote><p>算法的空间复杂度是指<strong>算法在执行过程中所需的内存空间的度量</strong>，通常<strong>用大O符号表示</strong>。空间复杂度主要关注的是<strong>算法对内存资源的使用情况，而不是执行时间。</strong></p><p>以下是一些常见的空间复杂度：</p><ol><li><p><strong>O(1) - 常数空间复杂度：</strong> 算法的空间使用与输入规模无关，即算法在执行时只需要常数级别的内存空间。</p></li><li><p><strong>O(n) - 线性空间复杂度：</strong> 算法的空间使用与输入规模成线性关系。典型的例子包括数组、链表等数据结构，其<strong>空间占用随着输入规模的增加而线性增长。</strong></p></li><li><p><strong>O(n^2)、O(n^3) 等 - 多项式空间复杂度：</strong> <strong>算法的空间使用与输入规模的某个多项式关系成正比</strong>。这种情况通常涉及到多层嵌套的数据结构，如<strong>二维数组</strong>。</p></li><li><p><strong>O(log n) - 对数空间复杂度：</strong> 算法的空间使用与输入规模的对数关系成正比。这在一些分治算法中比较常见，例如二分搜索。</p></li><li><p><strong>O(n log n) - 线性对数空间复杂度：</strong> 算法的空间使用与输入规模的对数乘以线性关系成正比。例如，快速排序、归并排序等常见的排序算法。</p></li></ol><p>空间复杂度的分析同样可以采用类似于时间复杂度的渐进分析方法，关注算法在输入规模趋近无穷大时对内存空间的增长趋势。在实际应用中，选择合适的算法时，除了考虑时间复杂度外，还需要考虑空间复杂度，特别是在资源受限的环境中。</p></blockquote><h6 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h6><img src="/xu-runbo/post/6373a81a/image-20240120153316841.png" class="" title="image-20240120153316841"> <p>对于第一种逆序算法:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">nixu1</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> line)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line/<span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = a[i];</span><br><span class="line">a[i] = a[line - i - <span class="number">1</span>];</span><br><span class="line">a[line - i - <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种逆序算法:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">nixu2</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> line)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>* b = (<span class="type">int</span>*)<span class="built_in">malloc</span>(line * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line; i++)</span><br><span class="line">&#123;</span><br><span class="line">b[i] = a[line - <span class="number">1</span> - i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = b[i];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">free</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c++</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">nixu2</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> line)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* b = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line; i++)</span><br><span class="line">&#123;</span><br><span class="line">b[i] = a[line - <span class="number">1</span> - i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line; i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = b[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h6 id="C-C-里的动态内存分配"><a href="#C-C-里的动态内存分配" class="headerlink" title="C&#x2F;C++里的动态内存分配"></a>C&#x2F;C++里的动态内存分配</h6><blockquote><p>复习动态内存分配</p><hr><p><strong>动态内存分配</strong>是在<strong>程序运行时根据需要分配和释放内存的过程</strong>。</p><p>在C和C++中，分别使用了 <code>malloc</code>、<code>free</code>（C）和 <code>new</code>、<code>delete</code>（C++）来进行<strong>动态内存的分配和释放</strong>。</p><hr><p><strong>在C语言中的动态内存分配与释放（使用 <code>malloc</code> 和 <code>free</code>）</strong></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 动态分配一个整数的内存空间</span></span><br><span class="line">    <span class="type">int</span> *ptr = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ptr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *ptr = <span class="number">42</span>;  <span class="comment">// 使用分配的内存</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, *ptr);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">free</span>(ptr);  <span class="comment">// 释放内存</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>malloc(size_t size)</code> 用于分配 <code>size</code> 字节的内存，并返回一个<strong>指向分配内存起始地址的指针</strong>。</li><li>所以我们需要再强制转换一下，才能复制给我们开辟的数组指针</li><li><code>free(void *ptr)</code> 用于释放之前使用 <code>malloc</code> 分配的内存。</li></ul><hr><p>**在C++中的动态内存分配（使用 <code>new</code> 和 <code>delete</code>）</p><p><strong>在C++中动态数组的分配和释放</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 动态分配一个整数数组的内存空间</span></span><br><span class="line">    <span class="type">int</span> *arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arr != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用分配的内存</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            arr[i] = i * <span class="number">2</span>;</span><br><span class="line">            std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">delete</span>[] arr;  <span class="comment">// 释放内存</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>new T[n]</code> 用于动态分配类型 <code>T</code> 的数组，包含 <code>n</code> 个元素。</li><li><code>delete[] arr</code> 用于释放之前使用 <code>new[]</code> 分配的数组内存。</li></ul><p>总体而言，在<strong>使用动态内存时，要确保及时释放已经分配的内存，以防止内存泄漏</strong>。在C++中，推荐使用 <code>new</code> 和 <code>delete</code>，并且对于动态数组的分配和释放，应使用 <code>new[]</code> 和 <code>delete[]</code>。</p></blockquote><h4 id="设计好算法的过程"><a href="#设计好算法的过程" class="headerlink" title="设计好算法的过程"></a>设计好算法的过程</h4><img src="/xu-runbo/post/6373a81a/image-20240120155548721.png" class="" title="image-20240120155548721"> ]]></content>
      
      
      <categories>
          
          <category> 数据结构(C/c++) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爪哇考试？</title>
      <link href="/xu-runbo/post/2ebb9fe4.html"/>
      <url>/xu-runbo/post/2ebb9fe4.html</url>
      
        <content type="html"><![CDATA[<h1 id="爪哇编程题"><a href="#爪哇编程题" class="headerlink" title="爪哇编程题"></a>爪哇编程题</h1><hr><p>》》》</p><blockquote><p>这是一个更加全面的版本。。</p></blockquote><h2 id="思路？"><a href="#思路？" class="headerlink" title="思路？"></a>思路？</h2><blockquote><p>在编写有关类的编程题时，通常涉及以下几个方面：</p><ol><li><strong>定义类和成员变量：</strong> 首先，明确定义<strong>类的目的和属性</strong>。确定<strong>类的成员变量（字段</strong>），这些变量将存储对象的状态。</li><li><strong>实现构造方法：</strong> 编写构造方法，用于初始化对象的属性。构造方法通常用于在对象创建时设置初始状态。</li><li><strong>编写成员方法：</strong> 实现类的功能性方法，这些方法用于执行特定的操作。这可能包括计算、修改对象状态或执行其他与类相关的任务。</li><li><strong>提供访问器和修改器方法：</strong> <strong>提供 getter 和 setter 方法</strong>，以允许<strong>外部代码访问和修改类的私有成员</strong>变量。。</li><li><strong>实现类的测试：</strong> 编写测试类，测试类的各种方法确保它们按预期工作。测试通常包括验证构造方法、成员方法以及 getter 和 setter 方法的正确性。</li></ol><hr><p>小tips？</p><p><strong>成员变量使用 private 修饰：</strong> 将类的成员变量声明为私有的，然后<strong>通过公共的 getter 和 setter 方法提供访问</strong>。</p></blockquote><p><strong>编程题</strong></p><h2 id="1-定义一个人类，包括属性：姓名、性别、年龄、国籍；包括方法：吃饭、睡觉、工作。"><a href="#1-定义一个人类，包括属性：姓名、性别、年龄、国籍；包括方法：吃饭、睡觉、工作。" class="headerlink" title="(1)定义一个人类，包括属性：姓名、性别、年龄、国籍；包括方法：吃饭、睡觉、工作。"></a>(1)定义一个<strong>人类</strong>，包括属性：姓名、性别、年龄、国籍；包括方法：吃饭、睡觉、工作。</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//类的一些属性和变量</span></span><br><span class="line">    <span class="comment">//——+成员变量使用 private 修饰</span></span><br><span class="line">    <span class="comment">//依次为姓名 年龄 国籍 性别</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是类的有参构造方法。。。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, String country, String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.country = country;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员变量对应的getter方法，因为成员变量是私有的，外部想要访问就要用到这些方法。。</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCountry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员变量对应的setter方法，虽然我们有对应的有参构造函数，但是要修改单独的属性的适合，我们用对应的setter方法也是一件美事</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCountry</span><span class="params">(String country)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.country = country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 题上要我们写的一些方法。。。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//这是对应的测试方法，当然题目可能是让我们对供人类，学生类，和班干部类进行测试。这个先当了解一下吧</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象，用我们的构造函数。。</span></span><br><span class="line">        Person person=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;牛马&quot;</span>,<span class="number">99</span>,<span class="string">&quot;china&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 getter 方法获取属性值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + person.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + person.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;Country: &quot;</span> + person.getCountry());</span><br><span class="line">        System.out.println(<span class="string">&quot;Gender: &quot;</span> + person.getGender());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 setter 方法设置属性值</span></span><br><span class="line">        person.setName(<span class="string">&quot;拉克丝&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">20</span>);</span><br><span class="line">        person.setCountry(<span class="string">&quot;LOL&quot;</span>);</span><br><span class="line">        person.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次使用 getter 方法获取更新后的属性值，验证我们的setter方法确实对属性进行了修改</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Updated Name: &quot;</span> + person.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Updated Age: &quot;</span> + person.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;Updated Country: &quot;</span> + person.getCountry());</span><br><span class="line">        System.out.println(<span class="string">&quot;Updated Gender: &quot;</span> + person.getGender());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试结果？</p><blockquote><img src="/xu-runbo/post/2ebb9fe4/image-20240115175234462.png" class="" title="image-20240115175234462"> </blockquote><h2 id="2-根据人类，派生一个工人类，增加属性：单位、工龄；重写工作方法（工人的工作是……）"><a href="#2-根据人类，派生一个工人类，增加属性：单位、工龄；重写工作方法（工人的工作是……）" class="headerlink" title="(2) 根据人类，派生一个工人类，增加属性：单位、工龄；重写工作方法（工人的工作是……）"></a>(2) 根据人类，派生一个<strong>工人类</strong>，增加属性：单位、工龄；重写工作方法（工人的工作是……）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello.main;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Worker 类继承自 Person 类，表示一个工人</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 新增属性：单位（公司）和工龄</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String company;          <span class="comment">// 工人所在的单位（公司）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> workAge;      <span class="comment">// 工人的工龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法，用于创建 Worker 对象，并初始化父类（Person）和子类的属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(String name, <span class="type">int</span> age, String country, String gender, String company, <span class="type">int</span> workExperience)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用父类的构造方法，初始化继承自 Person 类的属性</span></span><br><span class="line">        <span class="built_in">super</span>(name, age, country, gender);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 Worker 类新增的属性</span></span><br><span class="line">        <span class="built_in">this</span>.company = company;</span><br><span class="line">        <span class="built_in">this</span>.workAge = workExperience;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增属性的 getter 和 setter 方法，用于获取和设置工人的单位和工龄</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCompany</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany</span><span class="params">(String company)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWorkAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkExperience</span><span class="params">(<span class="type">int</span> workExperience)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.workAge = workExperience;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写工作方法，提供 Worker 类自己的实现,重写都是一个理。。。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工人在&quot;</span> + company + <span class="string">&quot;工作，工龄：&quot;</span> + workAge + <span class="string">&quot;年&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是我们的测试方法。，。。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 测试 Worker 类</span></span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>, <span class="string">&quot;China&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;牛马制造厂&quot;</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 Worker 类新增的属性的 getter 方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;工人所在的厂是 &quot;</span> + worker.getCompany());</span><br><span class="line">        System.out.println(<span class="string">&quot;工人所在的厂是 &quot;</span> + worker.getWorkAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 Worker 类的 work 方法（重写了父类的 work 方法）</span></span><br><span class="line">        worker.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试结果？</p><img src="/xu-runbo/post/2ebb9fe4/image-20240115180245920.png" class="" title="image-20240115180245920"> </blockquote><h2 id="3-根据人类，派生一个学生类，增加属性：学校、学号；重写工作方法（学生的工作是学习）。"><a href="#3-根据人类，派生一个学生类，增加属性：学校、学号；重写工作方法（学生的工作是学习）。" class="headerlink" title="(3) 根据人类，派生一个学生类，增加属性：学校、学号；重写工作方法（学生的工作是学习）。"></a>(3) 根据人类，派生一个<strong>学生类</strong>，增加属性：学校、学号；重写工作方法（学生的工作是学习）。</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 学生类，继承自 Person 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String school;  <span class="comment">// 学生所在学校</span></span><br><span class="line">    <span class="keyword">private</span> String studentId;  <span class="comment">// 学生学号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法，用于创建 Student 对象，并初始化父类（Person）和子类的属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, String country, String gender, String school, String studentId)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用父类的构造方法，初始化继承自 Person 类的属性</span></span><br><span class="line">        <span class="built_in">super</span>(name, age, country, gender);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 Student 类新增的属性</span></span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">        <span class="built_in">this</span>.studentId = studentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增属性的 getter 和 setter 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSchool</span><span class="params">(String school)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStudentId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentId</span><span class="params">(String studentId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentId = studentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写工作方法，提供 Student 类自己的实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生在&quot;</span> + school + <span class="string">&quot;学习，学号：&quot;</span> + studentId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是测试方法。。。。。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 测试 Student 类</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">22</span>, <span class="string">&quot;China&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;zzuli&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 getter 方法获取属性值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + student.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + student.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;Country: &quot;</span> + student.getCountry());</span><br><span class="line">        System.out.println(<span class="string">&quot;Gender: &quot;</span> + student.getGender());</span><br><span class="line">        System.out.println(<span class="string">&quot;School: &quot;</span> + student.getSchool());</span><br><span class="line">        System.out.println(<span class="string">&quot;Student ID: &quot;</span> + student.getStudentId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 setter 方法设置属性值</span></span><br><span class="line">        student.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">21</span>);</span><br><span class="line">        student.setCountry(<span class="string">&quot;USA&quot;</span>);</span><br><span class="line">        student.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        student.setSchool(<span class="string">&quot;zzuliiii&quot;</span>);</span><br><span class="line">        student.setStudentId(<span class="string">&quot;789012&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再次使用 getter 方法获取更新后的属性值，验证 setter 方法确实对属性进行了修改</span></span><br><span class="line">        System.out.println(<span class="string">&quot;更新后的name &quot;</span> + student.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;更新后的Age: &quot;</span> + student.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;更新后的Country: &quot;</span> + student.getCountry());</span><br><span class="line">        System.out.println(<span class="string">&quot;更新后的Gender: &quot;</span> + student.getGender());</span><br><span class="line">        System.out.println(<span class="string">&quot;更新后的School: &quot;</span> + student.getSchool());</span><br><span class="line">        System.out.println(<span class="string">&quot;更新后的Student ID: &quot;</span> + student.getStudentId());</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试重写的 work 方法</span></span><br><span class="line">        student.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试结果？</p><img src="/xu-runbo/post/2ebb9fe4/image-20240115180537708.png" class="" title="image-20240115180537708"> </blockquote><h2 id="4-根据学生类，派生一个学生干部类，增加属性：职务；增加方法开会。"><a href="#4-根据学生类，派生一个学生干部类，增加属性：职务；增加方法开会。" class="headerlink" title="(4) 根据学生类，派生一个学生干部类，增加属性：职务；增加方法开会。"></a>(4) 根据学生类，派生一个<strong>学生干部类</strong>，增加属性：职务；增加方法开会。</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello.main;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生干部类，继承自 Student 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentLeader</span> <span class="keyword">extends</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String position;  <span class="comment">// 学生干部职务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法，用于创建 StudentLeader 对象，并初始化父类（Student）和子类的属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentLeader</span><span class="params">(String name, <span class="type">int</span> age, String country, String gender, String school, String studentId, String position)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用父类的构造方法，初始化继承自 Student 类的属性</span></span><br><span class="line">        <span class="built_in">super</span>(name, age, country, gender, school, studentId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 StudentLeader 类新增的属性</span></span><br><span class="line">        <span class="built_in">this</span>.position = position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增属性的 getter 和 setter 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPosition</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPosition</span><span class="params">(String position)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.position = position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增方法：开会</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">holdMeeting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生干部 &quot;</span> + getName() + <span class="string">&quot; 正在主持会议&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 测试 StudentLeader 类</span></span><br><span class="line">        <span class="type">StudentLeader</span> <span class="variable">studentLeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentLeader</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">20</span>, <span class="string">&quot;China&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;zzuli&quot;</span>, <span class="string">&quot;456789&quot;</span>, <span class="string">&quot;班长&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 getter 方法获取属性值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + studentLeader.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + studentLeader.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;Country: &quot;</span> + studentLeader.getCountry());</span><br><span class="line">        System.out.println(<span class="string">&quot;Gender: &quot;</span> + studentLeader.getGender());</span><br><span class="line">        System.out.println(<span class="string">&quot;School: &quot;</span> + studentLeader.getSchool());</span><br><span class="line">        System.out.println(<span class="string">&quot;Student ID: &quot;</span> + studentLeader.getStudentId());</span><br><span class="line">        System.out.println(<span class="string">&quot;Position: &quot;</span> + studentLeader.getPosition());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 setter 方法设置属性值</span></span><br><span class="line">        studentLeader.setName(<span class="string">&quot;钱七&quot;</span>);</span><br><span class="line">        studentLeader.setAge(<span class="number">19</span>);</span><br><span class="line">        studentLeader.setCountry(<span class="string">&quot;UK&quot;</span>);</span><br><span class="line">        studentLeader.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">        studentLeader.setSchool(<span class="string">&quot;EFG College&quot;</span>);</span><br><span class="line">        studentLeader.setStudentId(<span class="string">&quot;345678&quot;</span>);</span><br><span class="line">        studentLeader.setPosition(<span class="string">&quot;学生会主席&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;再次使用 getter 方法获取更新后的属性值，验证 setter 方法确实对属性进行了修改&quot;</span>);</span><br><span class="line">        <span class="comment">// 再次使用 getter 方法获取更新后的属性值，验证 setter 方法确实对属性进行了修改</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Updated Name: &quot;</span> + studentLeader.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Updated Age: &quot;</span> + studentLeader.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;Updated Country: &quot;</span> + studentLeader.getCountry());</span><br><span class="line">        System.out.println(<span class="string">&quot;Updated Gender: &quot;</span> + studentLeader.getGender());</span><br><span class="line">        System.out.println(<span class="string">&quot;Updated School: &quot;</span> + studentLeader.getSchool());</span><br><span class="line">        System.out.println(<span class="string">&quot;Updated Student ID: &quot;</span> + studentLeader.getStudentId());</span><br><span class="line">        System.out.println(<span class="string">&quot;Updated Position: &quot;</span> + studentLeader.getPosition());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试新增的 holdMeeting 方法</span></span><br><span class="line">        studentLeader.holdMeeting();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试结果?</p><img src="/xu-runbo/post/2ebb9fe4/image-20240115180839471.png" class="" title="image-20240115180839471"> </blockquote><h2 id="编写主类包括主方法，分别对上述3个类进行测试。"><a href="#编写主类包括主方法，分别对上述3个类进行测试。" class="headerlink" title="编写主类包括主方法，分别对上述3个类进行测试。"></a>编写主类包括主方法，分别对上述3个类进行测试。</h2><blockquote><p>我们可以在编写对应类的适合就加上一个psvm()进行测试</p><p>也可与单独一个Test类来测试</p><p>下面是单独测试</p><p>题目的意思是这样单独一个类来测试我们写的那些类。。。。</p><p>上面就当帮助大家理解咯。。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hello.main;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 测试 Person 类</span></span><br><span class="line">        testPerson();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 Worker 类</span></span><br><span class="line">        testWorker();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 Student 类</span></span><br><span class="line">        testStudent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试 StudentLeader 类</span></span><br><span class="line">        testStudentLeader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试 Person 类的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testPerson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">25</span>, <span class="string">&quot;China&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出属性值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + person.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + person.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;Country: &quot;</span> + person.getCountry());</span><br><span class="line">        System.out.println(<span class="string">&quot;Gender: &quot;</span> + person.getGender());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        person.eat();</span><br><span class="line">        person.sleep();</span><br><span class="line">        person.work();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试 Worker 类的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testWorker</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">30</span>, <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;郑州轻工业大学&quot;</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出属性值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + worker.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + worker.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;Country: &quot;</span> + worker.getCountry());</span><br><span class="line">        System.out.println(<span class="string">&quot;Gender: &quot;</span> + worker.getGender());</span><br><span class="line">        System.out.println(<span class="string">&quot;Company: &quot;</span> + worker.getCompany());</span><br><span class="line">        System.out.println(<span class="string">&quot;Work Experience: &quot;</span> + worker.getWorkAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        worker.eat();</span><br><span class="line">        worker.sleep();</span><br><span class="line">        worker.work();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试 Student 类的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">22</span>, <span class="string">&quot;Canada&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;郑州轻工业大学&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出属性值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + student.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + student.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;Country: &quot;</span> + student.getCountry());</span><br><span class="line">        System.out.println(<span class="string">&quot;Gender: &quot;</span> + student.getGender());</span><br><span class="line">        System.out.println(<span class="string">&quot;School: &quot;</span> + student.getSchool());</span><br><span class="line">        System.out.println(<span class="string">&quot;Student ID: &quot;</span> + student.getStudentId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        student.eat();</span><br><span class="line">        student.sleep();</span><br><span class="line">        student.work();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试 StudentLeader 类的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testStudentLeader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StudentLeader</span> <span class="variable">studentLeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentLeader</span>(<span class="string">&quot;赵六&quot;</span>, <span class="number">20</span>, <span class="string">&quot;UK&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="string">&quot;郑州轻工业大学&quot;</span>, <span class="string">&quot;456789&quot;</span>, <span class="string">&quot;学生会主席&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出属性值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + studentLeader.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + studentLeader.getAge());</span><br><span class="line">        System.out.println(<span class="string">&quot;Country: &quot;</span> + studentLeader.getCountry());</span><br><span class="line">        System.out.println(<span class="string">&quot;Gender: &quot;</span> + studentLeader.getGender());</span><br><span class="line">        System.out.println(<span class="string">&quot;School: &quot;</span> + studentLeader.getSchool());</span><br><span class="line">        System.out.println(<span class="string">&quot;Student ID: &quot;</span> + studentLeader.getStudentId());</span><br><span class="line">        System.out.println(<span class="string">&quot;Position: &quot;</span> + studentLeader.getPosition());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        studentLeader.eat();</span><br><span class="line">        studentLeader.sleep();</span><br><span class="line">        studentLeader.work();</span><br><span class="line">        studentLeader.holdMeeting();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试结果？</p><img src="/xu-runbo/post/2ebb9fe4/image-20240115181405929.png" class="" title="image-20240115181405929"> </blockquote><hr><p>好了</p><h2 id="至此"><a href="#至此" class="headerlink" title="至此"></a>至此</h2><p>希望对大家有帮助</p><p>并</p><p>诚挚的希望帅哥和美女们都能拿高分！</p>]]></content>
      
      
      <categories>
          
          <category> else </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JSP和黄金案例</title>
      <link href="/xu-runbo/post/681c540e.html"/>
      <url>/xu-runbo/post/681c540e.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSP和黄金案例"><a href="#JSP和黄金案例" class="headerlink" title="JSP和黄金案例"></a>JSP和黄金案例</h1><h2 id="JSP简介"><a href="#JSP简介" class="headerlink" title="JSP简介"></a>JSP简介</h2><img src="/xu-runbo/post/681c540e/image-20240102155922200.png" class="" title="image-20240102155922200"> <p>JSP（JavaServer Pages）是一种用于构建动态Web页面的Java技术。以下是一些通俗易懂的概念：</p><ol><li><p><strong>JSP是什么？</strong></p><ul><li>JSP是一种技术，它<strong>允许开发者在HTML页面中嵌入Java代码，以便动态生成网页内容。</strong>它是在服务器端执行的，最终生成的是普通的HTML页面发送到浏览器。</li></ul></li><li><p><strong>为什么需要JSP？</strong></p><ul><li>JSP使得开发者能够在页面中嵌入Java代码，这样就可以根据用户请求和其他条件动态生成页面内容。这样可以更灵活地展示信息，提高用户体验。</li></ul></li><li><p><strong>JSP的工作原理是什么？</strong></p><ul><li>当用户请求一个JSP页面时，服务器会先执行嵌入在JSP页面中的Java代码，生成HTML内容，然后再将最终的HTML发送给用户的浏览器。这个过程被称为<strong>服务器端的动态页面生成</strong>。</li></ul></li><li><p><strong>JSP与Servlet的关系是什么？</strong></p><ul><li><strong>JSP本质上是通过Servlet实现的</strong>。<strong>当JSP页面第一次被访问时，容器（如Tomcat）会将其转换为对应的Servlet</strong>，并在后续请求中直接执行已生成的Servlet，提高性能。</li></ul></li><li><p><strong>JSP中的Java代码怎么写？</strong></p><ul><li><strong>在JSP中，可以使用<code>&lt;% %&gt;</code>标签嵌入Java代码，这段代码会在服务器端执行</strong>。例如，你可以在JSP中使用这样的标签来获取用户的输入、进行逻辑判断等。</li></ul></li><li><p><strong>JSP的优势是什么？</strong></p><ul><li><strong>JSP使得前端开发者可以方便地与Java后端进行交互，动态生成页面内容</strong>。同时，它允许开发者<strong>在HTML中嵌套Java代码，提高了页面的可维护性和灵活性</strong>。</li></ul></li></ol><p>JSP是一种<strong>使得Java与HTML结合的技术，允许在页面中嵌入Java代码，实现动态生成Web页面的目的</strong>。</p><h2 id="JSP快速入门"><a href="#JSP快速入门" class="headerlink" title="JSP快速入门"></a>JSP快速入门</h2><h3 id="maven导入jsp坐标"><a href="#maven导入jsp坐标" class="headerlink" title="maven导入jsp坐标"></a>maven导入jsp坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="index-jsp"><a href="#index-jsp" class="headerlink" title="index.jsp"></a>index.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 许闰博</span><br><span class="line">  Date: <span class="number">2024</span>/<span class="number">1</span>/<span class="number">2</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">14</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;helo jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:9527/untitled20_war/index.jsp">helo jsp</a></p><h3 id="代码效果"><a href="#代码效果" class="headerlink" title="代码效果"></a>代码效果</h3><img src="/xu-runbo/post/681c540e/image-20240102161707440.png" class="" title="image-20240102161707440"> <h2 id="JSP-原理"><a href="#JSP-原理" class="headerlink" title="JSP 原理"></a>JSP 原理</h2><p>本质上就是Servlet！</p><img src="/xu-runbo/post/681c540e/image-20240102162040847.png" class="" title="image-20240102162040847"> <p>JSP（JavaServer Pages）是用于构建动态Web页面的Java技术。以下是JSP的核心原理的简要介绍：</p><ol><li><p>JSP是Servlet的一种简化形式：</p><ul><li>JSP本质上是Servlet的一种简化形式，用于<strong>更方便地生成动态Web页面</strong>。JSP文件中<strong>可以包含HTML代码和嵌套的Java代码片段</strong>。</li></ul></li><li><p><strong>JSP的生命周期：</strong></p><ul><li>当用户访问一个JSP页面时，<strong>Web容器（如Tomcat）首先将其翻译成一个Servlet。</strong></li><li>这个Servlet的生命周期与<strong>JSP的请求-响应生命周期相对</strong>应，包括初始化、服务处理和销毁阶段。</li></ul></li><li><p><strong>翻译和编译：</strong></p><ul><li>当JSP页面第一次被访问时，容器将其翻译成Java Servlet，并进行编译<strong>。生成的Servlet类文件存储在工作目录中</strong>，以便在以后的请求中直接使用，提高性能。</li></ul></li><li><p><strong>嵌套的Java代码：</strong></p><ul><li>在JSP中，可以使用<code>&lt;% %&gt;</code>标签嵌套Java代码。这些代码片段在翻译成Servlet时会被插入到Servlet的<code>service</code>方法中，用于处理请求和生成动态内容。</li></ul></li><li><p><strong>&#x3D;&#x3D;隐含对象&#x3D;&#x3D;：</strong></p><ul><li><strong>JSP提供了一些隐含对象，如<code>request</code>、<code>response</code>、<code>session</code>等，这些对象使得在JSP中能够方便地访问与请求和会话相关的信息，而不需要显式声明这些对象。</strong></li></ul></li><li><p><strong>输出内容到客户端：</strong></p><ul><li>JSP最终生成的Servlet负责将动态生成的HTML内容输出到客户端浏览器。这样，用户就能够看到根据请求动态生成的页面。</li></ul></li></ol><p>JSP允许在HTML中嵌套Java代码，使得动态Web页面的生成变得更加简单和灵活。JSP文件在被访问时，由容器翻译成Servlet，然后编译执行，最终生成动态内容响应给客户端。</p><img src="/xu-runbo/post/681c540e/image-20240102162257500.png" class="" title="image-20240102162257500"> <h2 id="JSP-脚本"><a href="#JSP-脚本" class="headerlink" title="JSP 脚本"></a>JSP 脚本</h2><img src="/xu-runbo/post/681c540e/image-20240103084608627.png" class="" title="image-20240103084608627"> <blockquote><p>在JSP（JavaServer Pages）中，有三种主要的脚本元素，它们用于在JSP页面中插入Java代码。这三种脚本元素分别是：声明、脚本表达式和脚本片段。以下是它们的详细介绍：</p><ol><li><p><strong>声明（Declaration）: <code>&lt;%! ... %&gt;</code></strong></p><ul><li><p><strong>用途：</strong> 用于声明类成员，如变量和方法。声明中的内容在生成的<strong>Servlet类的成员部分</strong>。</p></li><li><p><strong>示例：</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>注意：</strong> 声明中的变量和方法可以在整个JSP页面的任何地方使用。</p></li></ul></li><li><p><strong>脚本表达式（Expression）: <code>&lt;%= ... %&gt;</code></strong></p><ul><li><p><strong>用途：</strong> <strong>用于输出表达式的结果到客户端浏览器。通常用于在HTML中插入动态数据。</strong></p></li><li><p><strong>示例：</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Welcome, &lt;%= userName %&gt;!&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>注意：</strong> 脚本表达式会将表达式的结果直接输出到页面，可以用于输出变量、调用方法等。</p></li></ul></li><li><p><strong>脚本片段（Scriptlet）: <code>&lt;% ... %&gt;</code></strong></p><ul><li><p><strong>用途：</strong> 用于插入任意的Java代码块，如条件语句、循环等。在这个标签中可以包含任意的Java代码。</p></li><li><p><strong>示例：</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">5</span>) &#123;</span><br><span class="line">        out.println(<span class="string">&quot;x is greater than 5&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        out.println(<span class="string">&quot;x is not greater than 5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>注意：</strong> 脚本片段中的代码<strong>会被转化为Servlet的 <code>service()</code> 方法中的代码，可以包含任何有效的Java代码。</strong></p></li></ul></li></ol><p>这些脚本元素可以结合使用，使得在JSP页面中可以嵌入Java代码，并以动态的方式生成HTML内容。然而，为了提高可维护性和可读性，应该尽量避免在JSP中编写大量的Java代码，而是将业务逻辑分离到JavaBean等组件中。这有助于保持代码的清晰性和可维护性。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Table Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;Dynamic Table Generation&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Age&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Country&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="comment">// Simulating data retrieval or processing logic</span></span><br><span class="line">        String[] names = &#123;<span class="string">&quot;John Doe&quot;</span>, <span class="string">&quot;Jane Smith&quot;</span>, <span class="string">&quot;Bob Johnson&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] ages = &#123;<span class="number">30</span>, <span class="number">25</span>, <span class="number">35</span>&#125;;</span><br><span class="line">        String[] countries = &#123;<span class="string">&quot;USA&quot;</span>, <span class="string">&quot;Canada&quot;</span>, <span class="string">&quot;UK&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; names.length; i++) &#123;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&lt;%= names[i] %&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%= ages[i] %&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&lt;%= countries[i] %&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><img src="/xu-runbo/post/681c540e/image-20240103094601010.png" class="" title="image-20240103094601010"> <h2 id="JSP缺点"><a href="#JSP缺点" class="headerlink" title="JSP缺点"></a>JSP缺点</h2><img src="/xu-runbo/post/681c540e/image-20240103095026457.png" class="" title="image-20240103095026457"> <p>退出了历史的舞台！</p><h3 id="学牛魔"><a href="#学牛魔" class="headerlink" title="学牛魔"></a>学牛魔</h3><p>新的皇帝：html+ajax</p><img src="/xu-runbo/post/681c540e/image-20240103095110818.png" class="" title="image-20240103095110818"><img src="/xu-runbo/post/681c540e/image-20240103095249160.png" class="" title="image-20240103095249160"> <p> 现在是Servlet+Jsp</p><img src="/xu-runbo/post/681c540e/image-20240103095405948.png" class="" title="image-20240103095405948"> <h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><img src="/xu-runbo/post/681c540e/image-20240103100044295.png" class="" title="image-20240103100044295"> <p>EL（Expression Language）是一种用于在JSP、JSF和其他JavaEE技术中访问和操作数据的简洁表达式语言。它提供了一种轻量级的方式来访问JavaBean组件的属性、数组、集合等数据。</p><p>以下是一些关于EL表达式的基本知识：</p><ol><li><p><strong>语法：</strong> EL表达式通常使用 <code>$&#123;&#125;</code> 括起来，例如 <code>$&#123;user.name&#125;</code>。在括号中，你可以放置任意合法的Java表达式或标识符。</p></li><li><p><strong>访问属性：</strong> EL表达式允许你直接访问JavaBean中的属性。例如，<code>$&#123;user.name&#125;</code> 将访问名为 <code>name</code> 的 <code>user</code> 对象的属性。</p></li><li><p><strong>调用方法：</strong> 你可以在EL表达式中调用JavaBean中的方法。例如，<code>$&#123;user.getName()&#125;</code> 将调用 <code>user</code> 对象的 <code>getName</code> 方法。</p></li><li><p><strong>集合和数组访问：</strong> EL表达式支持对集合和数组的访问。例如，<code>$&#123;list[0]&#125;</code> 将获取列表中的第一个元素，<code>$&#123;array[1]&#125;</code> 将获取数组中的第二个元素。</p></li><li><p><strong>运算符：</strong> EL表达式支持一些基本的算术、关系和逻辑运算符，如 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code> 等。</p></li><li><p><strong>空值检查：</strong> EL表达式提供了一种避免空指针异常的方式<strong>，使用 <code>empty</code> 关键字检查集合或对象是否为空。</strong></p></li><li><p><strong>隐式对象：</strong> <strong>在JSP中，有一些隐式对象，如 <code>pageScope</code>、<code>requestScope</code>、<code>sessionScope</code>、<code>applicationScope</code>，允许你在EL表达式中访问页面、请求、会话和应用程序的作用域中的属性。</strong></p></li><li><p><strong>EL函数：</strong> 你可以定义自己的EL函数，然后在EL表达式中使用这些函数。这可以通过标签库或在配置文件中进行配置。</p></li></ol><p>以下是一个简单的例子，演示了EL表达式的使用：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;EL Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;EL Example&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%-- Assuming <span class="string">&#x27;user&#x27;</span> is a JavaBean with <span class="string">&#x27;name&#x27;</span> property --%&gt;</span><br><span class="line">    &lt;p&gt;User Name: $&#123;user.name&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%-- Assuming <span class="string">&#x27;list&#x27;</span> is a List in the request scope --%&gt;</span><br><span class="line">    &lt;p&gt;First Item in List: $&#123;list[<span class="number">0</span>]&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%-- EL运算符和函数 --%&gt;</span><br><span class="line">    &lt;p&gt;Sum: $&#123;<span class="number">2</span> + <span class="number">3</span>&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Length of String: $&#123;fn:length(user.name)&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>这个例子中展示了如何在JSP页面中使用EL表达式访问JavaBean的属性、集合的元素，以及进行一些简单的算术运算和函数调用。EL表达式使得JSP页面更加简洁，减少了Java代码的嵌套。</p><h3 id="JavaWeb的四大域对象"><a href="#JavaWeb的四大域对象" class="headerlink" title="JavaWeb的四大域对象"></a>JavaWeb的四大域对象</h3><p>在JavaWeb开发中，域对象是用于在不同范围内共享数据的一种机制。JavaWeb的四大域对象分别是：请求域（Request）、会话域（Session）、应用程序域（Application）和页面域（Page）。</p><ol><li><p><strong>请求域（Request）：</strong></p><ul><li><strong>范围：</strong> 请求域是在一次HTTP请求过程中有效的，即在同一个请求中的多个Servlet之间共享数据。</li><li><strong>使用场景：</strong> 主要用于在请求的多个阶段或多个Servlet之间传递数据。</li><li><strong>使用方法：</strong> 可以使用<code>request.setAttribute(String name, Object value)</code>设置属性，然后通过<code>request.getAttribute(String name)</code>获取属性值。</li></ul></li><li><p><strong>会话域（Session）：</strong></p><ul><li><strong>范围：</strong> 会话域是在用户会话期间有效的，即在用户登录到退出这段时间内的多次请求中共享数据。</li><li><strong>使用场景：</strong> 用于在同一个用户的不同请求之间传递数据，通常用于用户登录状态的维护等。</li><li><strong>使用方法：</strong> 可以使用<code>session.setAttribute(String name, Object value)</code>设置属性，然后通过<code>session.getAttribute(String name)</code>获取属性值。</li></ul></li><li><p><strong>应用程序域（Application）：</strong></p><ul><li><strong>范围：</strong> 应用程序域是在整个Web应用程序中有效的，即在同一个Web应用程序的不同用户会话之间共享数据。</li><li><strong>使用场景：</strong> 主要用于在整个应用程序中共享全局数据，如一些配置信息等。</li><li><strong>使用方法：</strong> 可以使用<code>application.setAttribute(String name, Object value)</code>设置属性，然后通过<code>application.getAttribute(String name)</code>获取属性值。</li></ul></li><li><p><strong>页面域（Page）：</strong></p><ul><li><strong>范围：</strong> 页面域是在JSP页面中有效的，即在同一个JSP页面的不同部分之间共享数据。</li><li><strong>使用场景：</strong> 用于在同一个JSP页面的不同部分传递数据，不同于其他域对象，页面域是JSP特有的。</li><li><strong>使用方法：</strong> 可以使用 <code>&lt;jsp:useBean&gt;</code> 或 <code>&lt;jsp:setProperty&gt;</code> 等标签设置属性，然后使用 <code>&lt;jsp:getProperty&gt;</code> 获取属性值。</li></ul></li></ol><img src="/xu-runbo/post/681c540e/image-20240103095939585.png" class="" title="image-20240103095939585"> <p><strong>el表达式获取数据会依次从这4个域中寻找直到找到为止</strong></p><p>太小的page和太大的application作用域不常用</p><h2 id="JSTL标签"><a href="#JSTL标签" class="headerlink" title="JSTL标签"></a>JSTL标签</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>JSTL（JavaServer Pages Standard Tag Library）是一组在JSP页面中使用的标准标签，用于简化和增强Java EE应用程序的开发。</p><h4 id="导入maven坐标"><a href="#导入maven坐标" class="headerlink" title="导入maven坐标"></a>导入maven坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 许闰博</span><br><span class="line">  Date: <span class="number">2024</span>/<span class="number">1</span>/<span class="number">3</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">03</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> prefix=<span class="string">&quot;fmt&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;ture才显示&lt;/h1&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">    &lt;h1&gt;<span class="literal">false</span>不显示&lt;/h1&gt;</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/681c540e/image-20240103100907729.png" class="" title="image-20240103100907729"> <ol><li><p><strong>导入JSTL库：</strong><br>在使用JSTL标签之前，首先需要在JSP页面中导入JSTL库。使用以下标签导入核心标签库和格式化标签库：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> prefix=<span class="string">&quot;fmt&quot;</span> %&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>核心标签库（c标签）：</strong></p><ul><li><strong>迭代标签：</strong> <code>&lt;c:forEach&gt;</code> 用于循环迭代集合或数组。</li><li><strong>条件判断标签：</strong> <code>&lt;c:if&gt;</code>, <code>&lt;c:choose&gt;</code>, <code>&lt;c:when&gt;</code>, <code>&lt;c:otherwise&gt;</code> 用于条件判断。</li><li><strong>变量设置标签：</strong> <code>&lt;c:set&gt;</code> 用于设置变量。</li><li><strong>URL处理标签：</strong> <code>&lt;c:import&gt;</code>, <code>&lt;c:url&gt;</code>, <code>&lt;c:redirect&gt;</code> 用于处理URL。</li><li><strong>其他：</strong> <code>&lt;c:out&gt;</code>, <code>&lt;c:catch&gt;</code>, <code>&lt;c:remove&gt;</code> 等其他标签。</li></ul></li><li><p><strong>格式化标签库（fmt标签）：</strong></p><ul><li><strong>日期和时间格式化：</strong> <code>&lt;fmt:formatDate&gt;</code>, <code>&lt;fmt:parseDate&gt;</code> 用于日期和时间格式化。</li><li><strong>数字格式化：</strong> <code>&lt;fmt:formatNumber&gt;</code>, <code>&lt;fmt:parseNumber&gt;</code> 用于数字格式化。</li><li><strong>其他：</strong> <code>&lt;fmt:setLocale&gt;</code>, <code>&lt;fmt:bundle&gt;</code>, <code>&lt;fmt:message&gt;</code> 等其他标签。</li></ul></li><li><p><strong>EL（Expression Language）与JSTL结合使用：</strong></p><ul><li>JSTL通常与EL结合使用，通过EL表达式访问JSTL标签库中设置的变量。</li><li>示例：<code>$&#123;c:out value=&quot;$&#123;someVariable&#125;&quot;&#125;</code></li></ul></li><li><p><strong>国际化和本地化：</strong></p><ul><li>使用 <code>&lt;fmt:setLocale&gt;</code> 设置页面的语言环境。</li><li>使用 <code>&lt;fmt:bundle&gt;</code> 和 <code>&lt;fmt:message&gt;</code> 进行国际化和本地化处理。</li></ul></li><li><p><strong>JSTL函数库：</strong></p><ul><li>JSTL提供了一组内建的函数库，可用于字符串操作、集合操作等。</li><li>示例：<code>$&#123;fn:length(someList)&#125;</code>, <code>$&#123;fn:toUpperCase(someString)&#125;</code></li></ul></li><li><p><strong>错误处理：</strong></p><ul><li><code>&lt;c:catch&gt;</code> 用于捕获和处理异常。</li></ul></li><li><p><strong>JSTL的常用标签和属性：</strong></p><ul><li>了解常用标签的使用方式，以及标签的常见属性。</li><li>需要注意的是，不同版本的JSTL可能有些许差异。</li></ul></li></ol><h3 id="c-foreach"><a href="#c-foreach" class="headerlink" title="c:foreach"></a>c:foreach</h3><img src="/xu-runbo/post/681c540e/image-20240103101136772.png" class="" title="image-20240103101136772"> <blockquote><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> prefix=<span class="string">&quot;fmt&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;forEach Example&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;forEach Example&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%-- 示例<span class="number">1</span>：迭代数组 --%&gt;</span><br><span class="line">    &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;item&quot;</span> items=<span class="string">&quot;$&#123;myArray&#125;&quot;</span>&gt;</span><br><span class="line">        $&#123;item&#125;&lt;br&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%-- 示例<span class="number">2</span>：迭代集合 --%&gt;</span><br><span class="line">    &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;person&quot;</span> items=<span class="string">&quot;$&#123;personList&#125;&quot;</span>&gt;</span><br><span class="line">        Name: $&#123;person.name&#125;, Age: $&#123;person.age&#125;&lt;br&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%-- 示例<span class="number">3</span>：指定开始和结束值进行迭代 --%&gt;</span><br><span class="line">    &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;5&quot;</span>&gt;</span><br><span class="line">        $&#123;i&#125;&lt;br&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%-- 示例<span class="number">4</span>：使用 step 属性指定步长 --%&gt;</span><br><span class="line">    &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;j&quot;</span> begin=<span class="string">&quot;0&quot;</span> end=<span class="string">&quot;10&quot;</span> step=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">        $&#123;j&#125;&lt;br&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码效果</p><img src="/xu-runbo/post/681c540e/image-20240103101339469.png" class="" title="image-20240103101339469"> </blockquote><img src="/xu-runbo/post/681c540e/image-20240103101523353.png" class="" title="image-20240103101523353"> <h3 id="varstatus属性"><a href="#varstatus属性" class="headerlink" title="varstatus属性"></a>varstatus属性</h3><p><code>varStatus</code> 属性是 <code>&lt;c:forEach&gt;</code> 标签中的一个属性，用于获取循环状态信息。通过 <code>varStatus</code>，你可以获取有关迭代的一些附加信息，如当前迭代的索引、是否为第一次迭代、是否为最后一次迭代等。</p><ul><li><code>index</code>：当前迭代的索引，从0开始。</li><li><code>count</code>：当前迭代的计数，从1开始。</li><li><code>first</code>：是否为第一次迭代（true&#x2F;false）。</li><li><code>last</code>：是否为最后一次迭代（true&#x2F;false）。</li><li><code>even</code>：是否为偶数次迭代（true&#x2F;false）。</li><li><code>odd</code>：是否为奇数次迭代（true&#x2F;false）。</li></ul><p>通过使用 <code>varStatus</code>，你可以更灵活地控制和显示循环迭代的状态信息。</p><img src="/xu-runbo/post/681c540e/image-20240103102007712.png" class="" title="image-20240103102007712"><img src="/xu-runbo/post/681c540e/image-20240103102205314.png" class="" title="image-20240103102205314">  <h2 id="MVC模式和三层架构"><a href="#MVC模式和三层架构" class="headerlink" title="MVC模式和三层架构"></a>MVC模式和三层架构</h2><p>MVC（Model-View-Controller）模式和三层架构是两种<strong>常用于软件设计和开发的架构模式</strong>。它们旨在提高应用程序的可维护性、可扩展性和代码复用性。以下是对这两者的简要介绍：</p><h3 id="MVC模式（Model-View-Controller）"><a href="#MVC模式（Model-View-Controller）" class="headerlink" title="MVC模式（Model-View-Controller）"></a>MVC模式（Model-View-Controller）</h3> <img src="/xu-runbo/post/681c540e/image-20240103102633010.png" class="" title="image-20240103102633010"><p>MVC是一种设计模式，将应用程序划分为三个主要组件：</p><ol><li><p><strong>模型（Model）：</strong></p><ul><li>负责处理应用程序的数据逻辑，通常包括数据的获取、处理和存储。</li><li>不直接处理用户界面，而是提供数据和方法供控制器使用。</li></ul></li><li><p><strong>视图（View）：</strong></p><ul><li>负责用户界面的呈现和显示。</li><li>从模型中获取数据以展示给用户，同时也可以向控制器发送用户输入的事件。</li></ul></li><li><p><strong>控制器（Controller）：</strong></p><ul><li>负责处理用户的输入、业务逻辑和控制数据流向模型或视图。</li><li>接收用户输入并对其进行处理，然后相应地更新模型或视图。</li></ul></li></ol><p>MVC的优势在于分离了应用程序的关注点，使得修改一个组件不会对其他组件造成影响。这种分层结构有助于提高代码的可维护性和可扩展性。</p><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><img src="/xu-runbo/post/681c540e/image-20240103103047061.png" class=""> <p>三层架构是一种软件架构模式，将应用程序划分为三个主要层次：</p><ol><li><p><strong>表示层（Presentation Layer）：</strong></p><ul><li>负责处理用户界面的显示和用户输入的处理。</li><li>通常包括用户界面、用户输入的验证和处理逻辑。</li></ul></li><li><p><strong>业务逻辑层（Business Logic Layer）：</strong></p><ul><li>包含应用程序的业务逻辑和规则。</li><li>处理应用程序的业务规则，调用数据访问层来获取和保存数据。</li></ul></li><li><p><strong>数据访问层（Data Access Layer）：</strong></p><ul><li>负责处理与数据存储的交互，包括数据库或其他数据存储系统。</li><li>提供数据的访问、操作和持久化。</li></ul></li></ol><p>三层架构的优势在于将应用程序划分为明确定义的层次，使得不同层次的模块可以相对独立地进行开发和维护。这种分层结构有助于提高系统的可维护性、可扩展性和灵活性。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><img src="/xu-runbo/post/681c540e/image-20240103103126378.png" class="" title="image-20240103103126378"> <p>MVC模式和三层架构都是为了更好地组织和管理软件系统而设计的。MVC关注于应用程序的内部设计，强调模型、视图和控制器之间的分离；而三层架构关注于整个应用程序的结构，强调表示层、业务逻辑层和数据访问层之间的分离。这两者可以结合使用，以实现更清晰、更灵活的软件架构。</p><p> 总结前端view层，后端control层和model层，前端发送请求，control层接收到请求向model层获取数据，control层将获取到的数据返回给view层</p><h2 id="黄金案例"><a href="#黄金案例" class="headerlink" title="&#x3D;&#x3D;黄金案例&#x3D;&#x3D;"></a>&#x3D;&#x3D;黄金案例&#x3D;&#x3D;</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><img src="/xu-runbo/post/681c540e/image-20240103103245886.png" class="" title="image-20240103103245886"><h4 id="创建maven项目-web框架"><a href="#创建maven项目-web框架" class="headerlink" title="创建maven项目+web框架"></a>创建maven项目+web框架</h4><img src="/xu-runbo/post/681c540e/image-20240103103427088.png" class="" title="image-20240103103427088"> <h4 id="导入war坐标"><a href="#导入war坐标" class="headerlink" title="导入war坐标"></a>导入war坐标</h4><img src="/xu-runbo/post/681c540e/image-20240103103451463.png" class="" title="image-20240103103451463"> <p>刷新maven</p><h4 id="加入web框架"><a href="#加入web框架" class="headerlink" title="加入web框架"></a>加入web框架</h4><img src="/xu-runbo/post/681c540e/image-20240103103537587.png" class="" title="image-20240103103537587"> <p>默认是web目录，要重构为webapp目录，并且移动到main下面</p><img src="/xu-runbo/post/681c540e/image-20240103103631069.png" class="" title="image-20240103103631069"> <h4 id="配置tomcat服务"><a href="#配置tomcat服务" class="headerlink" title="配置tomcat服务"></a>配置tomcat服务</h4><img src="/xu-runbo/post/681c540e/image-20240103103747759.png" class="" title="image-20240103103747759"><img src="/xu-runbo/post/681c540e/image-20240103103812591.png" class="" title="image-20240103103812591"><p>要点：maven打包为war并且刷新maven才会有工件提示</p><p>jre选择后就没有x了</p><h4 id="导入mybatis坐标"><a href="#导入mybatis坐标" class="headerlink" title="导入mybatis坐标"></a>导入mybatis坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置mybatis-config-xml"><a href="#配置mybatis-config-xml" class="headerlink" title="配置mybatis-config.xml"></a>配置mybatis-config.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--            数据库的连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///db&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xurunbo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    加载SQl的映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等下写mapper映射处</p><h4 id="创建BrandMapper接口"><a href="#创建BrandMapper接口" class="headerlink" title="创建BrandMapper接口"></a>创建BrandMapper接口</h4><img src="/xu-runbo/post/681c540e/image-20240103104252350.png" class="" title="image-20240103104252350"> <h4 id="创建对应同目录下的Mapper-xml映射"><a href="#创建对应同目录下的Mapper-xml映射" class="headerlink" title="创建对应同目录下的Mapper.xml映射"></a>创建对应同目录下的Mapper.xml映射</h4><img src="/xu-runbo/post/681c540e/image-20240103104404380.png" class="" title="image-20240103104404380"> <img src="/xu-runbo/post/681c540e/image-20240103104422106.png" class="" title="image-20240103104422106"> <img src="/xu-runbo/post/681c540e/image-20240103104436674.png" class="" title="image-20240103104436674"> <p>最后就大功告成了！</p><h4 id="导入Servlet坐标"><a href="#导入Servlet坐标" class="headerlink" title="导入Servlet坐标"></a>导入Servlet坐标</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.5</span>&lt;/version&gt;</span><br><span class="line">     &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>不加scope控制就报错！</p><h4 id="三层架构准备"><a href="#三层架构准备" class="headerlink" title="三层架构准备"></a>三层架构准备</h4><p>创建软件包com.hello.pojo&#x2F;web&#x2F;service&#x2F;mapper;</p><img src="/xu-runbo/post/681c540e/image-20240103105044462.png" class="" title="image-20240103105044462"> <h4 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_brand</span><br><span class="line">(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">rand_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">company_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">ordered <span class="type">int</span>,</span><br><span class="line">description <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">status <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;小米&quot;,&quot;小米科技有限公司&quot;,<span class="number">5</span>,&quot;are you ok&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;三只松鼠&quot;,&quot;三只松鼠有限公司&quot;,<span class="number">5</span>,&quot;好吃不贵&quot;,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;华为&quot;,&quot;华为技术有限公司&quot;,<span class="number">5</span>,&quot;华为让生活更幸福&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;vivo&quot;,&quot;vivo有限公司&quot;,<span class="number">5</span>,&quot;vivo智能手坤&quot;,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand;</span><br></pre></td></tr></table></figure><h4 id="实体类pojo下的Brand类"><a href="#实体类pojo下的Brand类" class="headerlink" title="实体类pojo下的Brand类"></a>实体类pojo下的Brand类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line">   Integer id            ;</span><br><span class="line">   String rand_name     ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Brand&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, rand_name=&#x27;&quot;</span> + rand_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, company_name=&#x27;&quot;</span> + company_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ordered=&quot;</span> + ordered +</span><br><span class="line">                <span class="string">&quot;, description=&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, status=&quot;</span> + status +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String company_name  ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Brand</span><span class="params">(Integer id, String rand_name, String company_name, <span class="type">int</span> ordered, String description, <span class="type">int</span> status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.rand_name = rand_name;</span><br><span class="line">        <span class="built_in">this</span>.company_name = company_name;</span><br><span class="line">        <span class="built_in">this</span>.ordered = ordered;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRand_name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rand_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRand_name</span><span class="params">(String rand_name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rand_name = rand_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCompany_name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> company_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany_name</span><span class="params">(String company_name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.company_name = company_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrdered</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ordered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrdered</span><span class="params">(<span class="type">int</span> ordered)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ordered = ordered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(<span class="type">int</span> status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ordered       ;</span><br><span class="line">   String description   ;</span><br><span class="line">   <span class="type">int</span> status        ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="mybatis-xml的mapper配置"><a href="#mybatis-xml的mapper配置" class="headerlink" title="mybatis.xml的mapper配置"></a>mybatis.xml的mapper配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hello.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="BrandMapper-xml"><a href="#BrandMapper-xml" class="headerlink" title="BrandMapper.xml"></a>BrandMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hello.mapper.BrandMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectall&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="导入工具获取sqlsession工厂工具包"><a href="#导入工具获取sqlsession工厂工具包" class="headerlink" title="导入工具获取sqlsession工厂工具包"></a>导入工具获取sqlsession工厂工具包</h4><img src="/xu-runbo/post/681c540e/image-20240103110632603.png" class="" title="image-20240103110632603"> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetsqlSessionFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getsqlsessionfactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="maven导入JSTL坐标"><a href="#maven导入JSTL坐标" class="headerlink" title="maven导入JSTL坐标"></a>maven导入JSTL坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="查询所有并且展示信息"><a href="#查询所有并且展示信息" class="headerlink" title="查询所有并且展示信息"></a>查询所有并且展示信息</h3><img src="/xu-runbo/post/681c540e/image-20240103110051683.png" class="" title="image-20240103110051683"> <h4 id="service下的BrandService-java"><a href="#service下的BrandService-java" class="headerlink" title="service下的BrandService.java"></a>service下的BrandService.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.BrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.GetsqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory Factory=GetsqlSessionFactory.getsqlsessionfactory();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取sqlsession对象</span></span><br><span class="line">        SqlSession sqlsession=Factory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取mapper对象</span></span><br><span class="line">        BrandMapper brandMapper=sqlsession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行sql语句</span></span><br><span class="line">        List&lt;Brand&gt; brands=brandMapper.selectall();</span><br><span class="line">              sqlsession.close();</span><br><span class="line">        <span class="keyword">return</span> brands;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对应的web下的SelectAllservlet-java"><a href="#对应的web下的SelectAllservlet-java" class="headerlink" title="对应的web下的SelectAllservlet.java"></a>对应的web下的SelectAllservlet.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.hello.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.WebService;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/selectall&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectAllServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        BrandService brandService=<span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line">        List&lt;Brand&gt; brands=brandService.selectAll();</span><br><span class="line">        resp.getWriter().println(brands);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回数据乱码的时候</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/anli_war/selectall&quot;</span>&gt;</span>查询全部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="代码效果-1"><a href="#代码效果-1" class="headerlink" title="代码效果"></a>代码效果</h4><img src="/xu-runbo/post/681c540e/image-20240103113015523.png" class="" title="image-20240103113015523"><h4 id="现在要把数据存到req里然后转发给jsp玩"><a href="#现在要把数据存到req里然后转发给jsp玩" class="headerlink" title="现在要把数据存到req里然后转发给jsp玩"></a>现在要把数据存到req里然后转发给jsp玩</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Brand List&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        table &#123;</span><br><span class="line">            border-collapse: collapse;</span><br><span class="line">            width: <span class="number">80</span>%;</span><br><span class="line">            margin: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th, td &#123;</span><br><span class="line">            border: 1px solid #dddddd;</span><br><span class="line">            text-align: left;</span><br><span class="line">            padding: 8px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        th &#123;</span><br><span class="line">            background-color: #f2f2f2;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;Brand List&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Company Name&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Ordered&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Description&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Status&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;状态&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">    &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;brand&quot;</span> items=<span class="string">&quot;$&#123;brands&#125;&quot;</span> varStatus=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;status.count&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;brand.rand_name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;brand.company_name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;brand.ordered&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;brand.description&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;brand.status&#125;&lt;/td&gt;</span><br><span class="line">            &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;brand.status==1&#125;&quot;</span>&gt;</span><br><span class="line">                &lt;td&gt;启用&lt;/td&gt;</span><br><span class="line">            &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;brand.status!=1&#125;&quot;</span>&gt;</span><br><span class="line">                &lt;td&gt; 禁用&lt;/td&gt;</span><br><span class="line">            &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;修改&lt;/a&gt; &lt;a href=<span class="string">&quot;#&quot;</span>&gt;删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="现在对应的web下的SelectAllservlet-java"><a href="#现在对应的web下的SelectAllservlet-java" class="headerlink" title="现在对应的web下的SelectAllservlet.java"></a>现在对应的web下的SelectAllservlet.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.hello.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.WebService;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/selectall&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectAllServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        BrandService brandService=<span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line">        List&lt;Brand&gt; brands=brandService.selectAll();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//存入req域</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;brands&quot;</span>,brands);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求转发给jsp</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/brand.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h4><p>没有加scope就报错！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Maven 的 <code>pom.xml</code> 文件中，<code>&lt;scope&gt;</code> 元素定义了依赖的范围，其中 <code>provided</code> 表示这个依赖在编译时和测试时需要，但在运行时由目标环境（例如Servlet容器，如Tomcat）提供。这通常用于Servlet API等在运行时由Servlet容器提供的库。</p><p>如果你不将 <code>&lt;scope&gt;provided&lt;/scope&gt;</code> 加入到 Servlet API 的依赖项中，当你部署到Servlet容器时，可能会发生以下两种情况之一：</p><ol><li><p><strong>版本冲突：</strong> 你的项目中包含了Servlet API，但是Servlet容器中也包含了它的版本。这可能导致版本冲突，因为在运行时，系统将使用Servlet容器提供的版本，而不是你的项目中的版本。这可能会导致不一致性和潜在的错误。</p></li><li><p><strong>类重复：</strong> 由于Servlet容器提供了相同的API，如果在项目中也包含了这些API，可能会导致类重复。这也可能导致不一致性和潜在的错误。</p></li></ol><p>因此，为了避免这些问题，推荐使用 <code>provided</code> 范围来声明Servlet API的依赖。这告诉Maven在编译和测试阶段使用指定版本的Servlet API，但在运行时依赖于Servlet容器提供的版本。这有助于确保在不同的环境中使用相同的Servlet API 版本，避免潜在的冲突和问题。</p><h5 id="如果mysql的字段和pojo实体类的属性冲突"><a href="#如果mysql的字段和pojo实体类的属性冲突" class="headerlink" title="如果mysql的字段和pojo实体类的属性冲突"></a>如果mysql的字段和pojo实体类的属性冲突</h5><p><a href="https://xu-runbo.gitee.io/xu-runbo/post/59a318a.html">mybatis简单入土 | cout&lt;&lt;”金缕衣”; (gitee.io)</a></p><img src="/xu-runbo/post/681c540e/image-20240103143504539.png" class="" title="image-20240103143504539"> <h4 id="代码效果-2"><a href="#代码效果-2" class="headerlink" title="代码效果"></a>代码效果</h4><img src="/xu-runbo/post/681c540e/image-20240103143921799.png" class=""> <h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><img src="/xu-runbo/post/681c540e/image-20240103144106731.png" class="" title="image-20240103144106731"> <img src="/xu-runbo/post/681c540e/image-20240103144312588.png" class="" title="image-20240103144312588"> <h4 id="pojo下的Brand类调整"><a href="#pojo下的Brand类调整" class="headerlink" title="pojo下的Brand类调整"></a>pojo下的Brand类调整</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐使用包装的类型，因为没有M默认值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer  id           ;</span><br><span class="line">    <span class="keyword">private</span> String  rand_name    ;</span><br><span class="line">    <span class="keyword">private</span> String  company_name ;</span><br><span class="line">    <span class="keyword">private</span> Integer ordered      ;</span><br><span class="line">    <span class="keyword">private</span> String  description  ;</span><br><span class="line">    <span class="comment">//0禁用，1正常</span></span><br><span class="line">    <span class="keyword">private</span> Integer   status       ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Brand</span><span class="params">(Integer id, String rand_name, String company_name, Integer ordered, String description, Integer status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.rand_name = rand_name;</span><br><span class="line">        <span class="built_in">this</span>.company_name = company_name;</span><br><span class="line">        <span class="built_in">this</span>.ordered = ordered;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Brand</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRand_name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rand_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRand_name</span><span class="params">(String rand_name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rand_name = rand_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCompany_name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> company_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany_name</span><span class="params">(String company_name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.company_name = company_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getOrdered</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ordered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrdered</span><span class="params">(Integer ordered)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ordered = ordered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Brand&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, rand_name=&#x27;&quot;</span> + rand_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, company_name=&#x27;&quot;</span> + company_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ordered=&quot;</span> + ordered +</span><br><span class="line">                <span class="string">&quot;, description=&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, status=&quot;</span> + status +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="编写add-jsp"><a href="#编写add-jsp" class="headerlink" title="编写add.jsp"></a>编写add.jsp</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Add Brand&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入Bootstrap样式文件，确保文件路径正确 --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            padding: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form &#123;</span><br><span class="line">            max-width: 400px;</span><br><span class="line">            margin: <span class="number">0</span> auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        label &#123;</span><br><span class="line">            margin-bottom: <span class="number">0.</span>5rem;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        textarea &#123;</span><br><span class="line">            resize: vertical;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;h2 class=<span class="string">&quot;mt-4&quot;</span>&gt;Add Brand&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;/anli_war/add&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;randName&quot;</span>&gt;Brand Name:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;randName&quot;</span> name=<span class="string">&quot;rand_name&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;companyName&quot;</span>&gt;Company Name:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;companyName&quot;</span> name=<span class="string">&quot;company_name&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;ordered&quot;</span>&gt;Ordered:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;number&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;ordered&quot;</span> name=<span class="string">&quot;ordered&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;description&quot;</span>&gt;Description:&lt;/label&gt;</span><br><span class="line">            &lt;textarea class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;description&quot;</span> name=<span class="string">&quot;description&quot;</span> rows=<span class="string">&quot;4&quot;</span> required&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;status&quot;</span>&gt;Status:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;number&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;status&quot;</span> name=<span class="string">&quot;status&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;btn btn-primary&quot;</span>&gt;Add Brand&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入Bootstrap的JavaScript文件，确保文件路径正确 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="给对应的BrandService添加方法和BrandMapper接口"><a href="#给对应的BrandService添加方法和BrandMapper接口" class="headerlink" title="给对应的BrandService添加方法和BrandMapper接口"></a>给对应的BrandService添加方法和BrandMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> &#123;</span><br><span class="line">    List&lt;Brand&gt; <span class="title function_">selectall</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tb_brand(rand_name,company_name,ordered,description,status) values(#&#123;rand_name&#125;,#&#123;company_name&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Brand brand)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.BrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.hello.utils.GetsqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory Factory=GetsqlSessionFactory.getsqlsessionfactory();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取sqlsession对象</span></span><br><span class="line">        SqlSession sqlsession=Factory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取mapper对象</span></span><br><span class="line">        BrandMapper brandMapper=sqlsession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行sql语句</span></span><br><span class="line">        List&lt;Brand&gt; brands=brandMapper.selectall();</span><br><span class="line">        sqlsession.close();</span><br><span class="line">        <span class="keyword">return</span> brands;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Brand brand)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SqlSession sqlsession=Factory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取mapper对象</span></span><br><span class="line">        BrandMapper brandMapper=sqlsession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        brandMapper.add(brand);</span><br><span class="line"></span><br><span class="line">        sqlsession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在典型的Java Web应用中，经常使用MVC（Model-View-Controller）架构来组织代码。下面我将解释 <code>service</code> 包下的 <code>BrandService</code>，以及 <code>web</code> 包下的 <code>AddServlet</code> 和 <code>SelectAllServlet</code>，并说明如何理解MVC。</p><h3 id="BrandService"><a href="#BrandService" class="headerlink" title="BrandService"></a><code>BrandService</code></h3><ul><li><code>BrandService</code> 通常属于<strong>服务层</strong>，负责处理业务逻辑。在这里，它可能与数据库进行交互，执行关于 <code>Brand</code> 对象的操作，例如添加、查询等。</li><li><code>BrandService</code> 可能包含一些业务方法，比如 <code>selectAll</code> 方法，用于从数据库中查询所有品牌信息。</li></ul><h3 id="AddServlet"><a href="#AddServlet" class="headerlink" title="AddServlet"></a><code>AddServlet</code></h3><ul><li><code>AddServlet</code> 是一个Servlet，属于<strong>控制器层</strong>。Servlet 接收来自客户端的请求，处理请求中的数据，然后调用服务层的业务方法执行相应的业务逻辑。</li><li>在 <code>doPost</code> 方法中，<code>AddServlet</code> 可能会解析提交的表单数据，创建 <code>Brand</code> 对象，然后调用 <code>BrandService</code> 完成品牌信息的添加。</li></ul><h3 id="SelectAllServlet"><a href="#SelectAllServlet" class="headerlink" title="SelectAllServlet"></a><code>SelectAllServlet</code></h3><ul><li><code>SelectAllServlet</code> 同样是一个Servlet，负责处理查询所有品牌的请求。</li><li>在 <code>doGet</code> 方法中，它可能调用 <code>BrandService</code> 的 <code>selectAll</code> 方法获取所有品牌信息，然后将这些信息传递给视图层进行展示。</li></ul><h3 id="MVC（Model-View-Controller）"><a href="#MVC（Model-View-Controller）" class="headerlink" title="MVC（Model-View-Controller）"></a>MVC（Model-View-Controller）</h3><ul><li><p><strong>Model（模型）：</strong> <code>BrandService</code> 中的业务逻辑部分负责处理数据，即模型。它封装了关于品牌的业务规则和数据操作。</p></li><li><p><strong>View（视图）：</strong> 视图通常是表示层（例如JSP页面），负责展示数据给用户。在这里，可能有一个用于显示品牌信息的 JSP 页面。</p></li><li><p><strong>Controller（控制器）：</strong> <code>AddServlet</code> 和 <code>SelectAllServlet</code> 是控制器的一部分。它们接受用户的输入（请求），处理输入，然后调用相应的服务（模型）来执行业务逻辑。控制器还负责将模型的结果传递给视图进行显示。</p></li></ul><p>通过这种方式，MVC 将应用程序分为三个主要的组件，每个组件都有不同的责任。这种模块化的设计有助于代码的可维护性和扩展性，同时也符合分层设计的思想。</p></blockquote><h4 id="编写对应addServlet"><a href="#编写对应addServlet" class="headerlink" title="编写对应addServlet"></a>编写对应addServlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.hello.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;获取所有参数的map集合&quot;</span>);</span><br><span class="line">        BrandService brandService=<span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line"></span><br><span class="line">        String randname=req.getParameter(<span class="string">&quot;rand_name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+randname);</span><br><span class="line">        String companyname=req.getParameter(<span class="string">&quot;company_name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+companyname);</span><br><span class="line">        <span class="type">int</span> ordered= Integer.parseInt(req.getParameter(<span class="string">&quot;ordered&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+ordered);</span><br><span class="line">        String desc=req.getParameter(<span class="string">&quot;description&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+desc);</span><br><span class="line">        <span class="type">int</span> status= Integer.parseInt(req.getParameter(<span class="string">&quot;status&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Brand brand=<span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">        brand.setRand_name(randname);</span><br><span class="line">        brand.setCompany_name(companyname);</span><br><span class="line">        brand.setOrdered(ordered);</span><br><span class="line">        brand.setDescription(desc);</span><br><span class="line">        brand.setStatus(status);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(brand);</span><br><span class="line">        brandService.add(brand);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/selectall&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post....&quot;</span>);</span><br><span class="line">        doGet(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><img src="/xu-runbo/post/681c540e/PixPin01-03_16-37-20.gif" class="" title="PixPin01-03_16-37-20"><h4 id="如何理解Service和Servlet呢"><a href="#如何理解Service和Servlet呢" class="headerlink" title="如何理解Service和Servlet呢"></a>如何理解Service和Servlet呢</h4><p>你的比喻是相当贴切的，让我们进一步解释：</p><ol><li><p><strong>Service（服务层）：</strong></p><ul><li><strong>角色比喻：</strong> 服务员</li><li><strong>责任：</strong> 负责提供服务，执行业务逻辑，处理数据的增、删、改、查等操作。服务层类似于餐厅中的服务员，负责为顾客提供所需的服务，但并不直接涉及菜肴的制作。</li><li><strong>关联代码：</strong> <code>BrandService</code> 负责处理品牌相关的业务逻辑，例如从数据库中查询品牌信息、添加新品牌等。</li></ul></li><li><p><strong>Servlet（控制器层）：</strong></p><ul><li><strong>角色比喻：</strong> 处理数据的封装和数据库的更改，类似于厨房中的厨师。</li><li><strong>责任：</strong> 接收来自用户的请求，处理请求中的数据，协调服务层执行相应的业务逻辑。Servlet 类似于餐厅中的厨师，接受服务员传递过来的菜单（用户请求），准备菜肴（处理数据）并最终提供给服务员（返回响应给用户）。</li><li><strong>关联代码：</strong> <code>AddServlet</code> 处理添加品牌的请求，而 <code>SelectAllServlet</code> 处理查询所有品牌的请求。</li></ul></li></ol><p>通过这个比喻，服务层（服务员）专注于业务逻辑和数据处理，而控制器层（厨师）负责接收请求、处理数据，然后协调服务层执行相应的业务操作。这种分工协作的设计有助于代码的清晰性和可维护性。</p><p>Jsp就是展现层了</p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><img src="/xu-runbo/post/681c540e/image-20240103164425382.png" class="" title="image-20240103164425382"> <h5 id="修改Brand-Mapper-xml"><a href="#修改Brand-Mapper-xml" class="headerlink" title="修改Brand Mapper.xml"></a>修改Brand Mapper.xml</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update tb_brand set rand_name=#&#123;rand_name&#125;,company_name=#&#123;company_name&#125;,ordered=#&#123;ordered&#125;,description=#&#123;description&#125;,status=#&#123;status&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure><h5 id="BrandService-1"><a href="#BrandService-1" class="headerlink" title="BrandService"></a>BrandService</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Brand <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">&#123;</span><br><span class="line">    SqlSession sqlsession=Factory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取mapper对象</span></span><br><span class="line">    BrandMapper brandMapper=sqlsession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    Brand brand=brandMapper.selectById(id);</span><br><span class="line">    sqlsession.close();</span><br><span class="line">    <span class="keyword">return</span> brand;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="selectByIdservlet"><a href="#selectByIdservlet" class="headerlink" title="selectByIdservlet"></a>selectByIdservlet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.hello.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/selectById&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectByIdServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BrandService brandService=<span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接受id</span></span><br><span class="line">        <span class="type">int</span> id= Integer.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Brand brand=brandService.selectById(id);</span><br><span class="line"></span><br><span class="line">        req.setAttribute(<span class="string">&quot;brand&quot;</span>,brand);</span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/update.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="update-jsp"><a href="#update-jsp" class="headerlink" title="update.jsp"></a>update.jsp</h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Add Brand&lt;/title&gt;</span><br><span class="line">    &lt;!-- 引入Bootstrap样式文件，确保文件路径正确 --&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css&quot;</span>&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            padding: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form &#123;</span><br><span class="line">            max-width: 400px;</span><br><span class="line">            margin: <span class="number">0</span> auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        label &#123;</span><br><span class="line">            margin-bottom: <span class="number">0.</span>5rem;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        textarea &#123;</span><br><span class="line">            resize: vertical;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;h2 class=<span class="string">&quot;mt-4&quot;</span>&gt;Add Brand&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action=<span class="string">&quot;/anli_war/update&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;%--        隐藏域--%&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;$&#123;brand.id&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;randName&quot;</span>&gt;Brand Name:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;randName&quot;</span> name=<span class="string">&quot;rand_name&quot;</span> required value=<span class="string">&quot;$&#123;brand.rand_name&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;companyName&quot;</span>&gt;Company Name:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;companyName&quot;</span> name=<span class="string">&quot;company_name&quot;</span> required value=<span class="string">&quot;$&#123;brand.company_name&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;ordered&quot;</span>&gt;Ordered:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;number&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;ordered&quot;</span> name=<span class="string">&quot;ordered&quot;</span> required value=<span class="string">&quot;$&#123;brand.ordered&#125;&quot;</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;description&quot;</span>&gt;Description:&lt;/label&gt;</span><br><span class="line">            &lt;textarea class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;description&quot;</span> name=<span class="string">&quot;description&quot;</span> rows=<span class="string">&quot;4&quot;</span> required&gt;</span><br><span class="line">                $&#123;brand.description&#125;</span><br><span class="line">            &lt;/textarea&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">            &lt;label <span class="keyword">for</span>=<span class="string">&quot;status&quot;</span>&gt;Status:&lt;/label&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;number&quot;</span> class=<span class="string">&quot;form-control&quot;</span> id=<span class="string">&quot;status&quot;</span> name=<span class="string">&quot;status&quot;</span> required&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button type=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;btn btn-primary&quot;</span>&gt;Add Brand&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 引入Bootstrap的JavaScript文件，确保文件路径正确 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.2.1.slim.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><img src="/xu-runbo/post/681c540e/image-20240103172427715.png" class="" title="image-20240103172427715"> <h5 id="修改BrandMapper"><a href="#修改BrandMapper" class="headerlink" title="修改BrandMapper"></a>修改BrandMapper</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update tb_brand set rand_name=#&#123;rand_name&#125;,company_name=#&#123;company_name&#125;,ordered=#&#123;ordered&#125;,description=#&#123;description&#125;,status=#&#123;status&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure><h5 id="BrandService-2"><a href="#BrandService-2" class="headerlink" title="BrandService"></a>BrandService</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Brand brand)</span></span><br><span class="line">&#123;</span><br><span class="line">    SqlSession sqlsession=Factory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取mapper对象</span></span><br><span class="line">    BrandMapper brandMapper=sqlsession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    brandMapper.update(brand);</span><br><span class="line"></span><br><span class="line">    sqlsession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="updateServlet"><a href="#updateServlet" class="headerlink" title="updateServlet"></a>updateServlet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.hello.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BrandService brandService=<span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取所有参数的map集合&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> id= Integer.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        String randname=req.getParameter(<span class="string">&quot;rand_name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+randname);</span><br><span class="line">        String companyname=req.getParameter(<span class="string">&quot;company_name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+companyname);</span><br><span class="line">        <span class="type">int</span> ordered= Integer.parseInt(req.getParameter(<span class="string">&quot;ordered&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+ordered);</span><br><span class="line">        String desc=req.getParameter(<span class="string">&quot;description&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+desc);</span><br><span class="line">        <span class="type">int</span> status= Integer.parseInt(req.getParameter(<span class="string">&quot;status&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Brand brand=<span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">        brand.setId(id);</span><br><span class="line">        brand.setRand_name(randname);</span><br><span class="line">        brand.setCompany_name(companyname);</span><br><span class="line">        brand.setOrdered(ordered);</span><br><span class="line">        brand.setDescription(desc);</span><br><span class="line">        brand.setStatus(status);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(brand);</span><br><span class="line"></span><br><span class="line">        brandService.update(brand);</span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/selectall&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> com.hello.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> com.hello.service.BrandService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpdateServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BrandService brandService=<span class="keyword">new</span> <span class="title class_">BrandService</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取所有参数的map集合&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> id= Integer.parseInt(req.getParameter(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        String randname=req.getParameter(<span class="string">&quot;rand_name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+randname);</span><br><span class="line">        String companyname=req.getParameter(<span class="string">&quot;company_name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+companyname);</span><br><span class="line">        <span class="type">int</span> ordered= Integer.parseInt(req.getParameter(<span class="string">&quot;ordered&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+ordered);</span><br><span class="line">        String desc=req.getParameter(<span class="string">&quot;description&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户输入的&quot;</span>+desc);</span><br><span class="line">        <span class="type">int</span> status= Integer.parseInt(req.getParameter(<span class="string">&quot;status&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Brand brand=<span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">        brand.setId(id);</span><br><span class="line">        brand.setRand_name(randname);</span><br><span class="line">        brand.setCompany_name(companyname);</span><br><span class="line">        brand.setOrdered(ordered);</span><br><span class="line">        brand.setDescription(desc);</span><br><span class="line">        brand.setStatus(status);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(brand);</span><br><span class="line"></span><br><span class="line">        brandService.update(brand);</span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/selectall&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="最终功能演示"><a href="#最终功能演示" class="headerlink" title="最终功能演示"></a>最终功能演示</h5><img src="/xu-runbo/post/681c540e/PixPin01-03_17-48-17.gif" class="" title="PixPin01-03_17-48-17">]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继Servlet的Request请求和Response响应</title>
      <link href="/xu-runbo/post/e770816f.html"/>
      <url>/xu-runbo/post/e770816f.html</url>
      
        <content type="html"><![CDATA[<h1 id="继Servlet的Request请求和Response响应"><a href="#继Servlet的Request请求和Response响应" class="headerlink" title="继Servlet的Request请求和Response响应"></a>继Servlet的Request请求和Response响应</h1><h2 id="Request请求和Response响应"><a href="#Request请求和Response响应" class="headerlink" title="Request请求和Response响应"></a>Request请求和Response响应</h2><h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>用户，请求，service（服务对象），响应他们之间的关系：</p><p><code>service(request,response);</code></p><p>request:获取数据</p><p>response：响应数据</p><blockquote><ol><li><p><strong>用户：</strong> 你是顾客，坐在餐厅里，想要点一份菜单上的食物。</p></li><li><p><strong>请求（Request）：</strong> 你把点菜单上的食物要求告诉了服务员，这就是你的请求。请求包含了你想要的信息，比如你想点的菜品和可能的特殊要求。</p></li><li><p><strong>服务对象（服务员）：</strong> 服务对象就像是服务员，接收到你的请求后，它负责<strong>将请求传达给厨房（服务器）</strong>并协调整个点餐过程。服务对象<strong>可以检查你的请求，确保它符合规范，并处理与点餐相关的事务</strong>，比如确认菜品是否可用，检查有无特殊要求。</p></li><li><p><strong>服务器（厨房）：</strong> 服务器就像是厨房，它接收到服务对象传来的请求，开始准备食物。<strong>服务器执行一些操作，可能需要从数据库（食材库存）中检索信息</strong>，处理一些逻辑（烹饪过程），最终生成一个菜品（响应）。</p></li><li><p><strong>响应（食物）：</strong> 响应就像是你点的菜品，是服务器对你请求的回应。响应包含了你点的菜品，可能有一些额外的信息，比如是否有特殊处理或是否有菜品不可用等。</p></li></ol><p>整个过程可以概括为：用户提出请求（点菜），<strong>服务对象接收请求并协调整个过程</strong>，服务器处理请求并生成响应（准备食物），最终用户得到了他们想要的东西（享受美食）。</p></blockquote><h2 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h2><h3 id="Request继承体系"><a href="#Request继承体系" class="headerlink" title="Request继承体系"></a>Request继承体系</h3><img src="/xu-runbo/post/e770816f/image-20231231170228526.png" class="" title="image-20231231170228526"> <img src="/xu-runbo/post/e770816f/image-20231231170346771.png" class="" title="image-20231231170346771"><p><strong>tomcat解析请求数据，封装为request对象，并且创建request对象传递到service方法中</strong> </p><p>使用request对象就是看HttpservletRequest接口的…</p><h3 id="Request获取请求数据"><a href="#Request获取请求数据" class="headerlink" title="Request获取请求数据"></a>Request获取请求数据</h3><h4 id="Request获取请求数据的方法"><a href="#Request获取请求数据的方法" class="headerlink" title="Request获取请求数据的方法"></a>Request获取请求数据的方法</h4><h5 id="请求行："><a href="#请求行：" class="headerlink" title="请求行："></a>请求行：</h5><img src="/xu-runbo/post/e770816f/image-20231231171011004.png" class="" title="image-20231231171011004"> <img src="/xu-runbo/post/e770816f/image-20231231170905314.png" class="" title="image-20231231170905314"> <p>代码演示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlethttp</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求方式是&quot;</span>+req.getMethod());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;项目访问路径是&quot;</span>+req.getContextPath());</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="string">&quot;项目url是&quot;</span>+req.getRequestURL().toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;项目的uri是&quot;</span>+req.getRequestURI());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;项目的请求参数是&quot;</span>+req.getQueryString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:9527/untitled19_war/demo4">localhost:9527&#x2F;untitled19_war&#x2F;demo4</a></p><p>和<a href="http://localhost:9527/untitled19_war/demo4?name=sda">localhost:9527&#x2F;untitled19_war&#x2F;demo4</a></p><img src="/xu-runbo/post/e770816f/image-20231231171413132.png" class="" title="image-20231231171413132"> <p>多个参数</p><p><a href="http://localhost:9527/untitled19_war/demo4?name=sda&age=20&sex=%E7%94%B7">localhost:9527&#x2F;untitled19_war&#x2F;demo4?name&#x3D;sda&amp;age&#x3D;20&amp;sex&#x3D;男</a></p><img src="/xu-runbo/post/e770816f/image-20231231171639238.png" class="" title="image-20231231171639238">  <h5 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h5><p><code>String getHeader(String name);</code></p><p>根据请求头名称获取值！</p><p>代码演示:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;浏览器的版本是？&quot;</span>+req.getHeader(<span class="string">&quot;user-agent&quot;</span>));</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/e770816f/image-20231231172658921.png" class="" title="image-20231231172658921"> <h5 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h5><p><strong><code>ServletInputStream getInputStream()</code>：</strong>获取字节输入流</p><p><strong><code>BufferedReader getReader()</code>：</strong>获取字符输入流 </p><blockquote><p>这两个方法都是用于获取HTTP请求的请求体（body）中的数据，但它们<strong>提供不同类型的输入流</strong></p><p>一个是字节输入流,另一个是字符输入流。</p><ol><li><p><strong><code>ServletInputStream getInputStream()</code>：</strong></p><ul><li>这个方法返回一个<code>ServletInputStream</code>对象，它是<strong>字节输入流</strong>。你可以使用这个流来读取HTTP请求体中的原始字节数据。</li><li>通常，在处理<strong>二进制数据</strong>或<strong>文件上传</strong>等场景时，使用这个方法可以<strong>更直接地获取请求体的原始字节数据</strong>。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ServletInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line"><span class="comment">// 使用 inputStream 读取字节数据</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>BufferedReader getReader()</code>：</strong></p><ul><li>这个方法返回一个<code>BufferedReader</code>对象，它是<strong>字符输入流</strong>。你可以使用这个流来读取HTTP请求体中的字符数据。</li><li>当请求体中<strong>包含文本数据（比如表单数据或JSON数据）时</strong>，使用这个方法可以方便地以字符形式读取数据。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> request.getReader();</span><br><span class="line"><span class="comment">// 使用 reader 读取字符数据</span></span><br></pre></td></tr></table></figure></li></ol><p>选择使用哪个方法取决于请求体中的数据类型和你处理数据的方式。如果你处理的是二进制数据，比如文件上传，通常会使用<code>getInputStream()</code>。如果处理的是文本数据，可能会更方便地使用<code>getReader()</code>。</p><p>需要注意的是，一旦你使用了其中一个方法，就不能再使用另一个方法，因为这两个方法都会读取请求体的数据流，而HTTP<strong>请求的主体数据只能被读取一次</strong>。</p></blockquote><p>form的数据其实就是uri？</p><p>表单数据将被提交到的完整 URI 是由<strong>你的 Web 应用的基本 URL</strong> 和 <strong><code>action</code> 属性的值 (</strong>“&#x2F;untitled19_war&#x2F;demo4”) 拼接而成的。</p><p>代码演示：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/untitled19_war/demo4&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;passwd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;......post&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;只有post有请求体下面是请求体----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(&quot;请求体的字节输入流&quot;+req.getInputStream().toString());</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;请求体的字节输入流&quot;+req.getReader().toString());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;读取数据&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请求体的字符输入流&quot;</span>+req.getReader().readLine());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>访问</p><img src="/xu-runbo/post/e770816f/image-20231231173915698.png" class="" title="image-20231231173915698"> <p>提交到了demo4 </p><img src="/xu-runbo/post/e770816f/image-20231231173924508.png" class="" title="image-20231231173924508"> <p>代码效果</p> <img src="/xu-runbo/post/e770816f/image-20231231173958020.png" class="" title="image-20231231173958020"> <blockquote><p><strong>当在同一个servlet请求生命周期内两次调用<code>HttpServletRequest</code>对象的<code>getInputStream()</code>和<code>getReader()</code>方法时，就会出现”getInputStream() has already been called for this request”的错误。这是因为Servlet容器只允许读取请求体一次。</strong></p></blockquote><h4 id="Request通用方式获取请求参数"><a href="#Request通用方式获取请求参数" class="headerlink" title="Request通用方式获取请求参数"></a>Request通用方式获取请求参数</h4><p>GET请求方式和POST请求方式区别主要在于获取请求参数的方式不一样，是否可以提供一种统一获取请求参数的方式，从而统一doGet和doPost方法内的代码？</p><img src="/xu-runbo/post/e770816f/image-20240101105204966.png" class="" title="image-20240101105204966"> <img src="/xu-runbo/post/e770816f/image-20240101105610484.png" class="" title="image-20240101105610484"><img src="/xu-runbo/post/e770816f/image-20240101112021506.png" class="" title="image-20240101112021506">  <h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><blockquote><ol><li><p><strong>概念：</strong></p><ul><li><code>Map</code>是Java集合框架中的一种数据结构，用于存储键值对。每个键都映射到一个值。</li><li><code>Map</code>接口的常见实现包括<code>HashMap</code>，<code>TreeMap</code>，<code>LinkedHashMap</code>等。</li></ul></li><li><p><strong>基本操作：</strong></p><ul><li><strong>插入键值对：</strong> 使用<code>put(key, value)</code>方法将键值对插入到<code>Map</code>中。</li><li><strong>获取值：</strong> 使用<code>get(key)</code>方法通过键获取对应的值。</li><li><strong>删除键值对：</strong> 使用<code>remove(key)</code>方法删除指 定键的映射。</li><li><strong>判断键是否存在：</strong> 使用<code>containsKey(key)</code>方法判断<code>Map</code>中是否包含指定的键。</li></ul></li><li><p><strong>遍历：</strong></p><ul><li><strong>遍历键集：</strong> 使用<code>keySet()</code>方法获取键的集合，然后可以使用增强型for循环遍历键。</li><li><strong>遍历值集：</strong> 使用<code>values()</code>方法获取值的集合，然后可以使用增强型for循环遍历值。</li><li><strong>遍历键值对：</strong> 使用<code>entrySet()</code>方法获取键值对的集合，然后可以使用增强型for循环遍历<code>Map.Entry</code>对象。</li></ul></li><li><p><strong>实现类：</strong></p><ul><li><code>HashMap</code>：基于哈希表实现，提供快速的插入和查找操作，不保证有序性。</li><li><code>TreeMap</code>：基于红黑树实现，键值对按照键的自然顺序或自定义顺序进行排序。</li><li><code>LinkedHashMap</code>：继承自<code>HashMap</code>，但保留了插入元素的顺序。</li></ul></li><li><p><strong>注意事项：</strong></p><ul><li>键必须是唯一的，但值可以重复。</li><li><code>null</code>可以作为键，但在一般情况下应该避免使用<code>null</code>作为键，因为它可能导致不可预测的行为。</li></ul></li><li><p><strong>性能：</strong></p><ul><li><code>HashMap</code>通常提供了很好的性能，但在某些情况下，<code>TreeMap</code>可能更适合，具体取决于你的需求。</li></ul></li></ol></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/untitled19_war/demo5&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pssword&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>游泳</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>爬山<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlethttp1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;get....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取所有参数的map集合&quot;</span>);</span><br><span class="line">        Map&lt;String,String[]&gt; map=req.getParameterMap();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历map&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String key:map.keySet())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;key:&quot;</span>+key+<span class="string">&quot; value:&quot;</span>);</span><br><span class="line"></span><br><span class="line">            String[] str=map.get(key);</span><br><span class="line">            <span class="keyword">for</span>(String i:str)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;获取对应的数组&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] strarray=req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String i :strarray)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;获取对应的值&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String res= req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;这个时候url是能看到我们提交的密码的&#x3D;&#x3D;</p><p><a href="http://localhost:9527/untitled19_war/demo5?username=xrv&pssword=dsadas&hobby=1&hobby=1">localhost:9527&#x2F;untitled19_war&#x2F;demo5?username&#x3D;xrv&amp;pssword&#x3D;dsadas&amp;hobby&#x3D;1&amp;hobby&#x3D;1</a></p><img src="/xu-runbo/post/e770816f/image-20240101112250162.png" class="" title="image-20240101112250162"> <h5 id="post请求的时候只需要："><a href="#post请求的时候只需要：" class="headerlink" title="post请求的时候只需要："></a>post请求的时候只需要：</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/untitled19_war/demo5&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pssword&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>游泳</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>爬山<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 测试代码</p><p>这次提交后就不再在url那显示我们提交的数据了</p><p><a href="http://localhost:9527/untitled19_war/demo5">localhost:9527&#x2F;untitled19_war&#x2F;demo5</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlethttp1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;post....&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取所有参数的map集合&quot;</span>);</span><br><span class="line">        Map&lt;String,String[]&gt; map=req.getParameterMap();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;遍历map&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String key:map.keySet())</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;key:&quot;</span>+key+<span class="string">&quot; value:&quot;</span>);</span><br><span class="line"></span><br><span class="line">            String[] str=map.get(key);</span><br><span class="line">            <span class="keyword">for</span>(String i:str)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;获取对应的数组&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] strarray=req.getParameterValues(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String i :strarray)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;获取对应的值&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String res= req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后，可以看出这几个方法是通用的！</p><p>走post就去调用doget就ok了 </p><p>最常用的就是getparameter获取单个键值</p><h5 id="IDEA创建Request通用方式"><a href="#IDEA创建Request通用方式" class="headerlink" title="IDEA创建Request通用方式"></a>IDEA创建Request通用方式</h5><p>新版本除了自己创建模板</p><p>自己手动添加把</p><img src="/xu-runbo/post/e770816f/image-20240101113509792.png" class="" title="image-20240101113509792"> <h5 id="post请参数中文乱码处理"><a href="#post请参数中文乱码处理" class="headerlink" title="post请参数中文乱码处理"></a>post请参数中文乱码处理</h5><p>get</p><p>当传入中文的时候</p><p><a href="http://localhost:9527/untitled19_war/demo5?username=%E8%AE%B8%E9%97%B0%E5%8D%9A&pssword=dsadas&hobby=1&hobby=1">localhost:9527&#x2F;untitled19_war&#x2F;demo5?username&#x3D;许闰博&amp;pssword&#x3D;dsadas&amp;hobby&#x3D;1&amp;hobby&#x3D;1</a></p><img src="/xu-runbo/post/e770816f/image-20240101114424809.png" class="" title="image-20240101114424809"> <p>post</p><p>当传入中文的时候</p><p><a href="http://localhost:9527/untitled19_war/demo5">localhost:9527&#x2F;untitled19_war&#x2F;demo5</a> </p><img src="/xu-runbo/post/e770816f/image-20240101114413809.png" class="" title="image-20240101114413809"> <blockquote><p>在处理 POST 请求时，如果传入的中文出现乱码，可能是由于编码格式不匹配导致的。常见的编码格式有UTF-8、GBK、ISO-8859-1等。如果你将编码修改为UTF-8后问题得以解决，说明原始的编码格式可能不是UTF-8。</p><p>在处理 POST 请求时，服务器端需要对请求中的数据进行解码。常见的解码方式有：</p><ol><li><p><strong>ISO-8859-1（Latin-1）</strong>：这是 HTTP&#x2F;1.1 规范中默认的字符编码，如果未指定字符编码，通常会默认使用ISO-8859-1。但是对于包含中文等非拉丁字符的文本，使用ISO-8859-1可能导致乱码。</p></li><li><p><strong>UTF-8</strong>：这是一种广泛使用的字符编码，支持多种语言，包括中文。如果 POST 请求中包含中文，通常建议使用UTF-8编码。</p></li></ol><p>在修改编码为UTF-8后，服务器端应该使用UTF-8来解码请求中的数据。在Java中，可以使用以下方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><p>上述代码中，通过<code>InputStreamReader</code>指定了UTF-8编码进行解码。这确保了在读取 POST 请求的输入流时，中文等字符能够正确地被解析。</p></blockquote><img src="/xu-runbo/post/e770816f/image-20240101114840474.png" class="" title="image-20240101114840474"> <h5 id="低版本get也会有乱码的问题"><a href="#低版本get也会有乱码的问题" class="headerlink" title="低版本get也会有乱码的问题"></a>低版本get也会有乱码的问题</h5><p>原因是：tomcat的解码方式和浏览器编码的方式不一致</p><blockquote><p>有些特殊的汉字可能会占用4个字节。UTF-8使用变长编码，不同的字符占用不同数量的字节，ASCII字符占用1个字节，拉丁字符占用2个字节，而汉字通常占用3个字节。Unicode编码规范定义了各种字符的编码方式，UTF-8是其中一种实现。</p></blockquote><img src="/xu-runbo/post/e770816f/image-20240101115602961.png" class="" title="image-20240101115602961"> <img src="/xu-runbo/post/e770816f/image-20240101120534411.png" class="" title="image-20240101120534411"> <img src="/xu-runbo/post/e770816f/image-20240101115552893.png" class="" title="image-20240101115552893"> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        String username=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">        String res= URLEncoder.encode(username,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;编码后的&quot;</span>+res);</span><br><span class="line"><span class="comment">//        编码后的%E5%BC%A0%E4%B8%89</span></span><br><span class="line">         String res1= URLEncoder.decode(res,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//还原回来了！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>演示了<strong>对字符串进行URL编码（percent encoding）的过程</strong>。URL编码是一种将<strong>URL中的特殊字符转换为%后跟两位十六进制数</strong>的过程。这样可以确保在URL中传递参数时不会出现歧义或错误。</p></blockquote><img src="/xu-runbo/post/e770816f/image-20240102084545531.png" class="" title="image-20240102084545531"><p>解决方法：</p><img src="/xu-runbo/post/e770816f/image-20240102085341480.png" class="" title="image-20240102085341480"><blockquote><p>post设置流的编码就ok了</p><p>get乱码稍微麻烦一点，但是tomcat8+就不会乱码了&#x2F;</p><img src="/xu-runbo/post/e770816f/image-20240102085804018.png" class="" title="image-20240102085804018"> </blockquote><h4 id="Request请求转发"><a href="#Request请求转发" class="headerlink" title="Request请求转发"></a>Request请求转发</h4><p>请求转发：在服务器内部资源跳转的跳转方式</p><img src="/xu-runbo/post/e770816f/image-20240102085948800.png" class="" title="image-20240102085948800"><p>资源A和B是共享的！</p><img src="/xu-runbo/post/e770816f/image-20240102090428789.png" class="" title="image-20240102090428789"> <p>代码演示:</p><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/d1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlethttp2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setAttribute(<span class="string">&quot;temp&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;xrb&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;哦哦哦d1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//转发给d2处理，共享资源</span></span><br><span class="line"></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/d2&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/d2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlethttp3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;哦哦哦d2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String newstr= (String) req.getAttribute(<span class="string">&quot;temp&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;拿到传递的数据是&quot;</span>+newstr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:9527/untitled19_war/d1">localhost:9527&#x2F;untitled19_war&#x2F;d1</a></p><p>输出</p><img src="/xu-runbo/post/e770816f/image-20240102091052057.png" class="" title="image-20240102091052057"> </blockquote><hr><p>注意:</p><blockquote><p>请求转发特点：</p><ul><li><pre><code>浏览器地址栏路径不发生变化(用户还以为是d1在处理。。。)</code></pre></li><li><p>只能转发到当前服务器的内部资源</p></li><li><p>一次请求,可以在转发的资源间使用request共享数据</p></li></ul></blockquote><h2 id="Respose"><a href="#Respose" class="headerlink" title="Respose"></a>Respose</h2><img src="/xu-runbo/post/e770816f/image-20240102091512131.png" class="" title="image-20240102091512131"> <h3 id="Response设置响应数据功能"><a href="#Response设置响应数据功能" class="headerlink" title="Response设置响应数据功能"></a>Response设置响应数据功能</h3><h4 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h4><img src="/xu-runbo/post/e770816f/image-20240102091923588.png" class="" title="image-20240102091923588"> <h3 id="Response完成重定向"><a href="#Response完成重定向" class="headerlink" title="Response完成重定向"></a>Response完成重定向</h3><img src="/xu-runbo/post/e770816f/image-20240102092209051.png" class="" title="image-20240102092209051"> <blockquote><p>代码演示:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">response</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我处理不了，我给resp2处理&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应状态</span></span><br><span class="line">        resp.setStatus(<span class="number">302</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应头</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/untitled19_war/resp2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">response1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;resp2正在处理！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:9527/untitled19_war/resp1">http://localhost:9527/untitled19_war/resp1</a></p><p>效果:</p><img src="/xu-runbo/post/e770816f/image-20240102093513387.png" class="" title="image-20240102093513387"> <p>而且跳转到<a href="http://localhost:9527/untitled19_war/resp2">localhost:9527&#x2F;untitled19_war&#x2F;resp2</a></p></blockquote><p>注意重定向location的时候，要跟上虚拟路径！</p><img src="/xu-runbo/post/e770816f/image-20240102093555022.png" class="" title="image-20240102093555022"> <hr><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置响应状态</span></span><br><span class="line">resp.setStatus(<span class="number">302</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置响应头</span></span><br><span class="line">resp.setHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;/untitled19_war/resp2&quot;</span>);</span><br></pre></td></tr></table></figure><p>取而代之的是</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.sendRedirect(<span class="string">&quot;/untitled19_war/resp2&quot;</span>);</span><br></pre></td></tr></table></figure><p>一样的效果</p></blockquote><h3 id="重定向和请求转发的区别"><a href="#重定向和请求转发的区别" class="headerlink" title="重定向和请求转发的区别"></a>重定向和请求转发的区别</h3><img src="/xu-runbo/post/e770816f/image-20240102094131377.png" class="" title="image-20240102094131377"> <h3 id="资源路径的问题"><a href="#资源路径的问题" class="headerlink" title="&#x3D;&#x3D;资源路径的问题&#x3D;&#x3D;"></a>&#x3D;&#x3D;资源路径的问题&#x3D;&#x3D;</h3><p>问题导入：</p><p>请求转发的时候我们没用写虚拟路径只是简单的<code>&quot;/d2&quot;</code></p><p>重定向的时候我们用了虚拟路径 <code>/undefined_war/d2</code></p><p>所以什么时候该用哪一个??&#x2F;</p><hr><blockquote><p>金言玉律</p><p>浏览器使用：<strong>虚拟路径</strong></p><p>服务器内部使用：<strong>普通路径</strong></p></blockquote><hr><p>小test：</p><img src="/xu-runbo/post/e770816f/image-20240102094753871.png" class="" title="image-20240102094753871">  <p>如果要写虚拟路径：</p><p>如果用的maven tomcat插件，可以修改虚拟路径</p><p>如何动态的获取虚拟路径呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String path=req.getContextPath();</span><br><span class="line">resp.getWriter().println(path);</span><br></pre></td></tr></table></figure><p>测试效果</p><img src="/xu-runbo/post/e770816f/image-20240102095136699.png" class="" title="image-20240102095136699"> <h3 id="Response响应字符数据"><a href="#Response响应字符数据" class="headerlink" title="Response响应字符数据"></a>Response响应字符数据</h3><p><code>resp.getWriter()</code></p><img src="/xu-runbo/post/e770816f/image-20240102095328889.png" class="" title="image-20240102095328889"> <img src="/xu-runbo/post/e770816f/image-20240102101124341.png" class="" title="image-20240102101124341"> <p>但是现在浏览器默认是不解析我们的html标签了</p><img src="/xu-runbo/post/e770816f/image-20240102101505322.png" class="" title="image-20240102101505322"> <p>设置:先设置后获取字符输出流对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setHeader(<span class="string">&quot;content-type&quot;</span>,<span class="string">&quot;text/html&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/e770816f/image-20240102101645083.png" class="" title="image-20240102101645083"> <h4 id="传入中文是什么情况呢？"><a href="#传入中文是什么情况呢？" class="headerlink" title="传入中文是什么情况呢？"></a>传入中文是什么情况呢？</h4><blockquote><p>默认响应头</p><p><code>Content-Type</code> 表示响应主体的媒体类型以及字符集（如果有的话）。在这里，<code>Content-Type: text/html;charset=ISO-8859-1</code> 意味着响应的主体类型是 HTML，并且使用的字符集是 ISO-8859-1。</p><p>ISO-8859-1（也称为 Latin-1）是一个字符集，涵盖了西欧语言，包括英语、法语、德语等。这个字符集是单字节的，每个字符占用一个字节。在这个字符集中，每个字节对应一个字符。</p><p><strong>对于 HTML 文档，通常建议使用 UTF-8 字符集，因为它支持更广泛的字符，适用于多种语言。</strong>推荐使用如下的 <code>Content-Type</code> 设置：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Content-Type: text/html;charset=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure><p>这将使用 UTF-8 字符集来编码 HTML 文档，以便更好地支持国际化。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>); </span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/e770816f/image-20240102102235069.png" class="" title="image-20240102102235069"> 、</blockquote><h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><blockquote><img src="/xu-runbo/post/e770816f/image-20240102102538241.png" class="" title="image-20240102102538241"> </blockquote><h3 id="Response-响应字节数据"><a href="#Response-响应字节数据" class="headerlink" title="Response 响应字节数据"></a>Response 响应字节数据</h3><p><code>        //获取字节输出流         ServletOutputStream os=resp.getOutputStream();</code></p><p>代码演示</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">response</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我处理不了，我给resp2处理&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;/untitled19_war/resp3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/resp3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">response2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        FileInputStream fileInputStream=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D://pixpinGif//PixPin_2023-12-13_21-48-23.gif&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取字节输出流</span></span><br><span class="line">        ServletOutputStream os=resp.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成流的copy</span></span><br><span class="line">        <span class="type">byte</span>[] byrray=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((len=fileInputStream.read(byrray))!=-<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            os.write(byrray,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fileInputStream.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码效果</p><p>访问<a href="http://localhost:9527/untitled19_war/resp1">http://localhost:9527/untitled19_war/resp1</a></p><img src="/xu-runbo/post/e770816f/image-20240102103720525.png" class="" title="image-20240102103720525"> <h4 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h4><p>对于代码的解释</p><blockquote><p>这段代码是用于读取一个GIF文件并将其写入 Servlet 的响应输出流中，以便将文件内容发送到客户端。</p><ol><li><p><strong>路径转义问题：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D://pixpinGif//PixPin_2023-12-13_21-48-23.gif&quot;</span>);</span><br></pre></td></tr></table></figure><p>在Java中，反斜杠（<code>\</code>）是一个转义字符，因此在字符串中表示一个反斜杠需要使用两个反斜杠，或者直接使用正斜杠。因此，上述路径可以写成：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/pixpinGif/PixPin_2023-12-13_21-48-23.gif&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>IO输入流和输出流的理解：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/pixpinGif/PixPin_2023-12-13_21-48-23.gif&quot;</span>);</span><br><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> resp.getOutputStream();</span><br></pre></td></tr></table></figure><ul><li><code>FileInputStream</code> 是用于<strong>从文件中读取字节的输入流。</strong></li><li><code>ServletOutputStream</code> 是用于<strong>向客户端发送二进制数据的输出流。</strong></li></ul></li><li><p><strong>流的复制：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span>[] byrray = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((len = fileInputStream.read(byrray)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    os.write(byrray, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码通过一个循环从输入流中读取字节数据，然后将其写入输出流中。这是一种基本的流复制模式。</p><p><code>read</code> 方法返回读取的字节数，当到达文件末尾时返回 -1。<code>write</code> 方法将字节数组的内容写入输出流。</p></li><li><p><strong>write 方法的三个参数：</strong></p><ul><li><code>os.write(byrray, 0, len);</code><ul><li><code>byrray</code> 是要写入的字节数组。</li><li><code>0</code> 是起始偏移量，表示从数组的第一个元素开始写入。</li><li><code>len</code> 是要写入的字节数。</li></ul></li></ul></li><li><p>最后关闭文件的输入流</p><p><code>fileInputStream.close();</code></p></li></ol></blockquote><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p>如果流的copy写的很熟悉了</p><p>我们使用工具类来实现</p><blockquote><ol><li><p>导入对应的maven坐标</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用！</p><img src="/xu-runbo/post/e770816f/image-20240102104227139.png" class="" title="image-20240102104227139"><img src="/xu-runbo/post/e770816f/image-20240102104625784.png" class="" title="image-20240102104625784">  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        <span class="comment">//读取文件获取文件输入流</span></span><br><span class="line">        FileInputStream fileInputStream=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D://pixpinGif//PixPin_2023-12-13_21-48-23.gif&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//获取字节输出流</span></span><br><span class="line">        ServletOutputStream os=resp.getOutputStream();</span><br><span class="line">  </span><br><span class="line">        IOUtils.copy(fileInputStream,os);</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在可以简化为这样，帮助我们省去 了我们自己写copy代码lll‘</p><p>一样可以显示那一张GIF图片</p></li></ol></blockquote><h3 id="如果你的F12设置错了"><a href="#如果你的F12设置错了" class="headerlink" title="如果你的F12设置错了"></a>如果你的F12设置错了</h3><img src="/xu-runbo/post/e770816f/image-20240102101017535.png" class="" title="image-20240102101017535"><p>还原新的浏览器f12工具 </p><h2 id="用户登录案例"><a href="#用户登录案例" class="headerlink" title="用户登录案例"></a>用户登录案例</h2><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><img src="/xu-runbo/post/e770816f/image-20240102113142585.png" class="" title="image-20240102113142585"><h4 id="准备静态登录页面"><a href="#准备静态登录页面" class="headerlink" title="准备静态登录页面"></a>准备静态登录页面</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#45a049</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;loginForm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Don&#x27;t have an account? <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;register.html&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure> <img src="/xu-runbo/post/e770816f/image-20240102113332439.png" class="" title="image-20240102113332439"> <h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><img src="/xu-runbo/post/e770816f/image-20240102113447666.png" class="" title="image-20240102113447666"><h4 id="导入Mybatis的配置坐标"><a href="#导入Mybatis的配置坐标" class="headerlink" title="导入Mybatis的配置坐标"></a>导入Mybatis的配置坐标</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--            数据库的连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///tb&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xurunbo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    加载SQl的映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hello.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="pojo的User类"><a href="#pojo的User类" class="headerlink" title="pojo的User类"></a>pojo的User类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String username ;</span><br><span class="line">    String password ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hello.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectall&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="UserMapper接口"><a href="#UserMapper接口" class="headerlink" title="UserMapper接口"></a>UserMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user where username=#&#123;username&#125; and password=#&#123;password&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectall</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试mybatis代码"><a href="#测试mybatis代码" class="headerlink" title="测试mybatis代码"></a>测试mybatis代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users= userMapper.selectall();</span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Servletlogin-java"><a href="#Servletlogin-java" class="headerlink" title="Servletlogin.java"></a>Servletlogin.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;先获取信息&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user=userMapper.select(username,password);</span><br><span class="line">        <span class="comment">//调用完SQL就可以关闭了</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;username:&quot;</span>+username);</span><br><span class="line">        System.out.println(<span class="string">&quot;password:&quot;</span>+password);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;登录成功！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;post!&quot;</span>);</span><br><span class="line">       doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><img src="/xu-runbo/post/e770816f/image-20240102135913564.png" class="" title="image-20240102135913564"> <h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><img src="/xu-runbo/post/e770816f/image-20240102135959062.png" class="" title="image-20240102135959062"> <h4 id="代码效果"><a href="#代码效果" class="headerlink" title="代码效果"></a>代码效果</h4><img src="/xu-runbo/post/e770816f/PixPin01-02_13-52-59.gif" class="" title="PixPin01-02_13-52-59"> <h3 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h3><h4 id="流程准备"><a href="#流程准备" class="headerlink" title="流程准备"></a>流程准备</h4><img src="/xu-runbo/post/e770816f/image-20240102142753783.png" class="" title="image-20240102142753783"> <img src="/xu-runbo/post/e770816f/image-20240102140814611.png" class="" title="image-20240102140814611"> <h4 id="静态页面准备"><a href="#静态页面准备" class="headerlink" title="静态页面准备"></a>静态页面准备</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Register Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.register-container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4caf50</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#45a049</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;register-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;registerForm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>Username:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>Password:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Already have an account? <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;login.html&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/e770816f/image-20240102140716278.png" class="" title="image-20240102140716278"> <h4 id="UserMapper接口-1"><a href="#UserMapper接口-1" class="headerlink" title="UserMapper接口"></a>UserMapper接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tb_user where username=#&#123;username&#125; and password=#&#123;password&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectall</span><span class="params">()</span>;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tb_user(username,password) values(#&#123;username&#125;,#&#123;password&#125;);&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">adduser</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hello.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;adduser&quot;</span>&gt;</span></span><br><span class="line">        insert into tb_user(username,password) values(#&#123;username&#125;,#&#123;password&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectall&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这两种方法我知道你会。。。</p><h4 id="ServletLogin-java"><a href="#ServletLogin-java" class="headerlink" title="ServletLogin.java"></a>ServletLogin.java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Register</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;先获取用户填写的信息&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//检查是否已经有这个用户了</span></span><br><span class="line">        User user=userMapper.select(username,password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//没有这个用户就创建这个用户</span></span><br><span class="line">            userMapper.adduser(username,password);</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;创建成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//注册失败！</span></span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;已经有这个账户拉&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="欢迎页面web-xml"><a href="#欢迎页面web-xml" class="headerlink" title="欢迎页面web.xml"></a>欢迎页面web.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h4><img src="/xu-runbo/post/e770816f/image-20240102142213969.png" class="" title="image-20240102142213969"> <h4 id="代码效果-1"><a href="#代码效果-1" class="headerlink" title="代码效果"></a>代码效果</h4><p>我用的是get</p><p><a href="http://localhost:9527/untitled19_war/register?username=%E8%AE%B8%E9%97%B0%E5%8D%9Adsasad&password=dsadas">localhost:9527&#x2F;untitled19_war&#x2F;register?username&#x3D;许闰博dsasad&amp;password&#x3D;dsadas</a></p><p>如果是post就不会在请求行显示用户输入的信息了</p><img src="/xu-runbo/post/e770816f/PixPin01-02_14-45-36.gif" class="" title="PixPin01-02_14-45-36"><h2 id="SqlSessionFactory工具类抽取"><a href="#SqlSessionFactory工具类抽取" class="headerlink" title="SqlSessionFactory工具类抽取"></a>SqlSessionFactory工具类抽取</h2><h3 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h3><img src="/xu-runbo/post/e770816f/image-20240102152749958.png" class="" title="image-20240102152749958"> <p>问题:</p><blockquote><p>每一个Servlet服务都要写这些东西</p><p>多个工厂就意味着多个连接池，非常消耗性能</p><p>代码重复</p></blockquote><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><h4 id="创建utils包下的获取工厂类"><a href="#创建utils包下的获取工厂类" class="headerlink" title="创建utils包下的获取工厂类"></a>创建utils包下的获取工厂类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Getfactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getsqlsessionfactory</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;先获取信息&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user=userMapper.select(username,password);</span><br><span class="line">        <span class="comment">//调用完SQL就可以关闭了</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化后；"><a href="#优化后；" class="headerlink" title="优化后；"></a>优化后；</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;先获取信息&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        String username=req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password=req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        SqlSession sqlSession= Getfactory.getsqlsessionfactory().openSession(<span class="literal">true</span>);</span><br><span class="line">        UserMapper userMapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user=userMapper.select(username,password);</span><br><span class="line">        <span class="comment">//调用完SQL就可以关闭了</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h4><blockquote><p>使用 MyBatis 框架的 Java 类，主要涉及 MyBatis 的 <code>SqlSessionFactory</code> 的创建，以及将局部变量提升为成员变量的处理。</p><ol><li><p><strong>创建 SqlSessionFactory:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br></pre></td></tr></table></figure><ul><li><code>mybatis-config.xml</code> 是 MyBatis 的配置文件，它包含有关数据源、事务管理等的配置信息。</li><li><code>Resources.getResourceAsStream(resource)</code> 用于获取配置文件的输入流。</li><li><code>SqlSessionFactoryBuilder().build(inputStream)</code> 用于构建 <code>SqlSessionFactory</code> 实例。<code>SqlSessionFactory</code> 是 MyBatis 中负责创建 <code>SqlSession</code> 实例的工厂。</li><li>&#x3D;&#x3D;用try&#x2F;catch包裹起来是因为静态代码块不能抛出异常&#x3D;&#x3D;</li></ul></li><li><p><strong>将局部变量提升为成员变量:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br></pre></td></tr></table></figure><ul><li><code>sqlSessionFactory</code> 是一个静态成员变量，被声明为 <code>private static</code>，<strong>这意味着它属于类级别，而不是实例级别。这样的设计使得该工厂在整个类中都可以被访问，而不仅仅是在构造方法中。</strong></li></ul></li><li><p><strong>提供访问 SqlSessionFactory 的方法:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory <span class="title function_">getSqlSessionFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>getSqlSessionFactory</code> 方法用于获取 <code>SqlSessionFactory</code> 实例。由于 <code>sqlSessionFactory</code> 是私有的，这个方法提供了对其访问的公共接口。</li></ul></li><li><p><strong>关于思想:</strong></p><ul><li>这段代码体现了单例模式的思想，通过静态成员变量和静态方法，确保在应用程序中只有一个 <code>SqlSessionFactory</code> 实例。</li><li>提升局部变量为成员变量可以在整个类中重复使用，避免了多次创建 <code>SqlSessionFactory</code> 的开销，提高了效率。</li><li>使用异常处理来处理 <code>IOException</code>，并将其转换为 <code>RuntimeException</code>，这样的设计使得代码更加健壮，减少了编写代码时的错误。</li></ul></li></ol><p>总体来说，这是一个典型的 MyBatis 配置管理类，负责创建和提供全局唯一的 <code>SqlSessionFactory</code> 实例，方便其他地方<strong>获取并使用该实例进行数据库操作</strong>。</p><hr><p>sqlsession对象是坚决不能抽取出来的，这个相当于一个连接，所有功能都用同一个连接，那还怎么管理事务？</p></blockquote><p>代码替换后仍然正常的。</p>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> req&amp;resp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP&amp;TomCat&amp;Servelet</title>
      <link href="/xu-runbo/post/fefee16a.html"/>
      <url>/xu-runbo/post/fefee16a.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP，TomCat，Servelet"><a href="#HTTP，TomCat，Servelet" class="headerlink" title="HTTP，TomCat，Servelet"></a>HTTP，TomCat，Servelet</h1><img src="/xu-runbo/post/fefee16a/image-20231228162222816.png" class="" title="image-20231228162222816"> <h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>Web：全球广域网，也称为万维网(www)，能够通过浏览器访问的网站</p><p>JavaWeb：是用Java技术来解决相关web互联网领域的技术栈</p><h2 id="了解一下javaweb技术栈"><a href="#了解一下javaweb技术栈" class="headerlink" title="了解一下javaweb技术栈"></a>了解一下javaweb技术栈</h2><p>B&#x2F;S架构：Browser&#x2F;Server，浏览器&#x2F;服务器架构模式，它的特点是，客户端只需要浏览器，应用程序的逻辑和数据都存储在服务器端。浏览器只需要请求服务器，获取Web资源，服务器把Web资源发送给浏览器即可</p><p>&#x3D;&#x3D;好处：易于维护升级：服务器端升级后，客户端无需任何部署就可以使用到新的版本&#x3D;&#x3D;</p><p>服务器的升级。。。客户端只管使用就ok了</p><img src="/xu-runbo/post/fefee16a/image-20231228161933467.png" class="" title="image-20231228161933467"> <ul><li><p>静态资源：HTML,CSS,JavaScript;</p><p>三剑客</p></li><li><p>动态资源 Servlet和JSp，负责逻辑处理，实现不同用户登录实现不同的效果</p></li><li><p>数据库：存储数据</p></li></ul><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><ul><li>概念：HyperText TransferProtocol，超文本传输协议，规定了浏览器和服务器之间数据传输的规则</li></ul><img src="/xu-runbo/post/fefee16a/image-20231228162506576.png" class="" title="image-20231228162506576"> <p>HTTP特点：<img src="/xu-runbo/post/fefee16a/image-20231228162558208.png" class="" title="image-20231228162558208"> </p><h2 id="请求数据的格式"><a href="#请求数据的格式" class="headerlink" title="请求数据的格式"></a>请求数据的格式</h2><img src="/xu-runbo/post/fefee16a/image-20231228162929597.png" class="" title="image-20231228162929597"><img src="/xu-runbo/post/fefee16a/image-20231228162956008.png" class="" title="image-20231228162956008">  <img src="/xu-runbo/post/fefee16a/image-20231228162454339.png" class="" title="image-20231228162454339"> <img src="/xu-runbo/post/fefee16a/image-20231228163121581.png" class="" title="image-20231228163121581"> <img src="/xu-runbo/post/fefee16a/image-20231228163123741.png" class="" title="image-20231228163123741"> <h2 id="响应数据的格式"><a href="#响应数据的格式" class="headerlink" title="响应数据的格式"></a>响应数据的格式</h2><img src="/xu-runbo/post/fefee16a/image-20231228163704916.png" class="" title="image-20231228163704916"> <h2 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h2><blockquote><p>HTTP协议中定义了一系列的状态码（Status Code），用于表示服务器对请求的处理结果。以下是一些常见的HTTP响应状态码：</p><ul><li><p><strong>1xx（信息性状态码）：</strong></p><ul><li>100 Continue：继续。表示服务器已经接收到请求的部分，客户端可以继续发送请求的其余部分。</li></ul></li><li><p><strong>2xx（成功状态码）：</strong></p><ul><li>200 OK：请求成功。表示请求已经成功处理。</li><li>201 Created：已创建。表示请求已经被成功处理，并且服务器创建了新的资源。</li><li>204 No Content：无内容。表示服务器成功处理了请求，但没有返回任何内容。</li></ul></li><li><p><strong>3xx（重定向状态码）：</strong></p><ul><li>301 Moved Permanently：永久重定向。<strong>请求的资源已被永久移动到新位置。</strong></li><li>302 Found：临时重定向。请求的资源临时移动到新位置。</li><li>304 Not Modified：未修改。表示资源未被修改，可以直接从缓存中获取。</li></ul></li><li><p><strong>4xx（客户端错误状态码）：</strong></p><ul><li>400 Bad Request：请求错误。表示请求出现语法错误。</li><li>401 Unauthorized：未授权。表示请求需要用户身份验证。</li><li>403 Forbidden：禁止访问。表示服务器理解请求，但拒绝执行。</li><li>404 Not Found：<strong>未找到。表示服务器无法找到请求的资源。</strong></li></ul></li><li><p><strong>5xx（服务器错误状态码）：</strong></p><ul><li>500 Internal Server Error：<strong>服务器错误。表示服务器在执行请求时发生了错误。</strong></li><li>502 Bad Gateway：坏的网关。表示服务器作为网关或代理，从上游服务器接收到无效的响应。</li><li>503 Service Unavailable：<strong>服务不可用。表示服务器暂时无法处理请求</strong>。</li></ul></li></ul><img src="/xu-runbo/post/fefee16a/image-20231228164049225.png" class="" title="image-20231228164049225"> </blockquote><p>tomcat帮我们处理的响应头什么的</p><h2 id="—————"><a href="#—————" class="headerlink" title="—————"></a>—————</h2><h2 id="TomCat服务器"><a href="#TomCat服务器" class="headerlink" title="TomCat服务器"></a>TomCat服务器</h2><img src="/xu-runbo/post/fefee16a/image-20231228164932783.png" class="" title="image-20231228164932783"><p>可以把web项目丢进去部署</p><p>别的人就可以用我们电脑的ip和开放的端口号和项目来访问了</p><p><code>localhost/hello/a.html</code></p><p><code>127.0.0.1:8080/hello/a.html</code></p><img src="/xu-runbo/post/fefee16a/image-20231228170011347.png" class="" title="image-20231228170011347"><img src="/xu-runbo/post/fefee16a/image-20231228170128388.png" class="" title="image-20231228170128388">  <h2 id="TomCat-web服务器"><a href="#TomCat-web服务器" class="headerlink" title="TomCat|web服务器"></a>TomCat|web服务器</h2><img src="/xu-runbo/post/fefee16a/image-20231228165430369.png" class="" title="image-20231228165430369"> <p><a href="https://xu-runbo.gitee.io/xu-runbo/post/41f2fbd7.html">tomcat配置 | cout&lt;&lt;”金缕衣”; (gitee.io)</a></p><img src="/xu-runbo/post/fefee16a/image-20231228165512258.png" class="" title="image-20231228165512258"> <p>有的版本添加的是TOMCAT_HOME有的是什么CAt。。。</p><p>根据jdk版本去适配对应的tomcat</p><p>下载完成然后创建变量，然后指定path到bin目录</p><img src="/xu-runbo/post/fefee16a/image-20231228165834108.png" class="" title="image-20231228165834108"> <h2 id="TomCat项目部署"><a href="#TomCat项目部署" class="headerlink" title="TomCat项目部署"></a>TomCat项目部署</h2><img src="/xu-runbo/post/fefee16a/image-20231228170749981.png" class="" title="image-20231228170749981"> <p>可以直接复制过去</p><ol><li>项目打包为war包，优点：会自动解压，也能正常访问</li></ol><h2 id="WEb项目结构"><a href="#WEb项目结构" class="headerlink" title="WEb项目结构"></a>WEb项目结构</h2><p>maven的package打包为war包</p><p>install打包为jar包</p><img src="/xu-runbo/post/fefee16a/image-20231228171301105.png" class="" title="image-20231228171301105">  <h2 id="IDEA创建Maven-Web项目"><a href="#IDEA创建Maven-Web项目" class="headerlink" title="IDEA创建Maven Web项目"></a>IDEA创建Maven Web项目</h2><p>社区版本的，只能用骨架，如果这里没有提示，我们可以先创建这俩文件夹，然后右键依次右键这俩文件夹，找到Mark D啥啥啥 as我们自己手动更改就好了</p><h3 id="使用骨架"><a href="#使用骨架" class="headerlink" title="使用骨架"></a>使用骨架</h3><img src="/xu-runbo/post/fefee16a/image-20231228171725772.png" class="" title="image-20231228171725772"> <img src="/xu-runbo/post/fefee16a/image-20231228171432170.png" class="" title="image-20231228171432170"> <img src="/xu-runbo/post/fefee16a/PixPin12-28_17-21-31.gif" class=""><h3 id="不使用骨架"><a href="#不使用骨架" class="headerlink" title="不使用骨架"></a>不使用骨架</h3><p>不勾选框架创建</p><p>然后修改package</p><img src="/xu-runbo/post/fefee16a/image-20231228171829386.png" class="" title="image-20231228171829386"> <img src="/xu-runbo/post/fefee16a/image-20231228173121535.png" class="" title="image-20231228173121535"><p>直接去修改打包为war，这样部署tomcat的时候才有提示！</p><img src="/xu-runbo/post/fefee16a/image-20231228173255776.png" class="" title="image-20231228173255776">  <img src="/xu-runbo/post/fefee16a/image-20231228173138403.png" class="" title="image-20231228173138403"><img src="/xu-runbo/post/fefee16a/image-20231228173206721.png" class="" title="image-20231228173206721"><hr><p>&#x3D;&#x3D;不管是修改路径还是移动位置后再修改目录名称&#x3D;&#x3D;</p><p>一定是webapp而不是web！！！</p><img src="/xu-runbo/post/fefee16a/image-20231229115741818.png" class="" title="image-20231229115741818"> <img src="/xu-runbo/post/fefee16a/image-20231229115859550.png" class="" title="image-20231229115859550"> <p>最终的项目结构一定是这样</p><img src="/xu-runbo/post/fefee16a/image-20231229115658644.png" class="" title="image-20231229115658644"> <p>   然后添加a.html文件测试</p><img src="/xu-runbo/post/fefee16a/image-20231229115944322.png" class="" title="image-20231229115944322"><p>ok! </p><h2 id="IDEA使用TomCat"><a href="#IDEA使用TomCat" class="headerlink" title="IDEA使用TomCat"></a>IDEA使用TomCat</h2><p>为了解决每次都打包好的war，放入tomcat中运行部署，反复就很麻烦</p><p>然后测试很方便</p><img src="/xu-runbo/post/fefee16a/image-20231228173536304.png" class="" title="image-20231228173536304"> <p>IDEA继承tomcat</p><blockquote><p>这 URL 分别对应了不同的部署方式，具体选择取决于你的应用是如何被部署的。</p><ol><li><strong><a href="http://localhost:9527/untitled18_war_exploded/a.html">http://localhost:9527/untitled18_war_exploded/a.html</a>:</strong><ul><li><code>_exploded</code> 通常表示这是一个以 exploded 形式部署的 Web 应用。Exploded 形式指的是将应用以文件夹的形式解压到服务器上，而不是打包成 WAR 文件。这种部署方式主要用于开发和调试阶段。</li><li><code>untitled18_war_exploded</code> 可能是你的项目的上下文路径，这个上下文路径的名称是根据你的项目名称和服务器配置来的。</li></ul></li><li><strong><a href="http://localhost:9527/untitled18_war/a.html">http://localhost:9527/untitled18_war/a.html</a>:</strong><ul><li>没有 <code>_exploded</code>，通常表示这是一个以 WAR 文件形式部署的 Web 应用。WAR 文件是 Web 应用的打包格式，它包含了应用的所有资源和配置。</li><li><code>untitled18_war</code> 可能是你的项目的上下文路径。</li></ul></li></ol><p><strong>区别：</strong></p><ul><li>如果你处于开发和调试阶段，通常会使用 exploded 形式部署，因为这样可以更方便地进行修改和查看文件，而无需每次重新打包 WAR 文件。</li><li>如果你要在生产环境中部署应用，通常会使用 WAR 文件形式部署，因为这样更便于管理和维护，也有利于应用的安全性。</li></ul><p><strong>建议：</strong></p><ul><li>在开发和调试阶段，你可以使用 <code>http://localhost:9527/untitled18_war_exploded/a.html</code> 这个URL，因为它更适合快速修改和查看代码。</li><li>在生产环境中，应该使用 <code>http://localhost:9527/untitled18_war/a.html</code> 这个URL，以确保更好的安全性和部署管理。</li></ul></blockquote><h2 id="插件集成Tomcat"><a href="#插件集成Tomcat" class="headerlink" title="插件集成Tomcat"></a>插件集成Tomcat</h2><img src="/xu-runbo/post/fefee16a/image-20231229110505802.png" class="" title="image-20231229110505802"> <img src="/xu-runbo/post/fefee16a/image-20231229111702020.png" class="" title="image-20231229111702020"><p>也是一样的只不过是不用手动去配置tomcat了，但是只能有tomcat7好像</p><h2 id="———"><a href="#———" class="headerlink" title="———"></a>———</h2><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><img src="/xu-runbo/post/fefee16a/image-20231229111743638.png" class="" title="image-20231229111743638"> <p><strong>传入不同的参数，返回不同的页面</strong></p><img src="/xu-runbo/post/fefee16a/image-20231229111923527.png" class="" title="image-20231229111923527"> <h2 id="servlet简介"><a href="#servlet简介" class="headerlink" title="servlet简介"></a>servlet简介</h2><p>Servlet 是 Java 语言编写的<strong>服务器端程序</strong>，用于处理客户端的请求和生成响应。它主要用于<strong>构建动态的、交互性的网页应用</strong>，能够处理用户提交的表单、与数据库交互、管理用户会话等。Servlet 运行在支持 Java 的 Web 服务器上，例如 Apache Tomcat。</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a><a name="快速上手">快速上手</a></h2><h3 id="快速上手-1"><a href="#快速上手-1" class="headerlink" title="快速上手 1"></a>快速上手 1</h3><img src="/xu-runbo/post/fefee16a/image-20231231100335209.png" class="" title="image-20231231100335209"><p>依赖项：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码效果</p><img src="/xu-runbo/post/fefee16a/image-20231231101134206.png" class="" title="image-20231231101134206"> <p>使用注解就不用在webxml里面写了</p> <img src="/xu-runbo/post/fefee16a/image-20231231101205340.png" class="" title="image-20231231101205340"><h3 id="快速上手-1"><a href="#快速上手-1" class="headerlink" title="快速上手"></a>快速上手</h3><ol><li><p><strong>安装 Java 开发工具：</strong> 确保你的计算机上安装了 JDK（Java Development Kit）。你可以从 Oracle 官网或其他渠道下载并安装 JDK。</p></li><li><p><strong>下载并配置一个 Servlet 容器：</strong> 常用的 Servlet 容器有 Apache Tomcat。下载并解压 Tomcat，然后设置环境变量 <code>CATALINA_HOME</code> 指向 Tomcat 的安装目录。</p></li><li><p><strong>创建一个简单的 Servlet 项目：</strong></p><ul><li>在你的开发工具（如Eclipse、IntelliJ IDEA等）中创建一个新的 Java 项目。</li><li>在项目中创建一个 Java 类，该类<strong>继承</strong>自 <code>HttpServlet</code> 类。<strong>重写</strong> <code>doGet</code> 或 <code>doPost</code> 方法，这两个方法用于处理 HTTP GET 或 POST 请求。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;Hello, Servlet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>配置 Servlet 映射：</strong></p><ul><li>在项目中创建一个 <code>web.xml</code> 文件（如果使用 Servlet 3.0+，也可以使用注解方式代替）。</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servletdemo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>comhello.Servletdemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servletdemo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个配置将 <code>/hello</code> 映射到 <code>MyServlet</code>。</p></li><li><p><strong>部署和运行：</strong></p><ul><li>将你的项目打包成 WAR 文件（Web Application Archive）。</li><li>将 WAR 文件复制到 Tomcat 的 <code>webapps</code> 目录下。</li><li>启动 Tomcat。你可以运行 Tomcat 的启动脚本，如 <code>catalina.bat</code> 或 <code>catalina.sh</code>。</li><li>在浏览器中访问 <code>http://localhost:8080/your-web-app-context/hello</code>，你应该看到 “Hello, Servlet!”。</li></ul></li></ol><p>代码效果：</p><img src="/xu-runbo/post/fefee16a/image-20231231095625262.png" class="" title="image-20231231095625262"> <p>Servletdemo.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servletdemo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;hello servlet!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servletdemo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Servletdemo<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.hello.Servletdemo<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>web应用程序的部署描述文件（Deployment Descriptor）的一部分，通常命名为<code>web.xml</code>。这个文件用于配置Servlet和其他Web组件的映射和参数。</p><p><strong>Servlet声明部分：</strong></p><ol><li><pre><code class="xml">&lt;servlet&gt;    &lt;servlet-name&gt;Servletdemo&lt;/servlet-name&gt;    &lt;servlet-class&gt;comhello.Servletdemo&lt;/servlet-class&gt;&lt;/servlet&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   - `&lt;servlet-name&gt;`：指定**Servlet的名称**。在这里，Servlet的名字是&quot;MyServlet&quot;。</span><br><span class="line">   - `&lt;servlet-class&gt;`：指定**Servlet类的完全限定名**（包括包路径）。在这里，Servlet的类是&quot;com.example.MyServlet&quot;。</span><br><span class="line"></span><br><span class="line">2. **Servlet映射部分：**</span><br><span class="line"></span><br><span class="line">   ```xml</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;Servletdemo&lt;/servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure>- `&lt;servlet-name&gt;`：指定**要映射的Servlet的名称**。这**与Servlet声明中的名称相同**，这里是&quot;MyServlet&quot;。- `&lt;url-pattern&gt;`：指定URL模式，**即定义了请求到达服务器时由该Servlet处理的URL**。在这里，URL模式是&quot;/hello&quot;，这意味着**当请求的URL以&quot;/hello&quot;结尾时**，将由&quot;MyServlet&quot;处理。  也可以注解的方式来指定url</code></pre></li></ol><p>表示一个Servlet（名为”MyServlet”）的<strong>声明和映射</strong>。当Web应用程序收到以”&#x2F;hello”结尾的URL请求时，容器（如Tomcat）将请求交给”MyServlet”来处理。这是Java EE Web应用程序中配置Servlet的一种方式。</p></blockquote><h2 id="Servlet的执行流程-生命周期"><a href="#Servlet的执行流程-生命周期" class="headerlink" title="Servlet的执行流程&amp;生命周期"></a>Servlet的执行流程&amp;生命周期</h2><h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>我们只是实现了接口，也没用创建对象，是怎么执行的呢？</p><img src="/xu-runbo/post/fefee16a/image-20231231101830235.png" class="" title="image-20231231101830235"><p>Servlet由谁创建？Servlet方法由谁调用？</p><blockquote><p>Servlet由<strong>web服务器创建</strong>，</p></blockquote><p>Servlet方法由web服务器调用2.服务器怎么知道Servlet中一定有service方法？</p><blockquote><p>因为我们自定义的Servlet，<strong>必须实现servlet接口并复写其方法，而Servlet接口中有service方法</strong></p></blockquote><hr><ol><li><strong>加载和实例化：</strong><ul><li>当第一次请求到达Servlet时，Servlet容器（如Tomcat）会负责<strong>加载并实例化Servlet类</strong>。这<strong>发生在Web应用程序启动时或首次访问与Servlet关联的URL时</strong>。</li></ul></li><li><strong>初始化：</strong><ul><li>一旦Servlet实例被创建，<strong>容器会调用Servlet的<code>init(ServletConfig config)</code>方法</strong>，用于执行初始化操作。<code>init</code>方法<strong>只会在Servlet的生命周期内被调用一次</strong>。</li></ul></li><li><strong>请求处理：</strong><ul><li>当有新的请求到达与Servlet关联的URL时，容器<strong>会创建一个新的线程来处理这个请求。</strong></li><li><strong>对于每个请求，容器会调用Servlet的<code>service(ServletRequest request, ServletResponse response)</code>方法</strong>。</li><li><code>service</code>方法**会根据请求类型（GET、POST等）调用相应的<code>doXXX</code>方法，例如<code>doGet</code>或<code>doPost</code>**。</li></ul></li><li><strong>线程安全：</strong><ul><li>Servlet的<code>service</code>方法是<strong>单例多线程的</strong>，因此需要注意实现线程安全的逻辑，或通过在<code>service</code>方法中使用局部变量来确保线程安全。</li></ul></li><li><strong>销毁：</strong><ul><li>当<strong>Web应用程序关闭或Servlet容器需要释放资源时，容器会调用Servlet的<code>destroy</code>方法</strong>。在这个方法中，你可以执行一些清理工作，如<strong>关闭数据库连接、释放资源</strong>等。</li></ul></li></ol><hr><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="&#x3D;&#x3D;生命周期&#x3D;&#x3D;"></a>&#x3D;&#x3D;生命周期&#x3D;&#x3D;</h3><img src="/xu-runbo/post/fefee16a/image-20231231102224581.png" class="" title="image-20231231102224581"> 默认是-1<p>修改为0&#x2F;1。服务器一旦启动就执行了init方法。</p><hr><ol><li><p><strong>实例化（Instantiation）：</strong></p><ul><li>当Servlet容器启动或者在第一次请求到达相关URL时，<strong>Servlet容器会创建Servlet的一个实例</strong>。</li></ul></li><li><p><strong>初始化（Initialization）：</strong></p><ul><li>在实例化后，容器会调用<strong>Servlet的<code>init</code>方法</strong>，允许Servlet执行一些初始化的操作。这个方法只在Servlet的生命周期中被调用一次。</li></ul></li><li><p><strong>请求处理（Request Handling）：</strong></p><ul><li>在Servlet的生命周期中，**<code>service</code>方法会被多次调用**，每次处理一个HTTP请求。具体调用哪个<code>doXXX</code>方法取决于请求的类型。</li></ul></li><li><p><strong>销毁（Destruction）：</strong></p><ul><li>当Web应用程序关闭或者容器需要释放资源时，容器会调用Servlet的<code>destroy</code>方法。在这个方法中，你可以执行一些清理操作。</li><li>服务器关闭。内存释放，Servlet对象会被销毁</li></ul></li><li><p><strong>垃圾回收（Garbage Collection）：</strong></p><ul><li>一旦Servlet实例不再被引用，它就会成为垃圾收集的对象。</li></ul></li></ol><p>这就是Servlet的基本执行流程和生命周期。理解Servlet的生命周期对于有效地管理资源和确保应用程序的正确行为非常重要。</p><h2 id="Servlet方法介绍-体系结构"><a href="#Servlet方法介绍-体系结构" class="headerlink" title="Servlet方法介绍&amp;体系结构"></a>Servlet方法介绍&amp;体系结构</h2><h3 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h3><img src="/xu-runbo/post/fefee16a/image-20231231102830972.png" class="" title="image-20231231102830972"> <p>默认返回空字符串就行了</p><img src="/xu-runbo/post/fefee16a/image-20231231103120163.png" class="" title="image-20231231103120163"> <h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><img src="/xu-runbo/post/fefee16a/image-20231231103228466.png" class="" title="image-20231231103228466"> <img src="/xu-runbo/post/fefee16a/image-20231231103304786.png" class="" title="image-20231231103304786">  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Servlethttp</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;......get&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;......post&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试表单</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/untitled19_war/demo4&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在 网站输入url的形式是get请求</p><p>表单实现post请求</p></blockquote><p>访问<code>[localhost:9527/untitled19_war/demo4](http://localhost:9527/untitled19_war/demo4)</code>输出了…get</p><img src="/xu-runbo/post/fefee16a/PixPin12-31_10-42-57.gif" class="" title="PixPin12-31_10-42-57"><p>并且跳转到了action指定的路径</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><img src="/xu-runbo/post/fefee16a/image-20231231104954011.png" class="" title="image-20231231104954011"> <img src="/xu-runbo/post/fefee16a/image-20231231104806894.png" class="" title="image-20231231104806894"> <h2 id="urlPattern配置"><a href="#urlPattern配置" class="headerlink" title="urlPattern配置"></a>urlPattern配置</h2><blockquote><img src="/xu-runbo/post/fefee16a/image-20231231105101467.png" class="" title="image-20231231105101467"> </blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(urlPatterns = &#123;&quot;/hello&quot;,&quot;/h&quot;&#125;)</span></span><br></pre></td></tr></table></figure><p>这样都能访问到对应的资源</p><h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><p>拓展名匹配的时候不能加&#x2F;</p><img src="/xu-runbo/post/fefee16a/image-20231231105718787.png" class="" title="image-20231231105718787"> <img src="/xu-runbo/post/fefee16a/image-20231231105445804.png" class="" title="image-20231231105445804"> <p>当一个资源可以有多个不同的匹配规则都能访问到的时候</p><p>&#x3D;&#x3D;越精确的优先级越高！&#x3D;&#x3D;</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>任意匹配很危险，不建议使用</p><img src="/xu-runbo/post/fefee16a/image-20231231105813058.png" class="" title="image-20231231105813058">  <img src="/xu-runbo/post/fefee16a/image-20231231110345500.png" class="" title="image-20231231110345500"> <blockquote><p>理解<code>/</code>和<code>/*</code>在Servlet映射中的区别需要考虑Servlet规范中的URL匹配规则以及Tomcat中的默认Servlet的影响。</p><ol><li><p><strong><code>/</code>的含义：</strong></p><ul><li>当你配置Servlet的URL模式为<code>/</code>时，表示这个Servlet会处理应用程序的根路径，也就是<strong>所有的请求都会被这个Servlet处理。</strong></li><li>例如，如果你有一个Servlet配置为<code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>，那么它将拦截所有的请求，无论是<code>/page1</code>、<code>/images/logo.png</code>还是其他路径，都将由这个Servlet处理。</li></ul></li><li><p><strong><code>/*</code>的含义：</strong></p><ul><li>当你配置Servlet的URL模式为<code>/*</code>时，表示这个Servlet会匹配所有的URL路径，包括子路径。</li><li>例如，如果你有一个Servlet配置为<code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code>，那么它将匹配所有路径，包括<code>/page1</code>、<code>/images/logo.png</code>等。</li></ul></li><li><p><strong>Tomcat中的默认Servlet：</strong></p><ul><li><strong>Tomcat中有一个默认的Servlet，通常用于处理静态资源（如HTML、图片、CSS等）的请求</strong>。这个默认的Servlet的URL模式是<code>/</code>。</li><li>如果你的应用程序中配置了一个Servlet的URL模式为<code>/</code>，它将覆盖Tomcat默认的Servlet，这意味着你的Servlet将处理所有请求，包括静态资源请求。</li></ul></li><li><p><strong>总结：</strong></p><ul><li>配置Servlet的URL模式为<code>/</code>时，它会处理应用程序的根路径，覆盖Tomcat默认的Servlet。</li><li>配置Servlet的URL模式为<code>/*</code>时，它会匹配所有路径，包括子路径。</li></ul></li></ol><p>在使用<code>/</code>时，要小心不要阻止对静态资源的访问，因为这可能会覆盖默认Servlet。而<code>/*</code>则需要谨慎使用，因为它可能导致所有请求都被该Servlet处理，包括一些本不应该由Servlet处理的静态资源。</p></blockquote><h2 id="XML配置Servlet"><a href="#XML配置Servlet" class="headerlink" title="XML配置Servlet"></a>XML配置Servlet</h2><p>参见<a href="#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B">快速上手</a></p><p>3.0+就可以进行@WebServlet注解来实现url了</p><img src="/xu-runbo/post/fefee16a/image-20231231110435691.png" class="" title="image-20231231110435691"> ]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP,TomCat,Servelet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>regexp</title>
      <link href="/xu-runbo/post/f9f4b1e7.html"/>
      <url>/xu-runbo/post/f9f4b1e7.html</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="正则表达式概念"><a href="#正则表达式概念" class="headerlink" title="正则表达式概念"></a>正则表达式概念</h2><p>正则表达式（Regular Expression，简称Regex或RegExp）是一种用来<strong>描述字符串模式</strong>的工具</p><p>它提供了一种强大、灵活的方式来<strong>匹配</strong>、<strong>搜索</strong>和操作文本。</p><p>正则表达式是<strong>由字符和特殊字符组成的字符串</strong>，用于定义搜索模式。</p><p>正则表达式的主要用途包括：</p><ol><li><strong>模式匹配（Pattern Matching）：</strong> 正则表达式可以用来检查字符串是否符合某种模式。例如，可以使用正则表达式检查一个字符串是否是一个有效的邮箱地址或电话号码。</li><li><strong>文本搜索和替换：</strong> 正则表达式允许你在文本中搜索特定的模式，并且可以用其他的文本替换匹配到的部分。这对于批量处理文本非常有用。</li><li><strong>数据验证：</strong> 可以用正则表达式验证用户输入的数据是否符合特定的格式要求，比如密码强度检查。</li><li><strong>数据提取：</strong> 正则表达式可以帮助你从文本中提取出需要的信息。例如，从一组文本中提取所有的链接或日期。</li><li><strong>语法分析：</strong> 在一些编程语言和工具中，正则表达式被用来进行简单的语法分析，例如在词法分析器中。</li></ol><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><p>在JavaScript中，你可以使用正则表达式的直接量（regex literal）或者通过RegExp对象来创建正则表达式。</p><h3 id="直接量"><a href="#直接量" class="headerlink" title="直接量"></a>直接量</h3><p>在JavaScript中，你可以使用斜杠（<code>/</code>）来定义正则表达式直接量。语法如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> regexLiteral = <span class="regexp">/pattern/</span>flags;</span><br></pre></td></tr></table></figure><p>其中，<code>pattern</code>是你的正则表达式模式，<code>flags</code>是可选的标志，可以包括以下值：</p><ul><li><code>i</code>: 不区分大小写匹配（case-insensitive）</li><li><code>g</code>: 全局匹配，匹配所有出现的模式而不仅仅是第一个</li><li><code>m</code>: 多行匹配</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/abc/i</span>; <span class="comment">// 不区分大小写匹配&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">let</span> globalPattern = <span class="regexp">/abc/g</span>; <span class="comment">// 全局匹配&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">let</span> multiLinePattern = <span class="regexp">/abc/m</span>; <span class="comment">// 多行匹配&quot;abc&quot;</span></span><br></pre></td></tr></table></figure><h3 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h3><p>你也可以使用RegExp构造函数来创建正则表达式对象，语法如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> regexObject = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;pattern&quot;</span>, <span class="string">&quot;flags&quot;</span>);</span><br></pre></td></tr></table></figure><p>同样，<code>pattern</code>是正则表达式模式，<code>flags</code>是可选的标志。需要注意的是，在使用RegExp对象时，<strong>模式字符串需要以字符串的形式传递，所以需要使用双引号或单引号</strong>。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> flags = <span class="string">&quot;i&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> regexObject = <span class="keyword">new</span> <span class="title class_">RegExp</span>(pattern, flags); <span class="comment">// 不区分大小写匹配&quot;abc&quot;</span></span><br></pre></td></tr></table></figure><h3 id="使用正则表达式："><a href="#使用正则表达式：" class="headerlink" title="使用正则表达式："></a>使用正则表达式：</h3><p>无论是直接量还是RegExp对象，创建后的正则表达式<strong>都可以用于字符串的匹配、搜索和其他操作</strong>。例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/abc/i</span>; <span class="comment">// 或者 new RegExp(&quot;abc&quot;, &quot;i&quot;);</span></span><br><span class="line"><span class="comment">//创建了一个正则表达式对象 `regex`。正则表达式的模式是 `abc`，并且使用了标志 `i`，表示不区分大小写匹配。</span></span><br><span class="line"><span class="keyword">let</span> testString = <span class="string">&quot;AbC is case insensitive&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (regex.<span class="title function_">test</span>(testString)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Match found!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;No match found.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>涉及的知识：</p><p>正则表达式对象的 <code>test</code> 方法来测试字符串是否匹配正则表达式的模式。<code>test</code> 方法<strong>返回一个布尔值</strong>，如果字符串中存在匹配项，则返回 <code>true</code>，否则返回 <code>false</code>。</p></blockquote><h2 id="语法汇总"><a href="#语法汇总" class="headerlink" title="语法汇总"></a>语法汇总</h2><p>》》》</p><blockquote><p>正则表达式的语法包含一些基本元字符和模式，这些元字符和模式用于定义匹配规则。以下是一些常见的元字符和模式：</p><ol><li><p><strong>字符匹配：</strong></p><ul><li><code>abc</code>: 匹配字符串中的 “abc”。</li></ul></li><li><p><strong>元字符：</strong></p><ul><li><code>.</code>: 匹配<strong>任意单个字符</strong>，<strong>除了换行符</strong>。</li><li><code>^</code>: 匹配<strong>字符串的开始</strong>。</li><li><code>$</code>: 匹配<strong>字符串的结束</strong>。</li></ul></li><li><p><strong>字符类别：</strong></p><ul><li><code>[]</code>: <strong>匹配方括号内的任一字符</strong>。<ul><li>例如，<code>[aeiou]</code> 匹配<strong>任何一个元音字母</strong>。</li><li><code>[^0-9]</code> 匹配除了数字以外的任何字符。</li></ul></li></ul></li><li><p><strong>预定义字符类别：</strong></p><ul><li><code>\d</code>: 匹配<strong>任意数字字符</strong>（相当于 <code>[0-9]</code>）。</li><li><code>\D</code>: 匹配<strong>任意非数字字符</strong>。</li><li><code>\w</code>: 匹配<strong>任意字母、数字、下划线字符</strong>（相当于 <code>[a-zA-Z0-9_]</code>）。</li><li><code>\W</code>: 匹配任意非字母、数字、下划线字符。</li><li><code>\s</code>: 匹配<strong>任意空白字符，包括空格、制表符等</strong>。</li><li><code>\S</code>: 匹配任意非空白字符。</li></ul></li><li><p><strong>量词：</strong></p><ul><li><code>*</code>: 匹配前一个字符<strong>零次或多次</strong>。</li><li><code>+</code>: 匹配前一个字符<strong>一次或多次</strong>。</li><li><code>?</code>: 匹配前一个字符<strong>零次或一次</strong>。&#x3D;&#x3D;</li><li><code>&#123;n&#125;</code>: 匹配前一个字符<strong>恰好 n 次</strong>。</li><li><code>&#123;n,&#125;</code>: 匹配前一个字符<strong>至少 n 次</strong>。</li><li><code>&#123;n,m&#125;</code>: 匹配前一个字符<strong>至少 n 次，最多 m 次</strong>。</li></ul></li><li><p><strong>分组和捕获：</strong></p><ul><li><code>()</code>: 用于创建分组。</li><li><code>(pattern)</code>: 匹配 pattern 并捕获匹配的文本。</li></ul></li><li><p><strong>转义字符：</strong></p><ul><li><code>\</code>: 用于<strong>转义特殊字符，使其失去特殊意义</strong>。</li></ul></li><li><p><strong>选择符：</strong></p><ul><li><code>|</code>: 表示逻辑或，<strong>匹配两者之一</strong>。<ul><li>例如，<code>cat|dog</code> 匹配 “cat” 或 “dog”。</li></ul></li></ul></li><li><p><strong>边界匹配：</strong></p><ul><li><code>\b</code>: <strong>匹配单词边界。</strong></li><li><code>\B</code>: 匹配非单词边界。</li></ul></li></ol><hr><p>在正则表达式中，<code>^</code> 用在字符集合中时表示<strong>取反</strong></p><p>在表达式 <code>[^0-9]</code> 中：</p><ul><li><code>[]</code>: 表示一个字符集合。</li><li><code>0-9</code>: 表示数字范围，即所有数字字符。</li><li><code>^</code>: 放在字符集合的开始，表示取反，即匹配除了数字字符（0到9）以外的任何字符。</li></ul><p>所以，<code>[^0-9]</code> 匹配的是任意一个不是数字的字符。这对于在正则表达式中排除某些字符很有用。其他例子包括：</p><ul><li><code>[^a-z]</code>: 匹配除了小写字母之外的任意字符。</li><li><code>[^A-Z]</code>: 匹配除了大写字母之外的任意字符。</li><li><code>[^a-zA-Z]</code>: 匹配除了字母之外的任意字符。</li></ul><p>在字符集合内，**&#x3D;&#x3D;<code>^</code> 只有在放在开头时才表示取反，如果 <code>^</code> 在字符集合的其他位置，它就只是普通字符&#x3D;&#x3D;**。例如，<code>[a^b]</code> 匹配字符 ‘a’、’^’ 或 ‘b’ 中的任意一个。</p></blockquote><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><h3 id="1-验证邮箱地址"><a href="#1-验证邮箱地址" class="headerlink" title="1. 验证邮箱地址"></a>1. 验证邮箱地址</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> emailRegex = <span class="regexp">/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,4&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> email = <span class="string">&quot;user@example.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (emailRegex.<span class="title function_">test</span>(email)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Valid email address!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Invalid email address!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中，<code>emailRegex</code> 是用于验证邮箱地址的正则表达式。它匹配常见的邮箱地址格式，包括用户名、@ 符号、域名等。<code>test</code> 方法用于检查邮箱地址是否符合正则表达式模式。</p><blockquote><p><code>^                 // 开始匹配字符串的起始位置</code><br><code>[a-zA-Z0-9._-]+   // 匹配至少一个字母、数字、点（.）、下划线（_）或短横线（-）</code><br><code>@                 // 匹配邮箱地址中的@</code><br><code>[a-zA-Z0-9.-]+    // 匹配至少一个字母、数字、点（.）或短横线（-）</code><br><code>\.                // 匹配邮箱地址中的点（.），需要使用转义字符\ </code><br><code>[a-zA-Z]&#123;2,4&#125;    // 匹配两到四个字母，通常表示顶级域名（如com、edu、org等）</code><br><code>$                 // 匹配字符串的结束位置</code></p></blockquote><h3 id="2-验证密码强度"><a href="#2-验证密码强度" class="headerlink" title="2. 验证密码强度"></a>2. 验证密码强度</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> passwordRegex = <span class="regexp">/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).&#123;8,&#125;$/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> password = <span class="string">&quot;SecurePwd123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (passwordRegex.<span class="title function_">test</span>(password)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Strong password!&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Weak password! Please include lowercase, uppercase, and digits.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中，<code>passwordRegex</code> 用于验证密码强度。它要求密码至少包含一个小写字母、一个大写字母和一个数字，且长度至少为8位。</p><blockquote><p><code>^                   // 开始匹配字符串的起始位置</code><br><code>(?=.*[a-z])         // 至少包含一个小写字母</code><br><code>(?=.*[A-Z])         // 至少包含一个大写字母</code><br><code>(?=.*\d)            // 至少包含一个数字</code><br><code>.&#123;8,&#125;               // 匹配至少包含8个字符</code><br><code>$                   // 结束匹配字符串的位置</code></p><hr><ul><li><code>(?= ... )</code>: <strong>正向预查</strong>，表示<strong>在匹配的位置之后必须满足某种条件</strong>。</li><li><code>.*</code>: 匹配任意字符（除了换行符）零次或多次。</li><li><code>[a-z]</code>: 匹配一个小写字母。</li></ul><p>将这三部分组合起来，<code>(?=.*[a-z])</code> 的意思是：</p><p>在当前位置之后，<strong>字符串中必须存在至少一个小写字母</strong>。</p></blockquote><h3 id="3-提取文本中的日期"><a href="#3-提取文本中的日期" class="headerlink" title="3. 提取文本中的日期"></a>3. 提取文本中的日期</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;Meeting scheduled on 2023-01-15&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dateRegex = <span class="regexp">/\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> extractedDate = text.<span class="title function_">match</span>(dateRegex);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Extracted date:&quot;</span>, extractedDate[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>dateRegex</code> 用于匹配文本中的日期模式（YYYY-MM-DD）。<code>match</code> 方法用于提取匹配的部分，然后打印出提取到的日期。</p><p>这些简单的例子涵盖了正则表达式的基础用法，包括验证、搜索和提取。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tomcat配置</title>
      <link href="/xu-runbo/post/41f2fbd7.html"/>
      <url>/xu-runbo/post/41f2fbd7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat快速配置"><a href="#Tomcat快速配置" class="headerlink" title="Tomcat快速配置"></a>Tomcat快速配置</h1><h2 id="Tomcat简介"><a href="#Tomcat简介" class="headerlink" title="Tomcat简介"></a>Tomcat简介</h2><p>Tomcat是Apache、Sun 和其他一些公司及个人<a href="https://baike.baidu.com/item/%E5%85%B1%E5%90%8C%E5%BC%80%E5%8F%91/12674474?fromModule=lemma_inlink">共同开发</a>而成的一款免费的<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81/114160?fromModule=lemma_inlink">开放源代码</a>的<a href="https://baike.baidu.com/item/Web/150564?fromModule=lemma_inlink">Web</a> 应用服务器。</p><h2 id="为什么选用Tomcat？"><a href="#为什么选用Tomcat？" class="headerlink" title="为什么选用Tomcat？"></a>为什么选用Tomcat？</h2><h3 id="2-1-原因"><a href="#2-1-原因" class="headerlink" title="2.1.原因"></a>2.1.原因</h3><p>因为Tomcat 技术先进、性能稳定，而且免费，深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为比较流行的Web 应用服务器。同时Tomcat 服务器属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。</p><h2 id="Tomcat的作用"><a href="#Tomcat的作用" class="headerlink" title="Tomcat的作用"></a>Tomcat的作用</h2><p>当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><p>当配置正确时，Apache 为HTML页面服务，而Tomcat 实际上运行JSP 页面和Servlet。另外，Tomcat和IIS等Web服务器一样，具有处理HTML页面的功能，另外它还是一个Servlet和JSP容器，独立的Servlet容器是Tomcat的默认模式。</p><h2 id="Tomcat安装-配置"><a href="#Tomcat安装-配置" class="headerlink" title="Tomcat安装&amp;&amp;配置"></a>Tomcat安装&amp;&amp;配置</h2><p><a href="https://tomcat.apache.org/download-10.cgi">Apache Tomcat - Apache Tomcat® 10 软件下载</a></p><p>根据java版本来安装对应的Tomcat</p><img src="/xu-runbo/post/41f2fbd7/image-20231225104519204.png" class="" title="image-20231225104519204"> <p>查看java版本</p><img src="/xu-runbo/post/41f2fbd7/image-20231225104543984.png" class="" title="image-20231225104543984"> <img src="/xu-runbo/post/41f2fbd7/image-20231225104700235.png" class="" title="image-20231225104700235"> <p>下载到soft\tomcat下</p><img src="/xu-runbo/post/41f2fbd7/image-20231225105118629.png" class="" title="image-20231225105118629"> <img src="/xu-runbo/post/41f2fbd7/image-20231225105154686.png" class="" title="image-20231225105154686"> <p>解压完</p><p>bin目录：包含启动和停止Tomcat服务器的脚本文件，以及其他一些可执行文件。</p><p>conf目录：包含Tomcat服务器的配置文件，如server.xml、web.xml等。</p><p>lib目录：包含Tomcat服务器所需的Java类库文件。</p><p>logs目录：包含Tomcat服务器的日志文件，如访问日志、错误日志等。</p><p>temp目录：包含Tomcat服务器运行时生成的临时文件。</p><p>webapps目录：包含Web应用程序的根目录，每个Web应用程序都应该放在一个单独的子目录中。</p><p>work目录：包含Tomcat服务器编译JSP文件时生成的临时文件。</p><p>wtpwebapps目录：wtpwebapps目录是 Eclipse WTP 插件中用于存放 Web 项目的目录。</p><p>LICENSE文件： LICENSE 文件包含了 Tomcat 的许可证条款。</p><p>NOTICE文件：NOTICE 文件包含了 Tomcat 使用的第三方库的版权信息。</p><p>RELEASE-NOTES文件：RELEASE-NOTES 文件包含了 Tomcat 的版本更新信息。</p><p>RUNNING.txt文件：RUNNING.txt 文件包含了 Tomcat 的运行指南。</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ol><li>变量名 <code>CATALINA_HOME</code></li><li>变量值: 解压后bin目录的位置</li></ol><img src="/xu-runbo/post/41f2fbd7/image-20231225105631408.png" class="" title="image-20231225105631408"> <p>修改path</p><img src="/xu-runbo/post/41f2fbd7/image-20231225105703608.png" class="" title="image-20231225105703608"> <p>测试Tomcat环境是否配置成功 </p><p>双鸡start.bat文件</p><img src="/xu-runbo/post/41f2fbd7/image-20231225105941626.png" class="" title="image-20231225105941626"><blockquote><p>关于这里乱码的问题，</p><p>Tomcat日志输出编码与cmd编码不一致，</p><p>windows下的cmd的默认编码是GBK编码，</p><p>Tomcat控制台默认输出设置为UTF-8编码</p><p>找到</p><img src="/xu-runbo/post/41f2fbd7/image-20231225110741872.png" class="" title="image-20231225110741872"><p>修改为</p><img src="/xu-runbo/post/41f2fbd7/image-20231225110834218.png" class="" title="image-20231225110834218"><p>然后重启tomcat服务</p><img src="/xu-runbo/post/41f2fbd7/image-20231225111007724.png" class="" title="image-20231225111007724"><img src="/xu-runbo/post/41f2fbd7/image-20231225111034856.png" class="" title="image-20231225111034856"> <p>正常了！</p></blockquote><p>访问<a href="http://localhost:8080/">Apache Tomcat&#x2F;10.1.17</a></p><img src="/xu-runbo/post/41f2fbd7/image-20231225110007690.png" class="" title="image-20231225110007690"> <p>就ok了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis简单入土</title>
      <link href="/xu-runbo/post/59a318a.html"/>
      <url>/xu-runbo/post/59a318a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h2><p>MyBatis是一种用于<strong>Java语言的持久层框架</strong></p><p>它<strong>简化了数据库交互的过程</strong>。与直接使用JDBC相比</p><p>MyBatis提供了<strong>更为简洁的方式来执行数据库操作</strong>，<strong>并将SQL语句与Java代码进行解耦。</strong></p><p>&#x3D;&#x3D;<strong>MyBatis的核心思想是通过XML或注解来配置SQL语句，将Java对象与数据库表之间的映射关系描述清晰</strong>&#x3D;&#x3D;</p><ol><li><p><strong>SQL映射文件（XML或注解）：</strong> MyBatis使用XML文件或注解来定义数据库操作的SQL语句。这样，你可以将SQL语句与Java代码分离，使得代码更易读、易维护。</p></li><li><p><strong>参数映射：</strong> MyBatis能够<strong>自动将Java对象的属性映射到SQL语句中的参数</strong>，简化了参数传递的过程。无需手动处理PreparedStatement等操作，MyBatis会自动完成这些工作。</p></li><li><p><strong>结果集映射：</strong> MyBatis可以将查询结果映射到Java对象，消除了手动处理ResultSet的麻烦。这样，你可以直接通过Java对象来操作数据库查询结果，而无需关心数据库的具体实现。</p></li><li><p><strong>动态SQL：</strong> <strong>MyBatis支持动态SQL，允许你在XML文件中编写动态的SQL语句</strong>，根据不同的条件生成不同的SQL。这提高了SQL语句的灵活性。</p></li><li><p><strong>事务管理：</strong> MyBatis能够与Java的事务管理机制集成，确保数据库操作的原子性和一致性。</p></li></ol><p><strong>只需关注SQL语句的编写和Java对象的设计</strong>，而不必过多关心数据库连接、结果集处理等细节。</p><h2 id="Mybatis有什么用"><a href="#Mybatis有什么用" class="headerlink" title="Mybatis有什么用"></a>Mybatis有什么用</h2><p>ibatis-&gt;mybatis</p><p>简化JDBC的开发</p><img src="/xu-runbo/post/59a318a/image-20231222111247722.png" class="" title="image-20231222111247722"><p><a href="https://blog.mybatis.org/">The MyBatis Blog</a></p><p><a href="https://mybatis.org/mybatis-3/zh_CN/index.html">mybatis – MyBatis 3 | 简介</a> </p><blockquote><ol><li>负责将数据报道迟到数据库的那一层代码</li><li>javaee三层架构<ol><li>表现层 ：页面展示</li><li>业务层 ：逻辑处理的</li><li><strong>持久层 ：保存到数据库的 +++</strong></li></ol></li></ol></blockquote><p>框架：</p><ul><li>框架是一个半成品的软件，是一套可以宠用的，通用的，软件基础代码模型</li><li>在框架的基础上构建软件编写更加高效，规范，通用，可拓展性。</li></ul><p>举例：石膏娃娃就是框架，然后涂颜色就是在框架的基础上开发。</p><h2 id="JDBC的缺点"><a href="#JDBC的缺点" class="headerlink" title="JDBC的缺点"></a>JDBC的缺点</h2><p>JDBC代码</p><img src="/xu-runbo/post/59a318a/image-20231222112129454.png" class="" title="image-20231222112129454">  <h2 id="Mybatis是如何简化的？"><a href="#Mybatis是如何简化的？" class="headerlink" title="Mybatis是如何简化的？"></a>Mybatis是如何简化的？</h2><img src="/xu-runbo/post/59a318a/image-20231222112353837.png" class="" title="image-20231222112353837"> <img src="/xu-runbo/post/59a318a/image-20231222112415101.png" class="" title="image-20231222112415101"> <h2 id="MyBatis快速入手"><a href="#MyBatis快速入手" class="headerlink" title="MyBatis快速入手"></a>MyBatis快速入手</h2><p><a href="https://mybatis.org/mybatis-3/zh_CN/getting-started.html">mybatis – MyBatis 3 | 入门</a> </p><img src="/xu-runbo/post/59a318a/image-20231222130753774.png" class="" title="image-20231222130753774"> <h3 id="创建user表，添加数据"><a href="#创建user表，添加数据" class="headerlink" title="创建user表，添加数据"></a>创建user表，添加数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">create</span> database mybatis;</span><br><span class="line"><span class="keyword">select</span> database();</span><br><span class="line">use mybatis;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">password <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>),</span><br><span class="line">addr <span class="type">varchar</span>(<span class="number">30</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(username,password,gender,addr) <span class="keyword">values</span>(&quot;张三&quot;,&quot;123456&quot;,&quot;男&quot;,&quot;东京北海道&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(username,password,gender,addr) <span class="keyword">values</span>(&quot;李四&quot;,&quot;abcd&quot;,&quot;男&quot;,&quot;科学大道&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(username,password,gender,addr) <span class="keyword">values</span>(&quot;王五&quot;,&quot;123&quot;,&quot;女&quot;,&quot;金水区&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建模块，导入坐标"><a href="#创建模块，导入坐标" class="headerlink" title="创建模块，导入坐标"></a>创建模块，导入坐标</h3><p>创建一个maven项目</p><img src="/xu-runbo/post/59a318a/image-20231222152519656.png" class="" title="image-20231222152519656"> <img src="/xu-runbo/post/59a318a/image-20231222152537481.png" class="" title="image-20231222152537481"> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.13&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.32&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.13.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>添加jar包</p><h3 id="配置Mybatis核心配置文件"><a href="#配置Mybatis核心配置文件" class="headerlink" title="配置Mybatis核心配置文件"></a>配置Mybatis核心配置文件</h3><p><a href="https://mybatis.org/mybatis-3/zh_CN/getting-started.html">mybatis – MyBatis 3 | 入门</a> </p><img src="/xu-runbo/post/59a318a/image-20231222152704150.png" class="" title="image-20231222152704150"> <p>创建mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--            数据库的连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xurunbo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    加载SQl的映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/59a318a/image-20231222152933866.png" class="" title="image-20231222152933866"> <p>编写UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--命名空间随便--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectall&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义实体类在pojo模块下"><a href="#定义实体类在pojo模块下" class="headerlink" title="定义实体类在pojo模块下"></a>定义实体类在pojo模块下</h3><img src="/xu-runbo/post/59a318a/image-20231222153136593.png" class="" title="image-20231222153136593"> <p>我们用User，NewUser是举例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username ;</span><br><span class="line">    <span class="keyword">private</span> String password ;</span><br><span class="line">    <span class="keyword">private</span> String gender   ;</span><br><span class="line">    <span class="keyword">private</span> String addr     ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, String gender, String addr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddr</span><span class="params">(String addr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, addr=&#x27;&quot;</span> + addr + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据库对应的属性搬过来，然后添加setter和getter和tostring方法和构造方法。</p><h4 id="xiaotips"><a href="#xiaotips" class="headerlink" title="xiaotips"></a>xiaotips</h4><blockquote><img src="/xu-runbo/post/59a318a/PixPin12-22_15-33-46.gif" class="" title="PixPin12-22_15-33-46"></blockquote><h3 id="编码测试类"><a href="#编码测试类" class="headerlink" title="编码测试类"></a>编码测试类</h3><img src="/xu-runbo/post/59a318a/image-20231222153723913.png" class="" title="image-20231222153723913"> <img src="/xu-runbo/post/59a318a/image-20231222153551530.png" class="" title="image-20231222153551530"> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mybatis_demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行SQL</span></span><br><span class="line">        List&lt;User&gt; users=sqlSession.selectList(<span class="string">&quot;test.selectall&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清理资源</span></span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>xml文件的路径问题</p><blockquote><p>对于 Maven 项目或者其他构建工具，资源文件（比如 XML 文件）通常会被复制到输出目录（如 <code>target/classes</code>）下，这个目录就成了类加载器（ClassLoader）的搜索路径之一。</p><p>在运行时，类加载器会从这些路径中寻找资源文件，因此 Java 程序中的类可以直接访问这些资源。</p><img src="/xu-runbo/post/59a318a/image-20231222184048984.png" class="" title="image-20231222184048984"> </blockquote><h3 id="代码效果"><a href="#代码效果" class="headerlink" title="代码效果"></a>代码效果</h3><p>最终</p><p>一张表可以i看作一个类，然后各个属性就是表的字段。</p><img src="/xu-runbo/post/59a318a/image-20231222153746151.png" class="" title="image-20231222153746151"><p>在关系型数据库中，可以将数据库中的表映射为程序中的类，这个映射的概念称为对象关系映射（ORM）。</p><p> 每个表可以被看作是一个类，表的每一列就是这个类的属性。例如，考虑一个名为 <code>User</code> 的表，包含 <code>id</code>、<code>username</code>、<code>email</code> 等列，可以用一个类来表示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法、getter和setter等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ORM 框架（如 Hibernate、MyBatis 等）可以更方便地在数据库表和类之间进行映射，使得编程时可以直接使用面向对象的思维来操作数据库，而不用关心底层的 SQL 语句和数据库细节。</p><h3 id="IDEA数据库插件"><a href="#IDEA数据库插件" class="headerlink" title="IDEA数据库插件"></a>IDEA数据库插件</h3><img src="/xu-runbo/post/59a318a/image-20231222160137940.png" class="" title="image-20231222160137940"> <img src="/xu-runbo/post/59a318a/image-20231222155548348.png" class="" title="image-20231222155548348"> <img src="/xu-runbo/post/59a318a/image-20231222160228761.png" class="" title="image-20231222160228761"> <h2 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h2><p>解决原生方法中的硬编码</p><img src="/xu-runbo/post/59a318a/image-20231222183645051.png" class="" title="image-20231222183645051"> <p>在resource下面创建Directory的时候</p><p>就不能像的类里面简单的com.hello.UserMapper了</p><p>而是com&#x2F;hello&#x2F;UserMapper</p><img src="/xu-runbo/post/59a318a/PixPin12-22_18-51-43.gif" class="" title="PixPin12-22_18-51-43"><img src="/xu-runbo/post/59a318a/image-20231222185658607.png" class="" title="image-20231222185658607"><h4 id="定义与SQL映射文件同名的Mapper接口"><a href="#定义与SQL映射文件同名的Mapper接口" class="headerlink" title="定义与SQL映射文件同名的Mapper接口"></a>定义与SQL映射文件同名的Mapper接口</h4><p>实现同名的接口和xml配置文件在同一个目录下</p><img src="/xu-runbo/post/59a318a/PixPin12-22_19-11-15.gif" class="" title="PixPin12-22_19-11-15"><h4 id="设置SQL映射文件的namespace属性为Mapper接口全限定名"><a href="#设置SQL映射文件的namespace属性为Mapper接口全限定名" class="headerlink" title="设置SQL映射文件的namespace属性为Mapper接口全限定名"></a>设置SQL映射文件的namespace属性为Mapper接口全限定名</h4><p>r返回类型是实体类:esulttype是实体类</p><p>命名空间就是Mapper接口的的限定名</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--命名空间随便--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--现在要用Mapper接口的全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hello.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectall&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Mapper接口定义方法"><a href="#Mapper接口定义方法" class="headerlink" title="Mapper接口定义方法"></a>Mapper接口定义方法</h4><p>定义一个方法名是SQL映射文件中华sql语句的id，并且保持参数类型和返回值类型一致</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    List&lt;User&gt; <span class="title function_">select</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="注意maybatis配置的mapper路径发生了改变"><a href="#注意maybatis配置的mapper路径发生了改变" class="headerlink" title="注意maybatis配置的mapper路径发生了改变"></a>注意maybatis配置的mapper路径发生了改变</h4><img src="/xu-runbo/post/59a318a/image-20231222192239395.png" class="" title="image-20231222192239395"> <h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mybatis_demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        UserMapper usermapper=sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行SQL</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; users=sqlSession.selectList(&quot;test.selectall&quot;);</span></span><br><span class="line">        List&lt;User&gt; users=usermapper.selectall();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line"></span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清理资源</span></span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ul><li>它从 <code>SqlSessionFactory</code> 中获取了一个 <code>SqlSession</code>。</li><li>使用 <code>sqlSession.getMapper(UserMapper.class)</code> 获取了<code>UserMapper</code>接口的代理对象。</li><li>这就是所谓的 “代理对象”，MyBatis在运行时动态生成了<code>UserMapper</code>接口的实现。</li><li>调用代理对象的 <code>selectall()</code> 方法，MyBatis将这个方法调用转换为XML文件中定义的SQL查询。</li><li>“代理对象”是MyBatis在运行时动态创建的一个对象，它实现了你的<code>UserMapper</code>接口。这个对象负责根据XML配置将方法调用转换为相应的SQL查询，提供了一种方便的方式与数据库交互。</li></ul></blockquote><p>效果和之前一样</p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>MyBatis 使用接口和 XML 映射来提供 SQL 语句和 Java 代码之间的清晰分离。它充当 Java 应用程序和数据库之间的桥梁，XML 配置指定如何将 SQL 查询映射到 Java 方法。</p><blockquote><p><strong>UserMapper 接口 （UserMapper.java）：</strong></p><ul><li>此接口<strong>定义将用于数据库操作的方法</strong>。</li><li>在您的例子中，它有一个单一的方法，旨在从“tb_user”表中检索所有用户。<code>selectall()</code></li></ul><ol><li>用户映射器 XML 配置 （UserMapper.xml）：<ul><li><strong>此 XML 文件包含在 UserMapper 接口中定义的方法的 SQL 映射</strong>。</li><li><strong>该元素指定命名空间，该命名空间是 UserMapper 接口的完全限定名称</strong>。<code>&lt;mapper&gt;</code></li><li>该元素将该方法映射到从“tb_user”表中检索所有列的 SQL 查询。<code>&lt;select&gt;``selectall()</code></li></ul></li></ol></blockquote><img src="/xu-runbo/post/59a318a/image-20231222201626929.png" class="" title="image-20231222201626929"><blockquote><p> <code>&lt;package name=&quot;com/hello/mapper&quot;/&gt;</code></p><p> &#x2F;换成.也是ok的</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    加载SQl的映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;com/hello/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--        这样就可以同时加载很多很多个映射sql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com/hello/mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis核心配置文件"><a href="#Mybatis核心配置文件" class="headerlink" title="Mybatis核心配置文件"></a>Mybatis核心配置文件</h2><p><code>mybatis-config.xml</code></p><p><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html">mybatis – MyBatis 3 | 配置</a> </p><p>MyBatis配置文件是MyBatis框架的核心部分，用于配置整个框架的运行方式：</p><ol><li><p><strong><code>&lt;configuration&gt;</code> 元素：</strong></p><ul><li>根元素，包含整个MyBatis配置信息。</li></ul></li><li><p><strong><code>&lt;environments&gt;</code> 元素：</strong></p><ul><li>配置数据源和事务管理器。</li><li><code>default</code> 属性指定默认的环境，这里是 “development”。</li></ul></li><li><p><strong><code>&lt;environment&gt;</code> 元素：</strong></p><ul><li>配置一个运行环境，包括事务管理器和数据源。</li><li><code>id</code> 属性是环境的标识，这里是 “development”。</li><li><code>transactionManager</code> 元素指定事务管理器的类型，这里是 “JDBC”。</li><li><code>dataSource</code> 元素配置数据源的类型和相关属性，这里使用了连接池（”POOLED”）。</li></ul></li><li><p><strong><code>&lt;dataSource&gt;</code> 元素：</strong></p><ul><li>配置数据源的相关信息，包括数据库驱动、连接URL、用户名和密码。</li></ul></li><li><p><strong><code>&lt;mappers&gt;</code> 元素：</strong></p><ul><li>配置MyBatis映射器（Mapper）。</li><li><code>&lt;mapper&gt;</code> 元素用于指定映射器文件的位置，你的代码中使用了 <code>&lt;package&gt;</code> 元素，表示通过包名加载所有映射器文件。</li></ul></li><li><p><strong><code>&lt;package&gt;</code> 元素：</strong></p><ul><li>通过包名加载所有映射器文件，指定的包名是 “com&#x2F;hello&#x2F;mapper”。</li><li>MyBatis将会扫描这个包下所有符合规范的接口，并动态创建对应的代理对象。</li></ul></li><li><p><strong>映射器文件（Mapper XML）：</strong></p><ul><li>映射器文件包含了SQL语句和它们与接口方法的映射关系。</li><li>注释中的 <code>&lt;mapper&gt;</code> 元素中的 <code>namespace</code> 属性指定了接口的全限定名，与接口关联。</li></ul></li></ol><p>作用是告诉MyBatis如何连接数据库、处理事务，并指定了映射器的位置。</p><p>映射器文件中的SQL语句与接口方法的映射关系由MyBatis框架自动管理，通过动态代理实现。</p><h3 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h3><p>不区分大小写了，方便</p><p><a href="https://mybatis.org/mybatis-3/zh_CN/configuration.html#typeAliases">mybatis – MyBatis 3 | 配置</a></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这样就能把所有实体类都起了别名，现在是类名不区分大小了，也不用带包名。</span></span><br><span class="line"><span class="comment">而且还要放在上面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hello.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/59a318a/image-20231222203317214.png" class="" title="image-20231222203317214"><p>这样就实现了别名</p><h2 id="配置文件-注解完成增删改查"><a href="#配置文件-注解完成增删改查" class="headerlink" title="配置文件&#x2F;注解完成增删改查"></a>配置文件&#x2F;注解完成增删改查</h2><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><img src="/xu-runbo/post/59a318a/image-20231223094618117.png" class="" title="image-20231223094618117"> <h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><blockquote><p>创建tb_brand表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_brand</span><br><span class="line">(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">rand_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">company_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">ordered intr</span><br><span class="line">description <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line"></span><br><span class="line">status <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;小米&quot;,&quot;小米科技有限公司&quot;,<span class="number">5</span>,&quot;are you ok&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;三只松鼠&quot;,&quot;三只松鼠有限公司&quot;,<span class="number">5</span>,&quot;好吃不贵&quot;,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;华为&quot;,&quot;华为技术有限公司&quot;,<span class="number">5</span>,&quot;华为让生活更幸福&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;vivo&quot;,&quot;vivo有限公司&quot;,<span class="number">5</span>,&quot;vivo智能手坤&quot;,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand;</span><br></pre></td></tr></table></figure><p>实体brand</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐使用包装的类型，因为没有M默认值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> Integer  id           ;</span><br><span class="line"> <span class="keyword">private</span> String  rand_name    ;</span><br><span class="line"> <span class="keyword">private</span> String  company_name ;</span><br><span class="line"> <span class="keyword">private</span> Integer ordered      ;</span><br><span class="line"> <span class="keyword">private</span> String  description  ;</span><br><span class="line"> <span class="comment">//0禁用，1正常</span></span><br><span class="line"> <span class="keyword">private</span> Integer   status       ;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Brand</span><span class="params">(Integer id, String rand_name, String company_name, Integer ordered, String description, Integer status)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.id = id;</span><br><span class="line">     <span class="built_in">this</span>.rand_name = rand_name;</span><br><span class="line">     <span class="built_in">this</span>.company_name = company_name;</span><br><span class="line">     <span class="built_in">this</span>.ordered = ordered;</span><br><span class="line">     <span class="built_in">this</span>.description = description;</span><br><span class="line">     <span class="built_in">this</span>.status = status;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> id;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.id = id;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">getRand_name</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> rand_name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRand_name</span><span class="params">(String rand_name)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.rand_name = rand_name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">getCompany_name</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> company_name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany_name</span><span class="params">(String company_name)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.company_name = company_name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> Integer <span class="title function_">getOrdered</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> ordered;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrdered</span><span class="params">(Integer ordered)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.ordered = ordered;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> description;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.description = description;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> Integer <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> status;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.status = status;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Brand&#123;&quot;</span> +</span><br><span class="line">             <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">             <span class="string">&quot;, rand_name=&#x27;&quot;</span> + rand_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">             <span class="string">&quot;, company_name=&#x27;&quot;</span> + company_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">             <span class="string">&quot;, ordered=&quot;</span> + ordered +</span><br><span class="line">             <span class="string">&quot;, description=&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">             <span class="string">&quot;, status=&quot;</span> + status +</span><br><span class="line">             <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试用例</p><img src="/xu-runbo/post/59a318a/image-20231223095256586.png" class="" title="image-20231223095256586"> </blockquote><blockquote><p><strong>安装MybatisX插件</strong></p><img src="/xu-runbo/post/59a318a/image-20231223095648921.png" class="" title="image-20231223095648921"><p>以后SQL映射文件和接口的方法可以快速的跳转</p><p>点击蓝鸟和红鸟互相跳转.</p><p>我们嗯在SQL映射文件写的相当于statement对象</p><img src="/xu-runbo/post/59a318a/image-20231223095838647.png" class="" title="image-20231223095838647"> </blockquote><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><blockquote><p>编写Mappper接口</p><p>参数：除了id意外的所有数据 <code>void add(Brand brand);</code></p><p>结果void</p><p>编写SQL映射文件</p><img src="/xu-runbo/post/59a318a/image-20231223213527779.png" class="" title="image-20231223213527779"> </blockquote><p>执行方法测试&#96;&#96;SqlSession sqlSession&#x3D;sqlSessionFactory.openSession();&#96;默认开启事务</p><p>进行增删改查操作后需要手动使用<code>sqlSession.commit();</code>提交事务</p><p><code>SqlSession sqlSession=sqlSessionFactory.openSession(true);</code>可以设置自动提交事务(关闭事务);</p><p>开启了事务是不会自动提交的！</p><p>mybatis事务：没有自动提交（默认是开启事务的）</p><p>手动mapper对象commit()</p><p>代码实现:</p><p>手动提交</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">       <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">       <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">       SqlSession sqlSession=sqlSessionFactory.openSession(<span class="literal">false</span>);</span><br><span class="line">       sqlSession.commit(<span class="literal">true</span>);</span><br><span class="line">       BrandMapper brandmapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">       Brand brand=<span class="keyword">new</span> <span class="title class_">Brand</span>(<span class="string">&quot;紫米&quot;</span>,<span class="string">&quot;紫米科技有限公司&quot;</span>,<span class="number">9</span>,<span class="string">&quot;性价比手机&quot;</span>,<span class="number">1</span>);</span><br><span class="line">       brandmapper.add(brand);</span><br><span class="line">       sqlSession.commit();</span><br><span class="line">       <span class="keyword">if</span>(brand!=<span class="literal">null</span>)</span><br><span class="line">           System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           System.out.println(<span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line">       List&lt;Brand&gt; brands=brandmapper.selectall();</span><br><span class="line"></span><br><span class="line">       System.out.println(brands);</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>下面是改为true自动提交</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">       <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">       <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">       SqlSession sqlSession=sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">       sqlSession.commit(<span class="literal">true</span>);</span><br><span class="line">       BrandMapper brandmapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">       Brand brand=<span class="keyword">new</span> <span class="title class_">Brand</span>(<span class="string">&quot;紫米&quot;</span>,<span class="string">&quot;紫米科技有限公司&quot;</span>,<span class="number">9</span>,<span class="string">&quot;性价比手机&quot;</span>,<span class="number">1</span>);</span><br><span class="line">       brandmapper.add(brand);</span><br><span class="line">       <span class="keyword">if</span>(brand!=<span class="literal">null</span>)</span><br><span class="line">           System.out.println(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           System.out.println(<span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line">       List&lt;Brand&gt; brands=brandmapper.selectall();</span><br><span class="line"></span><br><span class="line">       System.out.println(brands);</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="主键返回"><a href="#主键返回" class="headerlink" title="主键返回"></a>主键返回</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlSession.commit();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(brand!=<span class="literal">null</span>)</span><br><span class="line">           System.out.println(<span class="string">&quot;插入成功！&quot;</span>+brand.getId());</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           System.out.println(<span class="string">&quot;插入失败！&quot;</span>);</span><br></pre></td></tr></table></figure><p>插入成功！null</p><p>现在是获取不到主键的！</p><p>修改sql映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--keyProperty是实体对象的id--&gt;</span></span><br><span class="line">        insert into tb_brand(rand_name,company_name,ordered,description,status)</span><br><span class="line">        values(#&#123;rand_name&#125;,#&#123;company_name&#125;,#&#123;ordered&#125;,#&#123;description&#125;,#&#123;status&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次执行插入代码，就可以拿到id了！</p><img src="/xu-runbo/post/59a318a/image-20231223220937868.png" class="" title="image-20231223220937868"> <h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><p>前端提供id</p><p>然后执行删除</p><p>sql映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_brand where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><p>代码测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">deletetest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">        sqlSession.commit(<span class="literal">true</span>);</span><br><span class="line">        BrandMapper brandmapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> id=<span class="number">15</span>;</span><br><span class="line"><span class="comment">//        Brand brand=new Brand(&quot;紫色的米&quot;,&quot;紫色的米科技有限公司&quot;,9,&quot;性价比手鸡&quot;,1);</span></span><br><span class="line">        brandmapper.delete(id);</span><br><span class="line"></span><br><span class="line">        List&lt;Brand&gt; brands=brandmapper.selectall();</span><br><span class="line"></span><br><span class="line">        System.out.println(brands);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/59a318a/PixPin12-24_21-44-33.gif" class="" title="PixPin12-24_21-44-33"><h5 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h5><p>用户的选中的都要删除的，如何实现批量删除呢？</p><p>回得到一个id的数据，然后遍历这个数组，然后一一删除</p><p><code>delete from tb_brand where id in (? ,? ,?);</code></p><blockquote><p>方法1：</p><p>​mybatis:默认会把我们传入的数组用Map的方式存储 </p><p>​ array : 数组</p><p>方法2：</p><p>​用param注解</p></blockquote><p>代码演示</p><p>sql映射文件</p><p>&#x3D;&#x3D;<strong>没有注解是不能传入ids，也就是参数的名字的！</strong>&#x3D;&#x3D;</p><p>演示错误:</p><img src="/xu-runbo/post/59a318a/image-20231225084122369.png" class="" title="image-20231225084122369"> <p>Mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deletebyids</span><span class="params">(<span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deletebyids&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    delete from tb_brand where id</span><br><span class="line">    in(</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是自动拼();</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deletebyids&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    delete from tb_brand where id</span><br><span class="line">    in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解</p><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deletebyids</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> <span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure><p>Sql映射文件</p><p>&#x3D;&#x3D;唯一要注意的是<code>collection=&quot;ids&quot;</code>可以用参数ids了&#x3D;&#x3D;</p><p>没有的时候是只能用默认的array！！！！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deletebyids&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    delete from tb_brand where id</span><br><span class="line">    in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h5><p>使用@Param注解！</p><blockquote><p>mybatis会将数组参数，封装为一个Map集合<em>默认：array&#x3D;数组</em></p><p>使用@Param注解改变map集合的默认key的名称</p></blockquote><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><h5 id="修改全部字段"><a href="#修改全部字段" class="headerlink" title="修改全部字段"></a>修改全部字段</h5><hr><p>编写Mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure><p>参数：所有数据</p><p>结果void</p><hr><p>SQl映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update tb_brand</span><br><span class="line">    set</span><br><span class="line">    rand_name=#&#123;rand_name&#125;,</span><br><span class="line">    company_name=#&#123;company_name&#125;,</span><br><span class="line">    ordered=#&#123;ordered&#125;,</span><br><span class="line">    description=#&#123;description&#125;,</span><br><span class="line">    status=#&#123;status&#125;</span><br><span class="line">    where id=#&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行方法测试：</p><p>代码演示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">updatetest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">       <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line"></span><br><span class="line">       SqlSession sqlSession=sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">       sqlSession.commit(<span class="literal">true</span>);</span><br><span class="line">       BrandMapper brandmapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">       </span><br><span class="line">       Brand brand=<span class="keyword">new</span> <span class="title class_">Brand</span>(<span class="string">&quot;紫色的米&quot;</span>,<span class="string">&quot;紫色的米科技有限公司&quot;</span>,<span class="number">9</span>,<span class="string">&quot;性价比手鸡&quot;</span>,<span class="number">1</span>);</span><br><span class="line">       <span class="comment">//因为有参构造没有id,,自己设置</span></span><br><span class="line">       brand.setId(<span class="number">15</span>);</span><br><span class="line">       brandmapper.update(brand);</span><br><span class="line">       <span class="keyword">if</span>(brand!=<span class="literal">null</span>)</span><br><span class="line">           System.out.println(<span class="string">&quot;修改成功！&quot;</span>+brand.getId());</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           System.out.println(<span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line"></span><br><span class="line">       List&lt;Brand&gt; brands=brandmapper.selectall();</span><br><span class="line"></span><br><span class="line">       System.out.println(brands);</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>着用就把原来的15给首先该了，修改的是全部信息。</p><img src="/xu-runbo/post/59a318a/image-20231223221807239.png" class="" title="image-20231223221807239"> <p>如果</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">int update(Brand brand);</span><br></pre></td></tr></table></figure><p>并且</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">int</span> count=brandmapper.update(brand);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//dsads</span></span><br><span class="line">        <span class="keyword">if</span>(brand!=<span class="literal">null</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;修改成功！&quot;</span>+<span class="string">&quot;影响了&quot;</span>+count+<span class="string">&quot;行&quot;</span>);</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/59a318a/image-20231223222245404.png" class="" title="image-20231223222245404"> <h5 id="修改动态字段"><a href="#修改动态字段" class="headerlink" title="修改动态字段"></a>修改动态字段</h5><p>实现：用户修改密码的时候，就只需要修改密码就可以了</p><p>sql映射修改为</p><img src="/xu-runbo/post/59a318a/image-20231223222524147.png" class="" title="image-20231223222524147"> <p>如果其他属性不设置的时候默认是null</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;rand_name != null and rand_name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            rand_name=#&#123;rand_name&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;company_name != null and company_name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            company_name=#&#123;company_name&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ordered != null&quot;</span>&gt;</span></span><br><span class="line">            ordered=#&#123;ordered&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description != null and description != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            description=#&#123;description&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            status=#&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id=#&#123;id&#125;;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在会有一个问题，如果用户没有提供status，是null，那么就会造成 前面的数据,null</p><p>这样必然要报错啊，所以我们用高级的mybatis提供的&lt;set&gt;标签</p><p>这样就能动态的处理<code>，</code>的问题了</p><p>注意最后的<code> where id=#&#123;id&#125;;</code>没有被set标签包裹</p><p>代码演示:!</p><p>实现修改局部字段，用户传递什么就修改什么！</p><img src="/xu-runbo/post/59a318a/PixPin12-23_22-42-34.gif" class="" title="PixPin12-23_22-42-34"><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><h5 id="1查询所有数据"><a href="#1查询所有数据" class="headerlink" title="1查询所有数据"></a>1查询所有数据</h5><p>BrandMapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> &#123;</span><br><span class="line">    List&lt;Brand&gt; <span class="title function_">selectall</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SQL映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--命名空间随便--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--现在要用Mapper接口的全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hello.mapper.BrandMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectall&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_brand;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>BrandTest.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.hello.mapper.UserMapper;</span></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.BrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        BrandMapper brandmapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行SQL</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; users=sqlSession.selectList(&quot;test.selectall&quot;);</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; users=usermapper.selectall();</span></span><br><span class="line">        List&lt;Brand&gt; brands=brandmapper.brandselectall();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line"></span><br><span class="line">        System.out.println(brands);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清理资源</span></span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mybatis配置文件xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这样就能把所有实体类都起了别名，现在是类名不区分大小了，也不用带包名。</span></span><br><span class="line"><span class="comment">    而且还要放在上面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hello.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--            数据库的连接信息--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///db&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xurunbo&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    加载SQl的映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;com/hello/mapper/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        这样就可以同时加载很多很多个映射sql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com/hello/mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper resource=&quot;com/hello/mapper/BrandMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><img src="/xu-runbo/post/59a318a/image-20231223103801551.png" class="" title="image-20231223103801551"> <p>不同命名空间的selectall是不一样的</p><h5 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h5><p>数据库表的字段和实体类的属性名称不同的时候就不能自动封装数据</p><ol><li><p>起别名</p><p>现在实体类的命名是驼峰，数据库是_</p><p>如何实现封装数据？</p><p>缺点:每次查询都定义别名</p><img src="/xu-runbo/post/59a318a/image-20231223102809044.png" class="" title="image-20231223102809044"></li><li><p>SQL片段 </p><p>防止</p><img src="/xu-runbo/post/59a318a/image-20231223103003384.png" class="" title="image-20231223103003384"></li><li><p>ResultMap</p><p>映射别名</p><blockquote><p>id:唯一标识</p><p>type ：映射的别名，支持别名</p><hr><p>id的子标签&#x3D;&#x3D;&#x3D;&#x3D;完成<strong>主键字段</strong>的映射</p><pre><code>column:是表的列名</code></pre><p>​property：实体类的属性名</p><p>result的子标签&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;完成<strong>一般字段</strong>的映射</p><p>​column:是表的列名</p><p>​property：实体类的属性名</p></blockquote><img src="/xu-runbo/post/59a318a/image-20231223103347267.png" class="" title="image-20231223103347267"></li></ol><h5 id="2查看详情"><a href="#2查看详情" class="headerlink" title="2查看详情"></a>2查看详情</h5><blockquote><p>根据前端传来的id</p><p>进行select</p><p>然后返回Brand对象的信息</p></blockquote><p>Sql映射文件添加</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_brand where id=#&#123;i&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应BrandMapper接口添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Brand <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> i)</span>;</span><br></pre></td></tr></table></figure><p>然后对应的测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">    SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">    BrandMapper brandmapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    Brand brand=brandmapper.selectById(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;查询的信息是:\n&quot;</span>+brand);</span><br><span class="line">    <span class="comment">//清理资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">    System.out.println(System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码效果</p><img src="/xu-runbo/post/59a318a/image-20231223104341194.png" class="" title="image-20231223104341194"><h5 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h5><p>使用import org.junit.Test;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.hello.mapper.UserMapper;</span></span><br><span class="line"><span class="keyword">import</span> com.hello.mapper.BrandMapper;</span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        BrandMapper brandmapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行SQL</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; users=sqlSession.selectList(&quot;test.selectall&quot;);</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; users=usermapper.selectall();</span></span><br><span class="line">        List&lt;Brand&gt; brands=brandmapper.selectall();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line"></span><br><span class="line">        System.out.println(brands);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清理资源</span></span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">selectbyid</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        BrandMapper brandmapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行SQL</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; users=sqlSession.selectList(&quot;test.selectall&quot;);</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; users=usermapper.selectall();</span></span><br><span class="line">        List&lt;Brand&gt; brands=brandmapper.selectall();</span><br><span class="line">        Brand brand=brandmapper.selectById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;查询的信息是:\n&quot;</span>+brand);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(brands);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//清理资源</span></span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>去掉static和args参数的声明</li></ol><blockquote><p>参数占位符</p><p>#{}会将其替换为?  preparestatement,为了防止sql注入</p><p>${} ：拼SQl，会存在SQL注入问题,表名或者列名不固定的情况下</p><p>所以参数传递肯定用#{};安全！</p><p>用到拼字符串的时候采用${},也很少用</p><p>##########################################################################</p><p>特殊字符处理</p><p><code>&amp;lt;</code>就i会变成&lt;</p><p>或者 CDATA区:，内的符号会当作纯文本！</p><img src="/xu-runbo/post/59a318a/image-20231223110721969.png" class="" title="image-20231223110721969"><img src="/xu-runbo/post/59a318a/image-20231223110926641.png" class="" title="image-20231223110926641">  </blockquote><h5 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a><a name="条件查询">条件查询</a></h5><blockquote><p>三个条件，企业名称，品牌名称，当前状态是启动的</p><p>如何连接起来这三个条件？(模糊查询)</p><p>select * from tb_brand  where status &#x3D; ? and companyName like ? and bradName like ?;</p><p><a href="#%E6%8E%A5%E6%94%B6%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0">如何接受多个参数？？？</a></p></blockquote><p>代码实现:三种实现</p><p>Test.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">selectbyCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//加载mybatis的核心配置文件，获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Sqlsussion对象</span></span><br><span class="line">        SqlSession sqlSession=sqlSessionFactory.openSession();</span><br><span class="line">        BrandMapper brandmapper=sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> status=<span class="number">1</span>;</span><br><span class="line">        String companyName=<span class="string">&quot;小米&quot;</span>;</span><br><span class="line">        String brandName=<span class="string">&quot;小米&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        数据处理</span></span><br><span class="line">        companyName=<span class="string">&quot;%&quot;</span>+companyName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line">        brandName =<span class="string">&quot;%&quot;</span>+brandName+<span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Brand brand=<span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">        brand.setStatus(<span class="number">1</span>);</span><br><span class="line">        brand.setCompany_name(<span class="string">&quot;%小米%&quot;</span>);</span><br><span class="line">        brand.setRand_name(<span class="string">&quot;%小米%&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;status&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;company_name&quot;</span>,<span class="string">&quot;%小米%&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;rand_name&quot;</span>,<span class="string">&quot;%小米%&quot;</span>);</span><br><span class="line"><span class="comment">//        用注解实现11111111111</span></span><br><span class="line">        List&lt;Brand&gt; brands= brandmapper.selectByCondition(status,companyName,brandName);</span><br><span class="line"><span class="comment">//        List&lt;Brand&gt; brands= brandmapper.selectByCondition(1,&quot;%小米%&quot;,&quot;%小米%&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        用对象实现222222222222</span></span><br><span class="line">        List&lt;Brand&gt; brands1=brandmapper.selectByCondition1(brand);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        用map实现3333333333333</span></span><br><span class="line">        List&lt;Brand&gt; brands2=brandmapper.selectByCondition2(map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;查询的信息是:\n&quot;</span>+brands);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询的信息是:\n&quot;</span>+brands1);</span><br><span class="line">        System.out.println(<span class="string">&quot;查询的信息是:\n&quot;</span>+brands2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(brands);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//清理资源</span></span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        System.out.println(System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sql映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--命名空间随便--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--现在要用Mapper接口的全限定名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hello.mapper.BrandMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectall&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_brand;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_brand where id = #&#123;i&#125;;</span><br><span class="line"><span class="comment">&lt;!--        select * from tb_brand where id &lt;![CDATA[--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        ]]&gt; #&#123;i&#125;;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_brand where status = #&#123;status&#125; and company_Name like #&#123;companyName&#125; and rand_Name like #&#123;brandName&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_brand where status = #&#123;status&#125; and company_Name like #&#123;company_name&#125; and rand_Name like #&#123;rand_name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">        select * from tb_brand where status = #&#123;status&#125; and company_Name like #&#123;company_name&#125; and rand_Name like #&#123;rand_name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>brandMapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hello.pojo.Brand;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> &#123;</span><br><span class="line">    List&lt;Brand&gt; <span class="title function_">selectall</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Brand <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Brand&gt;selectByCondition(<span class="meta">@Param(&quot;status&quot;)</span><span class="type">int</span> status, <span class="meta">@Param(&quot;companyName&quot;)</span>String companyName, <span class="meta">@Param(&quot;brandName&quot;)</span> String brandName);</span><br><span class="line"></span><br><span class="line">    List&lt;Brand&gt;selectByCondition1(Brand brand);</span><br><span class="line"></span><br><span class="line">    List&lt;Brand&gt;selectByCondition2(Map map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="注意-4"><a href="#注意-4" class="headerlink" title="注意"></a>注意</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select * from tb_brand <span class="type">where</span> <span class="variable">status</span> <span class="operator">=</span> #&#123;status&#125; and company_Name like #&#123;company_name&#125; and rand_Name like #&#123;rand_name&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>传入对象的时候，它内部会调用get方法，我们要保证{}里面的数据有对应的get方法就可以了</p><p>传入map的时候也一样，要保证{}里面的字符串和键要对应</p></blockquote><p><a href="#%E8%A7%A3%E5%86%B3%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2">但是现在的条件查询还存在bug，用户不一定把三个条件都写，只写一个？怎么办?</a></p><h2 id="Mybatis参数传递"><a href="#Mybatis参数传递" class="headerlink" title="Mybatis参数传递"></a>Mybatis参数传递</h2><p>MyBatis接口方法中可以接收各种各样的参数，MyBatis底层对于这些参数进行不同的封装处理方式</p><p>单个参数：</p><p>1.POJO类型：</p><p>2.Map集合:</p><p>3.Collection:</p><p>4.List:</p><p>5.Array:</p><p>6.其他类型：</p><p>&#x3D;&#x3D;<strong>MyBatis提供了ParamNameResolver类来进行参数封装</strong>&#x3D;&#x3D;</p><h3 id="多个参数的封装"><a href="#多个参数的封装" class="headerlink" title="多个参数的封装"></a>多个参数的封装</h3><h4 id="param是如何传递的"><a href="#param是如何传递的" class="headerlink" title="param是如何传递的"></a>param是如何传递的</h4><p><a href="#%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2">条件查询</a></p><p>SQL映射</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">    select * from tb_brand where status = #&#123;status&#125; and company_Name like #&#123;companyName&#125; and rand_Name like #&#123;brandName&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Brand&gt;selectByCondition(<span class="meta">@Param(&quot;status&quot;)</span><span class="type">int</span> status, <span class="meta">@Param(&quot;companyName&quot;)</span>String companyName, <span class="meta">@Param(&quot;brandName&quot;)</span> String brandName);</span><br></pre></td></tr></table></figure><p>java测试代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Brand&gt; brands= brandmapper.selectByCondition(status,companyName,brandName);</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/59a318a/image-20231224225339555.png" class="" title="image-20231224225339555"> <p>其实是</p><blockquote><p><code>    List&lt;Brand&gt;selectByCondition(@Param(&quot;status&quot;)int status, @Param(&quot;companyName&quot;)String companyName, @Param(&quot;brandName&quot;) String brandName);</code></p><p>多个参数：封装为Map集合map.put（”argo”，参数值1） ：&#x3D;&#x3D;<strong>使用@Param注解就是替换那些默认的键值</strong>&#x3D;&#x3D;</p><p>map.put（”param1”，参数值1）</p><p>map.put（”param2”，参数值2)</p><p>map.put（”agr1”，参数值1）</p><p>map.put（”agr2”，参数值2）</p><p>》》</p></blockquote><p>原理：CTRL+SHIFT+n查找类</p><p>源码调试 </p><img src="/xu-runbo/post/59a318a/image-20231224230102090.png" class="" title="image-20231224230102090"> <p><a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx?p=59&vd_source=45cf0df1cf29fd12377b442a74b95876">参数传递_哔哩哔哩_bilibili</a></p><h3 id="单个参数的传递"><a href="#单个参数的传递" class="headerlink" title="单个参数的传递"></a>单个参数的传递</h3><p>1.POJO类型： 》直接使用 保证 属性名 和 参数占位符一致</p><p>2.Map集合:   》 直接使用 保证 键名 和 参数占位符一致</p><p>3.Collection：封装为Map集合</p><p>​map.put(“argo”,collection集合);</p><p>​map.put(“collection”,collection集合);</p><p>4.List：封装为Map集合</p><p>​map.put(“argo”,List集合);</p><p>​map.put(“collection”,list集合);map.put（”list”,List集合）；</p><p>5.Array：封装为Map集合</p><p>​map.put(“argo”，数组);</p><p>​map.put（”array”，数组);</p><p>6.其他类型：直接使用，无所谓，sql里面写什么都ok，形参罢了 </p><p>结论，最终！我们用@Param注解！</p><p>》》》</p><blockquote><p>&#x3D;&#x3D;<strong>建议：将来都使用@Param注解来修改Map集合中默认的键名，并使用修改后的名称来获取值，这样可读性更高！</strong>&#x3D;&#x3D;</p></blockquote><h3 id="注解开发"><a href="#注解开发" class="headerlink" title="&#x3D;&#x3D;注解开发&#x3D;&#x3D;"></a>&#x3D;&#x3D;注解开发&#x3D;&#x3D;</h3><img src="/xu-runbo/post/59a318a/image-20231224231942388.png" class="" title="image-20231224231942388"> <p>原来的Mapper写一个方法</p><p>然后sql映射文件再写对应的sql</p><p>现在直接写在Mapper接口里</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from tb_brand;&quot;)</span></span><br><span class="line">List&lt;Brand&gt; <span class="title function_">selectall</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><blockquote><p>一些简单的要求可以用注解开发</p><p>但是对于稍微复杂的sql</p><p>》》》官方回答</p><blockquote><p>使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点的语句，Java注解不仅力不从心，还会让你本就复杂的 SQL语句更加混乱不堪。</p><p><strong>因此，如果你需要做一些很复杂的操作，最好用XML来映射语句。</strong></p><p>选择何种方式来配置映射，以及认为是否应该要统一映射语句定义的形式，完全取决于你和你的团队。换句话说，永远不要拘泥于一种方式，你可以很轻松的在基于注解和XML的语句映射方式间自由移植和切换。</p></blockquote></blockquote><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a><a href="#%E8%A7%A3%E5%86%B3%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2">动态SQL</a></h2><img src="/xu-runbo/post/59a318a/image-20231223162910787.png" class="" title="image-20231223162910787"> <img src="/xu-runbo/post/59a318a/image-20231223162928698.png" class="" title="image-20231223162928698"> <h3 id="单条件动态查询"><a href="#单条件动态查询" class="headerlink" title="单条件动态查询"></a>单条件动态查询</h3><p>choose:switch</p><p>when:case</p><p>otherwise : default</p><p><strong>只会有一个生效</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;company_name != null and company_name!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            company_Name like #&#123;company_name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;rand_name != null and rand_name!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            rand_Name like #&#123;rand_name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    &lt;-- 保证语法正常，当用户什么都不传入的时候&lt;/--&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        1= 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后还是用&lt;where&gt;自动帮我们修改语法多余的where</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">                status = #&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;company_name != null and company_name!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                company_Name like #&#123;company_name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;rand_name != null and rand_name!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">                rand_Name like #&#123;rand_name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    &lt;-- 保证语法正常，当用户什么都不传入的时候&lt;/--&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="接收参数的问题"><a href="#接收参数的问题" class="headerlink" title="接收参数的问题"></a><a name="接收多个参数">接收参数的问题</a></h2><ol><li><p>用<strong>注解的方式</strong>来标注-(散装参数)</p><p><code>List&lt;Brand&gt;selectByCondition(@Param(&quot;status&quot;)int status,@Param(&quot;companyName&quot;) StringcompanyName,@Param(&quot;brandName&quot;) String brandName);</code></p><p>对于sql映射文件：</p><p>这样就知道传入的参数对应哪一个占位符了</p><p>status穿来的参数status，一一对应</p></li><li><p>利用对象组装参数</p><p><code>List&lt;Brand&gt;selectByCondition(Brand brand);</code></p><p>然后就在对象里面用get方法拿到对应的参数</p></li><li><p>封装为map集合</p><p><code>List&lt;Brand&gt;selectByCondition(Map map);</code></p><p>map集合的键的名称和参数保持一致就好了</p></li></ol><h2 id="解决条件查询"><a href="#解决条件查询" class="headerlink" title="解决条件查询"></a><a name="解决条件查询">解决条件查询</a></h2><p>动态sql</p><img src="/xu-runbo/post/59a318a/image-20231223160003802.png" class="" title="image-20231223160003802"> <p>用map演示</p><p>sql映射文件.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">        status = #&#123;status&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;company_name != null and company_name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and company_Name like #&#123;company_name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;rand_name != null and rand_name!=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        and rand_Name like #&#123;rand_name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接口不变</p><img src="/xu-runbo/post/59a318a/PixPin12-23_16-12-30.gif" class="" title="PixPin12-23_16-12-30"><p>但是也有点小bug,&#x3D;&#x3D;因为第一个条件不需要逻辑运算符&#x3D;&#x3D;</p><p>最终解决问题</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            1=1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;company_name != null and company_name!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and company_Name like #&#123;company_name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and 1=1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;rand_name != null and rand_name!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and rand_Name like #&#123;rand_name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and 1=1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/59a318a/PixPin12-23_16-20-13.gif" class="" title="PixPin12-23_16-20-13"><p>因为null被当作0，然后0 and 1也是0，所以就报错了。。。现在让如果是null的时候不执行数据但是是1让继续下一句.</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where 1 = 1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">        and status = #&#123;status&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;company_name != null and company_name!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and company_Name like #&#123;company_name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;rand_name != null and rand_name!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and rand_Name like #&#123;rand_name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这一种用的最多，用mybatis提供的&lt;wherere标签&gt;</p><p>会根据用户提供的惨呼，如果只有一个会智能的去掉and</p><p>所以只需要全部加and 并且用&lt;where&gt;就可以了</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hello.pojo.Brand&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">        and status = #&#123;status&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;company_name != null and company_name!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and company_Name like #&#123;company_name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;rand_name != null and rand_name!=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">        and rand_Name like #&#123;rand_name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/59a318a/image-20231223162928698.png" class="" title="image-20231223162928698"> ]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MerryChristmas</title>
      <link href="/xu-runbo/post/4f9059b0.html"/>
      <url>/xu-runbo/post/4f9059b0.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台窗口大小</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> WIDTH = <span class="number">80</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> HEIGHT = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机数生成器</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">random</span><span class="params">(<span class="type">int</span> min, <span class="type">int</span> max)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">rand</span>() % (max - min + <span class="number">1</span>) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机颜色</span></span><br><span class="line"><span class="function">WORD <span class="title">randomColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">random</span>(<span class="number">1</span>, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制字符</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawChar</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">char</span> c, WORD color)</span> </span>&#123;</span><br><span class="line">    COORD coord = &#123; x, y &#125;;</span><br><span class="line">    <span class="built_in">SetConsoleCursorPosition</span>(<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), coord);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), color);</span><br><span class="line">    cout &lt;&lt; c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空控制台</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clearConsole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制圣诞树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawTree</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, WORD color)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> numLeaves = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; numLeaves; j++) &#123;</span><br><span class="line">            <span class="built_in">drawChar</span>(x - numLeaves / <span class="number">2</span> + j, y + i, <span class="string">&#x27;*&#x27;</span>, color);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">drawChar</span>(x, y + <span class="number">9</span> + i, <span class="string">&#x27;|&#x27;</span>, color); <span class="comment">// trunk</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制&quot;Merry Christmas&quot;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawMerryChristmas</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    string message = <span class="string">&quot;Oh我亲爱的朋友：MerryChristmas圣诞快乐&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; message.<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">        WORD color = i % <span class="number">2</span> == <span class="number">0</span> ? FOREGROUND_RED | FOREGROUND_INTENSITY : FOREGROUND_GREEN | FOREGROUND_INTENSITY;</span><br><span class="line">        <span class="built_in">drawChar</span>(x + i<span class="number">-10</span>, y, message[i], color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制星星</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">drawTwinklingStars</span><span class="params">(<span class="type">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">random</span>(<span class="number">0</span>, WIDTH - <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> y = <span class="built_in">random</span>(<span class="number">0</span>, HEIGHT - <span class="number">1</span>);</span><br><span class="line">        WORD color = <span class="built_in">randomColor</span>();</span><br><span class="line">        <span class="built_in">drawChar</span>(x, y, <span class="string">&#x27;*&#x27;</span>, color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化随机数生成器</span></span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置控制台窗口大小</span></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;mode con cols=80 lines=30&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环绘制</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 清空控制台</span></span><br><span class="line">        <span class="built_in">clearConsole</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制彩色的圣诞树</span></span><br><span class="line">        <span class="built_in">drawTree</span>(WIDTH / <span class="number">2</span>, HEIGHT / <span class="number">2</span>, FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_INTENSITY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制&quot;Merry Christmas&quot;</span></span><br><span class="line">        <span class="built_in">drawMerryChristmas</span>(WIDTH / <span class="number">2</span> - <span class="number">6</span>, HEIGHT / <span class="number">2</span> - <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绘制闪烁的星星</span></span><br><span class="line">        <span class="built_in">drawTwinklingStars</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 刷新时间</span></span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/4f9059b0/PixPin12-23_21-08-31.gif" class="" title="PixPin12-23_21-08-31"><p>同志，圣诞节快乐，希望你今天快乐！</p><p>下载链接</p><p><a href="https://mp-88bf5340-c9ac-48d3-80a5-230782b107b8.cdn.bspapp.com/shengdanshu.exe">https://mp-88bf5340-c9ac-48d3-80a5-230782b107b8.cdn.bspapp.com/shengdanshu.exe</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> else </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/xu-runbo/post/7273cdc.html"/>
      <url>/xu-runbo/post/7273cdc.html</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven的概念"><a href="#Maven的概念" class="headerlink" title="Maven的概念"></a>Maven的概念</h2><p>Maven是专门用于管理和构建Java项目的工具，它的主要功能有：</p><ul><li>提供了一套标准化的项目结构</li><li>提供了一套标准化的构建流程（编译，测试，打包，发布….)</li><li>提供了一套依赖管理机制</li></ul><h2 id="标准化的项目结构"><a href="#标准化的项目结构" class="headerlink" title="标准化的项目结构"></a>标准化的项目结构</h2><img src="/xu-runbo/post/7273cdc/image-20231221102116411.png" class="" title="image-20231221102116411"> <p>不同IDE项目结构不一样，不能很方便的移植。</p><hr><p>现在是不同的IDE用Maven创建的项目就解决了这个问题，可以方便的移植</p><img src="/xu-runbo/post/7273cdc/image-20231221102406561.png" class="" title="image-20231221102406561"> <h2 id="标准化的构建流程"><a href="#标准化的构建流程" class="headerlink" title="标准化的构建流程"></a>标准化的构建流程</h2><p>编译生成字节码文件</p><p>构建：编译，测试，打包，发布</p><p>原本是打包每一个jar包，就很麻烦，现在Maveb可以用一套简单的命令来执行构建</p><h2 id="依赖管理机制"><a href="#依赖管理机制" class="headerlink" title="依赖管理机制"></a>依赖管理机制</h2><p>导入的那些需要的jar包，第三方资源，插件。。。</p><p>从前，我们创建一个lib目录，然后把jar包复制到，然后jar包加入到库(工作环境)</p><p>jar包少的话是简单的，多的话就麻烦了。。</p><p>现在</p><p>在配置文件里</p><p>Maven可以可以，方便的导入jar包！！！</p><img src="/xu-runbo/post/7273cdc/image-20231221103043426.png" class="" title="image-20231221103043426"><p>写了这一段代码，就去仓库找对应的jar包，然后就导入了 .</p><p>其实是去仓库引用我们配置的jar包</p><p>导入一刷新就导入了，贼番茄好用 </p><h2 id="为什么要学Maven"><a href="#为什么要学Maven" class="headerlink" title="为什么要学Maven"></a>为什么要学Maven</h2><img src="/xu-runbo/post/7273cdc/image-20231221103315231.png" class="" title="image-20231221103315231"> <h2 id="Maven的正式学习"><a href="#Maven的正式学习" class="headerlink" title="Maven的正式学习"></a>Maven的正式学习</h2><h3 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h3><p>Apach Mavehn是一个项目管理和构建工具</p><p>基于POM(project object modoule)项目对象模型，通过一段描述信息来管理项目的构建，报告，和文档</p><p>其实是去仓库引用我们配置的jar包</p><img src="/xu-runbo/post/7273cdc/image-20231221104053148.png" class="" title="image-20231221104053148"> <h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><img src="/xu-runbo/post/7273cdc/image-20231221104210378.png" class="" title="image-20231221104210378"> <p>  中央仓库放的是一些免费开源的jar包</p><img src="/xu-runbo/post/7273cdc/image-20231221104449568.png" class="" title="image-20231221104449568"> <img src="/xu-runbo/post/7273cdc/image-20231221104713822.png" class="" title="image-20231221104713822"> <h3 id="Maven安装配置"><a href="#Maven安装配置" class="headerlink" title="Maven安装配置"></a>Maven安装配置</h3><blockquote><ol><li>解压apache-maven-3.6.1.rar既安装完成</li><li>配置环境变量MAVEN_HOME为安装路径的bin目录配置本地仓库：修改conf&#x2F;settings.xml中的&lt;localRepository&gt;为一个指定目录</li><li>配置阿里云私服：修改conf&#x2F;settings.xml中的&lt;mirrors&gt;标签</li><li>为其添加如下子标签：</li><li><img src="/xu-runbo/post/7273cdc/image-20231221104844688.png" class="" title="image-20231221104844688"></li></ol></blockquote><p><a href="#https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip">maven的下载</a></p><p><a href="https://blog.csdn.net/qq_46554590/article/details/119428896?ops_request_misc=%7B%22request_id%22:%22170312700516800213057232%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170312700516800213057232&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-119428896-null-null.142%5Ev96%5Econtrol&utm_term=apache-maven-3.6.3-bin.zip&spm=1018.2226.3001.4187">maven3.6.3下载与安装</a></p><p>下载解压后</p><img src="/xu-runbo/post/7273cdc/image-20231221105333209.png" class="" title="image-20231221105333209"> <p>bin下的</p><img src="/xu-runbo/post/7273cdc/image-20231221105409315.png" class="" title="image-20231221105409315"> <p>最常用，为了能再任何地方都使用这个命令，所以要配置化境变量</p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><img src="/xu-runbo/post/7273cdc/PixPin12-21_11-16-59-17031308522653.gif" class="" title="PixPin12-21_11-16-59"><p><video src="javaweb-maven/2023-12-21 11-49-18.mp4"></video></p><blockquote><ol><li><img src="/xu-runbo/post/7273cdc/image-20231221111822543.png" class="" title="image-20231221111822543"> </li><li><img src="/xu-runbo/post/7273cdc/image-20231221111920953.png" class="" title="image-20231221111920953"> </li><li><img src="/xu-runbo/post/7273cdc/image-20231221111943332.png" class="" title="image-20231221111943332"> </li><li><p>验证<img src="/xu-runbo/post/7273cdc/image-20231221112007696.png" class="" title="image-20231221112007696"> </p><p>OKl！</p></li></ol></blockquote><h4 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h4><p>修改配置文件</p><p>conf&#x2F;settings.xml</p><img src="/xu-runbo/post/7273cdc/image-20231221122732266.png" class="" title="image-20231221122732266"> <img src="/xu-runbo/post/7273cdc/image-20231221122918728.png" class="" title="image-20231221122918728"> <p>配置本地仓库</p><p>习惯在maven安装目录下新建一个目录</p><img src="/xu-runbo/post/7273cdc/image-20231221123048838.png" class="" title="image-20231221123048838"> <img src="/xu-runbo/post/7273cdc/image-20231221123150045.png" class="" title="image-20231221123150045"> <h4 id="配置阿里云私服"><a href="#配置阿里云私服" class="headerlink" title="配置阿里云私服"></a>配置阿里云私服</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">&lt;name&gt;aliyun aven&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/7273cdc/image-20231221123531572.png" class="" title="image-20231221123531572"><p>就配置好了！</p><h3 id="Maven-基本使用"><a href="#Maven-基本使用" class="headerlink" title="Maven 基本使用"></a>Maven 基本使用</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><blockquote><ol><li>compile ：编译</li><li>clean ：清理</li><li>test ：测试</li><li>package：打包</li><li>install： 安装</li></ol></blockquote><p>可以在maven面板里点击声明周期去执行！</p><p>或者安装插件</p><p>或者cmd到项目目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn +命令</span><br></pre></td></tr></table></figure><p>然后那些生成都在target下面</p><img src="/xu-runbo/post/7273cdc/image-20231221135103582.png" class="" title="image-20231221135103582"> <h4 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期:"></a>Maven生命周期:</h4><img src="/xu-runbo/post/7273cdc/image-20231221125019477.png" class="" title="image-20231221125019477"> <img src="/xu-runbo/post/7273cdc/image-20231221125039889.png" class="" title="image-20231221125039889"> <h3 id="IDEA配置Maven"><a href="#IDEA配置Maven" class="headerlink" title="IDEA配置Maven"></a>IDEA配置Maven</h3><h4 id="IDEA配置Maven环境"><a href="#IDEA配置Maven环境" class="headerlink" title="IDEA配置Maven环境"></a>IDEA配置Maven环境</h4><img src="/xu-runbo/post/7273cdc/image-20231221125418520.png" class="" title="image-20231221125418520"> <h4 id="Maven坐标详解"><a href="#Maven坐标详解" class="headerlink" title="Maven坐标详解"></a>Maven坐标详解</h4><img src="/xu-runbo/post/7273cdc/image-20231221125541787.png" class="" title="image-20231221125541787"><img src="/xu-runbo/post/7273cdc/image-20231221125608814.png" class="" title="image-20231221125608814"> <img src="/xu-runbo/post/7273cdc/image-20231221125639412.png" class="" title="image-20231221125639412"> <h4 id="IDEA创建Maven项目"><a href="#IDEA创建Maven项目" class="headerlink" title="IDEA创建Maven项目"></a>IDEA创建Maven项目</h4><img src="/xu-runbo/post/7273cdc/image-20231221130530619.png" class="" title="image-20231221130530619"> <img src="/xu-runbo/post/7273cdc/image-20231221130659395.png" class="" title="image-20231221130659395"> <img src="/xu-runbo/post/7273cdc/image-20231221130832502.png" class="" title="image-20231221130832502"> <p>肥肠的智能</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>但是现在idea会默认继承maven</p><p>很难修改掉maven3默认的</p><p><a href="https://blog.csdn.net/lai_zhe/article/details/125423184?ops_request_misc=&request_id=&biz_id=102&utm_term=%E8%A7%A3%E9%99%A4idea%E9%87%8C%E5%B7%B2%E6%8D%86%E7%BB%91maven3&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-125423184.142%5Ev96%5Econtrol&spm=1018.2226.3001.4187">五招轻松帮你替换IDEA内置maven_idea切换maven仓库-CSDN博客</a> </p><img src="/xu-runbo/post/7273cdc/image-20231221134151221.png" class="" title="image-20231221134151221"> <p>才能修改</p><img src="/xu-runbo/post/7273cdc/image-20231221134159477.png" class="" title="image-20231221134159477"> <p>IDEA下面是能看到我们的maven版本和路径的</p><img src="/xu-runbo/post/7273cdc/image-20231221134254719.png" class="" title="image-20231221134254719"><p>现在就是使用我们自己的maven版本了</p> <img src="/xu-runbo/post/7273cdc/image-20231221134408312.png" class="" title="image-20231221134408312"> <img src="/xu-runbo/post/7273cdc/image-20231221134420436.png" class="" title="image-20231221134420436"> <p>好用的插件</p><h4 id="IDE导入Maven项目"><a href="#IDE导入Maven项目" class="headerlink" title="IDE导入Maven项目"></a>IDE导入Maven项目</h4><img src="/xu-runbo/post/7273cdc/image-20231221134558286.png" class="" title="image-20231221134558286"> <img src="/xu-runbo/post/7273cdc/image-20231221134607710.png" class="" title="image-20231221134607710"> <img src="/xu-runbo/post/7273cdc/image-20231221134622294.png" class="" title="image-20231221134622294"> <p>就导入maven项目了，非常的方便</p><img src="/xu-runbo/post/7273cdc/image-20231221134709724.png" class="" title="image-20231221134709724"> <h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><h4 id="自行手写"><a href="#自行手写" class="headerlink" title="自行手写"></a>自行手写</h4><img src="/xu-runbo/post/7273cdc/image-20231221140932999.png" class="" title="image-20231221140932999"> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">8.0</span><span class="number">.32</span>&lt;/version&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/7273cdc/image-20231221135426409.png" class="" title="image-20231221135426409"> <p>dependency后刷新就会去查找，没有就去下载</p><img src="/xu-runbo/post/7273cdc/image-20231221135918575.png" class="" title="image-20231221135918575"> <p>如果我们本地库没有对应的jar包，他就会去远程库找，私人库，或者远程中心，下载。</p><p>然后再添加到本地库，下次就可以使用了</p><img src="/xu-runbo/post/7273cdc/image-20231221140121871.png" class="" title="image-20231221140121871"> <p>验证成功</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><img src="/xu-runbo/post/7273cdc/image-20231221140301043.png" class="" title="image-20231221140301043"> <p>这样就可以实现实时的修改了并且添加jar包了</p><p>&#x3D;&#x3D;若果前提本地仓库已经有的jar包了&#x3D;&#x3D;</p><p>也可一快速的生成</p><img src="/xu-runbo/post/7273cdc/PixPin12-21_14-07-54.gif" class="" title="PixPin12-21_14-07-54"><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;scope&gt;test&lt;scop&gt;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/7273cdc/image-20231221141138315.png" class="" title="image-20231221141138315"> <p>test:</p><p>在test目录下才可以使用</p><p>compile是最大环境</p><p>默认就好了，，</p><p>如果测试的就放测试下面，，。，</p><blockquote><img src="/xu-runbo/post/7273cdc/image-20231221141540478.png" class="" title="image-20231221141540478"> <p>了解一下会显得专业。。。</p></blockquote><p>import先不了解</p><p>依赖范围指定了依赖项在项目构建和运行时的作用域。以下是不同依赖范围的解释：</p><ol><li><p>compile：这是默认的依赖范围，它表示依赖项将在编译和运行时都可用。</p></li><li><p>provided：这个依赖范围表示依赖项在编译时可用，但是在运行时不会包含在项目中。这意味着依赖项应该由运行时环境提供，例如，Java EE容器提供的API。</p></li><li><p>runtime：这个依赖范围表示依赖项在运行时可用，但是在编译时不需要。例如，JDBC驱动程序是运行时依赖项，因为它们在编译时不需要，但是在运行时需要。</p></li><li><p>test：这个依赖范围表示依赖项只在测试时可用，不会在编译或运行时包含在项目中。例如，JUnit测试框架就是一个测试依赖项。</p></li><li><p>system：这个依赖范围类似于provided，但是需要手动提供依赖项的路径。这个依赖范围通常用于本地文件系统中的JAR文件。</p></li></ol><p>在Maven项目中，可以使用以下方式指定依赖项的范围：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>group-id<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>artifact-id<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>version<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>scope<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，<code>scope</code>元素指定了依赖项的范围。例如，以下是一个指定了<code>test</code>范围的依赖项：</p><img src="/xu-runbo/post/7273cdc/image-20231221142023500.png" class="" title="image-20231221142023500"> <p>默认的compile就ok！</p><p>web项目打包为war包 </p>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/xu-runbo/post/80f42b1a.html"/>
      <url>/xu-runbo/post/80f42b1a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Javaweb-JDBC"><a href="#Javaweb-JDBC" class="headerlink" title="Javaweb_JDBC"></a>Javaweb_JDBC</h1><p>什么是JDBC</p><blockquote><p>用java操作数据库的AIPI</p><p>JDBC是Java数据库连接（Java Database Connectivity）的缩写，它是一种<strong>用于在Java应用程序和数据库之间建立连接的API（应用程序接口）</strong>。 </p><p>JDBC允许<strong>Java应用程序通过标准的数据库访问方式来访问各种数据库</strong>，包括MySQL、Oracle、SQL Server等。通过JDBC，J<strong>ava应用程序可以执行SQL查询、更新数据库记录、存储过程等操作</strong>。</p></blockquote><p>阴图</p><img src="/xu-runbo/post/80f42b1a/image-20231220083316158.png" class="" title="image-20231220083316158"> <h2 id="JDBC简介"><a href="#JDBC简介" class="headerlink" title="JDBC简介"></a>JDBC简介</h2><h3 id="JDBC简介-1"><a href="#JDBC简介-1" class="headerlink" title="JDBC简介"></a>JDBC简介</h3><ul><li>JDBC是用JAVA语言操作关系型数据库的一套AIPI</li><li>全程 Java DataBAseConnectivity</li></ul><p>JDBC定义了操作各种数据库的规则———-&gt;&gt;&gt;&gt;&gt;&gt;接口！</p><p>只定义了接口，想用就自己实现类。</p><img src="/xu-runbo/post/80f42b1a/image-20231220083945622.png" class="" title="image-20231220083945622"> <h3 id="JDBC本质"><a href="#JDBC本质" class="headerlink" title="JDBC本质"></a>JDBC本质</h3><img src="/xu-runbo/post/80f42b1a/image-20231220084103712.png" class="" title="image-20231220084103712"> <h3 id="JDBC的好处"><a href="#JDBC的好处" class="headerlink" title="JDBC的好处"></a>JDBC的好处</h3><img src="/xu-runbo/post/80f42b1a/image-20231220084151036.png" class="" title="image-20231220084151036"> <h2 id="JDBC快速入门"><a href="#JDBC快速入门" class="headerlink" title="JDBC快速入门"></a>JDBC快速入门</h2><img src="/xu-runbo/post/80f42b1a/image-20231220084244595.png" class="" title="image-20231220084244595"> <h3 id="下载jar包教程"><a href="#下载jar包教程" class="headerlink" title="下载jar包教程"></a>下载jar包教程</h3><p><a href="https://dev.mysql.com/downloads/">MySQL :: MySQL Community Downloads</a></p><p>查看自己的mysql版本</p><img src="/xu-runbo/post/80f42b1a/image-20231220090350904.png" class="" title="image-20231220090350904"> <img src="/xu-runbo/post/80f42b1a/image-20231220090232344.png" class="" title="image-20231220090232344"> <img src="/xu-runbo/post/80f42b1a/image-20231220090302101.png" class="" title="image-20231220090302101"> <p>下载好并且解压</p><img src="/xu-runbo/post/80f42b1a/image-20231220090457258.png" class="" title="image-20231220090457258"> <h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><img src="/xu-runbo/post/80f42b1a/image-20231220090202435.png" class="" title="image-20231220090202435"> <p>快速入门：</p><ol><li><p>创建空项目</p><img src="/xu-runbo/post/80f42b1a/image-20231220090641318.png" class="" title="image-20231220090641318"> </li><li><p>创建新模块</p><img src="/xu-runbo/post/80f42b1a/image-20231220090939701.png" class="" title="image-20231220090939701"> </li><li><p>在模块下新建目录lib</p><img src="/xu-runbo/post/80f42b1a/image-20231220091014384.png" class="" title="image-20231220091014384"> </li><li><p>把jar包放到lib下面</p><img src="/xu-runbo/post/80f42b1a/image-20231220091119620.png" class="" title="image-20231220091119620"> </li><li><p>设置jar包生效的范围</p><img src="/xu-runbo/post/80f42b1a/image-20231220091215042.png" class="" title="image-20231220091215042"> <img src="/xu-runbo/post/80f42b1a/image-20231220091303191.png" class="" title="image-20231220091303191"> </li><li><p>创建包和 类</p><img src="/xu-runbo/post/80f42b1a/image-20231220091631246.png" class="" title="image-20231220091631246"> <p>最后是类，前面的默认为包。</p></li></ol><p>代码演示:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDEMO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db&quot;</span>;</span><br><span class="line">        String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;xurunbo&quot;</span>;</span><br><span class="line">        Connection conn=DriverManager.getConnection(url,username,password);</span><br><span class="line">        <span class="comment">//3定义sql语句</span></span><br><span class="line">        String sql=<span class="string">&quot;update account set money=money-500 where name=\&quot;李四\&quot;;&quot;</span>;</span><br><span class="line"><span class="comment">//        String sql=&quot;select * from account&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取执行sql的对象 statement</span></span><br><span class="line">        Statement stmt=conn.createStatement();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行sql并且返回受影响的行数</span></span><br><span class="line">        <span class="type">int</span> count=stmt.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//处理结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源我们掀开的conn 后是stmt</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/80f42b1a/PixPin12-20_09-36-48.gif" class="" title="PixPin12-20_09-36-48"><blockquote><p>Class.forName是Java中的一个静态方法，用于<strong>动态加载类</strong>。它接受一个字符串参数，该参数是要加载的类的全限定名（包括包名）。</p><p>当调用Class.forName方法时，它会尝试加载指定的类，并返回一个Class对象，可以用于创建该类的实例或访问该类的静态成员。</p></blockquote><h2 id="JDBC-API详解"><a href="#JDBC-API详解" class="headerlink" title="JDBC API详解"></a>JDBC API详解</h2><h3 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h3><blockquote><p>翻译：驱动管理类</p><ol><li><p>注册驱动Class.forName(str)</p><p>我们用的是<code> Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code></p><p>查看Driver的源码</p><img src="/xu-runbo/post/80f42b1a/image-20231220094929087.png" class="" title="image-20231220094929087"><img src="/xu-runbo/post/80f42b1a/image-20231220095142140.png" class="" title="image-20231220095142140">  <img src="/xu-runbo/post/80f42b1a/image-20231220095113930.png" class="" title="image-20231220095113930"> </li><li><p>获取数据库连接DriverManager.getConnection(String m1,String m2,String m3);</p><img src="/xu-runbo/post/80f42b1a/image-20231220095307030.png" class="" title="image-20231220095307030"><p>url的语法：</p><p><code>jdbc:mysql://ip地址(域名):端口号/数据库名称?参数键值对1&amp;键值对2。。。</code></p><p>我们现在用的<code>jdbc:mysql://127.0.0.1:3306/db</code> </p><p>如果是本机的端口，而且端口默认是3306可以用省去ip和端口                                                                                                                                                                                                                                                                                                                                                                                                                                                                           </p><p><code>jdbc:mysql:///db</code> </p><p>代码测试:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDEMO</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql:///db&quot;</span>;</span><br><span class="line">        String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;xurunbo&quot;</span>;</span><br><span class="line">        Connection conn=DriverManager.getConnection(url,username,password);</span><br><span class="line">        <span class="comment">//3定义sql语句</span></span><br><span class="line">        String sql=<span class="string">&quot;update account set money=money-500 where name=\&quot;李四\&quot;;&quot;</span>;</span><br><span class="line"><span class="comment">//        String sql=&quot;select * from account&quot;;</span></span><br><span class="line">        <span class="comment">//获取执行sql的对象 statement</span></span><br><span class="line">        Statement stmt=conn.createStatement();</span><br><span class="line">        <span class="comment">//执行sql并且返回受影响的行数</span></span><br><span class="line">        <span class="type">int</span> count=stmt.executeUpdate(sql);</span><br><span class="line">        <span class="comment">//处理结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count);</span><br><span class="line">        <span class="comment">//释放资源我们掀开的conn 后是stmt</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个安全的连接方式SSL</p><p>&#96;&#96;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;db?useSSL&#x3D;false&#96;</p><p>加参数用&amp;隔开。。。。</p></li></ol></blockquote><h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><blockquote><p>Connection数据库连接对象</p><ol><li><p>获取执行SQL的对象</p><img src="/xu-runbo/post/80f42b1a/image-20231220100309670.png" class="" title="image-20231220100309670"> </li><li><p>管理事务</p><p>CTRL+ALT+T可以快速把选中代码用异常框架抱起来</p><img src="/xu-runbo/post/80f42b1a/image-20231220100402935.png" class="" title="image-20231220100402935"></li></ol></blockquote><p>代码演示::</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDEMO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line"><span class="comment">//        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql:///db&quot;</span>;</span><br><span class="line">        String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;xurunbo&quot;</span>;</span><br><span class="line">        Connection conn=DriverManager.getConnection(url,username,password);</span><br><span class="line">        <span class="comment">//3定义sql语句</span></span><br><span class="line">        String sql1=<span class="string">&quot;update account set money=money-500 where name=\&quot;李四\&quot;;&quot;</span>;</span><br><span class="line">        String sql2=<span class="string">&quot;update account set money=money-500 where name=\&quot;张三\&quot;;&quot;</span>;</span><br><span class="line"><span class="comment">//        String sql=&quot;select * from account&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取执行sql的对象 statement</span></span><br><span class="line">        Statement stmt=conn.createStatement();</span><br><span class="line">        <span class="comment">//执行sql并且返回受影响的行数</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//开启事务,前提就是不能每一句都commit</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> count1=stmt.executeUpdate(sql1);</span><br><span class="line">            <span class="comment">//处理结果</span></span><br><span class="line">            System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count1);</span><br><span class="line"><span class="comment">//            int a=10/0;</span></span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> count2=stmt.executeUpdate(sql2);</span><br><span class="line">            System.out.println(<span class="string">&quot;受影响的行数&quot;</span>+count2);</span><br><span class="line">            <span class="comment">//事务的过程中没有发现任何异常就commit上面的sql语句</span></span><br><span class="line">            conn.commit();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//发现任何异常就回滚到初始状态</span></span><br><span class="line">            conn.rollback();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源我们掀开的conn 后是stmt</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/80f42b1a/PixPin12-20_10-17-08.gif" class="" title="PixPin12-20_10-17-08"> <h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><blockquote><p>作用：</p><p><strong>执行sql语句！</strong></p><img src="/xu-runbo/post/80f42b1a/image-20231220102121339.png" class="" title="image-20231220102121339"><p><code>int executeUpdate(String sql);</code></p><p>拿到这个结果不是要输出</p><p>而是判断</p><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">if</span>(ret&gt;<span class="number">0</span>)</span><br><span class="line">System.out.println(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">else</span></span><br><span class="line">System.out.println(<span class="string">&quot;修改失败&quot;</span>);</span><br></pre></td></tr></table></figure></blockquote><p>执行DML返回受影响的行函数，<strong>DDL执行成功也可能会返回0</strong></p><p><code>Result Set executeQuery(String sql);</code></p><p>返回的是结果集对象 </p></blockquote><p>代码演示看下面ResultSet</p><h3 id="ResultSet-对查询结果的封装"><a href="#ResultSet-对查询结果的封装" class="headerlink" title="&#x3D;&#x3D;ResultSet&#x2F;&#x2F;对查询结果的封装&#x3D;&#x3D;"></a>&#x3D;&#x3D;ResultSet&#x2F;&#x2F;对查询结果的封装&#x3D;&#x3D;</h3><img src="/xu-runbo/post/80f42b1a/image-20231220103606648.png" class="" title="image-20231220103606648"> <p>所以使用的框架</p><img src="/xu-runbo/post/80f42b1a/image-20231220104351028.png" class="" title="image-20231220104351028"> <p>代码演示:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDEMO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line"><span class="comment">//        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql:///db&quot;</span>;</span><br><span class="line">        String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;xurunbo&quot;</span>;</span><br><span class="line">        Connection conn=DriverManager.getConnection(url,username,password);</span><br><span class="line">        <span class="comment">//3定义sql语句</span></span><br><span class="line"><span class="comment">//        String sql=&quot;update account set money=money-500 where name=\&quot;李四\&quot;;&quot;;</span></span><br><span class="line">        String sql=<span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">        <span class="comment">//获取执行sql的对象 statement</span></span><br><span class="line">        Statement stmt=conn.createStatement();</span><br><span class="line"></span><br><span class="line">        ResultSet ret=stmt.executeQuery(sql);</span><br><span class="line">        <span class="comment">//光标向下移动一行，并且判断当前行是否有数据</span></span><br><span class="line">        <span class="keyword">while</span> (ret.next())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a=ret.getInt(<span class="number">1</span>);</span><br><span class="line">            String name=ret.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="comment">//String name=ret.getString(2);等价的</span></span><br><span class="line">            <span class="type">int</span> b=ret.getInt(<span class="number">3</span>);</span><br><span class="line">            System.out.printf(<span class="string">&quot;%5d       %5s        %5d\n&quot;</span>,a,name,b);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源我们掀开的conn 后是stmt</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/80f42b1a/PixPin12-20_10-50-35.gif" class="" title="PixPin12-20_10-50-35"><h3 id="ResultSet案例"><a href="#ResultSet案例" class="headerlink" title="ResultSet案例"></a>ResultSet案例</h3><blockquote><p>查询到了account账户表数据</p><p>封装到ACCOunt对象中</p><p>并且存储到ARRayList集合中</p><img src="/xu-runbo/post/80f42b1a/image-20231220105523599.png" class="" title="image-20231220105523599"><p>一行数据就是一个对象</p><p>ArrayList就是来放对象的集合</p></blockquote><p>代码实现:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pojo.Account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCDEMO</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="comment">//1.注册驱动</span></span><br><span class="line"><span class="comment">//        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql:///db&quot;</span>;</span><br><span class="line">        String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;xurunbo&quot;</span>;</span><br><span class="line">        Connection conn=DriverManager.getConnection(url,username,password);</span><br><span class="line">        <span class="comment">//3定义sql语句</span></span><br><span class="line"><span class="comment">//        String sql=&quot;update account set money=money-500 where name=\&quot;李四\&quot;;&quot;;</span></span><br><span class="line">        String sql=<span class="string">&quot;select * from account&quot;</span>;</span><br><span class="line">        <span class="comment">//获取执行sql的对象 statement</span></span><br><span class="line">        Statement stmt=conn.createStatement();</span><br><span class="line">        ResultSet ret=stmt.executeQuery(sql);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建对象集合！！！</span></span><br><span class="line">        List&lt;Account&gt; array=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (ret.next())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a=ret.getInt(<span class="number">1</span>);</span><br><span class="line">            String name=ret.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//            String name=ret.getString(2);//等价的</span></span><br><span class="line">            <span class="type">int</span> b=ret.getInt(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">//把对象添加到集合里</span></span><br><span class="line">            array.add(<span class="keyword">new</span> <span class="title class_">Account</span>(a,name,b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Account a:array) &#123;</span><br><span class="line">            <span class="comment">//遍历！！</span></span><br><span class="line">            System.out.println(a.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源我们掀开的conn 后是stmt</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/80f42b1a/PixPin12-20_11-11-28.gif" class="" title="PixPin12-20_11-11-28"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(array);</span><br></pre></td></tr></table></figure><p>[Account{id&#x3D;1, name&#x3D;’张三’, bonus&#x3D;500}, Account{id&#x3D;2, name&#x3D;’李四’, bonus&#x3D;500}, Account{id&#x3D;3, name&#x3D;’李四’, bonus&#x3D;1000}….]</p><h3 id="PreparedStatement-Statement的增强版"><a href="#PreparedStatement-Statement的增强版" class="headerlink" title="PreparedStatement&#x2F;&#x2F;Statement的增强版"></a>PreparedStatement&#x2F;&#x2F;Statement的增强版</h3><blockquote><p>继承自Statement！</p><p>是增强版</p><img src="/xu-runbo/post/80f42b1a/image-20231220124902811.png" class="" title="image-20231220124902811"> <p>预编译SQL语句并执行：预防SQL注入问题</p></blockquote><h4 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h4><ul><li>通过操作实现定义好的SQL语句，达到执行代码对服务器进行攻击的方法.</li></ul><img src="/xu-runbo/post/80f42b1a/image-20231220125322588.png" class="" title="image-20231220125322588"> <p>用户登录的验证</p><p><code>select * from where name=&quot;张三&quot;andpassword=&quot;123456&quot;;</code></p><img src="/xu-runbo/post/80f42b1a/image-20231220131812279.png" class="" title="image-20231220131812279"> <p>代码实现:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    Connection conn=DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///db&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;xurunbo&quot;</span>);</span><br><span class="line">    Statement stmt=conn.createStatement();</span><br><span class="line">    String name=<span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">    String passwd=<span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    String sql=<span class="string">&quot;select * from user where name=&#x27;&quot;</span>+name+<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>+passwd+<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">    ResultSet res=stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(res.next())</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登陆成功！&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示SQL注入</p><p><code>String passwd=&quot;&#39; or &#39;1&#39; =&#39;1&quot;;</code></p><img src="/xu-runbo/post/80f42b1a/PixPin12-20_13-26-44.gif" class="" title="PixPin12-20_13-26-44"><blockquote><p>核心的与原因就是</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27; or &#x27;</span><span class="number">1</span><span class="string">&#x27; =&#x27;</span><span class="number">1</span></span><br><span class="line">String <span class="keyword">sql</span><span class="operator">=</span>&quot;select * from user where name=&#x27;&quot;<span class="operator">+</span>name<span class="operator">+</span>&quot;&#x27; and password=&#x27;&quot;<span class="operator">+</span>passwd<span class="operator">+</span>&quot;&#x27;&quot;;</span><br><span class="line">输出一下<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;zhangsan&#x27;</span> <span class="keyword">and</span> password<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/80f42b1a/image-20231220133301211.png" class="" title="image-20231220133301211"></blockquote><h4 id="PrepareStatement使用"><a href="#PrepareStatement使用" class="headerlink" title="PrepareStatement使用"></a>PrepareStatement使用</h4><p>现在禁止了拼字符串让你注入</p><p>参数也是从1开始的</p><img src="/xu-runbo/post/80f42b1a/image-20231220133713823.png" class="" title="image-20231220133713823"> <p>代码实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    Connection conn=DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///db&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;xurunbo&quot;</span>);</span><br><span class="line">    String sql=<span class="string">&quot;select * from user where name=? and password=?&quot;</span>;</span><br><span class="line">    <span class="comment">//获取PreparedStatement对象</span></span><br><span class="line">    PreparedStatement stmt=conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置参数值</span></span><br><span class="line">    stmt.setString(<span class="number">1</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    stmt.setString(<span class="number">2</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3执行SQL</span></span><br><span class="line">    ResultSet res=stmt.executeQuery();</span><br><span class="line">    System.out.println(sql);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(res.next())</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登陆成功！&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;登录失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set的时候会对我们传入的东西进行转义</p><p>写个’就给你转义为真正的&#39;也就是当作文本来看，不让你去和我外面的’来恶意拼接.</p><h4 id="Preparestatement的原理"><a href="#Preparestatement的原理" class="headerlink" title="Preparestatement的原理"></a>Preparestatement的原理</h4><ul><li>预编译sql，性能更高</li><li>防止SQL注入，&#x3D;&#x3D;<strong>将敏感字符进行转义</strong>&#x3D;&#x3D;</li></ul><blockquote><p>预编译功能开启 useServerPrepstmts&#x3D;true；</p></blockquote><p><code>Connection conn=DriverManager.getConnection(&quot;jdbc:mysql:///db?useServerPrepStmts=true&quot;,&quot;root&quot;,&quot;xurunbo&quot;);</code></p><img src="/xu-runbo/post/80f42b1a/image-20231220144123400.png" class="" title="image-20231220144123400"> <img src="/xu-runbo/post/80f42b1a/image-20231220144225345.png" class="" title="image-20231220144225345"> <img src="/xu-runbo/post/80f42b1a/image-20231220144330311.png" class="" title="image-20231220144330311"> <blockquote><p>PreparedStatement原理：</p><ol><li><p>在获取PreparedStatement对象时，将sql语句发送给mysql服务器进行检查，编译 (这些步骤很耗时)</p></li><li><p>执行时就不用再进行这些步骤了，速度更快</p></li><li><p><strong>如果sql模板一样，则只需要进行一次检查、编译</strong></p><p>什么是模板一样？</p><img src="/xu-runbo/post/80f42b1a/image-20231220144651537.png" class="" title="image-20231220144651537"></li></ol></blockquote><h2 id="数据库连接池-容器"><a href="#数据库连接池-容器" class="headerlink" title="数据库连接池(容器)"></a>数据库连接池(容器)</h2><h3 id="数据库连接池简介"><a href="#数据库连接池简介" class="headerlink" title="数据库连接池简介"></a>数据库连接池简介</h3><img src="/xu-runbo/post/80f42b1a/image-20231220144823087.png" class="" title="image-20231220144823087"> <img src="/xu-runbo/post/80f42b1a/image-20231220145216278.png" class="" title="image-20231220145216278"> <p>传统是。用一个conn连接，就close，用一个conn连接，就close。</p><p>没有达到资源回收，性能低。</p><hr><p>现在又了数据库连接池</p><p>里面放若干个连接，谁来了谁用</p><p>用完了，没有close，而是归还。这样就实现了资源宠用，提升了响应速度。</p><p>如果用户已经把所有连接都占用了，然后又来一个新人，发现没有连接，然后连接池就会检测到有人在浪费资源，强制把连接归还。然后就&#x3D;&#x3D;避免了数据库连接遗漏&#x3D;&#x3D;</p><blockquote><p>标准接口：<strong>DateSource</strong></p><p>sun提供的数据库连接池标准接口，常常由第三方组织来实现接口</p><p>功能:获取连接</p><p><code>Connection getConnection();</code></p><p>常见的税局库连接池:</p><ul><li>DBCP</li><li>C3P0</li><li>Druid(德鲁伊)</li></ul><blockquote><p>德鲁伊是阿里巴巴开源的数据库连接池</p><p>功能强大。。。。。很好</p></blockquote></blockquote><h3 id="Druid数据库连接池实现"><a href="#Druid数据库连接池实现" class="headerlink" title="Druid数据库连接池实现"></a>Druid数据库连接池实现</h3><p>druid的jar包下载</p><p><a href="https://nowjava.com/jar/detail/m00170223/druid-1.1.12.jar.html">druid-1.1.12.jar下载)</a></p><ol><li><p>导入jar包并添加到库</p></li><li><p>定义配置文件</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/db</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">xurunbo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#初始化数量</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#最大连接数</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#最大等待时间</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br></pre></td></tr></table></figure></li><li><p>加载配置文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties prop=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc_demo/src/druid.properties&quot;</span>)); </span><br></pre></td></tr></table></figure></li><li><p>获取数据库连接池对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataSource datasource=DruidDataSourceFactory.createDataSource(prop);</span><br></pre></td></tr></table></figure></li><li><p>获取连接</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn=datasource.getConnection();</span><br></pre></td></tr></table></figure></li></ol><p>FileInputStream是<strong>Java中用于读取文件的输入流对象</strong>。</p><p>它可以用来从文件中读取字节数据，并将数据传输到程序中进行处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br></pre></td></tr></table></figure><p>可以得到我们当前文件针对的路径</p><img src="/xu-runbo/post/80f42b1a/image-20231220154616243.png" class="" title="image-20231220154616243"> <p>然后再拼接好我们的properties文件的路径，然后成功加载</p><p>代码实现: </p><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//导入jar包</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//2定义配置文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//3加载配置文件</span></span><br><span class="line">     Properties prop=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">     prop.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;jdbc_demo/src/druid.properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">     <span class="comment">//4 获取连接池对象</span></span><br><span class="line">     DataSource datasource=DruidDataSourceFactory.createDataSource(prop);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//5获取数据库连接</span></span><br><span class="line">     Connection conn=datasource.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        它表示数据源dataSource-1已经成功初始化。在Druid连接池中，数据源会被赋予一个唯一的标识符，这里标识符为dataSource-1。当这条信息出现时，表示数据源已经被成功初始化并准备好提供数据库连接。</span></span><br><span class="line">     System.out.println(conn);</span><br><span class="line">     System.out.println(System.getProperty(<span class="string">&quot;user.dir&quot;</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/80f42b1a/image-20231220154657945.png" class="" title="image-20231220154657945"> <p>运行结果</p><p>“{dataSource-1} inited”是Druid连接池初始化时打印的日志信息。它表示数据源dataSource-1已经成功初始化。在Druid连接池中，数据源会被赋予一个唯一的标识符，这里标识符为dataSource-1。当这条信息出现时，表示数据源已经被成功初始化并准备好提供数据库连接。</p></blockquote><h2 id="JDBC练习"><a href="#JDBC练习" class="headerlink" title="JDBC练习"></a>JDBC练习</h2><img src="/xu-runbo/post/80f42b1a/image-20231220202435519.png" class="" title="image-20231220202435519"> <blockquote><ol><li>准备环境：</li><li>数据库表 tb_brand</li><li>实体类Brand</li><li>测试用例</li></ol></blockquote><p>代码实现</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_brand</span><br><span class="line">(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">rand_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">company_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">ordered intr</span><br><span class="line">description <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line"></span><br><span class="line">status <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;小米&quot;,&quot;小米科技有限公司&quot;,<span class="number">5</span>,&quot;are you ok&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;三只松鼠&quot;,&quot;三只松鼠有限公司&quot;,<span class="number">5</span>,&quot;好吃不贵&quot;,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;华为&quot;,&quot;华为技术有限公司&quot;,<span class="number">5</span>,&quot;华为让生活更幸福&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand(rand_name,company_name,ordered,description,status) <span class="keyword">values</span>(&quot;vivo&quot;,&quot;vivo有限公司&quot;,<span class="number">5</span>,&quot;vivo智能手坤&quot;,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand;</span><br><span class="line">#测试代码</span><br><span class="line"><span class="keyword">update</span> tb_brand <span class="keyword">set</span> rand_name<span class="operator">=</span>?,company_name<span class="operator">=</span>?,ordered<span class="operator">=</span>?,description<span class="operator">=</span>?,status<span class="operator">=</span>? <span class="keyword">where</span> id<span class="operator">=</span>?;</span><br><span class="line"><span class="keyword">delete</span>  <span class="keyword">from</span> tb_brand <span class="keyword">where</span> id<span class="operator">=</span>?;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/80f42b1a/image-20231220203650002.png" class="" title="image-20231220203650002"> <p>实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐使用包装的类型，因为没有M默认值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer  id           ;</span><br><span class="line">    <span class="keyword">private</span> String  rand_name    ;</span><br><span class="line">    <span class="keyword">private</span> String  company_name ;</span><br><span class="line">    <span class="keyword">private</span> Integer ordered      ;</span><br><span class="line">    <span class="keyword">private</span> String  description  ;</span><br><span class="line">    <span class="comment">//0禁用，1正常</span></span><br><span class="line">    <span class="keyword">private</span> Integer   status       ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Brand</span><span class="params">(Integer id, String rand_name, String company_name, Integer ordered, String description, Integer status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.rand_name = rand_name;</span><br><span class="line">        <span class="built_in">this</span>.company_name = company_name;</span><br><span class="line">        <span class="built_in">this</span>.ordered = ordered;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRand_name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rand_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRand_name</span><span class="params">(String rand_name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rand_name = rand_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCompany_name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> company_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany_name</span><span class="params">(String company_name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.company_name = company_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getOrdered</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ordered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrdered</span><span class="params">(Integer ordered)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ordered = ordered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Integer status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Brand&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, rand_name=&#x27;&quot;</span> + rand_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, company_name=&#x27;&quot;</span> + company_name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ordered=&quot;</span> + ordered +</span><br><span class="line">                <span class="string">&quot;, description=&#x27;&quot;</span> + description + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, status=&quot;</span> + status +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><ol><li>获取connection</li><li><strong>定义SQL</strong></li><li>获取prepreStatement对象</li><li><strong>设置参数</strong></li><li>执行SQL</li><li><strong>处理结果</strong>：list&lt;Brand&gt;</li><li>释放资源</li></ol><p>代码演示:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> brand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pojo.Brand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BradTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql:///db&quot;</span>;</span><br><span class="line">        String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;xurunbo&quot;</span>;</span><br><span class="line">        Connection conn=DriverManager.getConnection(url,user,password);</span><br><span class="line">        <span class="comment">//获取了connection</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义Sql+++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">        String sql=<span class="string">&quot;select * from tb_brand&quot;</span>;<span class="comment">//查询数据</span></span><br><span class="line">        <span class="comment">//得到preparestatement对象</span></span><br><span class="line">        PreparedStatement stmt=conn.prepareStatement(sql);</span><br><span class="line">        ResultSet res=<span class="literal">null</span>;</span><br><span class="line">        res=stmt.executeQuery();</span><br><span class="line">        <span class="comment">//处理结果</span></span><br><span class="line">        List&lt;Brand&gt; arraylist=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (res.next())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> id=res.getInt(<span class="number">1</span>);</span><br><span class="line">            String randName=res.getString(<span class="number">2</span>);</span><br><span class="line">            String companyName=res.getString(<span class="number">3</span>);</span><br><span class="line">            <span class="type">int</span> ordered=res.getInt(<span class="number">4</span>);</span><br><span class="line">            String desc=res.getString(<span class="number">5</span>);</span><br><span class="line">            <span class="type">int</span> status=res.getInt(<span class="number">6</span>);</span><br><span class="line">            arraylist.add(<span class="keyword">new</span> <span class="title class_">Brand</span>(id,randName,companyName,ordered,desc,status));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Brand i:arraylist) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        res.close</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/80f42b1a/image-20231220210727286.png" class="" title="image-20231220210727286"><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql:///db&quot;</span>;</span><br><span class="line">        String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;xurunbo&quot;</span>;</span><br><span class="line">        <span class="comment">//获取了connection</span></span><br><span class="line">        Connection conn=DriverManager.getConnection(url,user,password);</span><br><span class="line"></span><br><span class="line">        String newbrandName=<span class="string">&quot;三星&quot;</span>;</span><br><span class="line">        String newCompanyName=<span class="string">&quot;三星科技有限公司&quot;</span>;</span><br><span class="line">        <span class="type">int</span> neworder=<span class="number">10</span>;</span><br><span class="line">        String newdesc=<span class="string">&quot;三星的固态真好&quot;</span>;</span><br><span class="line">        <span class="type">int</span> newstatus=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//定义Sql+++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">        String sql=<span class="string">&quot;insert into tb_brand(rand_name,company_name,ordered,description,status) values(?,?,?,?,?)&quot;</span>;<span class="comment">//添加品牌</span></span><br><span class="line">        <span class="comment">//得到preparestatement对象</span></span><br><span class="line">        PreparedStatement stmt=conn.prepareStatement(sql);</span><br><span class="line">        ResultSet res=<span class="literal">null</span>;</span><br><span class="line"><span class="comment">//        设置参数</span></span><br><span class="line"></span><br><span class="line">        stmt.setString(<span class="number">1</span>,newbrandName);</span><br><span class="line">        stmt.setString(<span class="number">2</span>,newCompanyName);</span><br><span class="line">        stmt.setInt(<span class="number">3</span>,neworder);</span><br><span class="line">        stmt.setString(<span class="number">4</span>,newdesc);</span><br><span class="line">        stmt.setInt(<span class="number">5</span>,newstatus);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行SQL；</span></span><br><span class="line">        <span class="type">int</span> count=stmt.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(count&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;添加成功并且受影响的行数是&quot;</span>+count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;添加失败！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/80f42b1a/image-20231220211714571.png" class="" title="image-20231220211714571"><p>id咱就不自己设置，数据库自动增加</p><h3 id="根据id来修改数据"><a href="#根据id来修改数据" class="headerlink" title="根据id来修改数据"></a>根据id来修改数据</h3><img src="/xu-runbo/post/80f42b1a/image-20231220211838994.png" class="" title="image-20231220211838994"> <p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql:///db&quot;</span>;</span><br><span class="line">        String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;xurunbo&quot;</span>;</span><br><span class="line">        <span class="comment">//获取了connection</span></span><br><span class="line">        Connection conn=DriverManager.getConnection(url,user,password);</span><br><span class="line"></span><br><span class="line">        String newbrandName=<span class="string">&quot;四星&quot;</span>;</span><br><span class="line">        String newCompanyName=<span class="string">&quot;四星科技有限公司&quot;</span>;</span><br><span class="line">        <span class="type">int</span> neworder=<span class="number">1230</span>;</span><br><span class="line">        String newdesc=<span class="string">&quot;四星的固态真好&quot;</span>;</span><br><span class="line">        <span class="type">int</span> newstatus=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> id=<span class="number">5</span>;<span class="comment">//要修改的id，前端传来的</span></span><br><span class="line">        <span class="comment">//定义Sql+++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">        String sql=<span class="string">&quot;update tb_brand set rand_name=?,company_name=?,ordered=?,description=?,status=? where id=?&quot;</span>;<span class="comment">//修改后的信息</span></span><br><span class="line">        <span class="comment">//得到preparestatement对象</span></span><br><span class="line">        PreparedStatement stmt=conn.prepareStatement(sql);</span><br><span class="line">        ResultSet res=<span class="literal">null</span>;</span><br><span class="line"><span class="comment">//        设置参数</span></span><br><span class="line"></span><br><span class="line">        stmt.setString(<span class="number">1</span>,newbrandName);</span><br><span class="line">        stmt.setString(<span class="number">2</span>,newCompanyName);</span><br><span class="line">        stmt.setInt(<span class="number">3</span>,neworder);</span><br><span class="line">        stmt.setString(<span class="number">4</span>,newdesc);</span><br><span class="line">        stmt.setInt(<span class="number">5</span>,newstatus);</span><br><span class="line">        stmt.setInt(<span class="number">6</span>,id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行SQL；</span></span><br><span class="line">        <span class="type">int</span> count=stmt.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(count&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改并且受影响的行数是&quot;</span>+count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>实现效果</p><img src="/xu-runbo/post/80f42b1a/image-20231220212514288.png" class="" title="image-20231220212514288"> <h3 id="根据id删除"><a href="#根据id删除" class="headerlink" title="根据id删除"></a>根据id删除</h3><p>代码实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql:///db&quot;</span>;</span><br><span class="line">        String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;xurunbo&quot;</span>;</span><br><span class="line">        <span class="comment">//获取了connection</span></span><br><span class="line">        Connection conn=DriverManager.getConnection(url,user,password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> id=<span class="number">5</span>;<span class="comment">//要修改的id，前端传来的</span></span><br><span class="line">        <span class="comment">//定义Sql+++++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line">        String sql=<span class="string">&quot;delete  from tb_brand where id=?;&quot;</span>;<span class="comment">//删除的id</span></span><br><span class="line">        <span class="comment">//得到preparestatement对象</span></span><br><span class="line">        PreparedStatement stmt=conn.prepareStatement(sql);</span><br><span class="line">        ResultSet res=<span class="literal">null</span>;</span><br><span class="line"><span class="comment">//        设置参数</span></span><br><span class="line">        stmt.setInt(<span class="number">1</span>,id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行SQL；</span></span><br><span class="line">        <span class="type">int</span> count=stmt.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(count&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;删除成功并且受影响的行数是&quot;</span>+count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>实现效果</p><img src="/xu-runbo/post/80f42b1a/image-20231220212716642.png" class="" title="image-20231220212716642"> ]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql简单入土</title>
      <link href="/xu-runbo/post/759a4355.html"/>
      <url>/xu-runbo/post/759a4355.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaWeb-MySQL"><a href="#JavaWeb-MySQL" class="headerlink" title="JavaWeb_MySQL"></a>JavaWeb_MySQL</h1><p>涉及哪些知识 </p><img src="/xu-runbo/post/759a4355/image-20231219171056484.png" class="" title="image-20231219171056484"> <blockquote><ol><li>MySql:数据库</li><li>JDBC:是java操作数据库API</li><li>Maven :管理项目很方便的东西</li><li>Mybaties:简化JDBC的框架</li><li>vue和Elementui是前端的框架，。，</li></ol><hr><p>Maven（也称为Apache Maven）是一个用于<strong>项目管理和构建的开源工具</strong>。它提供了一种管理项目的方式，可以帮助开发团队更有效地构建、发布和管理软件项目。</p></blockquote><h2 id="Java-Web简介"><a href="#Java-Web简介" class="headerlink" title="Java Web简介"></a>Java Web简介</h2><img src="/xu-runbo/post/759a4355/image-20231217124725145.png" class="" title="image-20231217124725145"><blockquote><p>网页那些东西是前端的</p><p>java web和数据库是后端</p></blockquote><h2 id="数据库MySql"><a href="#数据库MySql" class="headerlink" title="数据库MySql"></a>数据库MySql</h2><h3 id="关于数据库"><a href="#关于数据库" class="headerlink" title="关于数据库"></a>关于数据库</h3><img src="/xu-runbo/post/759a4355/image-20231219171120023.png" class="" title="image-20231219171120023">  <img src="/xu-runbo/post/759a4355/image-20231217125611456.png" class="" title="image-20231217125611456"><p>数据库管理系统：MySql。。。</p><h3 id="数据库了解"><a href="#数据库了解" class="headerlink" title="数据库了解"></a>数据库了解</h3><blockquote><img src="/xu-runbo/post/759a4355/image-20231217125748079.png" class="" title="image-20231217125748079"> </blockquote><p><strong>SQL就是去操作-花里胡哨-的&#x3D;&#x3D;关系型&#x3D;&#x3D;数据库的语言</strong></p><h3 id="MySql数据模型"><a href="#MySql数据模型" class="headerlink" title="MySql数据模型"></a>MySql数据模型</h3><blockquote><p>关系型数据库</p><p>非关系型数据库</p></blockquote><img src="/xu-runbo/post/759a4355/image-20231217155512382.png" class="" title="image-20231217155512382"> <p>多张有关系的二维表组成的数据库！</p><p>而且数据存储在硬盘里</p><p>不易丢失</p><img src="/xu-runbo/post/759a4355/image-20231217160031591.png" class="" title="image-20231217160031591"> <p>表frm，，数据myd</p><img src="/xu-runbo/post/759a4355/image-20231217155952887.png" class="" title="image-20231217155952887"> <h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h3><img src="/xu-runbo/post/759a4355/image-20231217160129669.png" class="" title="image-20231217160129669"> <h3 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h3><img src="/xu-runbo/post/759a4355/image-20231217160917368.png" class="" title="image-20231217160917368"> <h3 id="SQL的通用语法"><a href="#SQL的通用语法" class="headerlink" title="SQL的通用语法"></a>SQL的通用语法</h3><blockquote><ol><li><p><strong>分号结尾</strong></p></li><li><p>不区分大小写CREAT和creat是同理的–建议关键字用大写</p></li><li><p>注释</p><p><strong><code>-- 注释内容</code>两个-和一个空格，后面是注释的语句(SQL的特有)</strong></p><p><code>#注释内容</code>#紧跟着注释内容</p><p><code>/*注释内容*/</code>中间被抱起来的就是注释内容</p></li></ol></blockquote><p>演示</p><img src="/xu-runbo/post/759a4355/image-20231219171142058.png" class="" title="image-20231219171142058"> <h3 id="DDL-Data-Definition-Language-数据定义"><a href="#DDL-Data-Definition-Language-数据定义" class="headerlink" title="DDL(Data Definition Language)数据定义"></a>DDL(Data Definition Language)数据定义</h3><img src="javaweb-mysql/image-20231217160959495.png" alt="image-20231217160959495" style="zoom:50%;" /> <img src="/xu-runbo/post/759a4355/image-20231217161129705.png" class="" title="image-20231217161129705"><p>找规律：数据库名一般在最后 </p><p>exist加s</p><p>只有show的时候database才+s</p><p>特殊的是查询当前数据库的时候要加();emmmm理解为函数吧，暂时。。</p><h4 id="查询数据库show"><a href="#查询数据库show" class="headerlink" title="查询数据库show"></a>查询数据库show</h4><blockquote><p><code>SHOW DATABASES;</code></p></blockquote><p>代码演示:</p><img src="/xu-runbo/post/759a4355/image-20231217162427105.png" class="" title="image-20231217162427105"> <p>自带的四个数据库：</p><hr><p>特殊的表，视图，是逻辑表。</p><p>性能数据库，，，的信息，</p><p>玩我们自己的数据库</p><h4 id="创建数据库-条件-create"><a href="#创建数据库-条件-create" class="headerlink" title="创建数据库(条件)create"></a>创建数据库(条件)create</h4><blockquote><p>无脑创建</p><p><code>CREATE DATABASE 数据库名;</code></p><p>条件创建</p><p><code>CREATE IF NOt EXISTS 数据库名;</code></p><p>为什么需要条件创建呢？</p><p>如果存在了你再去创建就给你报错。。</p><img src="/xu-runbo/post/759a4355/image-20231217163654672.png" class="" title="image-20231217163654672"> </blockquote><p>代码演示:</p><img src="/xu-runbo/post/759a4355/image-20231217162427105.png" class="" title="image-20231217162427105"> <p>创建数据库</p><img src="/xu-runbo/post/759a4355/image-20231217162443492.png" class="" title="image-20231217162443492"> <p>条件创建数据库</p><img src="/xu-runbo/post/759a4355/image-20231217162509672.png" class="" title="image-20231217162509672"> <h4 id="删除数据库-条件-drop"><a href="#删除数据库-条件-drop" class="headerlink" title="删除数据库(条件)drop"></a>删除数据库(条件)drop</h4><blockquote><p>无脑删除</p><p><code>DROP DATABASE 数据库名;</code></p><p>条件删除</p><p><code>DROP DATABASE IF EXISIS 数据库名;</code></p><p>存在的意义就是防止删除一个不存在的数据库报错，，</p></blockquote><p>代码演示 </p><img src="/xu-runbo/post/759a4355/image-20231219171226792.png" class="" title="image-20231219171226792"> <p>普通删除</p><img src="/xu-runbo/post/759a4355/image-20231219171258796.png" class="" title="image-20231219171258796"> <p>条件删除</p><img src="/xu-runbo/post/759a4355/image-20231217162849841.png" class="" title="image-20231217162849841"> <img src="/xu-runbo/post/759a4355/image-20231217162841878.png" class="" title="image-20231217162841878"> <h4 id="使用数据库-当前，想要-select-use"><a href="#使用数据库-当前，想要-select-use" class="headerlink" title="&#x3D;&#x3D;使用数据库(当前，想要)select use&#x3D;&#x3D;"></a>&#x3D;&#x3D;使用数据库(当前，想要)select use&#x3D;&#x3D;</h4><blockquote><p>查看当前用的哪个数据库</p><p><code>SELECT DATABASE();</code></p><p>要使用数据库</p><p><code>USE 数据库名;</code></p></blockquote><p>代码演示:</p><p>查询当前使用的数据库:</p><img src="/xu-runbo/post/759a4355/image-20231217163126232.png" class="" title="image-20231217163126232">  <p>使用数据库</p><img src="/xu-runbo/post/759a4355/image-20231217163111255.png" class="" title="image-20231217163111255"> <h4 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h4><blockquote><p>用优雅的方式完成下列操作:</p><ol><li>创建一个db1的数据库</li><li>使用创建的数据库</li><li>删除创建的数据库</li><li>展示当前正在使用数据库</li></ol></blockquote><h4 id="——————————–"><a href="#——————————–" class="headerlink" title="——————————–"></a>——————————–</h4><h4 id="查询表-表结构"><a href="#查询表-表结构" class="headerlink" title="查询表&#x2F;表结构"></a>查询表&#x2F;表结构</h4><blockquote><p>先进入一个数据库</p><hr><p>查询数据库有哪些表</p><p><code>SHOW tables;</code></p><p>想看哪一个表的结构description描述</p><p><code>desc 表名;</code></p><hr><p>&#x3D;&#x3D;<strong>desc查的是表的结构，而不是数据</strong>&#x3D;&#x3D; </p><p><code>SELECT * from 表名;</code>才是看表的数据</p><img src="/xu-runbo/post/759a4355/image-20231219171343234.png" class="" title="image-20231219171343234">  </blockquote><p>代码演示;</p><img src="/xu-runbo/post/759a4355/image-20231217164727662.png" class="" title="image-20231217164727662"> <p>使用的sys数据库</p><img src="/xu-runbo/post/759a4355/image-20231219171404633.png" class="" title="image-20231219171404633"> <p>得到数据库的所有表</p><img src="/xu-runbo/post/759a4355/image-20231219171422022.png" class="" title="image-20231219171422022"><p>查看第一张<strong>表的结构</strong>！</p><p>&#x3D;&#x3D;<strong>desc查的是表的结构，而不是数据</strong>&#x3D;&#x3D;</p><h4 id="创建表"><a href="#创建表" class="headerlink" title="&#x3D;&#x3D;创建表&#x3D;&#x3D;"></a>&#x3D;&#x3D;创建表&#x3D;&#x3D;</h4><img src="javaweb-mysql/image-20231217165027778.png" alt="image-20231217165027778" style="zoom:67%;" /> <p>最后一行末尾不能有,</p><img src="/xu-runbo/post/759a4355/image-20231219171439080.png" class="" title="image-20231219171439080"> <p>代码演示: </p><img src="/xu-runbo/post/759a4355/image-20231219171450324.png" class="" title="image-20231219171450324"> <p>切换库 </p><img src="/xu-runbo/post/759a4355/image-20231219171502668.png" class="" title="image-20231219171502668"> <p>创建表 </p><img src="/xu-runbo/post/759a4355/image-20231219171516646.png" class="" title="image-20231219171516646"> <p>查看创建的表的结构</p><p>&#x3D;&#x3D;查看的是表的结构&#x3D;&#x3D;</p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><img src="/xu-runbo/post/759a4355/image-20231219171527496.png" class="" title="image-20231219171527496">   <img src="/xu-runbo/post/759a4355/image-20231219171539494.png" class="" title="image-20231219171539494">  <img src="/xu-runbo/post/759a4355/image-20231219171553806.png" class="" title="image-20231219171553806"> <p>更正》》》</p><p>学生状态因为只有一个数字可以用tinyint</p><hr><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><blockquote><p>无脑删除</p><p><code>DROP TABLE 表名;</code></p><p>条件删除</p><p><code>DROP TABLE IF EXISTS 表名;</code></p><p>也是为了防止删除不存在的表的时候报错;</p></blockquote><p>代码演示:</p><img src="/xu-runbo/post/759a4355/image-20231217173355440.png" class="" title="image-20231217173355440"> <h4 id="修改表"><a href="#修改表" class="headerlink" title="&#x3D;&#x3D;修改表&#x3D;&#x3D;"></a>&#x3D;&#x3D;修改表&#x3D;&#x3D;</h4><img src="/xu-runbo/post/759a4355/image-20231217174019809.png" class="" title="image-20231217174019809">  <h5 id="修改表名称"><a href="#修改表名称" class="headerlink" title="修改表名称"></a>修改表名称</h5><blockquote><p><code>ALTER TABLE 表名 RENAME TO 新的表名;</code></p></blockquote><p>代码演示:</p><img src="/xu-runbo/post/759a4355/image-20231217173827750.png" class="" title="image-20231217173827750"> <img src="/xu-runbo/post/759a4355/image-20231217173844468.png" class="" title="image-20231217173844468"> <h5 id="添加新列"><a href="#添加新列" class="headerlink" title="添加新列"></a>添加新列</h5><blockquote><p><code>ALTER TABLE 表名 ADD 列名 列数据类型;</code></p></blockquote><img src="/xu-runbo/post/759a4355/image-20231217174210522.png" class="" title="image-20231217174210522"> <img src="/xu-runbo/post/759a4355/image-20231217174219720.png" class="" title="image-20231217174219720"> <h5 id="修改某一列的数据类型"><a href="#修改某一列的数据类型" class="headerlink" title="修改某一列的数据类型"></a>修改某一列的数据类型</h5><blockquote><p><code>ALTER TABLE 表名 MODIFY 列名 新的数据类型;</code></p></blockquote><p>代码演示</p><img src="/xu-runbo/post/759a4355/image-20231217174502377.png" class="" title="image-20231217174502377"> <h5 id="修改列名并顺手改数据类型"><a href="#修改列名并顺手改数据类型" class="headerlink" title="修改列名并顺手改数据类型"></a>修改列名并顺手改数据类型</h5><blockquote><p><code>ALTER TABLE 表名 CHANGE 列 新列名 数据类型;</code></p></blockquote><p>代码演示：</p><img src="/xu-runbo/post/759a4355/image-20231217174938399.png" class="" title="image-20231217174938399"> <img src="/xu-runbo/post/759a4355/image-20231217174958588.png" class="" title="image-20231217174958588"> <p>经过测试，不能不写新的数据类型。</p><h5 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h5><blockquote><p><code>ALTER TABLE 表名 DROP 列名; </code></p></blockquote><p>代码演示:</p><img src="/xu-runbo/post/759a4355/image-20231217175255811.png" class="" title="image-20231217175255811"> <h4 id="SQL的数据类型"><a href="#SQL的数据类型" class="headerlink" title="SQL的数据类型"></a>SQL的数据类型</h4><img src="/xu-runbo/post/759a4355/image-20231217170252619.png" class="" title="image-20231217170252619"><p>用法</p><blockquote><p> age int</p><p> score double(分数值的总长度，小数点后保留的位数)</p><p> 0-100分，保留两位小数；score double(5,2)</p><p> birthday date;</p><p> 字符串</p><p> name char(10);字符个数不可以超过十个</p><p> name varchar(10);;字符个数不可以超过十个</p><blockquote><p>定长和变长的区别</p><p>varchar先去计算实际数据的空间来决定实际占用</p><p>张三存在varchgar(10) 占了2个字符</p><p>张三存在char(10)里面占了10个，其他的都用空格</p><hr><p>varchar节约空间但是存储性能低</p><p>char浪费空间但是存储性能高</p></blockquote></blockquote><blockquote><p>保留两位小数89.020,100.02,9.0900</p></blockquote><h3 id="DML-Data-Manipulation-Language-数据操作"><a href="#DML-Data-Manipulation-Language-数据操作" class="headerlink" title="DML(Data Manipulation Language)&#x3D;&#x3D;数据操作&#x3D;&#x3D;"></a>DML(Data Manipulation Language)&#x3D;&#x3D;数据操作&#x3D;&#x3D;</h3><img src="javaweb-mysql/image-20231217161005871.png" alt="image-20231217161005871" style="zoom:50%;" /> <h4 id="添加数据INSERT-INTO"><a href="#添加数据INSERT-INTO" class="headerlink" title="添加数据INSERT INTO"></a>添加数据INSERT INTO</h4><img src="/xu-runbo/post/759a4355/image-20231217194454551.png" class="" title="image-20231217194454551"> <h5 id="给指定列添加数据"><a href="#给指定列添加数据" class="headerlink" title="给指定列添加数据"></a>给指定列添加数据</h5><blockquote><p><code>INSERT INTO 表名(列名1,列名2,...) VALUES(值1,值2...);</code></p></blockquote><p>代码演示：</p><img src="/xu-runbo/post/759a4355/image-20231217194904806.png" class="" title="image-20231217194904806"> <img src="/xu-runbo/post/759a4355/image-20231217194914225.png" class="" title="image-20231217194914225"> <h5 id="给全部列都添加数据"><a href="#给全部列都添加数据" class="headerlink" title="给全部列都添加数据"></a>给全部列都添加数据</h5><blockquote><p><code>INSERT INTO 表明 VALUES(值1,值2,,,,,,)</code></p><p>值是一一对应的</p></blockquote><p>代码演示:</p><img src="/xu-runbo/post/759a4355/image-20231217195432336.png" class="" title="image-20231217195432336"><img src="/xu-runbo/post/759a4355/image-20231217195508427.png" class="" title="image-20231217195508427"> <h5 id="批量添加数据"><a href="#批量添加数据" class="headerlink" title="批量添加数据"></a>批量添加数据</h5><blockquote><p><code>INSERT INTO 表名(列1,列2,...) VALUES(值1，值2....),(值1，值2....),(值1，值2....)...;</code></p><p><code>INSERT INTO 表名 VALUES(值1，值2....),(值1，值2....),(值1，值2....)....;</code></p></blockquote><p>代码演示:</p><img src="/xu-runbo/post/759a4355/image-20231217200034637.png" class="" title="image-20231217200034637"> <img src="/xu-runbo/post/759a4355/image-20231217200043544.png" class="" title="image-20231217200043544"> <hr><img src="/xu-runbo/post/759a4355/image-20231217200219170.png" class="" title="image-20231217200219170"> <img src="/xu-runbo/post/759a4355/image-20231217200225661.png" class="" title="image-20231217200225661"> <blockquote><p>推荐把对应的列名写出来，而不是暗中默默对应。。。。</p></blockquote><h4 id="修改数据UPDATE"><a href="#修改数据UPDATE" class="headerlink" title="*修改数据UPDATE"></a>*修改数据UPDATE</h4><blockquote><p><code>UPDATE 表名 set 列=值，列2=值......[where 条件];</code></p><p>判断相等是&#x3D;</p><hr><p><strong>如果不写条件的话，默认把所有数据都改掉;</strong></p></blockquote><p>代码演示:</p><img src="/xu-runbo/post/759a4355/image-20231219171642950.png" class="" title="image-20231219171642950">  <img src="/xu-runbo/post/759a4355/image-20231219171657198.png" class="" title="image-20231219171657198">  <img src="/xu-runbo/post/759a4355/image-20231219171712515.png" class="" title="image-20231219171712515"> <p>这里的where理解为if就好了…</p><p>或者。。在哪里改呢，在分数为101.03哪一行改</p><p>神踏马定语从句hh</p><h4 id="删除数据DELETE-FROM"><a href="#删除数据DELETE-FROM" class="headerlink" title="*删除数据DELETE FROM"></a>*删除数据DELETE FROM</h4><blockquote><p><code>DELETE FROM 表名 [where 条件];</code></p><p>如果不加条件，默认把表弄为空！</p></blockquote><p>代码演示:</p><img src="/xu-runbo/post/759a4355/image-20231219171729713.png" class="" title="image-20231219171729713"> <img src="/xu-runbo/post/759a4355/image-20231219171740410.png" class="" title="image-20231219171740410"> <hr><img src="/xu-runbo/post/759a4355/image-20231217203852198.png" class="" title="image-20231217203852198"> <p>空空如也</p><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><img src="/xu-runbo/post/759a4355/image-20231217210658918.png" class="" title="image-20231217210658918"> <h3 id="DQL-Data-Query-Language-数据查询"><a href="#DQL-Data-Query-Language-数据查询" class="headerlink" title="DQL(Data Query Language)&#x3D;&#x3D;数据查询&#x3D;&#x3D;"></a>DQL(Data Query Language)&#x3D;&#x3D;数据查询&#x3D;&#x3D;</h3><img src="javaweb-mysql/image-20231217161009789.png" alt="image-20231217161009789" style="zoom:50%;" /> <img src="/xu-runbo/post/759a4355/image-20231219171754574.png" class="" title="image-20231219171754574">  <h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><blockquote><p><code>SELECT 列，列1,列2...(*全部列) FROM 表名;</code></p><p>去除重复的结果</p><p><code>SELECT DISTINCT 列，列1,列2...(*全部列) FROM 表名;</code></p></blockquote><p>代码演示：</p><img src="/xu-runbo/post/759a4355/image-20231219171822321.png" class="" title="image-20231219171822321">  <hr><img src="/xu-runbo/post/759a4355/image-20231217210242435.png" class="" title="image-20231217210242435"> <hr><p>起别名</p><img src="/xu-runbo/post/759a4355/image-20231219171835487.png" class="" title="image-20231219171835487">  <hr><img src="/xu-runbo/post/759a4355/image-20231219171846188.png" class="" title="image-20231219171846188">  <p>去除重复</p><img src="/xu-runbo/post/759a4355/image-20231219171853571.png" class="" title="image-20231219171853571">  <h4 id="条件查询WHERE"><a href="#条件查询WHERE" class="headerlink" title="条件查询WHERE"></a>条件查询WHERE</h4><blockquote><p><code>SELECT 列表 FROM 表名 WHERE 条件列表;</code></p><p>&#x3D;&#x3D;<strong>基础查询加了WHERE 条件列表</strong>&#x3D;&#x3D;</p><p>注意where不要省略</p><p>推荐用and而不是&amp;&amp;</p></blockquote><p>代码演示</p><img src="/xu-runbo/post/759a4355/image-20231217211057668.png" class="" title="image-20231217211057668"> <img src="/xu-runbo/post/759a4355/image-20231217211413940.png" class="" title="image-20231217211413940"> <img src="/xu-runbo/post/759a4355/image-20231217211500610.png" class="" title="image-20231217211500610"> <p>&#x3D;&#x3D;推荐使用and&#x3D;&#x3D;;</p><img src="/xu-runbo/post/759a4355/image-20231217211822855.png" class="" title="image-20231217211822855"> <img src="/xu-runbo/post/759a4355/image-20231217212104048.png" class="" title="image-20231217212104048">  <blockquote><blockquote><blockquote><p>注意null不能用&#x3D; !&#x3D;</p><p>而是用is null和is not null</p></blockquote></blockquote></blockquote><img src="/xu-runbo/post/759a4355/image-20231217212223132.png" class="" title="image-20231217212223132"> <hr><h5 id="模糊查询like"><a href="#模糊查询like" class="headerlink" title="&#x3D;&#x3D;模糊查询like&#x3D;&#x3D;"></a>&#x3D;&#x3D;模糊查询like&#x3D;&#x3D;</h5><blockquote><p>记住_匹配一个字符</p><p>%匹配人一个字符</p><p>再配合like使用</p><p>加上””</p><p>食用更佳</p></blockquote><img src="/xu-runbo/post/759a4355/image-20231219171910632.png" class="" title="image-20231219171910632">  <img src="/xu-runbo/post/759a4355/image-20231219171919715.png" class="" title="image-20231219171919715">  <img src="/xu-runbo/post/759a4355/image-20231219171931843.png" class="" title="image-20231219171931843">  <img src="/xu-runbo/post/759a4355/image-20231219171940471.png" class="" title="image-20231219171940471">  <h5 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h5><img src="/xu-runbo/post/759a4355/image-20231217211637486.png" class="" title="image-20231217211637486">  <h4 id="分组查询GROUP-BY"><a href="#分组查询GROUP-BY" class="headerlink" title="分组查询GROUP BY"></a>分组查询GROUP BY</h4><h5 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h5><p>概念:将一列作为一个整体，进行纵向计算。</p><img src="/xu-runbo/post/759a4355/image-20231218094547291.png" class="" title="image-20231218094547291"> <p>&#x3D;&#x3D;<strong>null都不参与聚合函数的运算</strong>&#x3D;&#x3D;</p><blockquote><p><code>SELECT 聚合函数名(列名) FROM 表;</code></p></blockquote><p>代码演示</p><img src="/xu-runbo/post/759a4355/image-20231218095340865.png" class="" title="image-20231218095340865">  <img src="/xu-runbo/post/759a4355/image-20231218095441297.png" class="" title="image-20231218095441297">  <img src="/xu-runbo/post/759a4355/image-20231218095624112.png" class="" title="image-20231218095624112"> <hr><h5 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h5><img src="/xu-runbo/post/759a4355/image-20231218095952578.png" class="" title="image-20231218095952578"> <blockquote><p>要查的东西必须是</p><p>分组字段，聚合函数。</p><p>其他的没有意义。</p><img src="/xu-runbo/post/759a4355/image-20231219171958036.png" class="" title="image-20231219171958036"> <img src="/xu-runbo/post/759a4355/image-20231218101152334.png" class="" title="image-20231218101152334"><p>会直接报错！</p></blockquote><p>代码演示: </p><img src="/xu-runbo/post/759a4355/image-20231218101250534.png" class="" title="image-20231218101250534"> <p> 现在需求</p> <img src="/xu-runbo/post/759a4355/image-20231218101530685.png" class="" title="image-20231218101530685"> <img src="/xu-runbo/post/759a4355/image-20231218101640888.png" class="" title="image-20231218101640888"> <p>需求</p><img src="/xu-runbo/post/759a4355/image-20231218101754826.png" class="" title="image-20231218101754826"> <p>因为having是能对聚合函数进行操作的，而where不可以。</p><img src="/xu-runbo/post/759a4355/image-20231218101921751.png" class="" title="image-20231218101921751"> <blockquote><p>分组查询：</p><p>那些聚合函数会默认的去对分完组的列表进行计算，而不是对整张表。。。</p></blockquote><h4 id="排序查询ORDER-BY"><a href="#排序查询ORDER-BY" class="headerlink" title="排序查询ORDER BY"></a>排序查询ORDER BY</h4><img src="/xu-runbo/post/759a4355/image-20231218092005198.png" class="" title="image-20231218092005198"> <p>&#x3D;&#x3D;<strong>如果有多个排序条件，只有前面的条件值一样的时候才根据第二条件排序</strong>&#x3D;&#x3D;</p><p>代码演示：</p><img src="/xu-runbo/post/759a4355/image-20231219172012674.png" class="" title="image-20231219172012674"> <img src="/xu-runbo/post/759a4355/image-20231219172021255.png" class="" title="image-20231219172021255">  <p><strong>前面查询表结构的desc是describe的缩写，这里降序的desc是descend的缩写</strong> </p><blockquote><p>现在我想让根据mathscore降序且mathscore相等的时候，id进行升序；</p><img src="/xu-runbo/post/759a4355/image-20231218093253473.png" class="" title="image-20231218093253473"> <p>代码演示</p><img src="/xu-runbo/post/759a4355/image-20231218093500333.png" class="" title="image-20231218093500333"> </blockquote><h4 id="分页查询LIMIT"><a href="#分页查询LIMIT" class="headerlink" title="&#x3D;&#x3D;分页查询LIMIT&#x3D;&#x3D;"></a>&#x3D;&#x3D;分页查询LIMIT&#x3D;&#x3D;</h4><p>效果：</p><img src="/xu-runbo/post/759a4355/image-20231218102136842.png" class="" title="image-20231218102136842"> <blockquote><p><code>SELECT 列表 FROM 表名 LIMIT 起始索引，查询条目数;</code></p><p>起始索引是从0开始的</p><p>&#x3D;&#x3D;*<em>起始索引&#x3D;(当前页码-1)<em>每页显示的条数</em></em>&#x3D;&#x3D;</p><img src="/xu-runbo/post/759a4355/image-20231218102354649.png" class="" title="image-20231218102354649"> </blockquote><p> 代码演示:</p><img src="/xu-runbo/post/759a4355/image-20231218103058443.png" class="" title="image-20231218103058443"> <h3 id="DCL-Data-Control-Language-数据权限控制"><a href="#DCL-Data-Control-Language-数据权限控制" class="headerlink" title="DCL(Data Control Language)数据权限控制"></a>DCL(Data Control Language)数据权限控制</h3><img src="javaweb-mysql/image-20231217161017542.png" alt="image-20231217161017542" style="zoom:50%;" /> <h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><h5 id="概念-分类"><a href="#概念-分类" class="headerlink" title="概念&amp;分类"></a>概念&amp;分类</h5><blockquote><p>作用于列上的规则，限制加入表的数据</p><p>保证了数据的正确性，有效性，完整性</p></blockquote><img src="/xu-runbo/post/759a4355/image-20231218142846479.png" class="" title="image-20231218142846479"> <p>&#x3D;&#x3D;<strong>MySQL不支持检查约束</strong>&#x3D;&#x3D;</p><blockquote><p>主键是指在一个表中用来唯一标识每一行数据的字段或字段组合。</p><p>主键的作用是<strong>确保表中的每一行都有一个唯一的标识符</strong>。</p><p>非空且唯一</p></blockquote><h5 id="约束的使用"><a href="#约束的使用" class="headerlink" title="约束的使用"></a>约束的使用</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stuff(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span>,</span><br><span class="line">birthday <span class="type">date</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">salary <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">bonus <span class="keyword">double</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">default</span> <span class="number">0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>主键约束:非空唯一</p><img src="/xu-runbo/post/759a4355/image-20231219172045470.png" class="" title="image-20231219172045470"> <img src="/xu-runbo/post/759a4355/image-20231219172058264.png" class="" title="image-20231219172058264">  <p>唯一约束</p><img src="/xu-runbo/post/759a4355/image-20231219172110834.png" class="" title="image-20231219172110834">  <p>默认约束</p><img src="/xu-runbo/post/759a4355/image-20231218145138379.png" class="" title="image-20231218145138379"><p>主键自增</p><p>当列是数字类型并且唯一约束的时候会自己增加；</p><img src="/xu-runbo/post/759a4355/image-20231218150023336.png" class="" title="image-20231218150023336"> <h5 id="外键约束"><a href="#外键约束" class="headerlink" title="&#x3D;&#x3D;外键约束&#x3D;&#x3D;"></a>&#x3D;&#x3D;外键约束&#x3D;&#x3D;</h5><blockquote><img src="/xu-runbo/post/759a4355/image-20231218204906190.png" class="" title="image-20231218204906190">  <p>如果有这样的两张表，mysql会认为这是两张独立的表，</p><p>我们认为是有逻辑关系但是没有物理联系</p><p>如何外键连接起来呢。</p><hr><p>现在可以删除郑州那一行，是没问题的</p><p>但实际中，要删除郑州这个部门，是要先把张三和李四给开除掉，然后再删除郑州部门。</p><hr><p>如何实现呢</p><blockquote><p><code>CREAT TABLE 表(</code></p><p><code>   列名 数据类型,</code>   </p><p><code>.......</code></p><p><code>CONSTRAINT 外键名称 FRREIGN KEY(外键列名，从表的列) REFERENCES 主表(主列表名))</code></p><p>RFOREIGN KEY后面的是从表的列，REFERENCES 后面的主表和主表的列;</p><p>创建外键的时候要保证主表已经创建好了。。。</p><img src="/xu-runbo/post/759a4355/image-20231219172129127.png" class="" title="image-20231219172129127">  </blockquote></blockquote><p>代码演示:</p><p>在创建外键约束时，主表的列通常需要有索引以提高查询性能。</p><p><strong>primary</strong>  key</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stuff(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">depid <span class="type">int</span>,</span><br><span class="line"><span class="keyword">constraint</span> forekey <span class="keyword">foreign</span> key(depid) <span class="keyword">references</span> dep(did)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(id,name,depid) <span class="keyword">values</span>(<span class="number">1</span>,&quot;张三&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(id,name,depid) <span class="keyword">values</span>(<span class="number">2</span>,&quot;李四&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(id,name,depid) <span class="keyword">values</span>(<span class="number">3</span>,&quot;王五&quot;,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line">did <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">address <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> dep(address) <span class="keyword">values</span>(&quot;郑州&quot;);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> dep(address) <span class="keyword">values</span>(&quot;杭州&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stuff;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> stuff <span class="keyword">where</span> depid<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dep <span class="keyword">where</span> address<span class="operator">=</span>&quot;郑州&quot;;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/759a4355/image-20231218204735025.png" class="" title="image-20231218204735025"> <p>利用外键建立depid和did之间的物理联系 </p><img src="/xu-runbo/post/759a4355/image-20231218211110756.png" class="" title="image-20231218211110756"><img src="/xu-runbo/post/759a4355/image-20231218211309650.png" class="" title="image-20231218211309650">  <img src="/xu-runbo/post/759a4355/image-20231218211424136.png" class="" title="image-20231218211424136"> <blockquote><p>涉及的问题</p><p>在创建外键约束时，被引用的列(主表的列)通常<strong>需要有主键</strong>或<strong>唯一约束</strong>。</p><p>需要确保(主)<code>dep</code> 表中的 <code>did</code> 列有<strong>主键</strong>或唯一约束，这样才能成功创建<strong>外键约束</strong>。</p><p>建表后的添加外键</p><p><code>ALTER TABLE 次表名 ADD CONSTRAINT FOREIGN KEY(次表的列) REFERENCES 主表(主表的列);</code></p></blockquote><h5 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h5><blockquote><p>外键是表和表的关系<br><code>ALTER TABLE 次表 DROP FOREIGN KEY 外键名;</code></p></blockquote><p>代码演示:</p><img src="/xu-runbo/post/759a4355/image-20231219172148930.png" class="" title="image-20231219172148930"> <h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><hr><img src="/xu-runbo/post/759a4355/image-20231219172156290.png" class="" title="image-20231219172156290">  <img src="/xu-runbo/post/759a4355/image-20231219172205371.png" class="" title="image-20231219172205371"><img src="/xu-runbo/post/759a4355/image-20231219172226473.png" class="" title="image-20231219172226473">  <blockquote><p>最好用的就是</p><p><code>alter table 表名 modify 列名 去掉约束的数据类型;</code></p><p>varchar(20) unique-&gt;varchar(20);</p></blockquote><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><blockquote><p>对于软件的开发很有用</p><p>软件研发步骤:\</p><ul><li><img src="/xu-runbo/post/759a4355/image-20231219172238282.png" class="" title="image-20231219172238282">  </li><li><p>数据库设计概念</p><p>根据业务系统的具体需求，结合DDBMS，为业务系统选择最好的数据存储模型</p><p>建立数据库中的表结构和表与表之间的关联关系的过程</p><p>哪些表，哪些列，表和表之间的关系</p></li><li><p>数据库设计 的步骤</p><img src="/xu-runbo/post/759a4355/image-20231219115747293.png" class="" title="image-20231219115747293"></li></ul></blockquote><h4 id="表关系"><a href="#表关系" class="headerlink" title="表关系"></a>表关系</h4><blockquote><ol><li>一对一</li></ol></blockquote><p>人和身份证</p><ul><li>一对一关系多用于表的拆分，将一个实体中常用到的字段放到一张表，不经常使用的字段放到另一张表提升查询性能</li></ul><blockquote><ol><li>一对多(很多)，多对一</li></ol></blockquote><p>部门和员工</p><p>从部门来看是一对多</p><p>从员工来看是多对一</p><blockquote><ol><li>多对多</li></ol></blockquote><p>商品和订单</p><p>一个商品对应多个订单</p><p>一个订单对应多个商品</p><hr><h4 id="MYSQL实现表关系"><a href="#MYSQL实现表关系" class="headerlink" title="MYSQL实现表关系"></a>MYSQL实现表关系</h4><h5 id="一对多-多对一"><a href="#一对多-多对一" class="headerlink" title="一对多&#x2F;多对一"></a>一对多&#x2F;多对一</h5><img src="/xu-runbo/post/759a4355/image-20231219122044220.png" class="" title="image-20231219122044220"> <p>代码演示</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">func <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">address <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep(func,address) <span class="keyword">values</span>(&quot;研发部&quot;,&quot;郑州&quot;),(&quot;销售部&quot;,&quot;洛阳&quot;);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dep;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stuff(</span><br><span class="line">stuff_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">depid <span class="type">int</span>,</span><br><span class="line"><span class="keyword">constraint</span> forekey <span class="keyword">foreign</span> key(depid) <span class="keyword">references</span> dep(id)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid) <span class="keyword">values</span>(&quot;张三&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid) <span class="keyword">values</span>(&quot;李四&quot;,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid) <span class="keyword">values</span>(&quot;王五&quot;,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid) <span class="keyword">values</span>(&quot;赵六&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> stuff; </span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> dep; </span><br></pre></td></tr></table></figure><h5 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h5><img src="/xu-runbo/post/759a4355/image-20231219122932632.png" class="" title="image-20231219122932632"> <p>代码实现:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_order(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">payment <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">payment_type <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">status <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_goods(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">title <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">price <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_order(payment,payment_type,status) <span class="keyword">values</span>(<span class="number">1234</span>,&quot;微信支付&quot;,&quot;未付款&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_order(payment,payment_type,status) <span class="keyword">values</span>(<span class="number">234</span>,&quot;微信支付&quot;,&quot;未付款&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_order(payment,payment_type,status) <span class="keyword">values</span>(<span class="number">104</span>,&quot;支付宝支付&quot;,&quot;已付款&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_goods(title,price) <span class="keyword">values</span>(&quot;华为P90&quot;,<span class="number">9999</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_goods(title,price) <span class="keyword">values</span>(&quot;华为P80&quot;,<span class="number">1111</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_goods(title,price) <span class="keyword">values</span>(&quot;华为P70&quot;,<span class="number">2222</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_goods(title,price) <span class="keyword">values</span>(&quot;华为P60&quot;,<span class="number">7777</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_goods(title,price) <span class="keyword">values</span>(&quot;华为P30&quot;,<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_middle(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">order_id <span class="type">int</span>,</span><br><span class="line">goods_id <span class="type">int</span>,</span><br><span class="line">count <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_middle <span class="keyword">add</span> <span class="keyword">constraint</span> middle_order <span class="keyword">foreign</span> key(order_id) <span class="keyword">references</span> tb_order(id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> tb_middle <span class="keyword">add</span> <span class="keyword">constraint</span> middle_goods <span class="keyword">foreign</span> key(goods_id) <span class="keyword">references</span> tb_goods(id);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_goods;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_order;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_middle;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/759a4355/PixPin12-19_12-49-22.gif" class="" title="PixPin12-19_12-49-22"> <h5 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h5><p>代码实现</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> qq_user(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">nickname <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">age <span class="type">int</span>,</span><br><span class="line">sex <span class="type">varchar</span>(<span class="number">5</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> qq_user_desc(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">city <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">edu <span class="type">varchar</span>(<span class="number">5</span>),</span><br><span class="line">income <span class="keyword">double</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">status <span class="type">varchar</span>(<span class="number">5</span>),</span><br><span class="line">detail <span class="type">varchar</span>(<span class="number">5</span>) <span class="keyword">default</span> &quot;---&quot;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> qq_user(nickname,age,sex) <span class="keyword">values</span>(&quot;马车&quot;,<span class="number">19</span>,&quot;男&quot;);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> qq_user(nickname,age,sex) <span class="keyword">values</span>(&quot;赵晕&quot;,<span class="number">39</span>,&quot;男&quot;);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> qq_user(nickname,age,sex) <span class="keyword">values</span>(&quot;张飞&quot;,<span class="number">29</span>,&quot;女&quot;);</span><br><span class="line">#_<span class="comment">---</span></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> qq_user_desc(city,edu,income,status) <span class="keyword">values</span>(&quot;广州&quot;,&quot;博士&quot;,<span class="number">3000</span>,&quot;单身狗&quot;);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> qq_user_desc(city,edu,income,status) <span class="keyword">values</span>(&quot;湖南&quot;,&quot;高中&quot;,<span class="number">23000</span>,&quot;已婚&quot;);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> qq_user_desc(city,edu,income,status) <span class="keyword">values</span>(&quot;湖北&quot;,&quot;小学&quot;,<span class="number">13000</span>,&quot;离异带俩娃&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> qq_user;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> qq_user_desc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> qq_user <span class="keyword">add</span> desc_id <span class="type">int</span> <span class="keyword">primary</span> key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> qq_user <span class="keyword">drop</span> desc_id;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> qq_user <span class="keyword">add</span> <span class="keyword">constraint</span> qqkey <span class="keyword">foreign</span> key(id) <span class="keyword">references</span> qq_user_desc(id);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> qq_user <span class="keyword">drop</span> <span class="keyword">foreign</span> key qqkey;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/759a4355/PixPin12-19_13-18-35.gif" class="" title="PixPin12-19_13-18-35"> <img src="/xu-runbo/post/759a4355/image-20231219132040358.png" class="" title="image-20231219132040358"> <h4 id="数据库设计案例"><a href="#数据库设计案例" class="headerlink" title="数据库设计案例"></a>数据库设计案例</h4><img src="/xu-runbo/post/759a4355/image-20231219133311156.png" class="" title="image-20231219133311156"> <h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>引入:</p><blockquote><p><code>select * from 表1,表2;</code></p><p>笛卡尔积：A，B两个集合，去A，B的所有组合情况</p></blockquote><p>测试代码</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">func <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">address <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep(func,address) <span class="keyword">values</span>(&quot;研发部&quot;,&quot;郑州&quot;),(&quot;销售部&quot;,&quot;洛阳&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stuff(</span><br><span class="line">stuff_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">depid <span class="type">int</span>,</span><br><span class="line"><span class="keyword">constraint</span> forekey <span class="keyword">foreign</span> key(depid) <span class="keyword">references</span> dep(id)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid) <span class="keyword">values</span>(&quot;张三&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid) <span class="keyword">values</span>(&quot;李四&quot;,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid) <span class="keyword">values</span>(&quot;王五&quot;,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid) <span class="keyword">values</span>(&quot;赵六&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> stuff;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dep;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stuff,dep;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stuff,dep <span class="keyword">where</span> stuff.depid<span class="operator">=</span>dep.id;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/759a4355/image-20231219133934032.png" class="" title="image-20231219133934032"> <p><code>select * from stuff,dep;</code></p><img src="/xu-runbo/post/759a4355/image-20231219134107741.png" class="" title="image-20231219134107741"> <p><code>select * from stuff,dep where depid=id;</code></p><img src="/xu-runbo/post/759a4355/image-20231219134128140.png" class="" title="image-20231219134128140"> <h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><h5 id="内连接-交集"><a href="#内连接-交集" class="headerlink" title="内连接(交集)"></a>内连接(交集)</h5><blockquote><p>– 隐式内连接</p><p><code>seect 字段列表 from 表1，表2 where 条件;</code></p><p>查询AB<strong>交集的数据</strong></p><p>– 显示内连接</p><p><code>select 字段列表 from 表1 [inner] join 表2 on 条件;</code></p><p>Inner可以省略&#x2F;。。。。。</p></blockquote><blockquote><p><strong>select</strong> * <strong>from</strong> stuff,dep <strong>where</strong> stuff.depid&#x3D;dep.id;</p><p><strong>select</strong> * <strong>from</strong> stuff <strong>inner</strong> <strong>join</strong> dep <strong>on</strong> stuff.depid&#x3D;dep.id;</p><img src="/xu-runbo/post/759a4355/image-20231219134948387.png" class="" title="image-20231219134948387">  </blockquote><p>现在我要求：</p><img src="/xu-runbo/post/759a4355/image-20231219135029337.png" class="" title="image-20231219135029337"> <p>代码实现:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dep(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">func <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">address <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dep(func,address) <span class="keyword">values</span>(&quot;研发部&quot;,&quot;郑州&quot;),(&quot;销售部&quot;,&quot;洛阳&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stuff(</span><br><span class="line">stuff_id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">depid <span class="type">int</span>,</span><br><span class="line">addr <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid,addr) <span class="keyword">values</span>(&quot;张三&quot;,<span class="number">1</span>,&quot;日本&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid,addr) <span class="keyword">values</span>(&quot;李四&quot;,<span class="number">2</span>,&quot;日本&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid,addr) <span class="keyword">values</span>(&quot;王五&quot;,<span class="number">2</span>,&quot;日本&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid,addr) <span class="keyword">values</span>(&quot;赵六&quot;,<span class="number">1</span>,&quot;日本&quot;);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> stuff(name,depid,addr) <span class="keyword">values</span>(&quot;赵六&quot;,<span class="number">999</span>,&quot;日本&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span> <span class="keyword">from</span> stuff;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dep;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stuff,dep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stuff,dep <span class="keyword">where</span> stuff.depid<span class="operator">=</span>dep.id;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stuff <span class="keyword">inner</span> <span class="keyword">join</span> dep <span class="keyword">on</span> stuff.depid<span class="operator">=</span>dep.id;</span><br><span class="line"><span class="keyword">select</span> stuff.stuff_id,stuff.name,dep.func,dep.address <span class="keyword">from</span> stuff <span class="keyword">inner</span> <span class="keyword">join</span> dep <span class="keyword">on</span> stuff.depid<span class="operator">=</span>dep.id;</span><br><span class="line"><span class="keyword">select</span> sf.stuff_id,sf.name,dp.func,dp.address <span class="keyword">from</span> stuff sf <span class="keyword">inner</span> <span class="keyword">join</span> dep dp <span class="keyword">on</span> sf.depid<span class="operator">=</span>dp.id;</span><br><span class="line"><span class="keyword">select</span> sf.stuff_id,sf.name,dp.func,dp.address <span class="keyword">from</span> stuff sf,dep dp <span class="keyword">where</span> sf.depid<span class="operator">=</span>dp.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stuff <span class="keyword">left</span> <span class="keyword">join</span> dep <span class="keyword">on</span> stuff.depid<span class="operator">=</span>dep.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stuff <span class="keyword">right</span> <span class="keyword">join</span> dep <span class="keyword">on</span> stuff.depid<span class="operator">=</span>dep.id;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> stuff;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/759a4355/image-20231219135148254.png" class="" title="image-20231219135148254"> <p>给表起别名，字段起别名；</p><img src="/xu-runbo/post/759a4355/image-20231219135456151.png" class="" title="image-20231219135456151"> <h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><blockquote><p>左外连接：</p><p><code>select 字段列表 from 表1 left [outer] join 表2 on 条件;</code></p><p>右外连接：</p><p><code>select 字段列表 from 表1 right [outer] join 表2 on 条件;</code></p></blockquote><ul><li><p>左外连接</p><p>查询A表所有数据+交集数据</p><img src="/xu-runbo/post/759a4355/image-20231219172311638.png" class="" title="image-20231219172311638"> </li><li><p>右外连接</p><p>查询B表所有数据+交集数据</p><img src="/xu-runbo/post/759a4355/image-20231219172322831.png" class="" title="image-20231219172322831"></li></ul><p>代码演示：</p><img src="/xu-runbo/post/759a4355/image-20231219140735962.png" class="" title="image-20231219140735962"> <img src="/xu-runbo/post/759a4355/image-20231219140051069.png" class="" title="image-20231219140051069"> <p>左外连接</p><img src="/xu-runbo/post/759a4355/image-20231219140903659.png" class="" title="image-20231219140903659"> <p>右外连接</p><img src="/xu-runbo/post/759a4355/image-20231219140841377.png" class="" title="image-20231219140841377"> <h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><p>问题引入：</p><img src="/xu-runbo/post/759a4355/image-20231219141359873.png" class="" title="image-20231219141359873"> <p>查出工资高于李四的人员信息</p><ol><li><p>李四的工资</p><img src="/xu-runbo/post/759a4355/image-20231219172335441.png" class="" title="image-20231219172335441">  </li><li><p>查询高于2000的人员信息</p><img src="/xu-runbo/post/759a4355/image-20231219172344529.png" class="" title="image-20231219172344529"></li></ol><p>如何把这两个步骤合二为一？？？</p><img src="/xu-runbo/post/759a4355/image-20231219141652509.png" class="" title="image-20231219141652509"> <blockquote><p>字查询</p><p>查询中嵌套语句，称嵌套查询为子查询.</p></blockquote><ul><li>单行单列</li></ul><img src="/xu-runbo/post/759a4355/image-20231219141844983.png" class="" title="image-20231219141844983"><p>上面问题引入就是 </p><ul><li>多行单列</li></ul><blockquote><p><code>select 字段列表 from where 字段名 in (子查询)</code></p><p>作为条件之，使用in关键字进行条件判断</p></blockquote><img src="/xu-runbo/post/759a4355/image-20231219142501583.png" class="" title="image-20231219142501583"><p>如果要查询郑州和杭州的呢？</p><img src="/xu-runbo/post/759a4355/image-20231219142747485.png" class="" title="image-20231219142747485">  <ul><li>多行多列</li></ul><blockquote><p><code>select 字段列表 from(子查询得到的虚拟表) where 条件;</code></p><p>作为虚拟表</p></blockquote><img src="/xu-runbo/post/759a4355/image-20231219144109298.png" class="" title="image-20231219144109298"> <img src="/xu-runbo/post/759a4355/image-20231219144313662.png" class="" title="image-20231219144313662"> <h4 id="多表查询的案例"><a href="#多表查询的案例" class="headerlink" title="多表查询的案例"></a>多表查询的案例</h4><p><a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx?p=28&vd_source=45cf0df1cf29fd12377b442a74b95876">10多表查询案例</a></p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="事务简介"><a href="#事务简介" class="headerlink" title="事务简介"></a>事务简介</h4><img src="/xu-runbo/post/759a4355/image-20231219144637434.png" class="" title="image-20231219144637434"><p>问题引入 </p><img src="/xu-runbo/post/759a4355/image-20231219145223921.png" class="" title="image-20231219145223921"> <p>语法</p><blockquote><p>开启事务</p><p><code>START TRANSACTION;</code>or<code>BEGIN;</code></p><p>提交事务</p><p><code>COMMIT;</code></p><p>回滚事务</p><p><code>ROLLBACK;</code></p></blockquote><h4 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h4><ol><li>查询李四的余额</li><li>李四金额-500</li><li>张三金额+500</li></ol><p>begin之后开启事务，先是在模拟操作一样</p><p>自己这里在扣，与此同时其他端还是初始状态</p><p>当遇到错误了，rollback就回到初始状态了 </p><img src="/xu-runbo/post/759a4355/image-20231219150929139.png" class="" title="image-20231219150929139"> <p>现在</p><img src="/xu-runbo/post/759a4355/image-20231219151040612.png" class="" title="image-20231219151040612"> <img src="/xu-runbo/post/759a4355/image-20231219151058996.png" class="" title="image-20231219151058996"> <p>在另一端还是看到的是初始状态，因为没有提交</p><hr><p>现在修改了问题，，完成整个事务</p><p>就真正完成了转账操作</p><img src="/xu-runbo/post/759a4355/PixPin12-19_15-13-13.gif" class="" title="PixPin12-19_15-13-13"><p>测试代码：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">money <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(name,money) <span class="keyword">values</span>(&quot;张三&quot;,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account(name,money) <span class="keyword">values</span>(&quot;李四&quot;,<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money<span class="operator">=</span><span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money<span class="operator">=</span><span class="number">500</span> <span class="keyword">where</span> name<span class="operator">=</span>&quot;李四&quot;;</span><br><span class="line"><span class="comment">-- 出错了</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money<span class="operator">=</span><span class="number">1500</span> <span class="keyword">where</span> name<span class="operator">=</span>&quot;张三&quot;;</span><br><span class="line"><span class="comment">-- rollback;</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h4 id="事物四大特征"><a href="#事物四大特征" class="headerlink" title="事物四大特征"></a>事物四大特征</h4><p>面试问题？：</p><img src="/xu-runbo/post/759a4355/image-20231219151615416.png" class="" title="image-20231219151615416"> <p>mysql默认写一句sql语句就是默认自带执行的，后面尾随了commit</p><img src="/xu-runbo/post/759a4355/image-20231219151908708.png" class="" title="image-20231219151908708"> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br></pre></td></tr></table></figure><p>修改为手动提交</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@sautocommit</span><span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>之后的操作都是临时的，没有真正的改掉数据，需要commit才能真正修改硬盘上的数据.</p>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt窗口实现右键菜单</title>
      <link href="/xu-runbo/post/21afdc47.html"/>
      <url>/xu-runbo/post/21afdc47.html</url>
      
        <content type="html"><![CDATA[<h1 id="qt窗口实现右键菜单"><a href="#qt窗口实现右键菜单" class="headerlink" title="qt窗口实现右键菜单"></a>qt窗口实现右键菜单</h1><blockquote><p>如果想要在某一窗口中显示右键菜单, 其处理方式大体上有两种</p><p>这两种方式分别为<code>基于鼠标事件实现</code>和<code>基于窗口的菜单策略实现</code>。</p><p>其中第二种方式中又有三种不同的实现方式, 因此如果想要在窗口中显示一个右键菜单一共四种实现方式</p></blockquote><h1 id="基于鼠标事件实现"><a href="#基于鼠标事件实现" class="headerlink" title="基于鼠标事件实现"></a>基于鼠标事件实现</h1><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><blockquote><p>使用这种方式实现右键菜单的显示需要使用<code>事件处理器函数</code>, 在Qt中这类函数都是回调函数, 并且在自定义窗口类中我们还可以自定义事件处理器函数的行为（因为子类继承了父类的这个方法并且这类函数是虚函数）。<br>实现步骤如下：</p></blockquote><ol><li><p>在当前窗口类中<strong>重写鼠标操作相关的的事件处理器函数</strong>，有两个可以选择</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下两个事件二选一即可, 只是事件函数被调用的时机不同罢了</span></span><br><span class="line"><span class="comment">// 这个时机对右键菜单的显示没有任何影响</span></span><br><span class="line">[<span class="keyword">virtual</span> <span class="keyword">protected</span>] <span class="function"><span class="type">void</span> <span class="title">QWidget::mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line">[<span class="keyword">virtual</span> <span class="keyword">protected</span>] <span class="function"><span class="type">void</span> <span class="title">QWidget::mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>在<strong>数据表事件处理器函数内部判断是否按下了鼠标右键</strong></p></li><li><p>如果<strong>按下了鼠标右键创建菜单对象(也可以提前先创建处理), 并将其显示出来</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关于QMenu类型的菜单显示需要调用的 API</span></span><br><span class="line"><span class="comment">// 参数 p 就是右键菜单需要显示的位置, 这个坐标需要使用屏幕坐标</span></span><br><span class="line"><span class="comment">// 该位置坐标一般通过调用 QCursor::pos() 直接就可以得到了</span></span><br><span class="line"><span class="function">QAction *<span class="title">QMenu::exec</span><span class="params">(<span class="type">const</span> QPoint &amp;p, QAction *action = <span class="literal">nullptr</span>)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><img src="qtmenu/image-20231206171207481.png" alt="image-20231206171207481" style="zoom:80%;" /> <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 判断用户按下的是哪一个鼠标键</span></span><br><span class="line">    <span class="keyword">if</span>(event-&gt;<span class="built_in">button</span>() == Qt::RightButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 弹出一个菜单, 菜单项是 QAction 类型</span></span><br><span class="line">        QMenu menu;</span><br><span class="line">        QAction* act = menu.<span class="built_in">addAction</span>(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        <span class="built_in">connect</span>(act, &amp;QAction::triggered, <span class="keyword">this</span>, [=]()</span><br><span class="line">                &#123;</span><br><span class="line">                    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;您选择的是C++...&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">        menu.<span class="built_in">addAction</span>(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        menu.<span class="built_in">addAction</span>(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">        menu.<span class="built_in">exec</span>(QCursor::<span class="built_in">pos</span>()); <span class="comment">// 右键菜单被模态显示出来了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/21afdc47/image-20231206171228785.png" class="" title="image-20231206171228785"> <h1 id="基于窗口的菜单策略实现"><a href="#基于窗口的菜单策略实现" class="headerlink" title="基于窗口的菜单策略实现"></a>基于窗口的菜单策略实现</h1><h2 id="Qt-DefaultContextMenu"><a href="#Qt-DefaultContextMenu" class="headerlink" title="Qt::DefaultContextMenu"></a>Qt::DefaultContextMenu</h2><blockquote><p>使用这个策略实现右键菜单, 需要借助窗口类从父类继承的虚函数<code>QWidget::contextMenuEvent()</code>并重写它来实现。<br>要做的第一步是在窗口类的头文件中添加这个函数的声明</p></blockquote><img src="/xu-runbo/post/21afdc47/image-20231206172130349.png" class="" title="image-20231206172130349"> <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::contextMenuEvent</span><span class="params">(QContextMenuEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 弹出一个菜单, 菜单项是 QAction 类型</span></span><br><span class="line"></span><br><span class="line">    QMenu menu;</span><br><span class="line">    QAction* act = menu.<span class="built_in">addAction</span>(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">    <span class="built_in">connect</span>(act, &amp;QAction::triggered, <span class="keyword">this</span>, [=]()</span><br><span class="line">            &#123;</span><br><span class="line">                QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;您选择的是C++...&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">    menu.<span class="built_in">addAction</span>(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    menu.<span class="built_in">addAction</span>(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    menu.<span class="built_in">exec</span>(QCursor::<span class="built_in">pos</span>());<span class="comment">// 右键菜单被模态显示出来了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Qt-ActionsContextMenu最简单的一集"><a href="#Qt-ActionsContextMenu最简单的一集" class="headerlink" title="Qt::ActionsContextMenu最简单的一集"></a>Qt::ActionsContextMenu最简单的一集</h2><blockquote><p><strong>使用这个策略实现右键菜单, 是最简单的一种</strong>, 我们只需要创建一些 <code>QAction</code>类型的对象并且将他们添加到当前的窗口中, 当我们在窗口中点击鼠标右键这些<code>QAction</code>类型的菜单项就可以显示出来了。<br>虽然这种方法比较简单，但是它有一定的局限性，就是在一个窗口中不能根据不同的需求制作不同的右键菜单，这种方式只能得到一个唯一的右键菜单。<br>相关的处理代码如下：</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mainwindow.cpp</span></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QMainWindow</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只要将某个QAction添加给对应的窗口, 这个action就是这个窗口右键菜单中的一个菜单项了</span></span><br><span class="line">    <span class="comment">// 在窗口中点击鼠标右键, 就可以显示这个菜单</span></span><br><span class="line">    <span class="built_in">setContextMenuPolicy</span>(Qt::ActionsContextMenu);</span><br><span class="line">    <span class="comment">// 给当前窗口添加QAction对象</span></span><br><span class="line">    QAction* act1  = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">    QAction* act2 = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    QAction* act3  = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">addAction</span>(act1);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">addAction</span>(act2);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">addAction</span>(act3);</span><br><span class="line">    <span class="built_in">connect</span>(act1, &amp;QAction::triggered, <span class="keyword">this</span>, [=]()</span><br><span class="line">    &#123;</span><br><span class="line">         QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;您选择的是C++...&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Qt-CustomContextMenu"><a href="#Qt-CustomContextMenu" class="headerlink" title="Qt::CustomContextMenu"></a>Qt::CustomContextMenu</h2><blockquote><p>使用这个策略实现右键菜单, 当点击鼠标右键，窗口会产生一个 <code>QWidget::customContextMenuRequested()</code> 信号，注意仅仅只是发射信号，意味着要自己写显示右键菜单的槽函数（slot），这个信号是QWidget唯一与右键菜单有关的信号。<br>我们先来看一下这个信号的函数原型:</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意: 信号中的参数pos为当前窗口的坐标，并非屏幕坐标，右键菜单显示需要使用屏幕坐标</span></span><br><span class="line">[signal] <span class="function"><span class="type">void</span> <span class="title">QWidget::customContextMenuRequested</span><span class="params">(<span class="type">const</span> QPoint &amp;pos)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mainwindow.cpp</span></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QMainWindow</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 策略 Qt::CustomContextMenu</span></span><br><span class="line">    <span class="comment">// 当在窗口中点击鼠标右键, 窗口会发出一个信号: QWidget::customContextMenuRequested()</span></span><br><span class="line">    <span class="comment">// 对应发射出的这个信号, 需要添加一个槽函数, 用来显示右键菜单</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setContextMenuPolicy</span>(Qt::CustomContextMenu);</span><br><span class="line">    <span class="built_in">connect</span>(<span class="keyword">this</span>, &amp;MainWindow::customContextMenuRequested, <span class="keyword">this</span>, [=](<span class="type">const</span> QPoint &amp;pos)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 参数 pos 是鼠标按下的位置, 但是不能直接使用, 这个坐标不是屏幕坐标, 是当前窗口的坐标</span></span><br><span class="line">        <span class="comment">// 如果要使用这个坐标需要将其转换为屏幕坐标</span></span><br><span class="line">        QMenu menu;</span><br><span class="line">        QAction* act = menu.<span class="built_in">addAction</span>(<span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        <span class="built_in">connect</span>(act, &amp;QAction::triggered, <span class="keyword">this</span>, [=]()</span><br><span class="line">        &#123;</span><br><span class="line">            QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;您选择的是C++...&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        menu.<span class="built_in">addAction</span>(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        menu.<span class="built_in">addAction</span>(<span class="string">&quot;Python&quot;</span>);</span><br><span class="line">        <span class="comment">// menu.exec(QCursor::pos());</span></span><br><span class="line">        <span class="comment">// 将窗口坐标转换为屏幕坐标</span></span><br><span class="line">        QPoint newpt = <span class="keyword">this</span>-&gt;<span class="built_in">mapToGlobal</span>(pos);</span><br><span class="line">        menu.<span class="built_in">exec</span>(newpt);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在上边的程序中, 我们通过窗口发射的信号得到了一个坐标类型的参数, 大家一定要注意<code>这个坐标是当前窗口的窗口坐标, 不是屏幕坐标, 显示右键菜单需要使用屏幕坐标</code>。<br>对应这个坐标的处理可以有两种方式：</p></blockquote><ul><li><p>弃用，选择使用 <code>QCursor::pos()</code> 得到光标在屏幕的坐标位置</p></li><li><p>坐标转换, 将窗口坐标转换为屏幕坐标, 这里用到了一个函数 <code>mapToGlobal</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数是当前窗口坐标, 返回值为屏幕坐标</span></span><br><span class="line"><span class="function">QPoint <span class="title">QWidget::mapToGlobal</span><span class="params">(<span class="type">const</span> QPoint &amp;pos)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>最后如果想要让自己的右键菜单项显示图标, 可以调用这个函数</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只显示文本字符串</span></span><br><span class="line"><span class="function">QAction *<span class="title">QMenu::addAction</span><span class="params">(<span class="type">const</span> QString &amp;text)</span></span>;</span><br><span class="line"><span class="comment">// 可以显示图标 + 文本字符串</span></span><br><span class="line"><span class="function">QAction *<span class="title">QMenu::addAction</span><span class="params">(<span class="type">const</span> QIcon &amp;icon, <span class="type">const</span> QString &amp;text)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt中按钮类型的控件</title>
      <link href="/xu-runbo/post/963bb7c1.html"/>
      <url>/xu-runbo/post/963bb7c1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Qt中按钮类型的控件"><a href="#Qt中按钮类型的控件" class="headerlink" title="Qt中按钮类型的控件"></a>Qt中按钮类型的控件</h1><p>包括: <code>QAbstractButton</code>, <code>QPushButton</code>, <code>QToolButton</code>, <code>QRadioButton</code>, <code>QCheckBox</code></p><h1 id="按钮基类-QAbstractButton"><a href="#按钮基类-QAbstractButton" class="headerlink" title="按钮基类 QAbstractButton"></a>按钮基类 QAbstractButton</h1><blockquote><p>在QT中为我们提供了可以直接使用的按钮控件, 如下图。这些按钮种类虽然繁多， 但是<strong>它们都拥有相同的父类</strong> <code>QAbstractButton</code>。<strong>这些子类按钮的大部分属性都是从这个基类继承的</strong>，因此搞明白这个类为我们提供的相关功能还是非常重要的。<br>其中<code>Dialog Button Box</code><strong>比较特殊不是一个单一控件, 它是两个<code>QPushButton</code>的组合并且水平排列</strong>, 这个不能作为一个新控件来研究。</p></blockquote><img src="/xu-runbo/post/963bb7c1/image-20231206215553984.png" class="" title="image-20231206215553984"><p>关系图</p><img src="/xu-runbo/post/963bb7c1/image-20231206215606034.png" class="" title="image-20231206215606034"> <h2 id="QAbstractButton中的一些常用API"><a href="#QAbstractButton中的一些常用API" class="headerlink" title="QAbstractButton中的一些常用API"></a><code>QAbstractButton</code>中的一些常用API</h2><h2 id="标题和图标"><a href="#标题和图标" class="headerlink" title="标题和图标"></a>标题和图标</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数text的内容显示到按钮上</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QAbstractButton::setText</span><span class="params">(<span class="type">const</span> QString &amp;text)</span></span>;</span><br><span class="line"><span class="comment">// 得到按钮上显示的文本内容, 函数的返回就是</span></span><br><span class="line"><span class="function">QString <span class="title">QAbstractButton::text</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到按钮设置的图标</span></span><br><span class="line"><span class="function">QIcon <span class="title">icon</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 给按钮设置图标</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setIcon</span><span class="params">(<span class="type">const</span> QIcon &amp;icon)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到按钮图标大小</span></span><br><span class="line"><span class="function">QSize <span class="title">iconSize</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"><span class="comment">// 设置按钮图标的大小</span></span></span><br><span class="line"><span class="function">[slot]<span class="type">void</span> <span class="title">setIconSize</span><span class="params">(<span class="type">const</span> QSize &amp;size)</span></span>;</span><br></pre></td></tr></table></figure><p>实践代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QPushButton *btn1=new QPushButton(this);</span><br><span class="line">btn1-&gt;setText(&quot;牛啊吗按钮&quot;);</span><br><span class="line">QIcon icon(&quot;:/D:/icon/img.png&quot;);</span><br><span class="line">btn1-&gt;setIcon(icon);</span><br><span class="line">qDebug()&lt;&lt;&quot;按钮的icon信息为&quot;&lt;&lt;btn1-&gt;icon()&lt;&lt;&quot;\n&quot;&lt;&lt;btn1-&gt;iconSize();</span><br><span class="line">                btn1-&gt;setIconSize(QSize(50,50));</span><br></pre></td></tr></table></figure><p>实践效果</p><img src="/xu-runbo/post/963bb7c1/image-20231206220302283.png" class="" title="image-20231206220302283"> <h2 id="按钮的-Check-属性"><a href="#按钮的-Check-属性" class="headerlink" title="按钮的 Check 属性"></a>按钮的 <code>Check</code> 属性</h2><blockquote><p>对应按钮来说, 一般有三种常见状态, 分别为: <code>Normal</code>, <code>Hover</code>, <code>Pressed</code>。</p><ul><li><code>Normal</code>: 普通状态, 没有和鼠标做任何接触</li><li><code>Hover</code>: 悬停状态, 鼠标位于按钮之上, 但是并未按下</li><li><code>Pressed</code>: 按压状态, 鼠标键在按钮上处于按下状态</li></ul><p><strong>默认情况下, 鼠标在按钮上按下, 按钮从 <code>Normal</code> 切换到 <code>Pressed</code>状态, 鼠标释放, 按钮从 <code>Pressed</code>恢复到<code>Normal</code>状态。</strong><br>当我们给按钮设置了 <code>check</code> 属性之后，情况就有所不同了， 在按钮上释放鼠标键， 按钮依然会处在 <code>Pressed</code>状态, 再次点击按钮, 按钮才能恢复到 <code>Normal</code> 状态。<strong>具有<code>check</code>属性的按钮就相当于一个开关, 每点击一次才能实现一次状态的切换</strong>。</p></blockquote><p>代码和实现效果</p><img src="/xu-runbo/post/963bb7c1/image-20231206223234362.png" class="" title="image-20231206223234362"> <h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><blockquote><p>这些信号<strong>都按钮被点击之后发射出来</strong>的, 只是在细节上有细微的区别, <strong>其中最常用的是 <code>clicked()</code></strong>, 通过鼠标的<strong>不同瞬间状态可以发射出<code>pressed()</code> 和 <code>released()</code> 信号</strong>,</p><p><strong>如果鼠标设置了 <code>check</code>属性, 一般通过 <code>toggled()</code>信号判断当前按钮是选中状态还是非选中状态。</strong></p><p>&#x2F;&#x2F;选中&#x2F;不选中这两个状态发生改变的时候就会发出toggled信号<br>[signal] void QAbstractButton::toggled(bool checked);</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当按钮被激活时(即，当鼠标光标在按钮内时按下然后释放)，当键入快捷键时，或者当click()或animateClick()被调用时，这个信号被发出。值得注意的是，如果调用setDown()、setChecked()或toggle()，则不会触发此信号。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[signal] <span class="function"><span class="type">void</span> <span class="title">QAbstractButton::clicked</span><span class="params">(<span class="type">bool</span> checked = <span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="comment">// 在按下按钮的时候发射这个信号</span></span><br><span class="line">[signal] <span class="function"><span class="type">void</span> <span class="title">QAbstractButton::pressed</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 在释放这个按钮的时候发射直观信号</span></span><br><span class="line">[signal] <span class="function"><span class="type">void</span> <span class="title">QAbstractButton::released</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 每当可检查按钮改变其状态时，就会发出此信号。checked在选中按钮时为true，在未选中按钮时为false。</span></span><br><span class="line"><span class="comment">//选中/不选中这两个状态发生改变的时候就会发出toggled信号</span></span><br><span class="line">[signal] <span class="function"><span class="type">void</span> <span class="title">QAbstractButton::toggled</span><span class="params">(<span class="type">bool</span> checked)</span></span>;</span><br></pre></td></tr></table></figure><p>代码&amp;实现</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QPushButton *btn1=<span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">btn1-&gt;<span class="built_in">setText</span>(<span class="string">&quot;普通按钮&quot;</span>);</span><br><span class="line">QPushButton *btn2=<span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">btn2-&gt;<span class="built_in">move</span>(<span class="number">100</span>,<span class="number">0</span>);</span><br><span class="line">btn2-&gt;<span class="built_in">setText</span>(<span class="string">&quot;可选择按钮&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(btn1,&amp;QPushButton::clicked,<span class="keyword">this</span>,[=]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;a按钮被点击了！&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(btn1,&amp;QPushButton::pressed,<span class="keyword">this</span>,[=]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;a按钮被按压了！&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">connect</span>(btn1,&amp;QPushButton::released,<span class="keyword">this</span>,[=]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;a按钮被释放了！&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">connect</span>(btn1,&amp;QPushButton::toggled,<span class="keyword">this</span>,[=]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;a按钮被toggled了！&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">btn2-&gt;<span class="built_in">setCheckable</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">connect</span>(btn2,&amp;QPushButton::clicked,<span class="keyword">this</span>,[=]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;可选择按钮被点击了！&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(btn2,&amp;QPushButton::pressed,<span class="keyword">this</span>,[=]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;可选择按钮被按压了！&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">connect</span>(btn2,&amp;QPushButton::released,<span class="keyword">this</span>,[=]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;可选择按钮被释放了！&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">connect</span>(btn2,&amp;QPushButton::toggled,<span class="keyword">this</span>,[=]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;可选择按钮被toggled了！&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="槽函数"><a href="#槽函数" class="headerlink" title="槽函数"></a>槽函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行一个动画点击:按钮被立即按下，并在毫秒后释放(默认是100毫秒)。</span></span><br><span class="line">[slot] <span class="function"><span class="type">void</span> <span class="title">QAbstractButton::animateClick</span><span class="params">(<span class="type">int</span> msec = <span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="comment">// 执行一次按钮点击, 相当于使用鼠标点击了按钮</span></span><br><span class="line">[slot] <span class="function"><span class="type">void</span> <span class="title">QAbstractButton::click</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参考 1.2 中的函数介绍</span></span><br><span class="line">[slot] <span class="function"><span class="type">void</span> <span class="title">QAbstractButton::setChecked</span><span class="params">(<span class="type">bool</span>)</span></span>;</span><br><span class="line"><span class="comment">// 设置按钮上图标大小</span></span><br><span class="line">[slot]<span class="function"><span class="type">void</span> <span class="title">setIconSize</span><span class="params">(<span class="type">const</span> QSize &amp;size)</span></span>;</span><br><span class="line"><span class="comment">// 切换可检查按钮的状态。 checked &lt;==&gt; unchecked</span></span><br><span class="line">[slot] <span class="function"><span class="type">void</span> <span class="title">QAbstractButton::toggle</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>这些槽函数是 Qt 框架中的 QAbstractButton 类提供的一些用于处理按钮点击和状态切换的函数。下面是对每个槽函数的详细解释：</p><ol><li><p><code>void QAbstractButton::animateClick(int msec = 100);</code></p><ul><li>功能：模拟一个按钮点击的动画效果，按钮会立即按下并在指定的时间后释放。</li><li>参数：msec（可选）- 动画持续的时间，以毫秒为单位，默认是100毫秒。</li></ul></li><li><p><code>void QAbstractButton::click();</code></p><ul><li>功能：执行一次按钮点击操作，相当于使用鼠标点击了按钮。</li><li>参数：无。</li></ul></li><li><p><code>void QAbstractButton::setChecked(bool);</code></p><ul><li>功能：设置按钮的选中状态。</li><li>参数：bool - true 表示选中按钮，false 表示取消选中按钮。</li></ul></li><li><p><code>void setIconSize(const QSize &amp;size);</code></p><ul><li>功能：设置按钮上图标的大小。</li><li>参数：size - 图标的尺寸，以 QSize 类型表示。</li></ul></li><li><p><code>void QAbstractButton::toggle();</code></p><ul><li>功能：切换<strong>可检查按钮的状态，从选中到取消选中，或从取消选中到选中</strong>。</li><li>参数：无。</li></ul><p>槽函数可以直接调用</p></li></ol></blockquote><p>了解了基类提供的功能之后, 下边着重给大家介绍一下按钮组中常用的几这个按钮控件： <code>QPushButton</code>, <code>QToolButton</code>, <code>QRadioButton</code>, <code>QCheckBox</code>。</p><h1 id="QPushButton"><a href="#QPushButton" class="headerlink" title="QPushButton"></a>QPushButton</h1><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><blockquote><p>这种类型的按钮是Qt按钮中使用频率最高的一个, 对这个类进行操作, 大部分时候都需要使用它从父类继承过来的那些 API。<br>在<code>QPushButton</code>类中, 比较常用的一些API函数如下:</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数:</span></span><br><span class="line"><span class="comment">    - icon: 按钮上显示的图标</span></span><br><span class="line"><span class="comment">    - text: 按钮上显示的标题</span></span><br><span class="line"><span class="comment">    - parent: 按钮的父对象, 可以不指定</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">QPushButton::<span class="built_in">QPushButton</span>(<span class="type">const</span> QIcon &amp;icon, <span class="type">const</span> QString &amp;text, QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">QPushButton::<span class="built_in">QPushButton</span>(<span class="type">const</span> QString &amp;text, QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">QPushButton::<span class="built_in">QPushButton</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断按钮是不是默认按钮</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isDefault</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 一般在对话框窗口中使用, 将按钮设置为默认按钮, 自动关联 Enter 键 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setDefault</span><span class="params">(<span class="type">bool</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">将弹出菜单菜单与此按钮关联起来。这将把按钮变成一个菜单按钮，</span></span><br><span class="line"><span class="comment">在某些样式中会在按钮文本的右边产生一个小三角形。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QPushButton::setMenu</span><span class="params">(QMenu *menu)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">显示(弹出)相关的弹出菜单。如果没有这样的菜单，这个函数什么也不做。</span></span><br><span class="line"><span class="comment">这个函数直到弹出菜单被用户关闭后才返回。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[slot] <span class="function"><span class="type">void</span> <span class="title">QPushButton::showMenu</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; 槽函数 &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;QPushButton 是 Qt 中常用的按钮类，它继承自 QAbstractButton，因此包含了 QAbstractButton 的槽函数，并且还额外提供了一些自己的槽函数。下面是 QPushButton 的一些常用槽函数：</p><ol><li><p><code>void QPushButton::clicked(bool checked = false);</code></p><ul><li>功能：当按钮被点击时触发的信号，通常用于响应按钮的点击操作。</li><li>参数：checked（可选）- 指示按钮是否处于选中状态。</li></ul></li><li><p><code>void QPushButton::pressed();</code></p><ul><li>功能：当按钮被按下时触发的信号。</li></ul></li><li><p><code>void QPushButton::released();</code></p><ul><li>功能：当按钮被释放时触发的信号。</li></ul></li><li><p><code>void QPushButton::toggled(bool checked);</code></p><ul><li>功能：当按钮的选中状态发生切换时触发的信号。</li><li>参数：checked - 指示按钮是否处于选中状态。</li></ul></li></ol></blockquote><h2 id="按钮的使用"><a href="#按钮的使用" class="headerlink" title="按钮的使用"></a>按钮的使用</h2><blockquote><p>通过API的介绍, 我们可以知道, 使用<code>QToolButton</code>这种类型的按钮, 有三种使用方式:</p><ol><li><code>作为普通按钮, 可以显示文本信息和图标</code></li><li><code>按钮的图标可以使用不同的方式设置, 并且制定图标和文本信息的显示模式</code></li><li><code>设置check属性, 使其可以处于持续的被选中状态</code></li><li><code>关联一个菜单, 点击按钮菜单弹出, 并且可以设置菜单的弹出方式</code></li></ol><p>具体操作可以参考如下代码:</p></blockquote><img src="/xu-runbo/post/963bb7c1/PixPin_2023-12-06_22-50-04.gif" class="" title="PixPin_2023-12-06_22-50-04"><h1 id="QToolButton"><a href="#QToolButton" class="headerlink" title="QToolButton"></a>QToolButton</h1><h2 id="常用API-1"><a href="#常用API-1" class="headerlink" title="常用API"></a>常用API</h2><blockquote><p>这个类也是一个常用按钮类, 使用方法和功能跟<code>QPushButton</code>基本一致, 只不过在对于关联菜单这个功能点上, <code>QToolButton</code>类可以设置弹出的菜单的属性, 以及在显示图标的时候可以设置更多的样式, 可以理解为是一个增强版的<code>QPushButton</code>。<br>和<code>QPushButton</code>类相同的是, 操作这个按钮使用的大部分函数都是从父类<code>QAbstractButton</code>继承过来的。</p></blockquote><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">///////////////////////////// 构造函数 /////////////////////////////</span></span><br><span class="line">QToolButton::<span class="built_in">QToolButton</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////// 公共成员函数 ///////////////////////////</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 将给定的菜单与此工具按钮相关联。</span></span><br><span class="line"><span class="comment">    2. 菜单将根据按钮的弹出模式显示。</span></span><br><span class="line"><span class="comment">    3. 菜单的所有权没有转移到“工具”按钮(不能建立父子关系)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QToolButton::setMenu</span><span class="params">(QMenu *menu)</span></span>;</span><br><span class="line"><span class="comment">// 返回关联的菜单，如果没有定义菜单，则返回nullptr。</span></span><br><span class="line"><span class="function">QMenu *<span class="title">QToolButton::menu</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">弹出菜单的弹出模式是一个枚举类型: QToolButton::ToolButtonPopupMode, 取值如下:</span></span><br><span class="line"><span class="comment">    - QToolButton::DelayedPopup: </span></span><br><span class="line"><span class="comment">        - 延时弹出, 按压工具按钮一段时间后才能弹出, 比如:浏览器的返回按钮</span></span><br><span class="line"><span class="comment">        - 长按按钮菜单弹出, 但是按钮的 clicked 信号不会被发射</span></span><br><span class="line"><span class="comment">    - QToolButton::MenuButtonPopup: </span></span><br><span class="line"><span class="comment">        - 在这种模式下，工具按钮会显示一个特殊的箭头，表示有菜单。</span></span><br><span class="line"><span class="comment">- 当按下按钮的箭头部分时，将显示菜单。按下按钮部分发射 clicked 信号</span></span><br><span class="line"><span class="comment">    - QToolButton::InstantPopup: </span></span><br><span class="line"><span class="comment">        - 当按下工具按钮时，菜单立即显示出来。</span></span><br><span class="line"><span class="comment">        - 在这种模式下，按钮本身的动作不会被触发(不会发射clicked信号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 设置弹出菜单的弹出方式</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setPopupMode</span><span class="params">(QToolButton::ToolButtonPopupMode mode)</span></span>;</span><br><span class="line"><span class="comment">// 获取弹出菜单的弹出方式</span></span><br><span class="line"><span class="function">QToolButton::ToolButtonPopupMode <span class="title">popupMode</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">QToolButton可以帮助我们在按钮上绘制箭头图标, 是一个枚举类型, 取值如下: </span></span><br><span class="line"><span class="comment">    - Qt::NoArrow: 没有箭头</span></span><br><span class="line"><span class="comment">    - Qt::UpArrow: 箭头向上</span></span><br><span class="line"><span class="comment">    - Qt::DownArrow: 箭头向下</span></span><br><span class="line"><span class="comment">    - Qt::LeftArrow: 箭头向左</span></span><br><span class="line"><span class="comment">    - Qt::RightArrow: 箭头向右</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 显示一个箭头作为QToolButton的图标。默认情况下，这个属性被设置为Qt::NoArrow。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setArrowType</span><span class="params">(Qt::ArrowType type)</span></span>;</span><br><span class="line"><span class="comment">// 获取工具按钮上显示的箭头图标样式</span></span><br><span class="line"><span class="function">Qt::ArrowType <span class="title">arrowType</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////// 槽函数 /////////////////////////////</span></span><br><span class="line">QToolButton 是 Qt 中的工具按钮类，它继承自 QPushButton，并且还额外提供了一些自己的槽函数。下面是 QToolButton 的一些常用槽函数：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> `<span class="function"><span class="type">void</span> <span class="title">QToolButton::triggered</span><span class="params">(QAction *action)</span></span>;`</span><br><span class="line">   - 功能：当工具按钮中的动作被触发时触发的信号。</span><br><span class="line">   - 参数：action - 被触发的动作对象。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> `<span class="function"><span class="type">void</span> <span class="title">QToolButton::pressed</span><span class="params">()</span></span>;`</span><br><span class="line">   - 功能：当工具按钮被按下时触发的信号。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> `<span class="function"><span class="type">void</span> <span class="title">QToolButton::released</span><span class="params">()</span></span>;`</span><br><span class="line">   - 功能：当工具按钮被释放时触发的信号。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> `<span class="function"><span class="type">void</span> <span class="title">QToolButton::toggled</span><span class="params">(<span class="type">bool</span> checked)</span></span>;`</span><br><span class="line">   - 功能：当工具按钮的选中状态发生切换时触发的信号。</span><br><span class="line">   - 参数：checked - 指示按钮是否处于选中状态。</span><br><span class="line"></span><br><span class="line">这些槽函数为 QToolButton 提供了响应工具按钮的点击、按下、释放等操作的信号，可以在程序中连接这些信号并编写相应的槽函数来实现特定的功能。另外，QToolButton 还可以通过 <span class="built_in">setMenu</span>() 方法设置一个菜单，可以使用 <span class="built_in">triggered</span>() 信号来响应菜单项的触发。</span><br></pre></td></tr></table></figure></blockquote><h2 id="按钮的使用-1"><a href="#按钮的使用-1" class="headerlink" title="按钮的使用"></a>按钮的使用</h2><blockquote><p>通过API的介绍, 我们可以知道, 使用<code>QToolButton</code>这种类型的按钮, 有三种使用方式:</p><ol><li><code>作为普通按钮, 可以显示文本信息和图标</code></li><li><code>按钮的图标可以使用不同的方式设置, 并且制定图标和文本信息的显示模式</code></li><li><code>设置check属性, 使其可以处于持续的被选中状态</code></li><li><code>关联一个菜单, 点击按钮菜单弹出, 并且可以设置菜单的弹出方式</code></li></ol><p>具体操作可以参考如下代码:</p></blockquote><blockquote><p>QToolButton::DelayedPopup（值为0）：按住工具按钮一段时间后（超时时间由样式决定，参见 QStyle::SH_ToolButton_PopupDelay），菜单会显示出来。一个典型的应用示例是一些网页浏览器工具栏中的“返回”按钮。如果用户单击它，浏览器会简单地返回到上一页。如果用户长按按钮一段时间，工具按钮将显示一个包含当前历史记录列表的菜单。</p><p>QToolButton::MenuButtonPopup（值为1）：在这种模式下，工具按钮显示一个特殊的箭头，表示存在菜单。当点击按钮上的箭头部分时，菜单会显示出来。</p><p>QToolButton::InstantPopup（值为2）：当按下工具按钮时立即显示菜单，不延迟。在这种模式下，按钮自身的动作不会被触发。</p><p>以上三个常量描述了 QToolButton 的下拉菜单的不同显示方式：</p><ul><li>如果希望用户长按按钮后才显示菜单，可以使用 DelayedPopup。</li><li>如果希望在按钮上明确显示有菜单的箭头，点击箭头部分显示菜单，可以使用 MenuButtonPopup。</li><li>如果希望按钮被点击后立即显示菜单，可以使用 InstantPopup。</li></ul><p>根据需求选择合适的常量来设置 QToolButton 的下拉菜单的显示方式。</p></blockquote><img src="/xu-runbo/post/963bb7c1/tool.gif" class="" title="tool"><img src="/xu-runbo/post/963bb7c1/image-20231206230918990.png" class="" title="image-20231206230918990"> <img src="/xu-runbo/post/963bb7c1/tooldekay.gif" class="" title="tooldekay"> <p><strong>对于下拉列表如何捕捉信号呢？</strong></p><img src="/xu-runbo/post/963bb7c1/menuaction.gif" class="" title="menuaction"> <h1 id="QRADiobutton"><a href="#QRADiobutton" class="headerlink" title="QRADiobutton"></a>QRADiobutton</h1><blockquote><p>QRadioButton<code>是Qt提供的单选按钮, 一般都是以组的方式来使用(</code>多个按钮中同时只能选中其中一个<code>)。操作这个按钮使用的大部分函数都是从父类继承过来的, 它的父类是</code>QAbstractButton<code>。 关于单选按钮的使用我们还需要注意一点, </code><strong>如果单选按钮被选中, 再次点击这个按钮选中状态是不能被取消的。</strong></p></blockquote><h2 id="常用API-2"><a href="#常用API-2" class="headerlink" title="常用API"></a>常用API</h2><blockquote><p>这个类混的很失败, 一直生活在父类的阴影之下, 也没有什么作为, 在官方的帮助文档中, 处理构造函数就没有再提供其他可用的 API了</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数:</span></span><br><span class="line"><span class="comment">    - text: 按钮上显示的标题</span></span><br><span class="line"><span class="comment">    - parent: 按钮的父对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">QRadioButton::<span class="built_in">QRadioButton</span>(<span class="type">const</span> QString &amp;text, QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">QRadioButton::<span class="built_in">QRadioButton</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure><h2 id="按钮的使用-2"><a href="#按钮的使用-2" class="headerlink" title="按钮的使用"></a>按钮的使用</h2><blockquote><p>单选按钮一般是以组的形式来使用的, 如果在一个窗口中需要有多个单选按钮组, 应该如何处理呢?<br><code>在同一窗口中, Qt会认为所有的单选按钮都属于同一组, 如果需要多个单选按钮组, 应该将他们放到不同的子窗口中。</code></p></blockquote><img src="/xu-runbo/post/963bb7c1/image-20231207152355064.png" class="" title="image-20231207152355064"> <blockquote><p>通过上图可以看到有两个单选按钮组, 在制作的时候分别将单选按钮放到了不同的容器窗口（组框）中，这样就被人为分隔为两组了。</p></blockquote><img src="/xu-runbo/post/963bb7c1/image-20231207152439330.png" class="" title="image-20231207152439330"> <p>如果我们使用鼠标点击了某个单选按钮, 按钮还是会发射出 <code>clicked()</code>信号, 简单的按钮测试代码如下所示:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void MainWindow::on_radioButton_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    QMessageBox::information(this,&quot;警告&quot;,&quot;没有妹子&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connect(ui-&gt;radioButton_2,&amp;QAbstractButton::clicked,this,[=]()&#123;</span><br><span class="line">QMessageBox::information(this,&quot;警告&quot;,&quot;没有妹子&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/963bb7c1/qradio.gif" class="" title="qradio"><h1 id="QCheckBox"><a href="#QCheckBox" class="headerlink" title="QCheckBox"></a>QCheckBox</h1><blockquote><p>QCheckBox是Qt中的复选框按钮, 可以单独使用, 也可以以组的方式使用(同一组可以同时选中多个), <code>当复选按钮被选中, 再次点击之后可以取消选中状态, 这一点和单选按钮是不同的。</code><br>操作这个按钮使用的大部分函数都是从父类继承过来的, 它的父类是<code>QAbstractButton</code>。</p></blockquote><h2 id="常用API-3"><a href="#常用API-3" class="headerlink" title="常用API"></a>常用API</h2><blockquote><p>我们对复选框按钮操作的时候, <strong>可以设置选中和未选中状态, 并且还可以设置半选中状态</strong>,</p><p>这种半选中状态<strong>一般需要当前复选框按钮下还有子节点</strong>, 类似一树状结构。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数:</span></span><br><span class="line"><span class="comment">    - text: 按钮上显示的文本信息</span></span><br><span class="line"><span class="comment">    - parent: 按钮的父对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">QCheckBox::<span class="built_in">QCheckBox</span>(<span class="type">const</span> QString &amp;text, QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">QCheckBox::<span class="built_in">QCheckBox</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前复选框是否为三态复选框, 默认情况下为两种状态: 未选中, 选中</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isTristate</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 设置当前复选框为三态复选框: 未选中, 选中, 半选中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setTristate</span><span class="params">(<span class="type">bool</span> y = <span class="literal">true</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数 state, 枚举类型 Qt::CheckState:</span></span><br><span class="line"><span class="comment">    - Qt::Unchecked      --&gt; 当前复选框没有被选中</span></span><br><span class="line"><span class="comment">    - Qt::PartiallyChecked    --&gt; 当前复选框处于半选中状态, 部分被选中(三态复选框)</span></span><br><span class="line"><span class="comment">    - Qt::Checked      --&gt; 当前复选框处于选中状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 设置复选框按钮的状态</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QCheckBox::setCheckState</span><span class="params">(Qt::CheckState state)</span></span>;</span><br><span class="line"><span class="comment">// 获取当前复选框的状态</span></span><br><span class="line"><span class="function">Qt::CheckState <span class="title">QCheckBox::checkState</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><p>信号</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当复选框的状态改变时，即当用户选中或取消选中复选框时，他的信号就会发出。</span></span><br><span class="line"><span class="comment">// 参数 state 表示的是复选框的三种状态中某一种, 可参考 Qt::CheckState</span></span><br><span class="line">[signal] <span class="function"><span class="type">void</span> <span class="title">QCheckBox::stateChanged</span><span class="params">(<span class="type">int</span> state)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="按钮的使用-3"><a href="#按钮的使用-3" class="headerlink" title="按钮的使用"></a>按钮的使用</h2><blockquote><p>下面针对于复选框按钮的三种状态, 为大家展示一下对应的操作流程, 首先第一步搭建一个有树状关系的界面:</p></blockquote><p>代码实现</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTextEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qgridlayout.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;qpushbutton.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QContextMenuEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenu&gt;</span></span></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    ui-&gt;father-&gt;<span class="built_in">setTristate</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;father, &amp;QCheckBox::clicked, <span class="keyword">this</span>, [=](<span class="type">bool</span> bl)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bl)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 子节点全部设置为选中状态</span></span><br><span class="line">            ui-&gt;son1-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">            ui-&gt;son2-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">            ui-&gt;son3-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">            ui-&gt;son4-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line">            ui-&gt;son5-&gt;<span class="built_in">setChecked</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 子节点全部设置为非选中状态</span></span><br><span class="line">            ui-&gt;son1-&gt;<span class="built_in">setChecked</span>(<span class="literal">false</span>);</span><br><span class="line">            ui-&gt;son2-&gt;<span class="built_in">setChecked</span>(<span class="literal">false</span>);</span><br><span class="line">            ui-&gt;son3-&gt;<span class="built_in">setChecked</span>(<span class="literal">false</span>);</span><br><span class="line">            ui-&gt;son4-&gt;<span class="built_in">setChecked</span>(<span class="literal">false</span>);</span><br><span class="line">            ui-&gt;son5-&gt;<span class="built_in">setChecked</span>(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//     Qt::CheckState checkState() const</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;son1,&amp;QCheckBox::stateChanged,<span class="keyword">this</span>,&amp;MainWindow::statusChanged);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;son2,&amp;QCheckBox::stateChanged,<span class="keyword">this</span>,&amp;MainWindow::statusChanged);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;son3,&amp;QCheckBox::stateChanged,<span class="keyword">this</span>,&amp;MainWindow::statusChanged);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;son4,&amp;QCheckBox::stateChanged,<span class="keyword">this</span>,&amp;MainWindow::statusChanged);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;son5,&amp;QCheckBox::stateChanged,<span class="keyword">this</span>,&amp;MainWindow::statusChanged);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::statusChanged</span><span class="params">(<span class="type">int</span> state)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(state==Qt::Checked)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_number++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_number--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_number==<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;father-&gt;<span class="built_in">setCheckState</span>(Qt::Checked);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_number==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;father-&gt;<span class="built_in">setCheckState</span>(Qt::Unchecked);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;father-&gt;<span class="built_in">setCheckState</span>(Qt::PartiallyChecked);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/963bb7c1/image-20231207163458286.png" class="" title="image-20231207163458286"> <p>UI实现</p><img src="/xu-runbo/post/963bb7c1/image-20231207163644000.png" class="" title="image-20231207163644000"> <p>信号解释</p><img src="/xu-runbo/post/963bb7c1/image-20231207163324327.png" class="" title="image-20231207163324327"> <p>连接操作中使用的关键是<code>&amp;QCheckBox::checkState</code>和<code>this</code>，它们指定了信号和槽的具体函数。<code>&amp;QCheckBox::checkState</code>表示连接<code>QCheckBox</code>的<code>checkState</code>信号，而<code>this</code>表示连接当前对象（即<code>MainWindow</code>）的<code>statusChanged</code>槽函数。</p><p>当连接建立后，当<code>ui-&gt;son1</code>的<code>checkState</code>信号发出时，会调用<code>MainWindow</code>的<code>statusChanged</code>槽函数，并将<code>Qt::CheckState</code>类型的参数传递给该槽函数。因此，槽函数<code>MainWindow::statusChanged</code>中的<code>int state</code>参数就会接收到<code>Qt::CheckState</code>类型的参数，并可以根据其值进行相应的处理。</p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt窗口布局</title>
      <link href="/xu-runbo/post/9607701e.html"/>
      <url>/xu-runbo/post/9607701e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Qt窗口布局"><a href="#Qt窗口布局" class="headerlink" title="Qt窗口布局"></a>Qt窗口布局</h1><h1 id="布局的样式"><a href="#布局的样式" class="headerlink" title="布局的样式"></a>布局的样式</h1><p>Qt窗口布局是指将多个子窗口按照某种排列方式将其全部展示到对应的父窗口中的一种处理方式。在Qt中常用的布局样式有三种，分别是：</p><table><thead><tr><th>布局样式</th><th>描述</th><th>行数</th><th>列数</th></tr></thead><tbody><tr><td><code>水平布局</code></td><td>布局中的所有的控件水平排列</td><td>1行</td><td>N列（N&gt;&#x3D;1）</td></tr><tr><td><code>垂直布局</code></td><td>布局中的所有的控件垂直排列</td><td>N行(N&gt;&#x3D;1）</td><td>1列</td></tr><tr><td><code>网格（栅格）布局</code></td><td>布局中的所有的控件垂直+水平排列</td><td>N行</td><td>N列 (N&gt;&#x3D;1）</td></tr></tbody></table><blockquote><p>有问有答:<br>    1. 控件的位置可以通过坐标指定, 为什么还要使用布局?<br>        - 坐标指定的位置是固定的, 当窗口大小发生改变, 子窗口位置不会变化<br>            - 使用坐标指定子窗口位置, 这个控件可能会被其他控件覆盖导致无法显示出来<br>            - 使用布局的方式可以完美解决以上的问题<br>                - 一般在制作窗口的过程中都是给子控件进行布局, 而不是指定固定坐标位置<br>    2. 布局有局限性吗, 窗口结构复杂如何解决呢?<br>        - 没有局限性, 并且布局的使用是非常灵活的<br>        - 各种布局是可以无限嵌套使用的, 这样就可以制作成非常复杂的窗口了<br>            - 思路是这样的: &#x3D;&#x3D;<strong>给窗口设置布局, 在布局中添加窗口, 子窗口中再设置布局</strong>,&#x3D;&#x3D;<br>              &#x3D;在子窗口布局中再次添加窗口, ……(无限循环)</p></blockquote><p>在UI窗口中进行布局的设置一共有两种处理方式, </p><h2 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h2><p>第一种方式是使用Qt提供的布局, 从工具箱中找到相关的布局, 然后将其拖拽到UI窗口中</p><img src="/xu-runbo/post/9607701e/image-20231206163938478.png" class="" title="image-20231206163938478"> <blockquote><p><strong>将相应的控件放入到布局对应的红色框内部</strong>, 这些控件就按照布局的样式自动排列到一起了，是不是很方便，赶紧自己操作起来感受一下吧。</p></blockquote><img src="/xu-runbo/post/9607701e/image-20231206164043909.png" class="" title="image-20231206164043909"> <h2 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h2><blockquote><p>除此之外, 我们也可以修改当前布局, 需要先选中当前布局, 然后鼠标右键, 在右键菜单中找<code>布局</code>在其子菜单项中选择其他布局即可</p></blockquote><p>第二种方式是直接在父窗口中对子部件进行布局, 如果窗口结构很复杂需要嵌套, 那么就需要先将这些子部件放到一个<code>容器类型的窗口</code>中, 然后再对这个容器类型的窗口进行布局操作。步骤听起来布局复杂， 下边依次为大家演示一下。</p><ol><li>首先需要从工具栏中拖拽一个容器类型的窗口到UI界面上</li></ol><blockquote><p>一般首选<code>QWidget</code>原因是简单, 并且窗口显示之后看不到任何痕迹</p></blockquote><img src="/xu-runbo/post/9607701e/image-20231206164617959.png" class="" title="image-20231206164617959"> <ol start="2"><li>将要布局的子控件放到这个QWidget中</li></ol><blockquote><p>控件拖放过程中无需在意位置和是否对齐, 没有布局之前显示杂乱无序是正常现象。</p></blockquote><img src="/xu-runbo/post/9607701e/image-20231206164738045.png" class="" title="image-20231206164738045"> <ol start="3"><li>对这个QWidget进行布局</li></ol><blockquote><p>首选选中这个存储子部件的父容器窗口, 然后鼠标右键, 在右键菜单中找<code>布局</code>, 通过其子菜单就可以选择需要的布局方式了。布局之后所有的子部件就能够按照对应样式排列了(<code>如果是网格布局, 有时候需要使用鼠标调节一下</code>)</p></blockquote><img src="qtlayout/image-20231206164853146.png" alt="image-20231206164853146" style="zoom: 80%;" /> <img src="/xu-runbo/post/9607701e/image-20231206164813795.png" class="" title="image-20231206164813795"> <h2 id="弹簧的使用"><a href="#弹簧的使用" class="headerlink" title="弹簧的使用"></a>弹簧的使用</h2><blockquote><p>在进行窗口布局的时候为<strong>了让界面看起来更加美观</strong>, 需要<strong>调整控件的位置</strong>, 比如: 靠左, 靠右, 居中, 又或者我们需要<strong>调节两个控件之间的距离,</strong> 以上这些需求使用弹簧都是可以实现的。<br>弹簧的样式有两种：</p><ul><li><code>水平弹簧</code>: 在水平方向起作用</li><li><code>垂直弹簧</code>: 在垂直方向起作用</li></ul></blockquote><img src="/xu-runbo/post/9607701e/image-20231206164953810.png" class="" title="image-20231206164953810"> <p>弹簧的属性</p><p>弹簧也有对应的属性可以设置, 具体属性如下图所示: </p><img src="/xu-runbo/post/9607701e/image-20231206165407271.png" class="" title="image-20231206165407271"> <blockquote><p>关于弹簧的<code>sizeType</code>属性, 有很多选项, 一般常用的只有两个:</p><ul><li><code>Fixed</code>: 得到一个固定大小的弹簧</li><li><code>Expanding</code>: 得到一个可伸缩的弹簧, 默认弹簧撑到最大</li></ul></blockquote><img src="/xu-runbo/post/9607701e/image-20231206165443393.png" class="" title="image-20231206165443393"> <h2 id="布局属性设置"><a href="#布局属性设置" class="headerlink" title="布局属性设置"></a>布局属性设置</h2><blockquote><p>当我们给窗口设置了布局之后, 选中当前窗口, 就可以看到在其对应的属性窗口中除了有窗口属性, 还有一个布局属性, 下面给大家介绍一下这些属性:</p></blockquote><img src="/xu-runbo/post/9607701e/image-20231206165529838.png" class="" title="image-20231206165529838"> <p>我们通过设置布局上下左右的边距, 或者是控件之间的距离也可以使界面看起来更加美观。</p><h2 id="布局的注意事项"><a href="#布局的注意事项" class="headerlink" title="布局的注意事项"></a>布局的注意事项</h2><blockquote><p>通过UI编辑窗口的树状列表我们可以对所有窗口的布局进行检查, 如果发现某个窗口没有布局, 一定要对其进行设置, <code>如果某个窗口没有进行布局, 那么当这个窗口显示出来之后里边的子部件就可能无法被显示出来, 尤其是初学者一定要注意这个问题。</code></p></blockquote><img src="/xu-runbo/post/9607701e/image-20231206165719949.png" class="" title="image-20231206165719949"> <blockquote><p>如果想要自己制作出一个比较美观的窗口需要反复对细节进行调节(<code>修改布局的属性</code>)并且要借助弹簧, 这样才能实现我们想要的效果。<br>下面是一个简单的登录窗口， 大家可以试着自己搞一搞</p></blockquote><img src="/xu-runbo/post/9607701e/image-20231206165745212.png" class="" title="image-20231206165745212"> <h1 id="通过API设置布局"><a href="#通过API设置布局" class="headerlink" title="通过API设置布局"></a>通过API设置布局</h1><blockquote><blockquote><p>在QT中, 布局也有对应的类, 布局类之间的关系如下:</p></blockquote></blockquote><img src="/xu-runbo/post/9607701e/image-20231206165803295.png" class="" title="image-20231206165803295"> <table><thead><tr><th>布局样式</th><th>类名</th></tr></thead><tbody><tr><td>水平布局</td><td><code>QHBoxLayout</code></td></tr><tr><td>垂直布局</td><td><code>QVBoxLayout</code></td></tr><tr><td>网格（栅格）布局</td><td><code>QGridLayout</code></td></tr></tbody></table><blockquote><p>一般我们不使用这些布局类对窗口进行布局, 但是在这里还是给大家介绍一下这些类中常用的一些API函数</p></blockquote><h2 id="QLayout"><a href="#QLayout" class="headerlink" title="QLayout"></a>QLayout</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在布局最后面添加一个窗口</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QLayout::addWidget</span><span class="params">(QWidget *w)</span></span>;</span><br><span class="line"><span class="comment">// 将某个窗口对象从布局中移除, 窗口对象如果不再使用需要自己析构</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QLayout::removeWidget</span><span class="params">(QWidget *widget)</span></span>;</span><br><span class="line"><span class="comment">// 设置布局的四个边界大小, 即: 左、上、右和下的边距。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QLayout::setContentsMargins</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> top, <span class="type">int</span> right, <span class="type">int</span> bottom)</span></span>;</span><br><span class="line"><span class="comment">// 设置布局中各个窗口之间的间隙大小</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setSpacing</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="QHBoxLayout"><a href="#QHBoxLayout" class="headerlink" title="QHBoxLayout"></a>QHBoxLayout</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建符窗口对象</span></span><br><span class="line">QWidget *window = <span class="keyword">new</span> QWidget;</span><br><span class="line"><span class="comment">// 创建若干个子窗口对象</span></span><br><span class="line">QPushButton *button1 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;One&quot;</span>);</span><br><span class="line">QPushButton *button2 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Two&quot;</span>);</span><br><span class="line">QPushButton *button3 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Three&quot;</span>);</span><br><span class="line">QPushButton *button4 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Four&quot;</span>);</span><br><span class="line">QPushButton *button5 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Five&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建水平布局对象</span></span><br><span class="line">QHBoxLayout *layout = <span class="keyword">new</span> QHBoxLayout;</span><br><span class="line"><span class="comment">// 将子窗口添加到布局中</span></span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button1);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button2);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button3);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button4);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button5);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将水平布局设置给父窗口对象</span></span><br><span class="line">window-&gt;<span class="built_in">setLayout</span>(layout);</span><br><span class="line"><span class="comment">// 显示父窗口</span></span><br><span class="line">window-&gt;<span class="built_in">show</span>();</span><br></pre></td></tr></table></figure><blockquote><p>代码效果展示: </p></blockquote><img src="/xu-runbo/post/9607701e/image-20231206165932292.png" class="" title="image-20231206165932292"> <h2 id="QVBoxLayout"><a href="#QVBoxLayout" class="headerlink" title="QVBoxLayout"></a>QVBoxLayout</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建符窗口对象</span></span><br><span class="line">QWidget *window = <span class="keyword">new</span> QWidget;</span><br><span class="line"><span class="comment">// 创建若干个子窗口对象</span></span><br><span class="line">QPushButton *button1 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;One&quot;</span>);</span><br><span class="line">QPushButton *button2 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Two&quot;</span>);</span><br><span class="line">QPushButton *button3 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Three&quot;</span>);</span><br><span class="line">QPushButton *button4 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Four&quot;</span>);</span><br><span class="line">QPushButton *button5 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Five&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建垂直布局对象</span></span><br><span class="line">QVBoxLayout *layout = <span class="keyword">new</span> QVBoxLayout;</span><br><span class="line"><span class="comment">// 将子窗口添加到布局中</span></span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button1);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button2);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button3);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button4);</span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button5);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将水平布局设置给父窗口对象</span></span><br><span class="line">window-&gt;<span class="built_in">setLayout</span>(layout);</span><br><span class="line"><span class="comment">// 显示父窗口</span></span><br><span class="line">window-&gt;<span class="built_in">show</span>();</span><br></pre></td></tr></table></figure><blockquote><p>代码效果展示:</p></blockquote><img src="/xu-runbo/post/9607701e/image-20231206165956110.png" class="" title="image-20231206165956110"> <h2 id="QGridLayout"><a href="#QGridLayout" class="headerlink" title="QGridLayout"></a>QGridLayout</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">QGridLayout::<span class="built_in">QGridLayout</span>();</span><br><span class="line">QGridLayout::<span class="built_in">QGridLayout</span>(QWidget *parent);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加窗口对象到网格布局中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数:</span></span><br><span class="line"><span class="comment">  - widget: 添加到布局中的窗口对象</span></span><br><span class="line"><span class="comment">  - row: 添加到布局中的窗口对象位于第几行 (从0开始)</span></span><br><span class="line"><span class="comment">  - column: 添加到布局中的窗口对象位于第几列 (从0开始)</span></span><br><span class="line"><span class="comment">  - alignment: 窗口在布局中的对齐方式, 没有特殊需求使用默认值即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QGridLayout::addWidget</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">QWidget *widget, <span class="type">int</span> row, <span class="type">int</span> column, </span></span></span><br><span class="line"><span class="params"><span class="function">Qt::Alignment alignment = Qt::Alignment())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数:</span></span><br><span class="line"><span class="comment">  - widget: 添加到布局中的窗口对象</span></span><br><span class="line"><span class="comment">  - fromRow: 添加到布局中的窗口对象位于第几行 (从0开始)</span></span><br><span class="line"><span class="comment">  - fromColumn: 添加到布局中的窗口对象位于第几列 (从0开始)</span></span><br><span class="line"><span class="comment">  - rowSpan: 添加的窗口从 fromRow 行开始跨越的行数</span></span><br><span class="line"><span class="comment">  - columnSpan: 添加的窗口从 fromColumn 列开始跨越的列数</span></span><br><span class="line"><span class="comment">  - alignment: 窗口在布局中的对齐方式, 没有特殊需求使用默认值即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QGridLayout::addWidget</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">QWidget *widget, <span class="type">int</span> fromRow, <span class="type">int</span> fromColumn, </span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">int</span> rowSpan, <span class="type">int</span> columnSpan, </span></span></span><br><span class="line"><span class="params"><span class="function">Qt::Alignment alignment = Qt::Alignment())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 column 对应的列的最新宽度, 单位: 像素</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QGridLayout::setColumnMinimumWidth</span><span class="params">(<span class="type">int</span> column, <span class="type">int</span> minSize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置布局中水平方向窗口之间间隔的宽度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QGridLayout::setHorizontalSpacing</span><span class="params">(<span class="type">int</span> spacing)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置布局中垂直方向窗口之间间隔的宽度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QGridLayout::setVerticalSpacing</span><span class="params">(<span class="type">int</span> spacing)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试代码如下:</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建父窗口对象</span></span><br><span class="line">QWidget* window = <span class="keyword">new</span> QWidget;</span><br><span class="line"><span class="comment">// 创建子窗口对象</span></span><br><span class="line">QPushButton *button1 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;One&quot;</span>);</span><br><span class="line">QPushButton *button2 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Two&quot;</span>);</span><br><span class="line">QPushButton *button3 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Three&quot;</span>);</span><br><span class="line">QPushButton *button4 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Four&quot;</span>);</span><br><span class="line">QPushButton *button5 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Five&quot;</span>);</span><br><span class="line">QPushButton *button6 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;Six&quot;</span>);</span><br><span class="line"><span class="comment">// 多行文本编辑框</span></span><br><span class="line">QTextEdit* txedit = <span class="keyword">new</span> QTextEdit;</span><br><span class="line">txedit-&gt;<span class="built_in">setText</span>(<span class="string">&quot;我占用了两行两列的空间哦。&quot;</span>);</span><br><span class="line"></span><br><span class="line">QGridLayout* layout = <span class="keyword">new</span> QGridLayout;</span><br><span class="line"><span class="comment">// 按钮起始位置: 第1行, 第1列, 该按钮占用空间情况为1行1列</span></span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 按钮起始位置: 第1行, 第2列, 该按钮占用空间情况为1行1列</span></span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 按钮起始位置: 第1行, 第3列, 该按钮占用空间情况为1行1列</span></span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button3, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 编辑框起始位置: 第2行, 第1列, 该按钮占用空间情况为2行2列</span></span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(txedit, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 按钮起始位置: 第2行, 第3列, 该按钮占用空间情况为1行1列</span></span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button4, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 按钮起始位置: 第3行, 第3列, 该按钮占用空间情况为1行1列</span></span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button5, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 按钮起始位置: 第4行, 第1列, 该按钮占用空间情况为1行3列</span></span><br><span class="line">layout-&gt;<span class="built_in">addWidget</span>(button6, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 网格布局设置给父窗口对象</span></span><br><span class="line">window-&gt;<span class="built_in">setLayout</span>(layout);</span><br><span class="line"><span class="comment">// 显示父窗口</span></span><br><span class="line">window-&gt;<span class="built_in">show</span>();  </span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/9607701e/image-20231206170109132.png" class="" title="image-20231206170109132"> ]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt的定时器</title>
      <link href="/xu-runbo/post/fc96d559.html"/>
      <url>/xu-runbo/post/fc96d559.html</url>
      
        <content type="html"><![CDATA[<h1 id="Qt定时器类QTimer"><a href="#Qt定时器类QTimer" class="headerlink" title="Qt定时器类QTimer"></a>Qt定时器类QTimer</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行窗口程序的处理过程中, &#x3D;&#x3D;经常要周期性的执行某些操作,&#x3D;&#x3D; 或者制作一些动画效果，看似比较复杂的问题使用定时器就可以完美的解决这些问题， </p><p>Qt中提供了两种定时器方式</p><p>一种是使用&#x3D;&#x3D;Qt中的事件处理函数&#x3D;&#x3D;这个在后续章节会给大家做细致的讲解，本节主要给大家介绍一下&#x3D;&#x3D;Qt中的定时器类 QTimer&#x3D;&#x3D;的使用方法。</p><p>要使用它</p><blockquote><p>只需创建一个<strong>QTimer类对象</strong>，然后<strong>调用其 start() 函数开启定时器</strong>，此后<strong>QTimer对象</strong>就会<strong>周期性的</strong>发出 <strong>timeout() 信号。</strong></p></blockquote><h2 id="public-slot-function"><a href="#public-slot-function" class="headerlink" title="public&#x2F;slot function"></a>public&#x2F;slot function</h2><p>了解一下这个类的相关API。</p><blockquote><p>秒的单位是msc</p><p><code>    timer.setTimerType(Qt::PreciseTimer);</code></p><p>设置定时器的准确度</p><p><code>    qDebug()&lt;&lt;timer.timerType();</code></p><p>返回定时器的准确度</p><p><code>QTimer::singleShot(5000,this,&amp;MainWindow::close);</code></p><p>单发定时器</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">// 如果指定了父对象, 创建的堆内存可以自动析构</span></span><br><span class="line">QTimer::<span class="built_in">QTimer</span>(QObject *parent = <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器时间间隔为 msec 毫秒</span></span><br><span class="line"><span class="comment">// 默认值是0，一旦窗口系统事件队列中的所有事件都已经被处理完，一个时间间隔为0的QTimer就会触发</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QTimer::setInterval</span><span class="params">(<span class="type">int</span> msec)</span></span>;</span><br><span class="line"><span class="comment">// 获取定时器的时间间隔, 返回值单位: 毫秒</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QTimer::interval</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据指定的时间间隔启动或者重启定时器, 需要调用 setInterval() 设置时间间隔</span></span><br><span class="line">[slot] <span class="function"><span class="type">void</span> <span class="title">QTimer::start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 启动或重新启动定时器，超时间隔为msec毫秒。</span></span><br><span class="line">[slot] <span class="function"><span class="type">void</span> <span class="title">QTimer::start</span><span class="params">(<span class="type">int</span> msec)</span></span>;</span><br><span class="line"><span class="comment">// 停止定时器。</span></span><br><span class="line">[slot] <span class="function"><span class="type">void</span> <span class="title">QTimer::stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器精度</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数: </span></span><br><span class="line"><span class="comment">    - Qt::PreciseTimer -&gt; 精确的精度, 毫秒级</span></span><br><span class="line"><span class="comment">    - Qt::CoarseTimer  -&gt; 粗糙的精度, 和1毫秒的误差在5%的范围内, 默认精度</span></span><br><span class="line"><span class="comment">    - Qt::VeryCoarseTimer -&gt; 非常粗糙的精度, 精度在1秒左右</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QTimer::setTimerType</span><span class="params">(Qt::TimerType atype)</span></span>;</span><br><span class="line"><span class="function">Qt::TimerType <span class="title">QTimer::timerType</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">// 获取当前定时器的精度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果定时器正在运行，返回true; 否则返回false。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QTimer::isActive</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断定时器是否只触发一次</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QTimer::isSingleShot</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 设置定时器是否只触发一次, 参数为true定时器只触发一次, 为false定时器重复触发, 默认为false</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QTimer::setSingleShot</span><span class="params">(<span class="type">bool</span> singleShot)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Singal"><a href="#Singal" class="headerlink" title="Singal"></a>Singal</h2><p>这个类的信号只有一个, 当<strong>定时器超时时，该信号就会被发射出来</strong>。</p><p>给这个信号通过conect()关联一个槽函数, 就可以在槽函数中<strong>处理超时事件</strong>了。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[signal] <span class="function"><span class="type">void</span> <span class="title">QTimer::timeout</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="static-public-function"><a href="#static-public-function" class="headerlink" title="static public function"></a>static public function</h2><blockquote><p><code>QTimer::singleShot(5000,this,&amp;MainWindow::close);</code></p></blockquote><ol><li><h5 id="首先要创建定时器"><a href="#首先要创建定时器" class="headerlink" title="首先要创建定时器"></a>首先要创建定时器</h5></li><li><h5 id="设置好时间间隔-这是必要的"><a href="#设置好时间间隔-这是必要的" class="headerlink" title="设置好时间间隔,这是必要的"></a>设置好时间间隔,这是必要的</h5></li><li><p>其次可以设置无关紧要的定时器类型</p></li><li><p>有两个状态is</p></li><li><p>有个静态函数，返回值为void,可以搞一个几秒钟发射信号给谁，谁在做出具体的行为</p></li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其他同名重载函数可以自己查阅帮助文档</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能: 在msec毫秒后发射一次信号, 并且只发射一次</span></span><br><span class="line"><span class="comment">参数:</span></span><br><span class="line"><span class="comment">- msec:     在msec毫秒后发射信号</span></span><br><span class="line"><span class="comment">- receiver: 接收信号的对象地址</span></span><br><span class="line"><span class="comment">- method:   槽函数地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[<span class="type">static</span>] <span class="function"><span class="type">void</span> <span class="title">QTimer::singleShot</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">int</span> msec, <span class="type">const</span> QObject *receiver, </span></span></span><br><span class="line"><span class="params"><span class="function">        PointerToMemberFunction method)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="周期定时器"><a href="#周期定时器" class="headerlink" title="周期定时器"></a>周期定时器</h2><p><img src="qttimer/image-20231201190101971.png" alt="image-20231201190101971" style="zoom: 67%;" /> 每过1s就更新文本框的时间</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建定时器对象</span></span><br><span class="line">QTimer* timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改定时器对象的精度</span></span><br><span class="line">timer-&gt;<span class="built_in">setTimerType</span>(Qt::PreciseTimer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按钮 loopBtn 的点击事件</span></span><br><span class="line"><span class="comment">// 点击按钮启动或者关闭定时器, 定时器启动, 周期性得到当前时间</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;loopBtn, &amp;QPushButton::clicked, <span class="keyword">this</span>, [=]()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 启动定时器</span></span><br><span class="line">    <span class="keyword">if</span>(timer-&gt;<span class="built_in">isActive</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        timer-&gt;<span class="built_in">stop</span>();  <span class="comment">// 关闭定时器</span></span><br><span class="line">        ui-&gt;loopBtn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;loopBtn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;关闭&quot;</span>);</span><br><span class="line">        timer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>); <span class="comment">// 1000ms == 1s</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(timer, &amp;QTimer::timeout, <span class="keyword">this</span>, [=]()</span><br><span class="line">&#123;</span><br><span class="line">    QTime tm = QTime::<span class="built_in">currentTime</span>();</span><br><span class="line">    <span class="comment">// 格式化当前得到的系统时间</span></span><br><span class="line">    QString tmstr = tm.<span class="built_in">toString</span>(<span class="string">&quot;hh:mm:ss.zzz&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置要显示的时间</span></span><br><span class="line">    ui-&gt;curTime-&gt;<span class="built_in">setText</span>(tmstr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><ol><li><p>QTimer类是Qt中的一个计时器类，用于&#x3D;&#x3D;在一定时间间隔内发出信号。&#x3D;&#x3D;</p></li><li><p>QTimer可以设置&#x3D;&#x3D;单次&#x3D;&#x3D;或<strong>重复</strong>定时器，可以设<strong>置定时器的时间间隔</strong>和启动方式。</p></li><li><p>QTimer的<strong>信号槽机制</strong>可以与<strong>其他Qt对象进行连接</strong>，实现定时执行某些任务的功能。</p></li><li><p>QTimer的<strong>start()方法用于启动定时器</strong>，<strong>stop()方法用于停止定时器</strong>。</p></li><li><p>QTimer的<strong>timeout()信号在定时器到达指定时间间隔时发出</strong>，可以与其他Qt对象的槽函数进行连接。</p></li><li><p>QTimer的singleShot()方法可以设置<strong>单次定时器</strong>，只在指定的时间间隔后执行一次。</p></li><li><p>QTimer的isActive()方法可以判断定时器是否处于活动状态。</p></li><li><p>QTimer的interval()方法可以获取或设置定时器的时间间隔。</p></li><li><p>QTimer的remainingTime()方法可以<strong>获取定时器还剩余的时间</strong>。</p></li><li><p>QTimer的timerId()方法可以<strong>获取定时器的ID</strong>。he</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt基础数据类型</title>
      <link href="/xu-runbo/post/ecfc01d7.html"/>
      <url>/xu-runbo/post/ecfc01d7.html</url>
      
        <content type="html"><![CDATA[<h1 id="QT中的基础数据类型"><a href="#QT中的基础数据类型" class="headerlink" title="QT中的基础数据类型"></a>QT中的基础数据类型</h1><blockquote><p>基础数据类型,</p><p>Log日志输出,</p><p>字符串类型,</p><p>QVariant,</p><p>位置和尺寸相关类型,</p><p>日期和时间相关类型</p></blockquote><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><blockquote><p>&#x3D;&#x3D;Qt是一个C++ 框架,&#x3D;&#x3D; 因此&#x3D;&#x3D;C++中所有的语法和数据类型在Qt中都是被支持&#x3D;&#x3D;的,</p><p>但是Qt中也定义了一些属于自己的数据类型</p></blockquote><img src="/xu-runbo/post/ecfc01d7/image-20231130154953139.png" class="" title="image-20231130154953139"> <blockquote><p>虽然在Qt中有属于自己的整形或者浮点型, 但是在变成过程中这些一般不用, 常用的类型关键字还是 C&#x2F;C++中的 int, float, double 等。</p></blockquote><h2 id="log输出"><a href="#log输出" class="headerlink" title="log输出"></a>log输出</h2><blockquote><p>在Qt中进行log输出, &#x3D;&#x3D;一般不使用c中的printf, 也不是使用C++中的cout&#x3D;&#x3D;,</p><p>Qt框架提供了专门用于日志输出的类, &#x3D;&#x3D;头文件名为 QDebug,&#x3D;&#x3D; 使用方法如下:</p><p>自动换行</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 包含了QDebug头文件, 直接通过全局函数 qDebug() 就可以进行日志输出了</span></span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Date:&quot;</span> &lt;&lt; QDate::<span class="built_in">currentDate</span>();</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Types:&quot;</span> &lt;&lt; <span class="built_in">QString</span>(<span class="string">&quot;String&quot;</span>) &lt;&lt; <span class="built_in">QChar</span>(<span class="string">&#x27;x&#x27;</span>) &lt;&lt; <span class="built_in">QRect</span>(<span class="number">0</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">40</span>);</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Custom coordinate type:&quot;</span> &lt;&lt; coordinate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和全局函数 qDebug() 类似的日志函数还有: qWarning(), qInfo(), qCritical()</span></span><br><span class="line"><span class="type">int</span> number = <span class="number">666</span>;</span><br><span class="line"><span class="type">float</span> i = <span class="number">11.11</span>;</span><br><span class="line"><span class="built_in">qWarning</span>() &lt;&lt; <span class="string">&quot;Number:&quot;</span> &lt;&lt; number &lt;&lt; <span class="string">&quot;Other value:&quot;</span> &lt;&lt; i;</span><br><span class="line"><span class="built_in">qInfo</span>() &lt;&lt; <span class="string">&quot;Number:&quot;</span> &lt;&lt; number &lt;&lt; <span class="string">&quot;Other value:&quot;</span> &lt;&lt; i;</span><br><span class="line"><span class="built_in">qCritical</span>() &lt;&lt; <span class="string">&quot;Number:&quot;</span> &lt;&lt; number &lt;&lt; <span class="string">&quot;Other value:&quot;</span> &lt;&lt; i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;我是要成为海贼王的男人!!!&quot;</span>;</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;我是隔壁的二柱子...&quot;</span>;</span><br><span class="line"><span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;我是鸣人, 我擅长嘴遁!!!&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="qt2-0/image-20231130155247470.png" alt="image-20231130155247470" style="zoom:33%;" /> <h3 id="终端-黑框-输出日志"><a href="#终端-黑框-输出日志" class="headerlink" title="终端(黑框)输出日志"></a>终端(黑框)输出日志</h3><blockquote><p>使用上面的方法只能在项目调试过程中进行日志输出, 如果不是通过IDE进行程序调试, 而是直接执行可执行程序&#x3D;&#x3D;在这种情况下是没有日志输出窗口的, 因此也就看不到任何的日志输出。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;默认情况下日志信息是不会打印到终端窗口的,&#x3D;&#x3D; 如果想要实现这样的效果, 必须在项目文件中添加相关的属性信息</p></blockquote><ol><li>打开项目文件（*.pro）找到配置项 config, 添加 console 控制台属性</li><li><img src="/xu-runbo/post/ecfc01d7/image-20231130155840925.png" class="" title="image-20231130155840925"></li></ol><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><blockquote><p>在Qt中不仅支持C, C++中的字符串类型,</p><p>而且还在框架中定义了专属的字符串类型,</p><p>我们<strong>必须要掌握在Qt中关于这些类型的使用和相互之间的转换。</strong></p></blockquote><img src="/xu-runbo/post/ecfc01d7/image-20231130155907068.png" class="" title="image-20231130155907068"> <h3 id="QByteArray"><a href="#QByteArray" class="headerlink" title="QByteArray"></a>QByteArray</h3><blockquote><p>Qt中&#x3D;&#x3D;QByteArray可以看做是c语言中 char*的升级版本&#x3D;&#x3D;。</p><p>我们在使用这种类型的时候可通过&#x3D;&#x3D;这个类的构造函数申请一块动态内存&#x3D;&#x3D;，用于存储我们需要处理的字符串数据。</p><p>下面给大家介绍一下这个类中常用的一些API函数，大家要养成遇到问题主动查询帮助文档的好习惯。。</p></blockquote><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造空对象, 里边没有数据</span></span><br><span class="line">QByteArray::<span class="built_in">QByteArray</span>();</span><br><span class="line"><span class="comment">// 将data中的size个字符进行构造, 得到一个字节数组对象</span></span><br><span class="line"><span class="comment">// 如果 size==-1 函数内部自动计算字符串长度, 计算方式为: strlen(data)</span></span><br><span class="line">QByteArray::<span class="built_in">QByteArray</span>(<span class="type">const</span> <span class="type">char</span> *data, <span class="type">int</span> size = <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// 构造一个长度为size个字节, 并且每个字节值都为ch的字节数组</span></span><br><span class="line">QByteArray::<span class="built_in">QByteArray</span>(<span class="type">int</span> size, <span class="type">char</span> ch);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><img src="qt2-0/image-20231130160734162.png" alt="image-20231130160734162" style="zoom:50%;" /> </blockquote><h4 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在尾部追加数据</span></span><br><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"><span class="function">QByteArray &amp;<span class="title">QByteArray::append</span><span class="params">(<span class="type">const</span> QByteArray &amp;ba)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QByteArray::push_back</span><span class="params">(<span class="type">const</span> QByteArray &amp;other)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部添加数据</span></span><br><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"><span class="function">QByteArray &amp;<span class="title">QByteArray::prepend</span><span class="params">(<span class="type">const</span> QByteArray &amp;ba)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QByteArray::push_front</span><span class="params">(<span class="type">const</span> QByteArray &amp;other)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据, 将ba插入到数组第 i 个字节的位置(从0开始)</span></span><br><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"><span class="function">QByteArray &amp;<span class="title">QByteArray::insert</span><span class="params">(<span class="type">int</span> i, <span class="type">const</span> QByteArray &amp;ba)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="comment">// 从大字符串中删除len个字符, 从第pos个字符的位置开始删除</span></span><br><span class="line"><span class="function">QByteArray &amp;<span class="title">QByteArray::remove</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> len)</span></span>;</span><br><span class="line"><span class="comment">// 从字符数组的尾部删除 n 个字节</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QByteArray::chop</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">// 从字节数组的 pos 位置将数组截断 (前边部分留下, 后边部分被删除)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QByteArray::truncate</span><span class="params">(<span class="type">int</span> pos)</span></span>;</span><br><span class="line"><span class="comment">// 将对象中的数据清空, 使其为null</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QByteArray::clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串替换</span></span><br><span class="line"><span class="comment">// 将字节数组中的 子字符串 before 替换为 after</span></span><br><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"><span class="function">QByteArray &amp;<span class="title">QByteArray::replace</span><span class="params">(<span class="type">const</span> QByteArray &amp;before, <span class="type">const</span> QByteArray &amp;after)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QByteArray *qb=<span class="keyword">new</span> <span class="built_in">QByteArray</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">QByteArray *qb1=<span class="keyword">new</span> <span class="built_in">QByteArray</span>();</span><br><span class="line">QByteArray *qb2=<span class="keyword">new</span> <span class="built_in">QByteArray</span>(<span class="number">10</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">QByteArray q;</span><br><span class="line">q.<span class="built_in">push_back</span>(*qb);</span><br><span class="line"> <span class="built_in">qDebug</span>()&lt;&lt;q;</span><br><span class="line">     q.<span class="built_in">append</span>(<span class="string">&quot;dsa&quot;</span>).<span class="built_in">append</span>(<span class="string">&quot;dsadsa&quot;</span>);</span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;q;</span><br><span class="line"><span class="comment">//    &quot;hello world&quot;</span></span><br><span class="line"><span class="comment">//&quot;hello worlddsadsadsa&quot;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="子字符串查找和判断"><a href="#子字符串查找和判断" class="headerlink" title="子字符串查找和判断"></a>子字符串查找和判断</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断字节数组中是否包含子字符串 ba, 包含返回true, 否则返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QByteArray::contains</span><span class="params">(<span class="type">const</span> QByteArray &amp;ba)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QByteArray::contains</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ba)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 判断字节数组中是否包含子字符 ch, 包含返回true, 否则返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QByteArray::contains</span><span class="params">(<span class="type">char</span> ch)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字节数组是否以字符串 ba 开始, 是返回true, 不是返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QByteArray::startsWith</span><span class="params">(<span class="type">const</span> QByteArray &amp;ba)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QByteArray::startsWith</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ba)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 判断字节数组是否以字符 ch 开始, 是返回true, 不是返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QByteArray::startsWith</span><span class="params">(<span class="type">char</span> ch)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字节数组是否以字符串 ba 结尾, 是返回true, 不是返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QByteArray::endsWith</span><span class="params">(<span class="type">const</span> QByteArray &amp;ba)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QByteArray::endsWith</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ba)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 判断字节数组是否以字符 ch 结尾, 是返回true, 不是返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QByteArray::endsWith</span><span class="params">(<span class="type">char</span> ch)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用迭代器</span></span><br><span class="line"><span class="function">iterator <span class="title">QByteArray::begin</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">QByteArray::end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用数组的方式进行遍历</span></span><br><span class="line"><span class="comment">// i的取值范围 0 &lt;= i &lt; size()</span></span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">QByteArray::at</span><span class="params">(<span class="type">int</span> i)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="type">char</span> QByteArray::<span class="keyword">operator</span>[](<span class="type">int</span> i) <span class="type">const</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="查看字节数"><a href="#查看字节数" class="headerlink" title="查看字节数"></a>查看字节数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回字节数组对象中字符的个数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QByteArray::length</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QByteArray::size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QByteArray::count</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回字节数组对象中 子字符串ba 出现的次数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QByteArray::count</span><span class="params">(<span class="type">const</span> QByteArray &amp;ba)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QByteArray::count</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *ba)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回字节数组对象中 字符串ch 出现的次数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QByteArray::count</span><span class="params">(<span class="type">char</span> ch)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将QByteArray类型的字符串 转换为 char* 类型</span></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">QByteArray::data</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">char</span> *<span class="title">QByteArray::data</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int, short, long, float, double -&gt; QByteArray</span></span><br><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"><span class="function">QByteArray &amp;<span class="title">QByteArray::setNum</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">QByteArray &amp;<span class="title">QByteArray::setNum</span><span class="params">(<span class="type">short</span> n, <span class="type">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">QByteArray &amp;<span class="title">QByteArray::setNum</span><span class="params">(qlonglong n, <span class="type">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">QByteArray &amp;<span class="title">QByteArray::setNum</span><span class="params">(<span class="type">float</span> n, <span class="type">char</span> f = <span class="string">&#x27;g&#x27;</span>, <span class="type">int</span> prec = <span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="function">QByteArray &amp;<span class="title">QByteArray::setNum</span><span class="params">(<span class="type">double</span> n, <span class="type">char</span> f = <span class="string">&#x27;g&#x27;</span>, <span class="type">int</span> prec = <span class="number">6</span>)</span></span>;</span><br><span class="line">[<span class="type">static</span>] <span class="function">QByteArray <span class="title">QByteArray::number</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line">[<span class="type">static</span>] <span class="function">QByteArray <span class="title">QByteArray::number</span><span class="params">(qlonglong n, <span class="type">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line">[<span class="type">static</span>] <span class="function">QByteArray <span class="title">QByteArray::number</span><span class="params">(<span class="type">double</span> n, <span class="type">char</span> f = <span class="string">&#x27;g&#x27;</span>, <span class="type">int</span> prec = <span class="number">6</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QByteArray -&gt; int, short, long, float, double</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QByteArray::toInt</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR, <span class="type">int</span> base = <span class="number">10</span>)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">short</span> <span class="title">QByteArray::toShort</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR, <span class="type">int</span> base = <span class="number">10</span>)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">QByteArray::toLong</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR, <span class="type">int</span> base = <span class="number">10</span>)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">QByteArray::toFloat</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">QByteArray::toDouble</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// std::string -&gt; QByteArray</span></span><br><span class="line">[<span class="type">static</span>] <span class="function">QByteArray <span class="title">QByteArray::fromStdString</span><span class="params">(<span class="type">const</span> std::string &amp;str)</span></span>;</span><br><span class="line"><span class="comment">// QByteArray -&gt; std::string</span></span><br><span class="line"><span class="function">std::string <span class="title">QByteArray::toStdString</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有字符转换为大写</span></span><br><span class="line"><span class="function">QByteArray <span class="title">QByteArray::toUpper</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 所有字符转换为小写</span></span><br><span class="line"><span class="function">QByteArray <span class="title">QByteArray::toLower</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="QString"><a href="#QString" class="headerlink" title="QString"></a>QString</h3><blockquote><p>QString也是封装了字符串, 但是内部的编码为utf8,</p><p>&#x3D;&#x3D;UTF-8属于Unicode字符集, 它固定使用多个字节（window为2字节, linux为3字节）来表示一个字符&#x3D;&#x3D;</p><p>这样可以将世界上几乎所有语言的常用字符收录其中。</p></blockquote><h4 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造一个空字符串对象</span></span><br><span class="line">QString::<span class="built_in">QString</span>();</span><br><span class="line"><span class="comment">// 将 char* 字符串 转换为 QString 类型</span></span><br><span class="line">QString::<span class="built_in">QString</span>(<span class="type">const</span> <span class="type">char</span> *str);</span><br><span class="line"><span class="comment">// 将 QByteArray 转换为 QString 类型</span></span><br><span class="line">QString::<span class="built_in">QString</span>(<span class="type">const</span> QByteArray &amp;ba);</span><br><span class="line"><span class="comment">// 其他重载的同名构造函数可参考Qt帮助文档, 此处略</span></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QString *qs=<span class="keyword">new</span> <span class="built_in">QString</span>(<span class="string">&quot;dsadsad&quot;</span>);</span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;*qs;</span><br></pre></td></tr></table></figure></blockquote><h4 id="数据操作-1"><a href="#数据操作-1" class="headerlink" title="数据操作"></a>数据操作</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 尾部追加数据</span></span><br><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::append</span><span class="params">(<span class="type">const</span> QString &amp;str)</span></span>;</span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::append</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span></span>;</span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::append</span><span class="params">(<span class="type">const</span> QByteArray &amp;ba)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QString::push_back</span><span class="params">(<span class="type">const</span> QString &amp;other)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部添加数据</span></span><br><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::prepend</span><span class="params">(<span class="type">const</span> QString &amp;str)</span></span>;</span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::prepend</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span></span>;</span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::prepend</span><span class="params">(<span class="type">const</span> QByteArray &amp;ba)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QString::push_front</span><span class="params">(<span class="type">const</span> QString &amp;other)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据, 将 str 插入到字符串第 position 个字符的位置(从0开始)</span></span><br><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::insert</span><span class="params">(<span class="type">int</span> position, <span class="type">const</span> QString &amp;str)</span></span>;</span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::insert</span><span class="params">(<span class="type">int</span> position, <span class="type">const</span> <span class="type">char</span> *str)</span></span>;</span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::insert</span><span class="params">(<span class="type">int</span> position, <span class="type">const</span> QByteArray &amp;str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="comment">// 从大字符串中删除len个字符, 从第pos个字符的位置开始删除</span></span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::remove</span><span class="params">(<span class="type">int</span> position, <span class="type">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从字符串的尾部删除 n 个字符</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QString::chop</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从字节串的 position 位置将字符串截断 (前边部分留下, 后边部分被删除)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QString::truncate</span><span class="params">(<span class="type">int</span> position)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将对象中的数据清空, 使其为null</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QString::clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串替换</span></span><br><span class="line"><span class="comment">// 将字节数组中的 子字符串 before 替换为 after</span></span><br><span class="line"><span class="comment">// 参数 cs 为是否区分大小写, 默认区分大小写</span></span><br><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::replace</span><span class="params">(<span class="type">const</span> QString &amp;before, <span class="type">const</span> QString &amp;after, Qt::CaseSensitivity cs = Qt::CaseSensitive)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="子字符串查找和判断-1"><a href="#子字符串查找和判断-1" class="headerlink" title="子字符串查找和判断"></a>子字符串查找和判断</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数 cs 为是否区分大小写, 默认区分大小写</span></span><br><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符串中是否包含子字符串 str, 包含返回true, 否则返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QString::contains</span><span class="params">(<span class="type">const</span> QString &amp;str, Qt::CaseSensitivity cs = Qt::CaseSensitive)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符串是否以字符串 ba 开始, 是返回true, 不是返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QString::startsWith</span><span class="params">(<span class="type">const</span> QString &amp;s, Qt::CaseSensitivity cs = Qt::CaseSensitive)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符串是否以字符串 ba 结尾, 是返回true, 不是返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QString::endsWith</span><span class="params">(<span class="type">const</span> QString &amp;s, Qt::CaseSensitivity cs = Qt::CaseSensitive)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用迭代器</span></span><br><span class="line"><span class="function">iterator <span class="title">QString::begin</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">QString::end</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用数组的方式进行遍历</span></span><br><span class="line"><span class="comment">// i的取值范围 0 &lt;= position &lt; size()</span></span><br><span class="line"><span class="function"><span class="type">const</span> QChar <span class="title">QString::at</span><span class="params">(<span class="type">int</span> position)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"><span class="type">const</span> QChar QString::<span class="keyword">operator</span>[]<span class="params">(<span class="type">int</span> position)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> QString *qs=<span class="keyword">new</span> <span class="built_in">QString</span>(<span class="string">&quot;dsadsad&quot;</span>);</span><br><span class="line"> <span class="built_in">qDebug</span>()&lt;&lt;*qs;</span><br><span class="line"> <span class="keyword">for</span>(QString::Iterator i=qs-&gt;<span class="built_in">begin</span>();i!=qs-&gt;<span class="built_in">end</span>();i++)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="built_in">qDebug</span>()&lt;&lt;*i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//    &quot;dsadsad&quot;</span></span><br><span class="line"><span class="comment">//        &#x27;d&#x27;  </span></span><br><span class="line"><span class="comment">//        &#x27;s&#x27;  </span></span><br><span class="line"><span class="comment">//        &#x27;a&#x27;  </span></span><br><span class="line"><span class="comment">//        &#x27;d&#x27;  </span></span><br><span class="line"><span class="comment">//        &#x27;s&#x27;  </span></span><br><span class="line"><span class="comment">//        &#x27;a&#x27;  </span></span><br><span class="line"><span class="comment">//        &#x27;d&#x27;  </span></span><br></pre></td></tr></table></figure></blockquote><h4 id="查看字节数-1"><a href="#查看字节数-1" class="headerlink" title="查看字节数"></a>查看字节数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回字节数组对象中字符的个数 (字符个数和字节个数是不同的概念)</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QString::length</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QString::size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QString::count</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回字节串对象中 子字符串 str 出现的次数</span></span><br><span class="line"><span class="comment">// 参数 cs 为是否区分大小写, 默认区分大小写</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QString::count</span><span class="params">(<span class="type">const</span> QStringRef &amp;str, Qt::CaseSensitivity cs = Qt::CaseSensitive)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>字符数和字节数是计量文本长度的两种不同方式。</p><p>&#x3D;&#x3D;字符数指的是文本中包含的字符的数量&#x3D;&#x3D;，不论是英文字母、数字、标点符号还是其他语言的字符都计算在内。举例来说，单词”Hello”的字符数为5。</p><p>&#x3D;&#x3D;字节数则是指文本所占据的存储空间大小，每个字符在计算机中都有对应的编码方式。常见的编码方式包括ASCII、UTF-8、UTF-16等，不同的编码方式会占用不同数量的字节&#x3D;&#x3D;。举例来说，以UTF-8编码计算，单词”Hello”的字节数为5个字节。</p><p>需要注意的是，对于大部分英文文本而言，一个字符通常只占用一个字节的存储空间。然而，对于一些使用了多字节编码的字符集（如中文、日文、韩文等），一个字符可能占用多个字节的存储空间。。</p></blockquote><h4 id="类型转换-1"><a href="#类型转换-1" class="headerlink" title="类型转换"></a>类型转换</h4><blockquote><p>将int, short, long, float, double 转换为 QString 类型</p><p>QString 转换为 int, short, long, float, double 类型</p><hr><p>将标准C++中的 std::string 类型 转换为 QString 类型</p><p>将 QString 转换为 标准C++中的 std::string 类型</p><hr><p>QString -&gt; QByteArray</p><p>所有字符转换为大&#x2F;小写</p><p>&#x3D;&#x3D;&#x2F;&#x2F; 转换为 utf8 编码格式的字符串 (常用)&#x3D;&#x3D;</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将int, short, long, float, double 转换为 QString 类型</span></span><br><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::setNum</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::setNum</span><span class="params">(<span class="type">short</span> n, <span class="type">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::setNum</span><span class="params">(<span class="type">long</span> n, <span class="type">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::setNum</span><span class="params">(<span class="type">float</span> n, <span class="type">char</span> format = <span class="string">&#x27;g&#x27;</span>, <span class="type">int</span> precision = <span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="function">QString &amp;<span class="title">QString::setNum</span><span class="params">(<span class="type">double</span> n, <span class="type">char</span> format = <span class="string">&#x27;g&#x27;</span>, <span class="type">int</span> precision = <span class="number">6</span>)</span></span>;</span><br><span class="line">[<span class="type">static</span>] <span class="function">QString <span class="title">QString::number</span><span class="params">(<span class="type">long</span> n, <span class="type">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line">[<span class="type">static</span>] <span class="function">QString <span class="title">QString::number</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line">[<span class="type">static</span>] <span class="function">QString <span class="title">QString::number</span><span class="params">(<span class="type">double</span> n, <span class="type">char</span> format = <span class="string">&#x27;g&#x27;</span>, <span class="type">int</span> precision = <span class="number">6</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 QString 转换为 int, short, long, float, double 类型</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QString::toInt</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR, <span class="type">int</span> base = <span class="number">10</span>)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">short</span> <span class="title">QString::toShort</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR, <span class="type">int</span> base = <span class="number">10</span>)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">QString::toLong</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR, <span class="type">int</span> base = <span class="number">10</span>)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">QString::toFloat</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">QString::toDouble</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将标准C++中的 std::string 类型 转换为 QString 类型</span></span><br><span class="line">[<span class="type">static</span>] <span class="function">QString <span class="title">QString::fromStdString</span><span class="params">(<span class="type">const</span> std::string &amp;str)</span></span>;</span><br><span class="line"><span class="comment">// 将 QString 转换为 标准C++中的 std::string 类型</span></span><br><span class="line"><span class="function">std::string <span class="title">QString::toStdString</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// QString -&gt; QByteArray</span></span><br><span class="line"><span class="comment">// 转换为本地编码, 跟随操作系统</span></span><br><span class="line"><span class="function">QByteArray <span class="title">QString::toLocal8Bit</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 转换为 Latin-1 编码的字符串 不支持中文</span></span><br><span class="line"><span class="function">QByteArray <span class="title">QString::toLatin1</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 转换为 utf8 编码格式的字符串 (常用)</span></span><br><span class="line"><span class="function">QByteArray <span class="title">QString::toUtf8</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有字符转换为大写</span></span><br><span class="line"><span class="function">QString <span class="title">QString::toUpper</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 所有字符转换为小写</span></span><br><span class="line"><span class="function">QString <span class="title">QString::toLower</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="字符串格式"><a href="#字符串格式" class="headerlink" title="字符串格式"></a>字符串格式</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其他重载的同名函数可参考Qt帮助文档, 此处略</span></span><br><span class="line"><span class="function">QString <span class="title">QString::arg</span><span class="params">(<span class="type">const</span> QString &amp;a, </span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="type">int</span> fieldWidth = <span class="number">0</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">          QChar fillChar = QLatin1Char( <span class="string">&#x27; &#x27;</span> ))</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function">QString <span class="title">QString::arg</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> fieldWidth = <span class="number">0</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="type">int</span> base = <span class="number">10</span>, </span></span></span><br><span class="line"><span class="params"><span class="function">          QChar fillChar = QLatin1Char( <span class="string">&#x27; &#x27;</span> ))</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 示例程序</span></span><br><span class="line"> <span class="type">int</span> i;                <span class="comment">// 假设该变量表示当前文件的编号</span></span><br><span class="line"> <span class="type">int</span> total;            <span class="comment">// 假设该变量表示文件的总个数</span></span><br><span class="line"> QString fileName=<span class="string">&quot;dsadsa&quot;</span>;     <span class="comment">// 假设该变量表示当前文件的名字</span></span><br><span class="line"> <span class="comment">// 使用以上三个变量拼接一个动态字符串</span></span><br><span class="line"> QString status = <span class="built_in">QString</span>(<span class="string">&quot;Processing file %1 of %2: %3&quot;</span>).<span class="built_in">arg</span>(i).<span class="built_in">arg</span>(total).<span class="built_in">arg</span>(fileName);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">qDebug</span>()&lt;&lt;status;</span><br><span class="line"><span class="comment">//    &quot;Processing file 0 of 1: dsadsa&quot;</span></span><br></pre></td></tr></table></figure><p>%1……….</p></blockquote><h2 id="QVariant"><a href="#QVariant" class="headerlink" title="QVariant"></a>QVariant</h2><blockquote><p>QVariant这个类很神奇，或者说方便。</p><p>很多时候，需要几种不同的数据类型需要传递，如果用结构体，又不大方便，容器保存的也只是一种数据类型，而QVariant则可以统统搞定。</p><p>&#x3D;&#x3D;QVariant 这个类型充当着最常见的数据类型的联合。&#x3D;&#x3D;</p><p>QVariant 可以保存很多Qt的数据类型，包括QBrush、QColor、QCursor、QDateTime、QFont、QKeySequence、 QPalette、QPen、QPixmap、QPoint、QRect、QRegion、QSize和QString，并且还有C++基本类型，如 int、float等。</p></blockquote><h3 id="标准类型"><a href="#标准类型" class="headerlink" title="标准类型"></a>标准类型</h3><blockquote><p>将标准类型转换为QVariant类型</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这类转换需要使用QVariant类的构造函数, 由于比较多, 大家可自行查阅Qt帮助文档, 在这里简单写几个</span></span><br><span class="line">QVariant::<span class="built_in">QVariant</span>(<span class="type">int</span> val);</span><br><span class="line">QVariant::<span class="built_in">QVariant</span>(<span class="type">bool</span> val);</span><br><span class="line">QVariant::<span class="built_in">QVariant</span>(<span class="type">double</span> val);</span><br><span class="line">QVariant::<span class="built_in">QVariant</span>(<span class="type">const</span> <span class="type">char</span> *val);</span><br><span class="line">QVariant::<span class="built_in">QVariant</span>(<span class="type">const</span> QByteArray &amp;val);</span><br><span class="line">QVariant::<span class="built_in">QVariant</span>(<span class="type">const</span> QString &amp;val);</span><br><span class="line">......</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 使用设置函数也可以将支持的类型的数据设置到QVariant对象中</span></span><br><span class="line"><span class="comment">// 这里的 T 类型, 就是QVariant支持的类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QVariant::setValue</span><span class="params">(<span class="type">const</span> T &amp;value)</span></span>;</span><br><span class="line"><span class="comment">// 该函数行为和 setValue() 函数完全相同</span></span><br><span class="line">[<span class="type">static</span>] <span class="function">QVariant <span class="title">QVariant::fromValue</span><span class="params">(<span class="type">const</span> T &amp;value)</span></span>;</span><br><span class="line"><span class="comment">// 例子:</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line">QVariant v;</span><br><span class="line">v.<span class="built_in">setValue</span>(<span class="number">5</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">QVariant v = QVariant::<span class="built_in">fromValue</span>(<span class="number">5</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = v.<span class="built_in">toInt</span>();          <span class="comment">// i is now 5</span></span><br><span class="line">QString s = v.<span class="built_in">toString</span>();   <span class="comment">// s is now &quot;5&quot;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="判断QVariant封装的实际类型"><a href="#判断QVariant封装的实际类型" class="headerlink" title="判断QVariant封装的实际类型"></a>判断QVariant封装的实际类型</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该函数的返回值是一个枚举类型, 可通过这个枚举判断出实际是什么类型的数据</span></span><br><span class="line"><span class="function">Type <span class="title">QVariant::type</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="function">QVariant <span class="title">a</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;</span><br><span class="line"> <span class="built_in">qDebug</span>()&lt;&lt;a.<span class="built_in">typeName</span>();</span><br><span class="line"><span class="comment">//    QString</span></span><br></pre></td></tr></table></figure><p>返回值Type的部分枚举定义, 全部信息可以自行查阅Qt帮助文档</p><img src="/xu-runbo/post/ecfc01d7/image-20231130162709759.png" class="" title="image-20231130162709759"> </blockquote><h3 id="拆开封装的数据"><a href="#拆开封装的数据" class="headerlink" title="拆开封装的数据"></a>拆开封装的数据</h3><p><code>to拆包后的数据类型</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果要实现该操作, 可以使用QVariant类提供的 toxxx() 方法, 全部转换可以参考Qt帮助文档</span></span><br><span class="line"><span class="comment">// 在此举列举几个常用函数:</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QVariant::toBool</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function">QByteArray <span class="title">QVariant::toByteArray</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">QVariant::toDouble</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">QVariant::toFloat</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QVariant::toInt</span><span class="params">(<span class="type">bool</span> *ok = Q_NULLPTR)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function">QString <span class="title">QVariant::toString</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><blockquote><p>除了标准类型, 我们&#x3D;&#x3D;自定义的类型也可以使用QVariant类进行封装&#x3D;&#x3D;,</p><p>&#x3D;&#x3D;被QVariant存储的数据类型<strong>需要有一个默认的构造函数和一个拷贝构造函数</strong>&#x3D;&#x3D;</p><p>为了实现这个功能，通常会将这个宏放在类的声明所在头文件的下面， 原型为：</p><ol><li>首先必须使用Q_DECLARE_METATYPE()宏。</li></ol><p>  Q_DECLARE_METATYPE(Type)</p></blockquote><p>自定义类型的头文件</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// *.h</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    QString name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 自定义类型注册</span></span><br><span class="line"><span class="built_in">Q_DECLARE_METATYPE</span>(MyTest)</span><br></pre></td></tr></table></figure><p>自定义类型的源文件</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyTest t;</span><br><span class="line">t.name = <span class="string">&quot;张三丰&quot;</span>;</span><br><span class="line">t.num = <span class="number">666</span>;</span><br><span class="line"><span class="comment">// 值的封装</span></span><br><span class="line">QVariant vt = QVariant::<span class="built_in">fromValue</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值的读取</span></span><br><span class="line"><span class="keyword">if</span>(vt.<span class="built_in">canConvert</span>&lt;MyTest&gt;())</span><br><span class="line">&#123;</span><br><span class="line">    MyTest t = vt.<span class="built_in">value</span>&lt;MyTest&gt;();</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; t.name &lt;&lt; <span class="string">&quot;, num: &quot;</span> &lt;&lt; t.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值的封装</span></span><br><span class="line">QVariant vt = QVariant::<span class="built_in">fromValue</span>(t);</span><br><span class="line"><span class="comment">// 如果当前QVariant对象可用转换为对应的模板类型 T, 返回true, 否则返回false</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QVariant::canConvert</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 将当前QVariant对象转换为实际的 T 类型</span></span><br><span class="line"><span class="function">T <span class="title">QVariant::value</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h2 id="QT位置和尺寸"><a href="#QT位置和尺寸" class="headerlink" title="QT位置和尺寸"></a>QT位置和尺寸</h2><img src="/xu-runbo/post/ecfc01d7/image-20230803140624518.png" class="" title="image-20230803140624518"><h3 id="QPOINT"><a href="#QPOINT" class="headerlink" title="QPOINT"></a>QPOINT</h3><img src="/xu-runbo/post/ecfc01d7/image-20230803140635397.png" class="" title="image-20230803140635397"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">// 构造一个坐标原点, 即(0, 0)</span></span><br><span class="line">QPoint::<span class="built_in">QPoint</span>();</span><br><span class="line"><span class="comment">// 参数为 x轴坐标, y轴坐标</span></span><br><span class="line">QPoint::<span class="built_in">QPoint</span>(<span class="type">int</span> xpos, <span class="type">int</span> ypos);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x轴坐标</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QPoint::setX</span><span class="params">(<span class="type">int</span> x)</span></span>;</span><br><span class="line"><span class="comment">// 设置y轴坐标</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QPoint::setY</span><span class="params">(<span class="type">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到x轴坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QPoint::x</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 得到x轴坐标的引用</span></span><br><span class="line"><span class="function"><span class="type">int</span> &amp;<span class="title">QPoint::rx</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 得到y轴坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QPoint::y</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 得到y轴坐标的引用</span></span><br><span class="line"><span class="function"><span class="type">int</span> &amp;<span class="title">QPoint::ry</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接通过坐标对象进行算术运算: 加减乘除</span></span><br><span class="line">QPoint &amp;QPoint::<span class="keyword">operator</span>*=(<span class="type">float</span> factor);</span><br><span class="line">QPoint &amp;QPoint::<span class="keyword">operator</span>*=(<span class="type">double</span> factor);</span><br><span class="line">QPoint &amp;QPoint::<span class="keyword">operator</span>*=(<span class="type">int</span> factor);</span><br><span class="line">QPoint &amp;QPoint::<span class="keyword">operator</span>+=(<span class="type">const</span> QPoint &amp;point);</span><br><span class="line">QPoint &amp;QPoint::<span class="keyword">operator</span>-=(<span class="type">const</span> QPoint &amp;point);</span><br><span class="line">QPoint &amp;QPoint::<span class="keyword">operator</span>/=(qreal divisor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他API请自行查询Qt帮助文档,</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">// 创建坐标对象</span></span><br><span class="line">    QPoint p;</span><br><span class="line">    <span class="function">QPoint <span class="title">p1</span><span class="params">(<span class="number">2</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置x，y坐标</span></span><br><span class="line">    p.<span class="built_in">setX</span>(<span class="number">10</span>);</span><br><span class="line">    p.<span class="built_in">setY</span>(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">//2/2/2/2/2/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//得到x，y坐标</span></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p.<span class="built_in">x</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p.<span class="built_in">y</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p1.<span class="built_in">x</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p1.<span class="built_in">y</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到x，y坐标的引用</span></span><br><span class="line">    <span class="type">int</span> &amp;x1=p.<span class="built_in">rx</span>();</span><br><span class="line">    <span class="type">int</span> &amp;y1=p.<span class="built_in">ry</span>();</span><br><span class="line">    x1=<span class="number">100</span>;</span><br><span class="line">    y1=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> &amp;x2=p1.<span class="built_in">rx</span>();</span><br><span class="line">    <span class="type">int</span> &amp;y2=p1.<span class="built_in">ry</span>();</span><br><span class="line"></span><br><span class="line">    x2=<span class="number">1</span>;</span><br><span class="line">    y2=<span class="number">2</span>;</span><br><span class="line"><span class="comment">//再次得到通过引用修改后的坐标</span></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p.<span class="built_in">x</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p.<span class="built_in">y</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p1.<span class="built_in">x</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p1.<span class="built_in">y</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="QLINE"><a href="#QLINE" class="headerlink" title="QLINE"></a>QLINE</h3><img src="/xu-runbo/post/ecfc01d7/image-20230803141547493.png" class="" title="image-20230803141547493"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">// 构造一个空对象</span></span><br><span class="line">QLine::<span class="built_in">QLine</span>();</span><br><span class="line"><span class="comment">// 构造一条直线, 通过两个坐标点</span></span><br><span class="line">QLine::<span class="built_in">QLine</span>(<span class="type">const</span> QPoint &amp;p1, <span class="type">const</span> QPoint &amp;p2);</span><br><span class="line"><span class="comment">// 从点 (x1, y1) 到 (x2, y2)</span></span><br><span class="line">QLine::<span class="built_in">QLine</span>(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给直线对象设置坐标点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QLine::setPoints</span><span class="params">(<span class="type">const</span> QPoint &amp;p1, <span class="type">const</span> QPoint &amp;p2)</span></span>;</span><br><span class="line"><span class="comment">// 起始点(x1, y1), 终点(x2, y2)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QLine::setLine</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2)</span></span>;</span><br><span class="line"><span class="comment">// 设置直线的起点坐标</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QLine::setP1</span><span class="params">(<span class="type">const</span> QPoint &amp;p1)</span></span>;</span><br><span class="line"><span class="comment">// 设置直线的终点坐标</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QLine::setP2</span><span class="params">(<span class="type">const</span> QPoint &amp;p2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回直线的起始点坐标</span></span><br><span class="line"><span class="function">QPoint <span class="title">QLine::p1</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回直线的终点坐标</span></span><br><span class="line"><span class="function">QPoint <span class="title">QLine::p2</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回值直线的中心点坐标, (p1() + p2()) / 2</span></span><br><span class="line"><span class="function">QPoint <span class="title">QLine::center</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值直线起点的 x 坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QLine::x1</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回值直线终点的 x 坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QLine::x2</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回值直线起点的 y 坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QLine::y1</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回值直线终点的 y 坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QLine::y2</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用给定的坐标点平移这条直线</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QLine::translate</span><span class="params">(<span class="type">const</span> QPoint &amp;offset)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QLine::translate</span><span class="params">(<span class="type">int</span> dx, <span class="type">int</span> dy)</span></span>;</span><br><span class="line"><span class="comment">// 用给定的坐标点平移这条直线, 返回平移之后的坐标点</span></span><br><span class="line"><span class="function">QLine <span class="title">QLine::translated</span><span class="params">(<span class="type">const</span> QPoint &amp;offset)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function">QLine <span class="title">QLine::translated</span><span class="params">(<span class="type">int</span> dx, <span class="type">int</span> dy)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直线对象进行比较</span></span><br><span class="line"><span class="type">bool</span> QLine::<span class="keyword">operator</span>!=(<span class="type">const</span> QLine &amp;line) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QLine::<span class="keyword">operator</span>==(<span class="type">const</span> QLine &amp;line) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他API请自行查询Qt帮助文档, 不要犯懒哦哦哦哦哦......</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="function">QPoint <span class="title">p1</span><span class="params">(<span class="number">10</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">QPoint <span class="title">p2</span><span class="params">(<span class="number">20</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建直线，传入有参构造的时候直接传入两个点point</span></span><br><span class="line"> <span class="comment">//先创建一个空对象，然后空对象.setpoints</span></span><br><span class="line">    <span class="comment">//直接用四个参数的有参构造函数创建</span></span><br><span class="line">    <span class="function">QLine <span class="title">line</span><span class="params">(p1,p2)</span></span>;</span><br><span class="line">    <span class="function">QLine <span class="title">line1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">    QLine line2;</span><br><span class="line">    line2.<span class="built_in">setPoints</span>(p1,p2);</span><br><span class="line"><span class="comment">//可以得到直线的坐标起点，中点，重点.四个坐标，x1,x2,y1,y2或者得到起/末点再 .x()</span></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;line.<span class="built_in">p1</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;line.<span class="built_in">p2</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;line.<span class="built_in">center</span>();</span><br><span class="line"><span class="comment">//    QPoint(10,20)</span></span><br><span class="line"><span class="comment">//    QPoint(20,40)</span></span><br><span class="line"><span class="comment">//    QPoint(15,30)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个是根据这个点平移后，修改直线相当于方法使用</span></span><br><span class="line">    <span class="comment">// 平移线段的起点和终点，偏移量为 (5, 5)</span></span><br><span class="line">    line.<span class="built_in">translate</span>(<span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; line.<span class="built_in">p1</span>(); <span class="comment">// 输出 (15, 15)</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; line.<span class="built_in">p2</span>(); <span class="comment">// 输出 (55, 55)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个是根据这个点平移后返回线段对象,相当于函数使用</span></span><br><span class="line">    QLine newline=line.<span class="built_in">translated</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; newline.<span class="built_in">p1</span>(); <span class="comment">// 输出 (15, 15)</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; newline.<span class="built_in">p2</span>(); <span class="comment">// 输出 (55, 55)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="QSIZE"><a href="#QSIZE" class="headerlink" title="QSIZE"></a>QSIZE</h3><img src="/xu-runbo/post/ecfc01d7/image-20230803143027470.png" class="" title="image-20230803143027470"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">// 构造空对象, 对象中的宽和高都是无效的</span></span><br><span class="line">QSize::<span class="built_in">QSize</span>();</span><br><span class="line"><span class="comment">// 使用宽和高构造一个有效对象</span></span><br><span class="line">QSize::<span class="built_in">QSize</span>(<span class="type">int</span> width, <span class="type">int</span> height);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置宽度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QSize::setWidth</span><span class="params">(<span class="type">int</span> width)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 设置高度</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QSize::setHeight</span><span class="params">(<span class="type">int</span> height)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到宽度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QSize::width</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 得到宽度的引用</span></span><br><span class="line"><span class="function"><span class="type">int</span> &amp;<span class="title">QSize::rwidth</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 得到高度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QSize::height</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 得到高度的引用</span></span><br><span class="line"><span class="function"><span class="type">int</span> &amp;<span class="title">QSize::rheight</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换高度和宽度的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QSize::transpose</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 交换高度和宽度的值, 返回交换之后的尺寸信息</span></span><br><span class="line"><span class="function">QSize <span class="title">QSize::transposed</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行算法运算: 加减乘除</span></span><br><span class="line">QSize &amp;QSize::<span class="keyword">operator</span>*=(qreal factor);</span><br><span class="line">QSize &amp;QSize::<span class="keyword">operator</span>+=(<span class="type">const</span> QSize &amp;size);</span><br><span class="line">QSize &amp;QSize::<span class="keyword">operator</span>-=(<span class="type">const</span> QSize &amp;size);</span><br><span class="line">QSize &amp;QSize::<span class="keyword">operator</span>/=(qreal divisor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他API请自行查询Qt帮助文档, 不要犯懒哦哦哦哦哦......</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    MainWindow w;</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line"><span class="comment">//实例化对象，注意无参的时候千万不能有（）；</span></span><br><span class="line">    QSize p;</span><br><span class="line">    <span class="function">QSize <span class="title">p1</span><span class="params">(<span class="number">20</span>,<span class="number">30</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手动设置宽高</span></span><br><span class="line">    p.<span class="built_in">setWidth</span>(<span class="number">10</span>);</span><br><span class="line">    p.<span class="built_in">setHeight</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到宽和高</span></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p.<span class="built_in">width</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p.<span class="built_in">height</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p1.<span class="built_in">width</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p1.<span class="built_in">height</span>();</span><br><span class="line"><span class="comment">//得到宽和高的引用并且修改</span></span><br><span class="line">    <span class="type">int</span> &amp;w1=p.<span class="built_in">rwidth</span>();</span><br><span class="line">    <span class="type">int</span> &amp;w2=p1.<span class="built_in">rwidth</span>();</span><br><span class="line">    <span class="type">int</span> &amp;h1=p.<span class="built_in">rheight</span>();</span><br><span class="line">    <span class="type">int</span> &amp;h2=p1.<span class="built_in">rheight</span>();</span><br><span class="line"></span><br><span class="line">    w1=<span class="number">1</span>;</span><br><span class="line">    w2=<span class="number">1</span>;</span><br><span class="line">    h1=<span class="number">2</span>;</span><br><span class="line">    h2=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p.<span class="built_in">width</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p.<span class="built_in">height</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p1.<span class="built_in">width</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p1.<span class="built_in">height</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将宽和高反转</span></span><br><span class="line">    p.<span class="built_in">transpose</span>();</span><br><span class="line">    p1.<span class="built_in">transpose</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p.<span class="built_in">width</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p.<span class="built_in">height</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p1.<span class="built_in">width</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;p1.<span class="built_in">height</span>();</span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;------------------&quot;</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    QSize newp=p.<span class="built_in">transposed</span>();</span><br><span class="line">    QSize newp1=p1.<span class="built_in">transposed</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;newp.<span class="built_in">width</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;newp.<span class="built_in">height</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;newp1.<span class="built_in">width</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;newp1.<span class="built_in">height</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">    </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">------------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="QRECT"><a href="#QRECT" class="headerlink" title="QRECT"></a>QRECT</h3><img src="/xu-runbo/post/ecfc01d7/image-20230803144048156.png" class="" title="image-20230803144048156"><p><strong>长&#x2F;宽是末减初+1</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">// 构造一个空对象</span></span><br><span class="line">QRect::<span class="built_in">QRect</span>();</span><br><span class="line"><span class="comment">// 基于左上角坐标, 和右下角坐标构造一个矩形对象</span></span><br><span class="line">QRect::<span class="built_in">QRect</span>(<span class="type">const</span> QPoint &amp;topLeft, <span class="type">const</span> QPoint &amp;bottomRight);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">默认是左上角和右下角的关系，如果穿了一个左下角和一个右上角的，顺序就相反了，避免</span><br><span class="line"><span class="comment">// 基于左上角坐标, 和 宽度, 高度构造一个矩形对象</span></span><br><span class="line">QRect::<span class="built_in">QRect</span>(<span class="type">const</span> QPoint &amp;topLeft, <span class="type">const</span> QSize &amp;size);</span><br><span class="line"></span><br><span class="line">长/宽是末减初+<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 通过 左上角坐标(x, y), 和 矩形尺寸(width, height) 构造一个矩形对象</span></span><br><span class="line">QRect::<span class="built_in">QRect</span>(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置矩形的尺寸信息, 左上角坐标不变</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QRect::setSize</span><span class="params">(<span class="type">const</span> QSize &amp;size)</span></span>;</span><br><span class="line"><span class="comment">// 设置矩形左上角坐标为(x,y), 大小为(width, height)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QRect::setRect</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> width, <span class="type">int</span> height)</span></span>;</span><br><span class="line"><span class="comment">// 设置矩形宽度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QRect::setWidth</span><span class="params">(<span class="type">int</span> width)</span></span>;</span><br><span class="line"><span class="comment">// 设置矩形高度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QRect::setHeight</span><span class="params">(<span class="type">int</span> height)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值矩形左上角坐标</span></span><br><span class="line"><span class="function">QPoint <span class="title">QRect::topLeft</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回矩形右上角坐标</span></span><br><span class="line"><span class="comment">// 该坐标点值为: QPoint(left() + width() -1, top())</span></span><br><span class="line"><span class="function">QPoint <span class="title">QRect::topRight</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回矩形左下角坐标</span></span><br><span class="line"><span class="comment">// 该坐标点值为: QPoint(left(), top() + height() - 1)</span></span><br><span class="line"><span class="function">QPoint <span class="title">QRect::bottomLeft</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回矩形右下角坐标</span></span><br><span class="line"><span class="comment">// 该坐标点值为: QPoint(left() + width() -1, top() + height() - 1)</span></span><br><span class="line"><span class="function">QPoint <span class="title">QRect::bottomRight</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回矩形中心点坐标</span></span><br><span class="line"><span class="function">QPoint <span class="title">QRect::center</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回矩形上边缘y轴坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QRect::top</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QRect::y</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回值矩形下边缘y轴坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QRect::bottom</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回矩形左边缘 x轴坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QRect::x</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QRect::left</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回矩形右边缘x轴坐标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QRect::right</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回矩形的高度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QRect::width</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回矩形的宽度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QRect::height</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 返回矩形的尺寸信息</span></span><br><span class="line"><span class="function">QSize <span class="title">QRect::size</span><span class="params">()</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><h3 id="QDATE"><a href="#QDATE" class="headerlink" title="QDATE"></a>QDATE</h3><p>需要引入头文件！</p><img src="/xu-runbo/post/ecfc01d7/image-20230804080321434.png" class="" title="image-20230804080321434"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">QDate::<span class="built_in">QDate</span>();</span><br><span class="line">QDate::<span class="built_in">QDate</span>(<span class="type">int</span> y, <span class="type">int</span> m, <span class="type">int</span> d);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公共成员函数</span></span><br><span class="line"><span class="comment">// 重新设置日期对象中的日期</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QDate::setDate</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span></span>;</span><br><span class="line"><span class="comment">// 给日期对象添加 ndays 天</span></span><br><span class="line"><span class="function">QDate <span class="title">QDate::addDays</span><span class="params">(qint64 ndays)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 给日期对象添加 nmonths 月</span></span><br><span class="line"><span class="function">QDate <span class="title">QDate::addMonths</span><span class="params">(<span class="type">int</span> nmonths)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 给日期对象添加 nyears 月</span></span><br><span class="line"><span class="function">QDate <span class="title">QDate::addYears</span><span class="params">(<span class="type">int</span> nyears)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到日期对象中的年/月/日</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QDate::year</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QDate::month</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QDate::day</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QDate::getDate</span><span class="params">(<span class="type">int</span> *year, <span class="type">int</span> *month, <span class="type">int</span> *day)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期对象格式化</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    d    - The day as a number without a leading zero (1 to 31)</span></span><br><span class="line"><span class="comment">    dd   - The day as a number with a leading zero (01 to 31)</span></span><br><span class="line"><span class="comment">    ddd -  周四</span></span><br><span class="line"><span class="comment">    dddd - 星期四</span></span><br><span class="line"><span class="comment">    M    - The month as a number without a leading zero (1 to 12)</span></span><br><span class="line"><span class="comment">    MM   - The month as a number with a leading zero (01 to 12)</span></span><br><span class="line"><span class="comment">    MMM 9月</span></span><br><span class="line"><span class="comment">    MMMM 九月</span></span><br><span class="line"><span class="comment">    yy   - The year as a two digit number (00 to 99)</span></span><br><span class="line"><span class="comment">    yyyy - The year as a four digit number. If the year is negative, a minus sign is prepended, making five characters.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">QString <span class="title">QDate::toString</span><span class="params">(<span class="type">const</span> QString &amp;format)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符重载 ==&gt; 日期比较</span></span><br><span class="line"><span class="type">bool</span> QDate::<span class="keyword">operator</span>!=(<span class="type">const</span> QDate &amp;d) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QDate::<span class="keyword">operator</span>&lt;(<span class="type">const</span> QDate &amp;d) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QDate::<span class="built_in">operator</span>&lt;=(<span class="type">const</span> QDate &amp;d) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QDate::<span class="keyword">operator</span>==(<span class="type">const</span> QDate &amp;d) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QDate::<span class="keyword">operator</span>&gt;(<span class="type">const</span> QDate &amp;d) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QDate::<span class="keyword">operator</span>&gt;=(<span class="type">const</span> QDate &amp;d) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态函数 -&gt; 得到本地的当前日期</span></span><br><span class="line">[<span class="type">static</span>] <span class="function">QDate <span class="title">QDate::currentDate</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDate&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="function">QDate <span class="title">a</span><span class="params">(<span class="number">2023</span>,<span class="number">8</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">    QDate b;</span><br><span class="line">    b.<span class="built_in">setDate</span>(<span class="number">2023</span>,<span class="number">8</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//////</span></span><br><span class="line">    QDate c=QDate::<span class="built_in">currentDate</span>();</span><br><span class="line">    <span class="comment">//////</span></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;c;</span><br><span class="line">    c=c.<span class="built_in">addDays</span>(<span class="number">10</span>);</span><br><span class="line">    c=c.<span class="built_in">addMonths</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;c;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;c.<span class="built_in">year</span>();</span><br><span class="line"></span><br><span class="line">    QString str=c.<span class="built_in">toString</span>(<span class="string">&quot;yy-MMM-ddd&quot;</span>);</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;str;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="QTIME"><a href="#QTIME" class="headerlink" title="QTIME"></a>QTIME</h3><img src="/xu-runbo/post/ecfc01d7/image-20230804082459651.png" class="" title="image-20230804082459651"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">QTime::<span class="built_in">QTime</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    h ==&gt; 取值范围： 0 ~ 23</span></span><br><span class="line"><span class="comment">    m and s ==&gt; 取值范围： 0 ~ 59</span></span><br><span class="line"><span class="comment">    ms ==&gt; 取值范围： 0 ~ 999</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">QTime::<span class="built_in">QTime</span>(<span class="type">int</span> h, <span class="type">int</span> m, <span class="type">int</span> s = <span class="number">0</span>, <span class="type">int</span> ms = <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公共成员函数</span></span><br><span class="line"><span class="comment">// Returns true if the set time is valid; otherwise returns false.</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">QTime::setHMS</span><span class="params">(<span class="type">int</span> h, <span class="type">int</span> m, <span class="type">int</span> s, <span class="type">int</span> ms = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">QTime <span class="title">QTime::addSecs</span><span class="params">(<span class="type">int</span> s)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function">QTime <span class="title">QTime::addMSecs</span><span class="params">(<span class="type">int</span> ms)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例代码</span></span><br><span class="line">  <span class="function">QTime <span class="title">n</span><span class="params">(<span class="number">14</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span>;                <span class="comment">// n == 14:00:00</span></span><br><span class="line">  QTime t;</span><br><span class="line">  t = n.<span class="built_in">addSecs</span>(<span class="number">70</span>);                <span class="comment">// t == 14:01:10</span></span><br><span class="line">  t = n.<span class="built_in">addSecs</span>(<span class="number">-70</span>);               <span class="comment">// t == 13:58:50</span></span><br><span class="line">  t = n.<span class="built_in">addSecs</span>(<span class="number">10</span> * <span class="number">60</span> * <span class="number">60</span> + <span class="number">5</span>);  <span class="comment">// t == 00:00:05</span></span><br><span class="line">  t = n.<span class="built_in">addSecs</span>(<span class="number">-15</span> * <span class="number">60</span> * <span class="number">60</span>);     <span class="comment">// t == 23:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从时间对象中取出 时/分/秒/毫秒</span></span><br><span class="line"><span class="comment">// Returns the hour part (0 to 23) of the time. Returns -1 if the time is invalid.</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QTime::hour</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// Returns the minute part (0 to 59) of the time. Returns -1 if the time is invalid.</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QTime::minute</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// Returns the second part (0 to 59) of the time. Returns -1 if the time is invalid.</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QTime::second</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// Returns the millisecond part (0 to 999) of the time. Returns -1 if the time is invalid.</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QTime::msec</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间格式化</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    -- 时 --</span></span><br><span class="line"><span class="comment">    h==&gt;The hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</span></span><br><span class="line"><span class="comment">    hh==&gt;The hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</span></span><br><span class="line"><span class="comment">    H==&gt;The hour without a leading zero (0 to 23, even with AM/PM display)</span></span><br><span class="line"><span class="comment">    HH==&gt;The hour with a leading zero (00 to 23, even with AM/PM display)</span></span><br><span class="line"><span class="comment">    -- 分 --</span></span><br><span class="line"><span class="comment">    m==&gt;The minute without a leading zero (0 to 59)</span></span><br><span class="line"><span class="comment">    mm==&gt;The minute with a leading zero (00 to 59)</span></span><br><span class="line"><span class="comment">    -- 秒 --</span></span><br><span class="line"><span class="comment">    s==&gt;The whole second, without any leading zero (0 to 59)</span></span><br><span class="line"><span class="comment">    ss==&gt;The whole second, with a leading zero where applicable (00 to 59)</span></span><br><span class="line"><span class="comment">    -- 毫秒 --</span></span><br><span class="line"><span class="comment">    zzz==&gt;The fractional part of the second, to millisecond precision, </span></span><br><span class="line"><span class="comment">including trailing zeroes where applicable (000 to 999).</span></span><br><span class="line"><span class="comment">    -- 上午或者下午</span></span><br><span class="line"><span class="comment">    AP or A==&gt;使用AM/PM(大写) 描述上下午, 中文系统显示汉字</span></span><br><span class="line"><span class="comment">    ap or a==&gt;使用am/pm(小写) 描述上下午, 中文系统显示汉字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">QString <span class="title">QTime::toString</span><span class="params">(<span class="type">const</span> QString &amp;format)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阶段性计时</span></span><br><span class="line"><span class="comment">// 过时的API函数</span></span><br><span class="line"><span class="comment">// 开始计时</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QTime::start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 计时结束</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QTime::elapsed</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 重新计时</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">QTime::restart</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐使用的API函数</span></span><br><span class="line"><span class="comment">// QElapsedTimer 类</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QElapsedTimer::start</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">qint64 <span class="title">QElapsedTimer::restart</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">qint64 <span class="title">QElapsedTimer::elapsed</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符重载 ==&gt; 时间比较</span></span><br><span class="line"><span class="type">bool</span> QTime::<span class="keyword">operator</span>!=(<span class="type">const</span> QTime &amp;t) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QTime::<span class="keyword">operator</span>&lt;(<span class="type">const</span> QTime &amp;t) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QTime::<span class="built_in">operator</span>&lt;=(<span class="type">const</span> QTime &amp;t) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QTime::<span class="keyword">operator</span>==(<span class="type">const</span> QTime &amp;t) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QTime::<span class="keyword">operator</span>&gt;(<span class="type">const</span> QTime &amp;t) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QTime::<span class="keyword">operator</span>&gt;=(<span class="type">const</span> QTime &amp;t) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态函数 -&gt; 得到当前时间</span></span><br><span class="line">[<span class="type">static</span>] <span class="function">QTime <span class="title">QTime::currentTime</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QElapsedTimer&gt;</span></span></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    QElapsedTimer time;</span><br><span class="line">    time.<span class="built_in">start</span>();</span><br><span class="line">    <span class="function">QTime <span class="title">a</span><span class="params">(<span class="number">8</span>,<span class="number">26</span>,<span class="number">40</span>,<span class="number">999</span>)</span></span>;</span><br><span class="line"><span class="comment">//    h 0~23</span></span><br><span class="line"><span class="comment">//    m 0~59</span></span><br><span class="line"><span class="comment">//    s 0~59</span></span><br><span class="line"><span class="comment">//    ms 0~999</span></span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;a;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;a.<span class="built_in">hour</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;a.<span class="built_in">minute</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;a.<span class="built_in">second</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;a.<span class="built_in">msec</span>();</span><br><span class="line">    QTime b;</span><br><span class="line">    b.<span class="built_in">setHMS</span>(<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;b;</span><br><span class="line">    QTime c=c.<span class="built_in">currentTime</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;c;</span><br><span class="line"><span class="comment">//    QTime(&quot;08:35:08.486&quot;)</span></span><br><span class="line">    qint64 time1=time.<span class="built_in">elapsed</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;time1;</span><br><span class="line"></span><br><span class="line">        QElapsedTimer timer;</span><br><span class="line"></span><br><span class="line">        timer.<span class="built_in">start</span>(); <span class="comment">// 开始计时</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行一些需要测量的代码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">300</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        qint64 elapsedTime = timer.<span class="built_in">elapsed</span>(); <span class="comment">// 获取经过的时间（以毫秒为单位）</span></span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Elapsed Time:&quot;</span> &lt;&lt; elapsedTime &lt;&lt; <span class="string">&quot;ms&quot;</span>;</span><br><span class="line"><span class="comment">//        Elapsed Time: 7 ms</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="QDATETIME"><a href="#QDATETIME" class="headerlink" title="QDATETIME"></a>QDATETIME</h3><img src="/xu-runbo/post/ecfc01d7/image-20230804084530792.png" class="" title="image-20230804084530792"><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">QDateTime::<span class="built_in">QDateTime</span>();</span><br><span class="line">QDateTime::<span class="built_in">QDateTime</span>(<span class="type">const</span> QDate &amp;date, <span class="type">const</span> QTime &amp;time, Qt::TimeSpec spec = Qt::LocalTime);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公共成员函数</span></span><br><span class="line"><span class="comment">// 设置日期</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QDateTime::setDate</span><span class="params">(<span class="type">const</span> QDate &amp;date)</span></span>;</span><br><span class="line"><span class="comment">// 设置时间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QDateTime::setTime</span><span class="params">(<span class="type">const</span> QTime &amp;time)</span></span>;</span><br><span class="line"><span class="comment">// 给当前日期对象追加 年/月/日/秒/毫秒, 参数可以是负数</span></span><br><span class="line"><span class="function">QDateTime <span class="title">QDateTime::addYears</span><span class="params">(<span class="type">int</span> nyears)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function">QDateTime <span class="title">QDateTime::addMonths</span><span class="params">(<span class="type">int</span> nmonths)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function">QDateTime <span class="title">QDateTime::addDays</span><span class="params">(qint64 ndays)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function">QDateTime <span class="title">QDateTime::addSecs</span><span class="params">(qint64 s)</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function">QDateTime <span class="title">QDateTime::addMSecs</span><span class="params">(qint64 msecs)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到对象中的日期</span></span><br><span class="line"><span class="function">QDate <span class="title">QDateTime::date</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="comment">// 得到对象中的时间</span></span><br><span class="line"><span class="function">QTime <span class="title">QDateTime::time</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日期和时间格式, 格式字符参考QDate 和 QTime 类的 toString() 函数</span></span><br><span class="line"><span class="function">QString <span class="title">QDateTime::toString</span><span class="params">(<span class="type">const</span> QString &amp;format)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符重载 ==&gt; 日期时间对象的比较</span></span><br><span class="line"><span class="type">bool</span> QDateTime::<span class="keyword">operator</span>!=(<span class="type">const</span> QDateTime &amp;other) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QDateTime::<span class="keyword">operator</span>&lt;(<span class="type">const</span> QDateTime &amp;other) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QDateTime::<span class="built_in">operator</span>&lt;=(<span class="type">const</span> QDateTime &amp;other) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QDateTime::<span class="keyword">operator</span>==(<span class="type">const</span> QDateTime &amp;other) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QDateTime::<span class="keyword">operator</span>&gt;(<span class="type">const</span> QDateTime &amp;other) <span class="type">const</span>;</span><br><span class="line"><span class="type">bool</span> QDateTime::<span class="keyword">operator</span>&gt;=(<span class="type">const</span> QDateTime &amp;other) <span class="type">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态函数</span></span><br><span class="line"><span class="comment">// 得到当前时区的日期和时间(本地设置的时区对应的日期和时间)</span></span><br><span class="line">[<span class="type">static</span>] <span class="function">QDateTime <span class="title">QDateTime::currentDateTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDate&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDateTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="function">QDate <span class="title">date</span><span class="params">(<span class="number">2023</span>,<span class="number">8</span>,<span class="number">4</span>)</span></span>;</span><br><span class="line">    <span class="function">QTime <span class="title">time</span><span class="params">(<span class="number">8</span>,<span class="number">55</span>,<span class="number">30</span>,<span class="number">876</span>)</span></span>;</span><br><span class="line">    <span class="function">QDateTime <span class="title">datetime</span><span class="params">(date,time)</span></span>;</span><br><span class="line">    <span class="built_in">qDebug</span>()&lt;&lt;datetime;</span><br><span class="line"></span><br><span class="line">    QDateTime newtime;</span><br><span class="line">    newtime.<span class="built_in">setDate</span>(date);</span><br><span class="line">    newtime.<span class="built_in">setTime</span>(time);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    newtime=newtime.<span class="built_in">addDays</span>(<span class="number">1</span>);</span><br><span class="line">    newtime=newtime.<span class="built_in">addSecs</span>(<span class="number">23</span>);</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;newtime;</span><br><span class="line">        </span><br><span class="line">    QDateTime now= QDateTime::<span class="built_in">currentDateTime</span>();</span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;now;</span><br><span class="line">        </span><br><span class="line">   QString str=now.<span class="built_in">toString</span>(<span class="string">&quot;yyyy-MM-dddd hh:mm:ss ap&quot;</span>);</span><br><span class="line">   <span class="built_in">qDebug</span>()&lt;&lt;str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> QDateTime now= QDateTime::<span class="built_in">currentDateTime</span>();</span><br><span class="line"> <span class="built_in">qDebug</span>()&lt;&lt;now;</span><br><span class="line"><span class="comment">//QDateTime(2023-11-30 16:42:47.860 中国标准时间 Qt::LocalTime)</span></span><br><span class="line"></span><br><span class="line"> QString str=now.<span class="built_in">toString</span>(<span class="string">&quot;yyyy-MM-dddd HH:mm:ss ap&quot;</span>);</span><br><span class="line"> <span class="built_in">qDebug</span>()&lt;&lt;str;</span><br><span class="line"><span class="comment">//&quot;2023-11-Thursday 16:42:47 pm&quot;</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;最常用的一集&#x3D;&#x3D;</p><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态函数</span></span><br><span class="line"><span class="comment">// 得到当前时区的日期和时间(本地设置的时区对应的日期和时间)</span></span><br><span class="line">[<span class="type">static</span>] <span class="function">QDateTime <span class="title">QDateTime::currentDateTime</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 时间格式化</span><br><span class="line">/*</span><br><span class="line"> -- 时 --</span><br><span class="line"> h==&gt;The hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</span><br><span class="line"> hh==&gt;The hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</span><br><span class="line"> H==&gt;The hour without a leading zero (0 to 23, even with AM/PM display)</span><br><span class="line"> HH==&gt;The hour with a leading zero (00 to 23, even with AM/PM display)</span><br><span class="line"> -- 分 --</span><br><span class="line"> m==&gt;The minute without a leading zero (0 to 59)</span><br><span class="line"> mm==&gt;The minute with a leading zero (00 to 59)</span><br><span class="line"> -- 秒 --</span><br><span class="line"> s==&gt;The whole second, without any leading zero (0 to 59)</span><br><span class="line"> ss==&gt;The whole second, with a leading zero where applicable (00 to 59)</span><br><span class="line"> -- 毫秒 --</span><br><span class="line"> zzz==&gt;The fractional part of the second, to millisecond precision, </span><br><span class="line">including trailing zeroes where applicable (000 to 999).</span><br><span class="line"> -- 上午或者下午</span><br><span class="line"> AP or A==&gt;使用AM/PM(大写) 描述上下午, 中文系统显示汉字</span><br><span class="line"> ap or a==&gt;使用am/pm(小写) 描述上下午, 中文系统显示汉字</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt信号和槽机制</title>
      <link href="/xu-runbo/post/3b160342.html"/>
      <url>/xu-runbo/post/3b160342.html</url>
      
        <content type="html"><![CDATA[<h1 id="QT信号和槽机制"><a href="#QT信号和槽机制" class="headerlink" title="QT信号和槽机制"></a>QT信号和槽机制</h1><blockquote><p>信号槽的本质</p><p>信号槽的关系</p><p>标准信号槽的使用</p><p>自定义信号槽的使用</p><p>信号槽的拓展</p><p>Lambda表达式</p></blockquote><h2 id="信号和槽概述"><a href="#信号和槽概述" class="headerlink" title="信号和槽概述"></a>信号和槽概述</h2><blockquote><p>&#x3D;&#x3D;信号槽是 Qt 框架引以为豪的机制之一&#x3D;&#x3D;。所谓信号槽，实际就是观察者模式(发布-订阅模式)。</p><p>当某个事件发生之后，比如，按钮检测到自己被点击了一下，它就会发出一个信号（signal）。&#x3D;&#x3D;这种发出是没有目的的&#x3D;&#x3D;，类似广播。如果有对象对这个信号感兴趣，它就会使&#x3D;&#x3D;用连接（connect）函数&#x3D;&#x3D;</p><p>意思是，将想要处理的信号和自己的一个函数（称为槽（slot））绑定来处理这个信号。也就是说，当信号发出时，被连接的槽函数会自动被回调。</p><p>这就类似观察者模式：当发生了感兴趣的事件，某一个操作就会被自动触发。</p></blockquote><h3 id="信号的本质"><a href="#信号的本质" class="headerlink" title="信号的本质"></a>信号的本质</h3><blockquote><p>信号是由于用户对窗口或控件进行了某些操作，导致窗口或控件产生了某个特定事件，这时候Qt对应的窗口类会发出某个信号，以此对用户的挑选做出反应。</p></blockquote><img src="/xu-runbo/post/3b160342/image-20231130164740519.png" class="" title="image-20231130164740519"> <h3 id="槽的本质"><a href="#槽的本质" class="headerlink" title="槽的本质"></a>槽的本质</h3><blockquote><p>在Qt中槽函数是一类特殊的功能的函数，在编码过程中也可以作为类的普通成员函数来使用。之所以称之为槽函数是因为它们还有一个职责就是对Qt框架中产生的信号进行处理。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">举个简单的例子：</span><br><span class="line"></span><br><span class="line">    女朋友说：“我肚子饿了！”，于是我带她去吃饭。</span><br></pre></td></tr></table></figure><p>上边例子中相当于女朋友发出了一个信号， 我收到了信号并其将其处理掉了。</p><img src="/xu-runbo/post/3b160342/image-20231130164816443.png" class="" title="image-20231130164816443"> <p>&#x3D;&#x3D;在Qt中槽函数的所有者也是某个类的实例对象。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;再Qt中信号的发出者是某个实例化的类对象&#x3D;&#x3D;</p><h3 id="信号和槽的关系"><a href="#信号和槽的关系" class="headerlink" title="信号和槽的关系"></a>信号和槽的关系</h3><blockquote><p>在Qt中信号和槽函数都是独立的个体，本身没有任何联系</p><p>但是由于某种特性需求我们可以将二者连接到一起，好比牛郎和织女想要相会必须要有喜鹊为他们搭桥一样。&#x3D;&#x3D;在Qt中我们需要使用<strong>QOjbect类中的connect函数进二者的关联</strong>。&#x3D;&#x3D;</p><hr><blockquote><p>connect()操作一般写在<strong>窗口的构造函数中</strong>，相当于在<em><strong>事件产生之前在qt框架中先进行注册</strong></em>，这样在程序运行过程中<strong>假设产生了按钮的点击事件，框架就会调用信号接收者对象对应的槽函数了，如果信号不产生，槽函数也就一直不会被调用。</strong>可不是connect一调用就发生了</p></blockquote></blockquote><blockquote><p>连接信号和槽的connect()函数原型如下, 其中PointerToMemberFunction是一个指向函数地址的指针</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">QMetaObject::Connection <span class="title">QObject::connect</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> QObject *sender, PointerToMemberFunction signal, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">const</span> QObject *receiver, PointerToMemberFunction method, </span></span></span><br><span class="line"><span class="params"><span class="function">Qt::ConnectionType type = Qt::AutoConnection)</span></span>;</span><br><span class="line">参数:</span><br><span class="line">  - sender:   发出信号的对象</span><br><span class="line">  - signal:   属于sender对象, 信号是一个函数, 这个参数的类型是函数</span><br><span class="line">              指针, 信号函数地址</span><br><span class="line">  - receiver: 信号接收者</span><br><span class="line">  - method:   属于receiver对象, 当检测到sender发出了signal信号, </span><br><span class="line">              receiver对象调用method方法，信号发出之后的处理动作</span><br><span class="line"> </span><br><span class="line"><span class="comment">//  参数 signal 和 method 都是函数地址, 因此简化之后的 connect() 如下:</span></span><br><span class="line"><span class="built_in">connect</span>(<span class="type">const</span> QObject *sender, &amp;QObject::signal, </span><br><span class="line">        <span class="type">const</span> QObject *receiver, &amp;QObject::method);</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/3b160342/image-20231130165043582.png" class="" title="image-20231130165043582"> <h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>&#x3D;&#x3D;在Qt中槽函数的所有者也是某个类的实例对象。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;再Qt中信号的发出者是某个实例化的类对象&#x3D;&#x3D;</p><p>四个参数</p><p>1.信号发送者</p><p>2，发送的信号</p><p>3，接收者</p><p>4，接收者的行为</p><p>&#x3D;&#x3D;connect函数的连接参数应该是函数指针或者函数对象，并且需要使用信号槽机制进行连接。&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    QPushButton*btn=<span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">show</span>();</span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;第一个按钮&quot;</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">setFixedSize</span>(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">move</span>(<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//connect函数的连接参数应该是函数指针或者函数对象，并且需要使用信号槽机制进行连接。</span></span><br><span class="line">    <span class="built_in">connect</span>(btn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MainWindow::close);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>connect()操作一般写在<strong>窗口的构造函数中</strong>，相当于在<em><strong>事件产生之前在qt框架中先进行注册</strong></em>，这样在程序运行过程中<strong>假设产生了按钮的点击事件，框架就会调用信号接收者对象对应的槽函数了，如果信号不产生，槽函数也就一直不会被调用。</strong>可不是connect一调用就发生了</p><h2 id="标准信号槽使用"><a href="#标准信号槽使用" class="headerlink" title="标准信号槽使用"></a>标准信号槽使用</h2><h4 id="标准信号-槽"><a href="#标准信号-槽" class="headerlink" title="标准信号&#x2F;槽"></a>标准信号&#x2F;槽</h4><blockquote><p>在Qt提供的<strong>很多标准类中都可以对用户触发的某些特定事件进行检测,</strong> 因此当用户做了这些操作之后, 事件被触发类的内部就会产生对应的信号,</p><p>&#x3D;&#x3D;这些信号都是Qt类内部自带的, 因此称之为标准信号。&#x3D;&#x3D;</p><p>同样的，在<strong>Qt的很多类内部为我们了提供了很多功能函数</strong>，并且这些函数也可以作为触发的信号的处理动作，</p><p>这类特性的函数在Qt中称之为标准槽函数。</p><p>系统自带的信号和槽通常如何查找呢，这个就需要利用帮助文档了，比如在帮助文档中查询按钮的点击信号，那么需要在帮助文档中输入QPushButton</p></blockquote><img src="/xu-runbo/post/3b160342/image-20231130165625597.png" class="" title="image-20231130165625597"> <img src="qt3-0/image-20231130165802030.png" alt="image-20231130165802030" style="zoom:50%;" /> <p>QAbstractButton</p><img src="qt3-0/image-20231130165823700.png" alt="image-20231130165823700" style="zoom:50%;" /> <h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote><p>掌握标准信号、槽的查找方式之后以及connect()函数的作用之后, 下面通过一个简单的例子给大家讲解一下他们的使用方式。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">功能实现： 点击窗口上的按钮, 关闭窗口</span><br><span class="line">功能分析:</span><br><span class="line">- 按钮: 信号发出者          -&gt; QPushButton 类型</span><br><span class="line">- 窗口: 信号的接收者和处理者  -&gt; QWidget 类型</span><br></pre></td></tr></table></figure><p>信号和槽函数准备</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单击按钮发出的信号</span></span><br><span class="line">[signal] <span class="function"><span class="type">void</span> <span class="title">QAbstractButton::clicked</span><span class="params">(<span class="type">bool</span> checked = <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 关闭窗口的槽函数</span></span></span><br><span class="line"><span class="function">[slot] <span class="type">bool</span> <span class="title">QWidget::close</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>connect</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单击按钮关闭窗口</span></span><br><span class="line"><span class="built_in">connect</span>(ui-&gt;closewindow, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MainWindow::close);</span><br></pre></td></tr></table></figure><p>》》》</p><blockquote><p>&#x3D;&#x3D;connect()操作一般写在<strong>窗口的构造函数中</strong>, 相当于在事件产生之前在qt框架中先进行注册&#x3D;&#x3D;</p><p>这样在程序运行过程中假设产生了按钮的点击事件, 框架就会调用信号接收者对象对应的槽函数了</p><p>如果信号不产生, 槽函数也就一直不会被调用。</p></blockquote><h2 id="自定义信号和槽"><a href="#自定义信号和槽" class="headerlink" title="自定义信号和槽"></a>自定义信号和槽</h2><blockquote><p>Qt框架提供的信号槽在某些特定场景下是无法满足我们的项目需求的</p><p>因此我们还&#x3D;&#x3D;设计自己需要的的信号和槽&#x3D;&#x3D;</p><p>&#x3D;&#x3D;同样还是使用connect()对自定义的信号槽进行连接。&#x3D;&#x3D;</p></blockquote><img src="/xu-runbo/post/3b160342/image-20231130170107888.png" class="" title="image-20231130170107888"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在头文件派生类的时候，首先像下面那样引入Q_OBJECT宏：</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMainWindow</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建新的类的注意事项"><a href="#创建新的类的注意事项" class="headerlink" title="创建新的类的注意事项"></a><strong>创建新的类的注意事项</strong></h3><hr><p>在Qt中，创建新的类来定义自定义信号和槽时，有以下要求：</p><p><strong>如果要继承QObject和使用Q_OBJECT宏的时候就要引入对应的文件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;QObject&gt;</span><br></pre></td></tr></table></figure><ol><li><p><strong>继承自QObject类：</strong>或者继承QObject的子类也就是间接继承QObject<br><strong>新的类必须继承&#x2F;间接继承自QObject类，以便能够使用Qt的信号和槽机制。</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>添加Q_OBJECT宏</strong>：<br>在新的类的声明中，需要添加Q_OBJECT宏。<strong>这个宏告诉Qt元对象编译器（MOC）生成必要的代码，以支持信号和槽的使用。</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>声明信号和槽函数：</strong><br>在新的类中，可以声明自定义的信号和槽函数。<strong>信号函数声明在<code>signals</code>关键字下，槽函数声明在<code>public slots</code>关键字下。</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyClass</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mySignal</span><span class="params">(<span class="type">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mySlot</span><span class="params">(<span class="type">int</span> value)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现信号和槽函数：</strong><br>在新的类的实现中，可以实现自定义的信号和槽函数。<strong>信号函数使用<code>emit</code>关键字来发出信号，槽函数用于接收信号并进行相应的处理。</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">MyClass::<span class="built_in">MyClass</span>(QObject *parent) : <span class="built_in">QObject</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyClass::mySlot</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 处理槽函数的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyClass::mySignal</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">emit <span class="title">mySignal</span><span class="params">(value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="自定义信号"><a href="#自定义信号" class="headerlink" title="自定义信号"></a>自定义信号</h3><blockquote><p>在Qt中&#x3D;&#x3D;信号的本质是事件&#x3D;&#x3D;, &#x3D;&#x3D;但是<strong>在框架中也是以函数的形式存在的</strong>&#x3D;&#x3D;,</p><p>只不过&#x3D;&#x3D;<strong>信号对应的函数只有声明, 没有定义。</strong>&#x3D;&#x3D;</p><p>如果Qt中的标准信号不能满足我们的需求，可以在程序中进行信号的自定义</p><p>当自定义信号对应的事件产生之后，认为的<strong>将这个信号发射出去即可</strong>（其实就是调用一下这个信号函数）。</p></blockquote><img src="/xu-runbo/post/3b160342/image-20231130170523063.png" class="" title="image-20231130170523063"> <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 举例: 信号重载</span></span><br><span class="line"><span class="comment">// Qt中的类想要使用信号槽机制必须要从QObject类派生(直接或间接派生都可以)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">testsignal</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 参数的作用是数据传递, 谁调用信号函数谁就指定实参</span></span><br><span class="line"><span class="comment">// 实参最终会被传递给槽函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">testsignal</span><span class="params">(<span class="type">int</span> a)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义槽"><a href="#自定义槽" class="headerlink" title="自定义槽"></a>自定义槽</h3><blockquote><p>槽函数就是信号的处理动作，在Qt中&#x3D;&#x3D;槽函数可以作为普通的成员函数来使用。&#x3D;&#x3D;</p><p>如果标准槽函数提供的功能满足不了需求，可以自己定义槽函数进行某些特殊功能的实现。</p><p>&#x3D;&#x3D;<strong>自定义槽函数和自定义的普通函数写法是一样的</strong>。&#x3D;&#x3D;</p></blockquote><img src="/xu-runbo/post/3b160342/image-20231130170713549.png" class="" title="image-20231130170713549"> <p>例如</p><p>信号函数: <code>void testsig(int a, double b);</code><br>槽函数:<code> void testslot(int a, double b);</code></p><p>&#x3D;&#x3D;<strong>槽函数的参数</strong>应该和<strong>对应的信号的参数个数</strong>, <strong>从左到右类型依次对应</strong>&#x3D;&#x3D;<br>&#x3D;&#x3D;<strong>信号的参数可以大于等于槽函数的参数个数</strong> &#x3D;&#x3D; <strong>此信号传递的数据被忽略了</strong>&#x3D;&#x3D;<br>信号函数: <code>void testsig(int a, double b);</code><br>槽函数: <code>void testslot(int a);</code></p><p>Qt中槽函数的类型是多样的</p><p>&#x3D;&#x3D;Qt中的槽函数可以是类的成员函数、全局函数、静态函数、Lambda表达式（匿名函数）&#x3D;&#x3D;</p><p>槽函数可以使用关键字进行声明: slots (Qt5中slots可以省略不写)</p><p><code>public slots:</code><br>·<code>private slots:</code> –&gt; 这样的槽函数&#x3D;&#x3D;不能在类外部被调用&#x3D;&#x3D;<br>·<code>protected slots:</code>· –&gt; 这样的槽函数&#x3D;&#x3D;不能在类外部被调用&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 槽函数书写格式举例</span></span><br><span class="line"><span class="comment">// 类中的这三个函数都可以作为槽函数来使用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">testSlot</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">testFunc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">testSlot</span><span class="params">(<span class="type">int</span> id)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="explicit关键字"><a href="#explicit关键字" class="headerlink" title="explicit关键字"></a>explicit关键字</h3><p>explicit关键字是用来&#x3D;&#x3D;修饰构造函数的&#x3D;&#x3D;，它<strong>表示该构造函数是显式的，不允许隐式转换</strong>。</p><p><strong>必须显式地调用该构造函数</strong>。这样可以避免一些意外的类型转换和不必要的隐式转换，提高代码的可读性和安全性。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>me.class</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class Me</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Me</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Me</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">// 槽函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eatMeal</span><span class="params">()</span></span>;             <span class="comment">// 不能知道信号发出者要吃什么</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eatMeal</span><span class="params">(QString msg)</span></span>;  <span class="comment">// 可以知道信号发出者要吃什么</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> class GirlFriend</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class GirlFriend</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GirlFriend</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">GirlFriend</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hungry</span><span class="params">()</span></span>;            <span class="comment">// 不能表达出想要吃什么</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hungry</span><span class="params">(QString msg)</span></span>;<span class="comment">// 可以通过参数表达想要吃什么</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;teacher.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//    创建对象</span></span><br><span class="line">    teacher=<span class="keyword">new</span> Teacher;</span><br><span class="line">    student=<span class="keyword">new</span> Student;</span><br><span class="line"><span class="comment">//两个函数指针代替</span></span><br><span class="line">    <span class="comment">//函数指针</span></span><br><span class="line"><span class="comment">//    void (Student::*myslot)(QString)=&amp;Student::treat_special;</span></span><br><span class="line"><span class="comment">//    void (Teacher::*mysignal)(QString)=&amp;Teacher::Teacher_is_hungery_but;</span></span><br><span class="line"><span class="comment">//    connect(teacher,mysignal,student,myslot);</span></span><br><span class="line"><span class="comment">//    --------------</span></span><br><span class="line"><span class="comment">//    原始写法，函数名的地址</span></span><br><span class="line">    <span class="built_in">connect</span>(teacher,&amp;Teacher::Teacher_is_hungery_but,student,&amp;Student::treat_special);</span><br><span class="line"><span class="comment">//创建一个按钮</span></span><br><span class="line">    QPushButton *btn=<span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">setFixedSize</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">setText</span>(<span class="string">&quot;老师饿了&quot;</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">move</span>(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">    btn-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//#点击按钮触发下课函数</span></span><br><span class="line">     <span class="built_in">connect</span>(btn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MainWindow::classover);</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误的写法</span></span><br><span class="line"><span class="comment">//     connect(btn,&amp;QPushButton::clicked,teacher,&amp;Teacher::Teacher_is_hungery_but(&quot;大竹比&quot;));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    信号连接信号,点击按钮触发老师饿了</span></span><br><span class="line"><span class="comment">//     connect(btn,&amp;QPushButton::clicked,teacher,&amp;Teacher::Teacher_is_hungery);</span></span><br><span class="line"><span class="comment">//     connect(btn,&amp;QPushButton::clicked,std::bind(&amp;Teacher::Teacher_is_hungery_but,teacher,&quot;大竹比&quot;));</span></span><br><span class="line"><span class="comment">//      connect(btn, &amp;QPushButton::clicked, std::bind(&amp;Teacher::Teacher_is_hungery_but, teacher, &quot;大苏打&quot;));</span></span><br><span class="line">     <span class="built_in">classover</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//////////////////</span></span><br><span class="line">    <span class="built_in">void</span> (QToolBox::*s)(<span class="type">int</span>)=&amp;QToolBox::currentChanged;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(tb,s,<span class="keyword">this</span>,[=](<span class="type">int</span> index)&#123;</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;<span class="string">&quot;新年好&quot;</span>&lt;&lt;index;</span><br><span class="line">    &#125;);</span><br><span class="line">        <span class="comment">////////////////////</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="built_in">connect</span>(ui-&gt;closebtn,&amp;QPushButton::clicked,<span class="keyword">this</span>,&amp;MainWindow::close);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下课函数触发老师饿了</span></span><br><span class="line"><span class="type">void</span> MainWindow:: <span class="built_in">classover</span>()&#123;</span><br><span class="line">    <span class="comment">//下课函数出发老师饿了的信号</span></span><br><span class="line"><span class="comment">//    emit zt-&gt;hungery();</span></span><br><span class="line">    emit teacher-&gt;<span class="built_in">Teacher_is_hungery_but</span>(<span class="string">&quot;宫保鸡丁&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="信号和槽拓展"><a href="#信号和槽拓展" class="headerlink" title="信号和槽拓展"></a>信号和槽拓展</h2><h3 id="信号槽使用拓展"><a href="#信号槽使用拓展" class="headerlink" title="信号槽使用拓展"></a>信号槽使用拓展</h3><ol><li><strong>&#x3D;&#x3D;一个信号可以连接多个槽函数, 发送一个信号有多个处理动作&#x3D;&#x3D;</strong><ol><li>&#x3D;&#x3D;<strong>需要写多个connect（）连接</strong>&#x3D;&#x3D;</li><li><strong>槽函数的执行顺序是随机的, 和connect函数的调用顺序没有关系</strong></li><li><strong>信号的接收者可以是一个对象, 也可以是多个对象</strong></li></ol></li><li><strong>一个槽函数可以连接多个信号, 多个不同的信号, 处理动作是相同的</strong><ol><li>&#x3D;&#x3D;<strong>需要写多个connect（）连接</strong>&#x3D;&#x3D;</li></ol></li><li>&#x3D;&#x3D;信号可以连接信号&#x3D;&#x3D;</li></ol><blockquote><p>&#x3D;&#x3D;<strong>信号接收者可以不处理接收的信号</strong>, 而是<strong>继续发射新的信号</strong>，这相当于<strong>传递了数据,</strong> 并没有对数据进行处理&#x3D;&#x3D;</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">connect</span>(<span class="type">const</span> QObject *sender, &amp;QObject::signal, </span><br><span class="line">        <span class="type">const</span> QObject *receiver, &amp;QObject::siganl-<span class="keyword">new</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>信号断开</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">disconnect</span>(<span class="type">const</span> QObject *sender, &amp;QObject::signal, </span><br><span class="line">        <span class="type">const</span> QObject *receiver, &amp;QObject::method);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="信号槽的连接方式"><a href="#信号槽的连接方式" class="headerlink" title="信号槽的连接方式"></a>信号槽的连接方式</h3><h4 id="Qt5推荐"><a href="#Qt5推荐" class="headerlink" title="Qt5推荐"></a><a href="#%E5%BA%94%E7%94%A8%E4%B8%BE%E4%BE%8B">Qt5推荐</a></h4><p>&#x3D;&#x3D;但是也有缺陷，传入函数地址，如果函数有重载版本的化，就要具体指定了，函数指针！&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语法:</span></span><br><span class="line"><span class="function">QMetaObject::Connection <span class="title">QObject::connect</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> QObject *sender, PointerToMemberFunction signal, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">const</span> QObject *receiver, PointerToMemberFunction method, </span></span></span><br><span class="line"><span class="params"><span class="function">Qt::ConnectionType type = Qt::AutoConnection)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信号和槽函数也就是第2,4个参数传递的是地址, 编译器在编译过程中会对数据的正确性进行检测</span></span><br><span class="line"><span class="built_in">connect</span>(<span class="type">const</span> QObject *sender, &amp;QObject::signal, </span><br><span class="line">        <span class="type">const</span> QObject *receiver, &amp;QObject::method);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;信号和槽函数也就是<strong>第2,4个参数传递的是地址,</strong> <strong>编译器在编译过程中会对数据的正确性进行检测</strong>&#x3D;&#x3D;</p><h4 id="Qt4"><a href="#Qt4" class="headerlink" title="Qt4"></a>Qt4</h4><blockquote><p>这种<strong>旧的信号槽连接方式在Qt5中是支持的,</strong> 但是<strong>不推荐使用</strong>,</p><p>因为这种方式在进行信号槽连接的时候&#x3D;&#x3D;, 信号槽函数<strong>通过宏SIGNAL和SLOT</strong>转换为<strong>字符串类型</strong>。&#x3D;&#x3D;</p><p>因为信号槽函数的转换是通过宏来进行转换的，因此&#x3D;&#x3D;传递到宏函数内部的数据不会被进行检测，&#x3D;&#x3D;</p><p>如果使用者传错了数据，编译器也不会报错，但实际上信号槽的连接已经不对了，只有在程序运行起来之后才能发现问题，而且&#x3D;&#x3D;问题不容易被定位。&#x3D;&#x3D;</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Qt4的信号槽连接方式</span></span><br><span class="line">[<span class="type">static</span>] <span class="function">QMetaObject::Connection <span class="title">QObject::connect</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> QObject *sender, <span class="type">const</span> <span class="type">char</span> *signal, </span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="type">const</span> QObject *receiver, <span class="type">const</span> <span class="type">char</span> *method, </span></span></span><br><span class="line"><span class="params"><span class="function">    Qt::ConnectionType type = Qt::AutoConnection)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(<span class="type">const</span> QObject *sender,<span class="built_in">SIGNAL</span>(信号函数名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ...)),</span><br><span class="line">        <span class="type">const</span> QObject *receiver,<span class="built_in">SLOT</span>(槽函数名(参数<span class="number">1</span>, 参数<span class="number">2</span>, ...)));</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;Qt4中声明槽函数必须要使用 slots 关键字, 不能省略。&#x3D;&#x3D;</p><h3 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a><a name="应用举例">应用举例</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">场景描述：</span><br><span class="line">- 我肚子饿了, 我要吃东西。</span><br><span class="line"> 分析： </span><br><span class="line"> - 信号的发出者是我自己, 信号的接收者也是我自己</span><br></pre></td></tr></table></figure><h4 id="我们首先定义出一个Qt的类。"><a href="#我们首先定义出一个Qt的类。" class="headerlink" title="我们首先定义出一个Qt的类。"></a>我们首先定义出一个Qt的类。</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Me</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    <span class="comment">// Qt4中的槽函数必须这样声明, qt5中的关键字 slots 可以被省略</span></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">eat</span><span class="params">(QString somthing)</span></span>;</span><br><span class="line">    signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hungury</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">hungury</span><span class="params">(QString somthing)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于上边的类写出解决方案</span></span><br><span class="line"><span class="comment">// 处理如下逻辑: 我饿了, 我要吃东西</span></span><br><span class="line"><span class="comment">// 分析: 信号的发出者是我自己, 信号的接收者也是我自己</span></span><br><span class="line">Me m;</span><br><span class="line"><span class="comment">// Qt4处理方式</span></span><br><span class="line"><span class="built_in">connect</span>(&amp;m, <span class="built_in">SIGNAL</span>(<span class="built_in">eat</span>()), &amp;m, <span class="built_in">SLOT</span>(<span class="built_in">hungury</span>()));</span><br><span class="line"><span class="built_in">connect</span>(&amp;m, <span class="built_in">SIGNAL</span>(<span class="built_in">eat</span>(QString)), &amp;m, <span class="built_in">SLOT</span>(<span class="built_in">hungury</span>(QString)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Qt5处理方式</span></span><br><span class="line"><span class="built_in">connect</span>(&amp;m, &amp;Me::eat, &amp;m, &amp;Me::hungury);<span class="comment">// error</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Qt5处理方式错误原因分析："><a href="#Qt5处理方式错误原因分析：" class="headerlink" title="Qt5处理方式错误原因分析："></a>Qt5处理方式错误原因分析：</h4><blockquote><p>上边的写法之所以错误是</p><p>&#x3D;&#x3D;因为这个类中信号槽都是重载过的, 信号和槽都是通过函数名去关联函数的地址,&#x3D;&#x3D;</p><p>但是这个同名函数对应两块不同的地址, 一个带参, 一个不带参,</p><p>因此&#x3D;&#x3D;编译器就不知道去关联哪块地址了&#x3D;&#x3D;, 所以如果我们在这种时候通过以上方式进行信号槽连接, 编译器就会报错。</p></blockquote><h4 id="如何具体化是哪一个重载版本呢？"><a href="#如何具体化是哪一个重载版本呢？" class="headerlink" title="如何具体化是哪一个重载版本呢？"></a>如何具体化是哪一个重载版本呢？</h4><blockquote><p>可以&#x3D;&#x3D;通过<strong>定义函数指针的方式</strong>指定出函数的具体参数，这样就可以确定函数的具体地址了。&#x3D;&#x3D;<br>&#x3D;&#x3D;定义函数指针指向重载的某个信号或者槽函数&#x3D;&#x3D;，</p><p>在connect（）函数中&#x3D;&#x3D;将函数指针名字作为实参&#x3D;&#x3D;就可以了。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span> (Me::*func1)(QString) = &amp;Me::eat;<span class="comment">// func1指向带参的信号</span></span><br><span class="line"><span class="built_in">void</span> (Me::*func2)() = &amp;Me::hungury;<span class="comment">// func2指向不带参的槽函数</span></span><br></pre></td></tr></table></figure><p><code>返回值类型 (作用域::*函数指针变量名) (参数类型)</code></p><p>然后用<code>函数指针变量名 = &amp;函数名</code>来赋值函数地址。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span> (Me::*func1)(QString);</span><br><span class="line">func1=&amp;Me::eat;</span><br></pre></td></tr></table></figure><p>也可以一气呵成</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">void</span> (Me::*func1)(QString) = &amp;Me::eat;</span><br></pre></td></tr></table></figure><h4 id="制定好后的connect"><a href="#制定好后的connect" class="headerlink" title="制定好后的connect"></a>制定好后的connect</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数指针指向重载的某一个具体的信号地址</span></span><br><span class="line"><span class="built_in">void</span> (Me::*mysignal)(QString) = &amp;Me::eat;</span><br><span class="line"><span class="comment">// 定义函数指针指向重载的某一个具体的槽函数地址</span></span><br><span class="line"><span class="built_in">void</span> (Me::*myslot)(QString) = &amp;Me::hungury;</span><br><span class="line"><span class="comment">// 使用定义的函数指针完成信号槽的连接</span></span><br><span class="line"><span class="built_in">connect</span>(&amp;m, mysignal, &amp;m, myslot);</span><br></pre></td></tr></table></figure><h4 id="函数指针拓展"><a href="#函数指针拓展" class="headerlink" title="函数指针拓展"></a>函数指针拓展</h4><p>&#x3D;&#x3D;函数指针是一个指向函数的指针变量，它存储了函数的地址。&#x3D;&#x3D;</p><p>通过函数指针，我们可以在程序运行时动态地调用不同的函数，从而实现更加灵活的编程。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><img src="/xu-runbo/post/3b160342/image-20231130172926503.png" class="" title="image-20231130172926503"> <h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><blockquote><p>Lambda表达式是 C++ 11 最重要也是最常用的特性之一，是现代编程语言的一个特点</p><p>简洁，提高了代码的效率并且可以使程序更加灵活，Qt是完全支持c++语法的</p><p>因此在Qt中也可以使用Lambda表达式。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[capture](params) opt -&gt; ret &#123;body;&#125;;</span><br><span class="line">    - capture: 捕获列表</span><br><span class="line">    - params: 参数列表</span><br><span class="line">    - opt: 函数选项</span><br><span class="line">    - ret: 返回值类型</span><br><span class="line">    - body: 函数体</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/3b160342/image-20231130173237175.png" class="" title="image-20231130173237175"> <h3 id="定义和调用"><a href="#定义和调用" class="headerlink" title="定义和调用"></a>定义和调用</h3><blockquote><p>因为&#x3D;&#x3D;Lambda表达式是一个匿名函数, 因此是没有函数声明的&#x3D;&#x3D;</p><p>直接在程序中<strong>进行代码的定义</strong>即可, 但是如果&#x3D;&#x3D;只定义匿名函数在程序执行过程中是不会被调用的&#x3D;&#x3D;。</p></blockquote><p>&#x3D;&#x3D;匿名函数的定义, 程序执行这个匿名函数是不会被调用的&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;hello, 我是一个lambda表达式...&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;匿名函数的定义+调用:&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> ret = [](<span class="type">int</span> a) -&gt; <span class="type">int</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">1</span>;</span><br><span class="line">&#125;(<span class="number">100</span>);  <span class="comment">// 100是传递给匿名函数的参数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在Lambda表达式的捕获列表中也就是 []内部添加不同的关键字, 就可以在函数体中使用外部变量了。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在匿名函数外部定义变量</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">100</span>, b=<span class="number">200</span>, c=<span class="number">300</span>;</span><br><span class="line"><span class="comment">// 调用匿名函数</span></span><br><span class="line">[]()&#123;</span><br><span class="line">    <span class="comment">// 打印外部变量的值</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="string">&quot;, b: &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot;, c:&quot;</span> &lt;&lt; c;  <span class="comment">// error, 不能使用任何外部变量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[&amp;]()&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;hello, 我是一个lambda表达式...&quot;</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;使用引用的方式传递数据: &quot;</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;a+1:&quot;</span> &lt;&lt; a++ &lt;&lt; <span class="string">&quot;, b+c= &quot;</span> &lt;&lt; b+c;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值拷贝的方式使用外部数据</span></span><br><span class="line">[=](<span class="type">int</span> m, <span class="type">int</span> n)<span class="keyword">mutable</span>&#123;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;hello, 我是一个lambda表达式...&quot;</span>;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;使用拷贝的方式传递数据: &quot;</span>;</span><br><span class="line">    <span class="comment">// 拷贝的外部数据在函数体内部是只读的, 如果不添加 mutable 关键字是不能修改这些只读数据的值的</span></span><br><span class="line">    <span class="comment">// 添加 mutable 允许修改的数据是拷贝到函数内部的副本, 对外部数据没有影响</span></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;a+1:&quot;</span> &lt;&lt; a++ &lt;&lt; <span class="string">&quot;, b+c= &quot;</span> &lt;&lt; b+c;</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;m+1: &quot;</span> &lt;&lt; ++m &lt;&lt; <span class="string">&quot;, n: &quot;</span> &lt;&lt; n;</span><br><span class="line">&#125;(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt入门</title>
      <link href="/xu-runbo/post/e18d58c5.html"/>
      <url>/xu-runbo/post/e18d58c5.html</url>
      
        <content type="html"><![CDATA[<h1 id="QT入门"><a href="#QT入门" class="headerlink" title="QT入门"></a>QT入门</h1><blockquote><p>包括Qt的特点, Qt中的模块划分, Qt的安装, Qt项目文件介绍, Qt中的窗口类, Qt窗口的坐标体系, Qt框架的内存回收机制。</p></blockquote><h2 id="QT概述"><a href="#QT概述" class="headerlink" title="QT概述"></a>QT概述</h2><h3 id="什么是Qt"><a href="#什么是Qt" class="headerlink" title="什么是Qt"></a>什么是Qt</h3><blockquote><p>是一个跨平台的C++应用程序开发框架</p><p>具有短平快的优秀特质: 投资少、周期短、见效快、效益高</p><p>几乎支持所有的平台, 可用于桌面程序开发以及嵌入式开发</p></blockquote><ol><li>有属于自己的事件处理机制</li><li>可以搞效率的开发基于窗口的应用程序。</li><li>Qt是标准 C++ 的扩展, C++的语法在Qt中都是支持的</li><li>良好封装机制使得 Qt 的模块化程度非常高，可重用性较好，可以快速上手。</li><li>Qt 提供了一种称为 signals&#x2F;slots 的安全类型来替代 callback（回调函数），这使得各个元件 之间的协同工作变得十分简单.</li></ol><h3 id="QT的特点"><a href="#QT的特点" class="headerlink" title="QT的特点"></a>QT的特点</h3><blockquote><p>就是因为具有了这些优秀的特质才使得现在很多企业都首选Qt进行基于窗口的应用程序开发，并且近年来市场对Qt程序猿的需求也在不断攀升。</p></blockquote><p>广泛用于开发GUI程序，也可用于开发非GUI程序。</p><hr><p>GUI &#x3D; Graphical User Interface<br>也就是基于窗口的应用程序开发。<br>有丰富的 API</p><hr><p>Qt 包括多达 250 个以上的 C++ 类<br>可以处理正则表达式。<br>支持 2D&#x2F;3D 图形渲染，支持 OpenGL<br>Qt给程序猿提供了非常详细的官方文档<br>支持XML，Json<br>框架底层模块化， 使用者可以根据需求选择相应的模块来使用</p><hr><p>可以轻松跨平台<br>和Java的跨平台方式不同<br>在不同的平台使用的是相同的上层接口，但是在底层封装了不同平台对应的API（暗度陈仓）。</p><h3 id="QT种的模块"><a href="#QT种的模块" class="headerlink" title="QT种的模块"></a>QT种的模块</h3><blockquote><p>Qt类库里大量的类根据功能分为各种模块，这些模块又分为以下几大类：</p></blockquote><p>Qt 基本模块（Qt Essentials)：提供了 Qt 在所有平台上的基本功能。<br>Qt 附加模块（Qt Add-Ons)：实现一些特定功能的提供附加价值的模块。<br>增值模块（Value-AddModules)：单独发布的提供额外价值的模块或工具。<br>技术预览模块（Technology Preview Modules）：一些处于开发阶段，但是可以作为技术预览使用的模块。<br>Qt 工具（Qt Tools)：帮助应用程序开发的一些工具。</p><img src="/xu-runbo/post/e18d58c5/image-20231130151944416.png" class="" title="image-20231130151944416"> <h3 id="QT案例"><a href="#QT案例" class="headerlink" title="QT案例"></a>QT案例</h3><blockquote><p>Qt发展至今已经是一个非常成熟的框架，基于这个框架许多公司开发出了很多优秀的软件，下边给大家介绍几款我们常见到的软件：</p></blockquote><p>VirtualBox：虚拟机软件。<br>VLC多媒体播放器：一个体积小巧、功能强大的开源媒体播放器。<br>YY语音：又名“歪歪语音”，是一个可以进行在线多人语音聊天和语音会议的免费软件。<br>咪咕音乐：咪咕音乐是中国移动倾力打造的正版音乐播放器<br>WPS Office：金山公司（Kingsoft）出品的办公软件，与微软Office兼容性良好，个人版免费。<br>Skype：一个使用人数众多的基于P2P的VOIP聊天软件。</p><h2 id="QT安装"><a href="#QT安装" class="headerlink" title="QT安装"></a>QT安装</h2><p>Qt官方下载地址：<a href="https://download.qt.io/archive/qt/">https://download.qt.io/archive/qt/</a></p><img src="/xu-runbo/post/e18d58c5/image-20231130152055946.png" class="" title="image-20231130152055946"> <p>镜像网站</p><p>中国科学技术大学：<a href="http://mirrors.ustc.edu.cn/qtproject/">http://mirrors.ustc.edu.cn/qtproject/</a><br>清华大学：<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/">https://mirrors.tuna.tsinghua.edu.cn/qt/</a><br>北京理工大学：<a href="https://mirrors.bit.edu.cn/qtproject/">https://mirrors.bit.edu.cn/qtproject/</a><br>中国互联网络信息中心：<a href="https://mirrors.cnnic.cn/qt/">https://mirrors.cnnic.cn/qt/</a></p><p>找到archive&#x2F;目录下载离线安装包即可</p><p><a href="https://blog.csdn.net/u012117034/article/details/125619848?ops_request_misc=%7B%22request_id%22:%22170132901516800215054534%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=170132901516800215054534&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-125619848-null-null.142%5Ev96%5Econtrol&utm_term=qt%E7%9A%84%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Qt安装教程_Loken2020的博客-CSDN博客</a></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><blockquote><p>当我们编写一个Qt程序，并且生成了可执行程序，这个可执行程序运行的时候默认需要加载相关的Qt动态库（因为默认是动态链接，静态链接则不需要）。为了保证可执行程序在任何目录执行都能链接到对应的动态库，我们可以将Qt模块对应的动态库目录设置到系统的环境变量中（这一点对于Linux系统也是一样的）。</p></blockquote><img src="/xu-runbo/post/e18d58c5/image-20231130152448766.png" class="" title="image-20231130152448766"> <img src="/xu-runbo/post/e18d58c5/image-20231130152541671.png" class="" title="image-20231130152541671"> <h2 id="第一个QT项目"><a href="#第一个QT项目" class="headerlink" title="第一个QT项目"></a>第一个QT项目</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><img src="/xu-runbo/post/e18d58c5/image-20231130152725792.png" class="" title="image-20231130152725792"> <img src="/xu-runbo/post/e18d58c5/image-20231130152742164.png" class="" title="image-20231130152742164"> <img src="/xu-runbo/post/e18d58c5/image-20231130152747689.png" class="" title="image-20231130152747689"> <img src="/xu-runbo/post/e18d58c5/image-20231130152752240.png" class="" title="image-20231130152752240"> <h3 id="项目文件（-pro）"><a href="#项目文件（-pro）" class="headerlink" title="项目文件（.pro）"></a>项目文件（.pro）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"># 在项目文件中, 注释需要使用 井号(#)</span><br><span class="line"># 项目编译的时候需要加载哪些底层模块</span><br><span class="line">QT       += core gui </span><br><span class="line"></span><br><span class="line"># 如果当前Qt版本大于<span class="number">4</span>, 会添加一个额外的模块: widgets</span><br><span class="line"># Qt <span class="number">5</span>中对gui模块进行了拆分, 将 widgets 独立出来了</span><br><span class="line"><span class="built_in">greaterThan</span>(QT_MAJOR_VERSION, <span class="number">4</span>): QT += widgets</span><br><span class="line">   </span><br><span class="line"># 使用c++<span class="number">11</span>新特性</span><br><span class="line">CONFIG += c++<span class="number">11</span></span><br><span class="line"></span><br><span class="line">#如果在项目中调用了废弃的函数, 项目编译的时候会有警告的提示    </span><br><span class="line">DEFINES += QT_DEPRECATED_WARNINGS</span><br><span class="line"></span><br><span class="line"># 项目中的源文件</span><br><span class="line">SOURCES += \</span><br><span class="line">        main.cpp \</span><br><span class="line">        mainwindow.cpp</span><br><span class="line">        </span><br><span class="line"># 项目中的头文件</span><br><span class="line">HEADERS += \</span><br><span class="line">        mainwindow.h</span><br><span class="line">        </span><br><span class="line"># 项目中的窗口界面文件</span><br><span class="line">FORMS += \</span><br><span class="line">        mainwindow.ui</span><br></pre></td></tr></table></figure><blockquote><p>Qt项目文件（通常以.pro为扩展名），用于配置和构建Qt项目。一步步解释每个部分的含义：</p><ol><li><p>QT +&#x3D; core gui：这一行指示项目&#x3D;&#x3D;需要使用Qt的core和gui模块&#x3D;&#x3D;。这意味着项目将使用Qt的基本功能和图形用户界面功能。</p></li><li><p>greaterThan(QT_MAJOR_VERSION, 4): QT +&#x3D; widgets：这一行表示如果&#x3D;&#x3D;Qt的主要版本号大于4，则添加widgets模块&#x3D;&#x3D;。这意味着如果使用的是Qt 5或更高版本，将添加Qt的widgets模块，用于构建窗口小部件应用程序。</p></li><li><p>CONFIG +&#x3D; c++17：这一行指示项目使用C++17标准进行编译。</p></li><li><p>DEFINES +&#x3D; QT_DISABLE_DEPRECATED_BEFORE&#x3D;0x060000：这一行是注释掉的，如果取消注释，将会使代码在使用已弃用的API时编译失败。这可以帮助开发人员在使用不推荐的API时及时发现问题。</p></li><li><p>SOURCES +&#x3D; \ main.cpp \ mainwindow.cpp：这一行列出了项目的源文件，包括main.cpp和mainwindow.cpp。这些是项目的主要代码文件。</p></li><li><p>HEADERS +&#x3D; \ mainwindow.h：这一行列出了项目的头文件，包括mainwindow.h。这些文件包含了项目中使用的类和函数的声明。</p></li><li><p>FORMS +&#x3D; \ mainwindow.ui：这一行列出了项目的UI文件，包括mainwindow.ui。这些文件是Qt Designer创建的用户界面文件，用于定义应用程序的界面布局和元素。</p></li><li><p>qnx: target.path &#x3D; &#x2F;tmp&#x2F;$${TARGET}&#x2F;bin else: unix:!android: target.path &#x3D; &#x2F;opt&#x2F;$${TARGET}&#x2F;bin !isEmpty(target.path): INSTALLS +&#x3D; target：这一部分是默认的部署规则，用于指定项目的部署路径。根据不同的操作系统和平台，部署路径会有所不同。</p></li></ol><p>总之，Qt的项目文件用于配置项目的构建和部署规则，包括指定需要使用的Qt模块、编译标准、源文件、头文件、UI文件以及部署路径等信息。通过编辑项目文件，开发人员可以灵活地配置项目的构建和部署过程。</p></blockquote><h3 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span><span class="comment">// 生成的窗口类头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QApplication&gt;</span><span class="comment">// 应用程序类头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 创建应用程序对象, 在一个Qt项目中实例对象有且仅有一个</span></span><br><span class="line">    <span class="comment">// 类的作用: 检测触发的事件, 进行事件循环并处理</span></span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    <span class="comment">// 创建窗口类对象</span></span><br><span class="line">    MainWindow w;</span><br><span class="line">    <span class="comment">// 显示窗口</span></span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line">    <span class="comment">// 应用程序对象开始事件循环, 保证应用程序不退出</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>典型的Qt应用程序的入口点，它包括了主函数和一些Qt类的使用。一步步来解释每一部分的含义：</p><ol><li><p>#include “mainwindow.h”：这一行包含了mainwindow.h头文件，这是一个&#x3D;&#x3D;生成的窗口类的头文件&#x3D;&#x3D;。在Qt中，通常会创建一个窗口类来定义应用程序的主窗口。</p></li><li><p>#include <QApplication>：这一行包含了QApplication文件，这是Qt中的<strong>应用程序类文件</strong>。QApplication类&#x3D;&#x3D;负责管理应用程序的事件循环和处理。&#x3D;&#x3D;</p></li><li><p>int main(int argc, char *argv[])：这是&#x3D;&#x3D;主函数的定义，它是程序的入口点&#x3D;&#x3D;。argc是命令行参数的数量，argv是命令行参数的数组。</p></li><li><p>QApplication a(argc, argv)：这一行&#x3D;&#x3D;创建了一个QApplication对象a&#x3D;&#x3D;，它是整个应用程序的核心。这个对象负责处理应用程序的事件循环，接收并处理用户输入。</p></li><li><p>MainWindow w：这一行&#x3D;&#x3D;创建了一个MainWindow对象w，这是应用程序的主窗口类的实例化对象&#x3D;&#x3D;。</p></li><li><p>w.show()：这一行调用了MainWindow对象的show()方法，用于显示主窗口。</p></li><li><p>return a.exec()：这一行&#x3D;&#x3D;启动了应用程序的事件循环，保证应用程序不会立即退出&#x3D;&#x3D;。a.exec()会一直运行，直到应用程序被关闭。</p></li></ol><p>总之，这段代码初始化了一个Qt应用程序，并创建了一个主窗口对象并显示出来，然后启动了应用程序的事件循环。这样，当用户与应用程序交互时，Qt会处理用户的输入并触发相应的事件处理。</p></blockquote><h3 id="mainwindow-ui"><a href="#mainwindow-ui" class="headerlink" title="mainwindow.ui"></a>mainwindow.ui</h3><blockquote><p>在Qt中每一个窗口都对应一个可编辑的可视化界面（*.ui）, 这个界面对应的是一个xml格式的文件, 一般情况下不需要在xml格式下对这个文件进行编辑, 关于这个文件结构了解即可。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;!-- 双击这个文件看到的是一个窗口界面, 如果使用文本编辑器打开看到的是一个XML格式的文件 --&gt;</span><br><span class="line">&lt;!-- 看不懂这种格式没关系, 我们不需要在这种模式下操作这个文件。 --&gt;</span><br><span class="line">&lt;!-- 这里只是给大家介绍这个文件的本质 --&gt;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;ui version=<span class="string">&quot;4.0&quot;</span>&gt;</span><br><span class="line"> &lt;<span class="keyword">class</span>&gt;MainWindow&lt;/<span class="keyword">class</span>&gt;</span><br><span class="line"> &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QMainWindow&quot;</span> name=<span class="string">&quot;MainWindow&quot;</span>&gt;</span><br><span class="line">  &lt;property name=<span class="string">&quot;geometry&quot;</span>&gt;</span><br><span class="line">   &lt;rect&gt;</span><br><span class="line">    &lt;x&gt;<span class="number">0</span>&lt;/x&gt;</span><br><span class="line">    &lt;y&gt;<span class="number">0</span>&lt;/y&gt;</span><br><span class="line">    &lt;width&gt;<span class="number">800</span>&lt;/width&gt;</span><br><span class="line">    &lt;height&gt;<span class="number">600</span>&lt;/height&gt;</span><br><span class="line">   &lt;/rect&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property name=<span class="string">&quot;windowTitle&quot;</span>&gt;</span><br><span class="line">   &lt;string&gt;MainWindow&lt;/string&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QWidget&quot;</span> name=<span class="string">&quot;centralwidget&quot;</span>/&gt;</span><br><span class="line">  &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QMenuBar&quot;</span> name=<span class="string">&quot;menubar&quot;</span>/&gt;</span><br><span class="line">  &lt;widget <span class="keyword">class</span>=<span class="string">&quot;QStatusBar&quot;</span> name=<span class="string">&quot;statusbar&quot;</span>/&gt;</span><br><span class="line"> &lt;/widget&gt;</span><br><span class="line"> &lt;resources/&gt;</span><br><span class="line"> &lt;connections/&gt;</span><br><span class="line">&lt;/ui&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mainwindow-h"><a href="#mainwindow-h" class="headerlink" title="mainwindow.h"></a>mainwindow.h</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span><span class="comment">// Qt标准窗口类头文件</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="comment">// mainwindow.ui 文件中也有一个类叫 MainWindow, 将这个类放到命名空间 Ui 中</span></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MainWindow</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT<span class="comment">// 这个宏是为了能够使用Qt中的信号槽机制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;<span class="comment">// 定义指针指向窗口的 UI 对象</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mainwindow-cpp"><a href="#mainwindow-cpp" class="headerlink" title="mainwindow.cpp"></a>mainwindow.cpp</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"><span class="comment">//构造函数的实例化</span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)<span class="comment">// 基于mainwindow.ui创建一个实例对象</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将 mainwindow.ui 的实例对象和 当前类的对象进行关联</span></span><br><span class="line">    <span class="comment">// 这样同名的连个类对象就产生了关联, 合二为一了</span></span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Qt中的窗口类"><a href="#Qt中的窗口类" class="headerlink" title="Qt中的窗口类"></a>Qt中的窗口类</h2><blockquote><p>在通过Qt向导窗口基于窗口的应用程序的项目过程中倒数第二步让我们选择跟随项目创建的第一个窗口的基类, 下拉菜单中有三个选项, 分别为: QMainWindow、QDialog、QWidget如下图：</p></blockquote><img src="/xu-runbo/post/e18d58c5/image-20231130153732879.png" class="" title="image-20231130153732879"> <img src="/xu-runbo/post/e18d58c5/image-20231130153740272.png" class="" title="image-20231130153740272"> <h3 id="窗口的显示"><a href="#窗口的显示" class="headerlink" title="窗口的显示"></a>窗口的显示</h3><img src="/xu-runbo/post/e18d58c5/image-20231130153822059.png" class="" title="image-20231130153822059"> <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// QWidget是所有窗口类的基类, 调用这个提供的 show() 方法就可以显示将任何窗口显示出来</span></span><br><span class="line"><span class="comment">// 非模态显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QWidget::show</span><span class="params">()</span></span>;<span class="comment">// 显示当前窗口和它的子窗口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对话框窗口的非模态显示: 还是调用show() 方法</span></span><br><span class="line"><span class="comment">// 对话框窗口的模态显示</span></span><br><span class="line">[<span class="keyword">virtual</span> slot] <span class="function"><span class="type">int</span> <span class="title">QDialog::exec</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h2 id="坐标体系"><a href="#坐标体系" class="headerlink" title="坐标体系"></a>坐标体系</h2><h3 id="窗口的坐标原点"><a href="#窗口的坐标原点" class="headerlink" title="窗口的坐标原点"></a>窗口的坐标原点</h3><blockquote><p>所有坐标的确定都需要先找到坐标原点, Qt的坐标原点在窗口的左上角</p></blockquote><img src="/xu-runbo/post/e18d58c5/image-20231130153922176.png" class="" title="image-20231130153922176"> <h3 id="窗口的相对坐标"><a href="#窗口的相对坐标" class="headerlink" title="窗口的相对坐标"></a>窗口的相对坐标</h3><blockquote><p>在一个Qt窗口中一般都有很多子窗口内嵌到这个父窗口中，其中每个窗口都有自己的坐标原点</p><p>子窗口的位置也就是其使用的坐标点就是它的父窗口坐标体系中的坐标点。</p></blockquote><img src="/xu-runbo/post/e18d58c5/image-20231130153956352.png" class="" title="image-20231130153956352"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有窗口类的基类: QWidget</span></span><br><span class="line"><span class="comment">// QWidget中提供了移动窗口的 API函数</span></span><br><span class="line"><span class="comment">// 参数 x, y是要移动的窗口的左上角的点, 窗口的左上角移动到这个坐标点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QWidget::move</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QWidget::move</span><span class="params">(<span class="type">const</span> QPoint &amp;)</span></span>;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;所有窗口类的基类: QWidget&#x3D;&#x3D;</p><h2 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h2><blockquote><p>在Qt中<strong>创建对象</strong>的时候会提供一个 <strong>Parent对象指针</strong>（可以查看类的构造函数），下面来解释这个parent到底是干什么的。</p><p>&#x3D;&#x3D;QObject是以对象树的形式组织起来的&#x3D;&#x3D;。当你创建一个QObject对象时，会看到QObject的构造函数接收一个QObject指针作为参数，这个参数就是 parent，也就是父对象指针。</p><img src="qt1-0/image-20231130154209840.png" alt="image-20231130154209840" style="zoom: 50%;" /> <p>这相当于，在&#x3D;&#x3D;创建QObject对象时，可以提供一个其父对象&#x3D;&#x3D;，我们创建的这个QObject对象会自动添加到其父对象的children()列表。&#x3D;&#x3D;当父对象析构的时候，这个列表中的所有对象也会被析构。&#x3D;&#x3D;（注意，这里的父对象并不是继承意义上的父类！）</p><p>&#x3D;&#x3D;QWidget是能够在屏幕上显示的一切组件的父类&#x3D;&#x3D;。QWidget继承自QObject，因此也继承了这种对象树关系。</p><p>&#x3D;&#x3D;<strong>一个孩子自动地成为父组件的一个子组件</strong>。因此，<strong>它会显示在父组件的坐标系统中</strong>，被父组件的边界剪裁。&#x3D;&#x3D;</p><p>例如，当用户关闭一个对话框的时候，应用程序将其删除，那么，我们希望属于这个对话框的按钮、图标等应该一起被删除。事实就是如此，因为这些都是对话框的子组件。</p><p>Qt 引入对象树的概念，在一定程度上解决了内存问题。</p><p>&#x3D;&#x3D;当一个QObject对象在<strong>堆</strong>上创建的时候，Qt 会同时为其创建一个<strong>对象树</strong>。&#x3D;&#x3D;</p><p>不过，&#x3D;&#x3D;<strong>对象树中对象的顺序是没有定义的</strong>&#x3D;&#x3D;。这意味着，销毁这些对象的顺序也是未定义的。</p><hr><p>任何对象树中的 QObject对象 delete 的时候，如果这个对象有 parent，则自动将其从 parent 的children()列表中删除；</p><p>&#x3D;&#x3D;如果有孩子，则自动 delete 每一个孩子。Qt 保证没有QObject会被 delete 两次，这是由析构顺序决定的。&#x3D;&#x3D;</p></blockquote><img src="qt1-0/image-20231130154513512.png" alt="image-20231130154513512" style="zoom: 67%;" /> <img src="/xu-runbo/post/e18d58c5/image-20231130154626074.png" class="" title="image-20231130154626074"><ol><li><p>方式1: 通过构造函数<br>parent: 当前窗口的父对象, 找构造函数中的 parent 参数即可</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">QWidget::<span class="built_in">QWidget</span>(QWidget *parent = Q_NULLPTR, Qt::WindowFlags f = Qt::<span class="built_in">WindowFlags</span>());</span><br><span class="line">QTimer::<span class="built_in">QTimer</span>(QObject *parent = <span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure></li><li><p>方式2: 通过setParent()方法<br>   假设这个控件没有在构造的时候指定符对象, 可以调用QWidget的api指定父窗口对象</p></li></ol>   <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">QWidget::setParent</span><span class="params">(QWidget *parent)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">QObject::setParent</span><span class="params">(QObject *parent)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象核心</title>
      <link href="/xu-runbo/post/cd36ea51.html"/>
      <url>/xu-runbo/post/cd36ea51.html</url>
      
        <content type="html"><![CDATA[<h1 id="类-对象"><a href="#类-对象" class="headerlink" title="类&amp;对象"></a>类&amp;对象</h1><ol><li><p><strong>创建类：</strong></p><ul><li>使用 <code>class</code> 关键字声明类。</li><li>类名的命名应该符合标识符的规范，&#x3D;&#x3D;以大写字母开头，采用驼峰命名法。&#x3D;&#x3D;</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的成员变量和方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>构造方法：</strong></p><ul><li>构造方法是一种特殊的方法，用于&#x3D;&#x3D;初始化对象的状态。&#x3D;&#x3D;</li><li>&#x3D;&#x3D;构造方法的名称与类名相同，没有返回类型（包括 <code>void</code>）。&#x3D;&#x3D;</li><li>&#x3D;&#x3D;构造方法可以有参数，这些参数用于初始化对象的属性。&#x3D;&#x3D;</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 构造方法的初始化逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 带参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">// 构造方法的初始化逻辑，使用参数初始化成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实例化对象：</strong></p><ul><li>使用 <code>new</code> 关键字创建类的实例。</li><li>构造方法在对象创建时自动调用，用于初始化对象的状态。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MyClass</span> <span class="variable">myObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>(); <span class="comment">// 调用无参构造方法</span></span><br><span class="line"><span class="type">MyClass</span> <span class="variable">anotherObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>(<span class="string">&quot;John&quot;</span>, <span class="number">25</span>); <span class="comment">// 调用带参构造方法</span></span><br></pre></td></tr></table></figure></li><li><p><strong>默认构造方法：</strong></p><ul><li>&#x3D;&#x3D;如果类没有显式定义构造方法，<strong>Java会提供一个默认的无参构造方法。</strong>&#x3D;&#x3D;空实现！</li><li>如果类定义了带参构造方法，但没有定义无参构造方法，那么在创建对象时必须使用带参构造方法。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 默认的无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 默认构造方法的初始化逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><ol><li><p>当提供了一个有参构造函数时，Java编译器不再自动生成默认的无参构造函数。</p></li><li><p>如果你的类中没有显式提供任何构造函数，Java编译器会自动生成一个默认的无参构造函数，</p></li><li><p>但是&#x3D;&#x3D;一旦提供了有参构造函数，这个默认的无参构造函数就不再自动生成了。&#x3D;&#x3D;</p></li></ol><p>所以，如果你提供了一个有参构造函数，而又想要保留默认的无参构造函数，需要显式提供这个无参构造函数。</p><p>也是最推荐的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 有参构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(<span class="type">int</span> parameter)</span> &#123;</span><br><span class="line">        <span class="comment">// 构造函数实现</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 显式提供的无参构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 构造函数实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这确保了在创建对象时，你既可以使用有参构造函数，也可以使用无参构造函数。</p><h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a><a name="权限">权限修饰符</a></h2><blockquote><p>访问权限修饰符是按照从最大权限到最小权限的顺序排列的。下面是权限从高到低的顺序：</p><ol><li><p><strong>public：</strong></p><ul><li>公共访问级别，对所有类都是可见的。</li></ul></li><li><p><strong>protected：</strong></p><ul><li>受保护访问级别，对同一包内的类和所有子类可见。</li></ul></li><li><p><strong>默认（包级别，默认级别）：</strong></p><ul><li>如果没有指定任何访问修饰符，默认为包级别，对同一包内的类可见。</li></ul></li><li><p><strong>private：</strong></p><ul><li>私有访问级别，仅对同一类可见。</li><li><code>public &gt; protected &gt; 默认 &gt; private</code></li></ul></li></ol></blockquote><ul><li>&#x3D;&#x3D;protect扩大了private的权限，但是又不能达到public的权利&#x3D;&#x3D;</li></ul><h2 id="不同权限的访问能力"><a href="#不同权限的访问能力" class="headerlink" title="不同权限的访问能力"></a>不同权限的访问能力</h2><table><thead><tr><th></th><th>public</th><th>protected</th><th>默认</th><th>private</th></tr></thead><tbody><tr><td>同一类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一包中的类</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>不同包的子类</td><td>√</td><td>&#x3D;&#x3D;√&#x3D;&#x3D;</td><td></td><td></td></tr><tr><td>不同包中的无关类</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><p>可见，public具有最大权限。private则是最小权限。</p><p>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p><ul><li>成员变量使用<code>private</code> ，隐藏细节。</li><li>构造方法使用<code> public</code> ，方便创建对象。</li><li>成员方法使用<code>public</code> ，方便调用方法。</li></ul><blockquote><p>小贴士：不加权限修饰符，就是默认权限</p></blockquote><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>封装是面向对象编程中的一项重要原则，它指的是&#x3D;&#x3D;将类的实现细节隐藏起来&#x3D;&#x3D;，通过公共接口提供对类的访问。</p><ol><li><p><strong>核心知识点：</strong></p><ul><li><strong>访问修饰符：</strong> 使用 <code>private</code>、<code>public</code>、<code>protected</code> 等关键字来控制成员的访问权限。</li><li><strong>Getter 和 Setter 方法：</strong> 提供公共的方法用于获取（Getter）和设置（Setter）私有成员的值。</li><li><strong>封装的目的：</strong> &#x3D;&#x3D;<strong>隐藏类的内部实现细节，提供更安全、可控的访问方式</strong>，降低类的耦合度。&#x3D;&#x3D;</li></ul></li><li><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 私有成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String model;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String model, <span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getter 方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getModel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Setter 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setModel</span><span class="params">(String model)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;</span><br><span class="line">        <span class="comment">// 添加一些逻辑，确保年份在合理范围内</span></span><br><span class="line">        <span class="keyword">if</span> (year &gt;= <span class="number">1900</span> &amp;&amp; year &lt;= <span class="number">2023</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.year = year;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Invalid year&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Car</code> 类的成员变量 <code>model</code> 和 <code>year</code> 被声明为私有</p><p>通过公共的 Getter 和 Setter 方法提供对它们的访问。</p><p>这样，外部代码无法直接访问这些变量，必须通过类提供的公共接口进行访问和修改。</p><p>这种封装的方式可以保护类的内部状态，使得类的实现细节可以更灵活地变化，而不影响外部使用者。</p></li></ol><h1 id="继承static★★"><a href="#继承static★★" class="headerlink" title="&#x3D;&#x3D;继承static★★&#x3D;&#x3D;"></a>&#x3D;&#x3D;继承static★★&#x3D;&#x3D;</h1><ul><li><input disabled="" type="checkbox"> 能够掌握static关键字修饰的变量调用方式</li><li><input disabled="" type="checkbox"> 能够掌握static关键字修饰的方法调用方式</li><li><input disabled="" type="checkbox"> 知道静态代码块的格式和应用场景</li><li><input disabled="" type="checkbox"> 能够写出类的继承格式</li><li><input disabled="" type="checkbox"> 能够说出继承的特点</li><li><input disabled="" type="checkbox"> 能够区分this和super的作用</li><li><input disabled="" type="checkbox"> 能够说出方法重写的概念</li><li><input disabled="" type="checkbox"> 能够说出方法重写的注意事项</li></ul><blockquote><p>在Java中，类的加载是在程序运行时由Java虚拟机（JVM）负责的过程。</p><p>类加载包括三个步骤：加载（Loading）、链接（Linking），和初始化（Initialization）</p><ul><li><p><strong>加载（Loading）：</strong> 加载阶段是指将类的字节码加载到内存中。这个过程是在类被首次引用时发生的，例如通过 <code>new</code> 关键字创建对象、调用静态成员等。加载阶段，&#x3D;&#x3D;类的字节码被加载到方法区&#x3D;&#x3D;</p></li><li><p><strong>链接（Linking）：</strong> 链接阶段包括验证（Verification）、准备（Preparation），和解析（Resolution）。这些步骤在加载之后进行。</p></li><li><p><strong>初始化（Initialization）：</strong> &#x3D;&#x3D;初始化阶段是在类加载之后，当类首次被主动使用时发生的&#x3D;&#x3D;。在这个阶段，静态变量被赋予初始值，静态块被执行。</p></li></ul><p>类的加载时机早于对象的实例化。当类加载时，其中的静态成员（静态变量和静态方法）会被加载到内存中。静态方法可以在对象实例化之前被调用，因为它们属于类而不是对象。</p><p>当说“静态方法在对象实例化之前就被调用”时，是指在类的加载过程中，<strong>静态方法可以被调用</strong>，而不需要等到对象实例化。</p><p>这也是为什么在静态方法中无法直接访问非静态成员（实例变量或实例方法）的原因，因为在静态方法被调用的时候，<strong>可能并没有对象实例化</strong>，而非静态成员是需要对象实例存在才能访问的。</p></blockquote><h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><p>&#x3D;&#x3D;<strong>this出现在构造方法中，代表构造方法正在初始化的那个对象</strong>。&#x3D;&#x3D;</p><p><code>this</code> 是一个关键字，代表&#x3D;&#x3D;当前对象的引用&#x3D;&#x3D;。</p><ol><li><p><strong>表示当前对象：</strong></p><ul><li><code>this</code> 用于在类的实例方法中引用&#x3D;&#x3D;当前对象。&#x3D;&#x3D;</li><li>可以使用 <code>this</code> 来访问当前对象的实例变量和方法。</li></ul></li><li><p><strong>解决命名冲突：</strong></p><ul><li>在方法中，如果存在局部变量和实例变量或方法参数和实例变量同名，可以使用 <code>this</code> 来区分。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用this解决命名冲突</span></span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在构造方法中调用其他构造方法：</strong></p><ul><li>可以在一个构造方法中使用 <code>this</code> 调用同一个类的其他构造方法，以避免代码重复。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Example</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 调用另一个构造方法</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Example</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>作为返回值：</strong></p><ul><li>在方法中，可以使用 <code>this</code> 作为返回值，以支持&#x3D;&#x3D;链式调用。&#x3D;&#x3D;</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Example <span class="title function_">setValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>类的定义格式如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 class 类名 &#123;</span><br><span class="line">    <span class="comment">// 1.成员变量（属性）</span></span><br><span class="line">    <span class="comment">// 2.成员方法 (行为) </span></span><br><span class="line">    <span class="comment">// 3.构造方法 （初始化类的对象数据的）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 1.成员变量</span></span><br><span class="line">    <span class="keyword">public</span> String name ;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> sex ; <span class="comment">// &#x27;男&#x27;  &#x27;女&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;this代表所在类的当前对象的引用（地址值），即代表当前对象。&#x3D;&#x3D;</p><h3 id="this关键字的应用"><a href="#this关键字的应用" class="headerlink" title="this关键字的应用"></a>this关键字的应用</h3><h3 id="用于普通的gettter与setter方法"><a href="#用于普通的gettter与setter方法" class="headerlink" title="用于普通的gettter与setter方法"></a>用于普通的gettter与setter方法</h3><p>this出现在实例方法中，谁调用这个方法（哪个对象调用这个方法），this就代表谁（this就代表哪个对象）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄非法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Static关键字-内存区域"><a href="#Static关键字-内存区域" class="headerlink" title="Static关键字 &amp;内存区域"></a>Static关键字 &amp;内存区域</h1><h2 id="2-1-static概述"><a href="#2-1-static概述" class="headerlink" title="2.1 static概述"></a>2.1 static概述</h2><p><code>static</code> 是Java中的关键字，用于声明静态成员（静态变量、静态方法）以及静态代码块.</p><ul><li><p><strong>作用：</strong> &#x3D;&#x3D;<code>static</code> 关键字用于声明类级别的成员&#x3D;&#x3D;，与类的实例无关，属于<strong>类本身</strong>。</p></li><li><p><strong>静态变量：</strong> 使用 <code>static</code> 声明的变量是类变量，被所有类的实例共享。在类加载时初始化，只初始化一次。</p></li><li><p><strong>静态方法：</strong> 使用 <code>static</code> 声明的方法是类方法，可以通过类名直接调用，无需创建类的实例。</p></li><li><p><strong>静态代码块：</strong> 使用 <code>static</code> 声明的代码块，在类加载时执行，用于一次性的初始化工作。</p></li><li><p><strong>访问方式：</strong> 静态成员通过类名直接访问，强调了与类关联而不是与实例关联。</p></li><li><p><strong>共享性质：</strong> 静态成员被所有实例共享，可以用于表示全局信息或执行一次性的初始化操作。</p></li></ul><p>&#x3D;&#x3D;被static修饰的成员是<strong>属于类</strong>的是放在静态区中，&#x3D;&#x3D;</p><p>&#x3D;&#x3D;没有static修饰的成员变量和方法则是<strong>属于对象</strong>的。&#x3D;&#x3D;</p><h2 id="2-2-定义格式和使用"><a href="#2-2-定义格式和使用" class="headerlink" title="2.2 定义格式和使用"></a>2.2 定义格式和使用</h2><p>static是静态的意思。 static可以修饰成员变量或者修饰方法。</p><p>&#x3D;&#x3D;有static修饰成员变量，说明这个成员变量是属于<strong>类</strong>的，这个成员变量称为<strong>类变量</strong>或者<strong>静态成员变量</strong>。&#x3D;&#x3D;</p><blockquote><p> 直接用  类名访问即可。</p><p> 因为类只有一个，所以静态成员变量在内存区域中也只存在一份。</p><p> 所有的对象都可以共享这个变量。</p></blockquote><p><strong>如何使用呢</strong></p><p>例如现在我们需要定义传智全部的学生类，那么这些学生类的对象的学校属性应该都是“传智”，这个时候我们可以把这个属性定义成static修饰的静态成员变量。</p><p>和final一样习惯放在修饰符后面</p><p><strong>定义格式</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> 数据类型 变量名;</span><br><span class="line">修饰符 <span class="keyword">static</span> 数据类型 变量名 = 初始值;</span><br></pre></td></tr></table></figure><h2 id="2-3静态成员的访问方式："><a href="#2-3静态成员的访问方式：" class="headerlink" title="2.3静态成员的访问方式："></a>2.3静态成员的访问方式：</h2><p>静态成员（静态变量和静态方法）&#x3D;&#x3D;可以通过类名直接访问，无需创建类的实例。&#x3D;&#x3D;</p><blockquote><p>类名.静态成员</p><p>实例化的对象.静态成员</p></blockquote><ol><li><p><strong>访问静态变量：</strong></p><ul><li>使用类名直接访问静态变量，格式为 <code>ClassName.staticVariable</code>。</li><li>并不是推荐使用对象引用来访问静态变量，但这的方式会给人一种误导，让人以为这是一个实例变量。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">staticVariable</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 访问静态变量</span></span><br><span class="line">        System.out.println(Example.staticVariable);</span><br><span class="line">        <span class="comment">// 也可以使用对象引用来访问，但不推荐</span></span><br><span class="line">        <span class="type">Example</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line">        System.out.println(instance.staticVariable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>访问静态方法：</strong></p><ul><li>使用类名直接调用静态方法，格式为 <code>ClassName.staticMethod()</code>。</li><li>与静态变量一样，也可以使用对象引用来调用静态方法，但这同样不是推荐的方式。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a static method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用静态方法</span></span><br><span class="line">        Example.staticMethod();</span><br><span class="line">        <span class="comment">// 也可以使用对象引用来调用，但不推荐</span></span><br><span class="line">        <span class="type">Example</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Example</span>();</span><br><span class="line">        instance.staticMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>&#x3D;&#x3D;<strong>实例成员变量属于每个对象，必须创建类的对象才可以访问</strong>&#x3D;&#x3D;</p><h2 id="2-4内存区域划分"><a href="#2-4内存区域划分" class="headerlink" title="2.4内存区域划分"></a>2.4内存区域划分</h2><blockquote><p>内存可以分为几个不同的区域，主要包括</p><p>方法区 、 堆（Heap）、栈（Stack）、本地方法栈、和程序计数器</p><ol><li><p><strong>方法区（Method Area）：</strong></p><ul><li>存储类的元信息，如类名、访问修饰符、字段信息、方法信息等。</li><li>所有线程共享，用于存储被加载的类信息。</li><li>包括静态变量、常量，也包括运行时常量池。</li></ul></li><li><p><strong>堆（Heap）：</strong></p><ul><li>存储对象实例，包括通过 <code>new</code> 关键字创建的对象。</li><li>所有线程共享，是垃圾收集器管理的主要区域。</li><li>在堆中，会分为新生代和老年代，用于实现不同的垃圾回收算法。</li></ul></li><li><p><strong>栈（Stack）：</strong></p><ul><li>存储方法调用的&#x3D;&#x3D;局部变量、操作数栈、方法出口&#x3D;&#x3D;等信息。</li><li>每个线程都有一个独立的栈，用于保存线程的局部变量。</li><li>栈帧（Stack Frame）在方法调用和返回时被压入和弹出。</li></ul></li><li><p><strong>本地方法栈（Native Method Stack）：</strong></p><ul><li>用于支持本地方法，即使用 native 关键字声明的方法。</li><li>与栈类似，但是为本地方法服务。</li></ul></li><li><p><strong>程序计数器（Program Counter Register）：</strong></p><ul><li>记录当前线程执行的字节码指令的地址。</li><li>每个线程都有一个独立的程序计数器，用于线程切换和恢复执行状态。</li></ul></li></ol><p>此外，可以根据不同的角度，将方法区、堆、栈这三个区域合称为 Java 虚拟机的运行时数据区。</p><p>&#x3D;&#x3D;<strong>静态区</strong>一般指的是方法区，其中包括静态变量和常量。&#x3D;&#x3D;</p></blockquote><h2 id="2-5static内存图解释"><a href="#2-5static内存图解释" class="headerlink" title="2.5static内存图解释"></a>2.5static内存图解释</h2><img src="/xu-runbo/post/cd36ea51/image-20231128200145499-17012414461171.png" class="" title="image-20231128200145499"><p>通过一个简单的静态成员的例子来解释Java中的静态内存图，并说明其中涉及的主要内存区域，特别是堆内存的变化。我们考虑一个包<strong>含静态变量和静态方法的类</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryExample</span> &#123;</span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">staticVariable</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Static method is called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 在main方法中访问静态变量和调用静态方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Static variable: &quot;</span> + staticVariable);</span><br><span class="line">        staticMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><strong>加载类：</strong></p><ul><li>当程序启动时，Java虚拟机（JVM）负责加载 <code>MemoryExample</code> 类。</li><li>静态变量 <code>staticVariable</code> 和静态方法 <code>staticMethod</code> 被加载到&#x3D;&#x3D;方法区（Method Area）。&#x3D;&#x3D;</li></ul></li><li><p><strong>分配内存：</strong></p><ul><li>静态变量 <code>staticVariable</code> 被分配内存，并初始化为默认值（在这个例子中是0）。</li><li>方法区保存静态方法 <code>staticMethod</code> 的字节码。</li></ul></li><li><p><strong>初始化：</strong></p><ul><li>静态变量 <code>staticVariable</code> 被初始化为赋予的值（在这个例子中是10）。</li><li>&#x3D;&#x3D;类的静态块（如果有的话）在这个阶段被执行。&#x3D;&#x3D;</li></ul></li><li><p><strong>调用main方法：</strong></p><ul><li><code>main</code> 方法被调用，程序开始执行。</li><li>在 <code>main</code> 方法中访问静态变量和调用静态方法。</li></ul></li><li><p><strong>访问静态变量：</strong></p><ul><li>在 <code>main</code> 方法中访问静态变量 <code>staticVariable</code>，这时候它的值是10。</li></ul></li><li><p><strong>调用静态方法：</strong></p><ul><li>在 <code>main</code> 方法中调用静态方法 <code>staticMethod</code>，该方法被执行，输出 “Static method is called.”。</li></ul></li></ol><ul><li><strong>方法区：</strong> 存储类的字节码、静态变量、静态方法等。</li><li><strong>堆内存：</strong> &#x3D;&#x3D;用于存储对象实例&#x3D;&#x3D;</li><li><strong>栈内存：</strong> &#x3D;&#x3D;用于存储方法调用的局部变量和方法调用信息&#x3D;&#x3D;。在这个例子中，<code>main</code> 方法的调用会在栈上创建一个帧。</li></ul><h2 id="static的注意事项"><a href="#static的注意事项" class="headerlink" title="static的注意事项"></a>static的注意事项</h2><p> <code>static</code> 使用的主要注意事项：</p><ol><li><p><strong>静态成员属于类：</strong></p><ul><li>静态成员（变量或方法）属于整个类，而不是某个特定的实例。这意味着它被所有实例共享。</li></ul></li><li><p><strong>静态成员在类加载时初始化：</strong></p><ul><li>静态成员在类加载时被初始化，只会初始化一次。它们在类的生命周期内保持不变。</li></ul></li><li><p><strong>无法直接访问非静态成员：</strong></p><ul><li>&#x3D;&#x3D;在静态方法中<strong>不能直接访问非静态成员</strong>（实例变量或实例方法），因为<strong>静态方法在对象实例化之前就被调用</strong>。&#x3D;&#x3D;</li></ul></li><li><p><strong>静态方法中不能使用this关键字：</strong></p><ul><li>在静态方法中不能使用 <code>this</code> 关键字，因为 <code>this</code> 代表对象实例，而静态方法没有隶属于特定实例。</li></ul></li><li><p><strong>静态方法中只能调用静态成员：</strong></p><ul><li>静态方法中只能直接调用静态成员，不能直接调用非静态成员。</li></ul></li><li><p><strong>静态块的执行时机：</strong></p><ul><li>静态块在类加载时执行，用于进行一次性的初始化操作，如对静态变量的赋值。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> staticVariable;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 静态块，在类加载时执行</span></span><br><span class="line">        staticVariable = <span class="number">42</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法只能直接访问静态成员</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Static variable: &quot;</span> + staticVariable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li><p><strong>静态变量的生命周期：</strong></p><ul><li>静态变量的生命周期长于对象实例，它们存在于整个应用程序的运行期间。</li></ul></li><li><p><strong>谨慎使用静态变量：</strong></p><ul><li>虽然静态变量可以在多个对象实例之间共享信息，但过度使用静态变量可能导致全局状态和不易维护的代码。</li></ul></li></ol><h2 id="2-5-小结"><a href="#2-5-小结" class="headerlink" title="2.5&#x3D;&#x3D;小结&#x3D;&#x3D;"></a>2.5&#x3D;&#x3D;小结&#x3D;&#x3D;</h2><p>1.当 <code>static</code> 修饰成员变量或者成员方法时，该变量称为<strong>静态变量</strong>，该方法称为<strong>静态方法</strong>。</p><p>&#x3D;&#x3D;该类的每个对象都<strong>共享</strong>同一个类的静态变量和静态方法。&#x3D;&#x3D;</p><p>2.无static修饰的成员变量或者成员方法，称为<strong>实例变量，实例方法</strong>，</p><p>&#x3D;&#x3D;实例变量和实例方法必须创建类的对象，然后通过对象来访问。&#x3D;&#x3D;</p><p>3.static修饰的成员属于类，会存储在静态区</p><p>&#x3D;&#x3D;随着类的加载而加载的，且只加载一次，所以只有一份，节省内存。&#x3D;&#x3D;</p><p>存储于一块固定的内存区域（静态区），所以，可以直接被类名调用。</p><p>&#x3D;&#x3D;它优先于对象存在，所以，可以被所有对象共享。&#x3D;&#x3D;</p><p>4.无static修饰的成员，是属于对象，对象有多少个，他们就会出现多少份。所以<strong>必须由对象调用。</strong></p><blockquote><p>用于定义<strong>静态成员</strong>和<strong>静态方法</strong></p><ol><li><p><strong>静态变量（Static Variables）：</strong></p><ul><li>静态变量是使用 static 关键字声明的类级别变量，也称为&#x3D;&#x3D;类变量&#x3D;&#x3D;</li><li>&#x3D;&#x3D;所有该类的对象共享同一个静态变量的值。&#x3D;&#x3D;</li><li>&#x3D;&#x3D;静态变量在类加载时被初始化，且只初始化一次。&#x3D;&#x3D;</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">staticvar</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态方法（Static Methods）：</strong></p><ul><li>静态方法使用 static 关键字定义，&#x3D;&#x3D;属于整个类而不是类的实例。&#x3D;&#x3D;</li><li>&#x3D;&#x3D;<strong>静态方法不能直接访问非静态成员</strong>，因为它们在对象实例化之前就已经存在&#x3D;&#x3D;。</li><li>静态成员先存在，但是非静态成员是对象实例化之后才有的，实例化之前是访问不了的</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is a static method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态块（Static Block）：</strong></p><ul><li>静态块是使用 static 关键字定义的代码块，在类加载时执行，用于执行静态变量的初始化或其他一次性的初始化操作。</li><li>一个在类加载时自动执行的代码段，它允许你在类加载过程中执行一些特定的逻辑。</li><li>用法:</li><li><strong>初始化静态变量：</strong> 将静态块用于初始化静态变量，确保在类加载时它们已经被正确地设置。</li><li><strong>加载静态资源：</strong> 如果你的类需要加载一些静态资源，例如配置文件、数据库驱动程序等，静态块可以用于执行这些加载操作。</li><li><strong>执行复杂的初始化逻辑：</strong> 有时，初始化逻辑可能涉及到一些复杂的计算或初始化步骤，可以将这些逻辑放在静态块中。****</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> staticVariable;</span><br><span class="line">    <span class="comment">// 静态块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 执行一次性的初始化工作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Static block is executed.&quot;</span>);</span><br><span class="line">        staticVariable = <span class="number">42</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 在 main 方法中访问静态变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Static variable: &quot;</span> + staticVariable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>静态导入（Static Import）：</strong></p><ul><li>静态导入允许直接访问一个类的静态成员，而不需要使用类名来限定。</li><li>可以使用 <code>import static</code> 语句来实现。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br><span class="line"><span class="comment">//import java.lang.Math.*;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">        <span class="comment">//Math.PI现在可以直接PI</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态内部类（Static Inner Class）：</strong></p><ul><li>静态内部类是在类内部使用 static 修饰的内部类。</li><li>静态内部类不依赖于外部类的实例，可以直接通过类名访问。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        JFrame j=<span class="keyword">new</span> <span class="title class_">JFrame</span>(<span class="string">&quot;大苏打&quot;</span>);  </span><br><span class="line">        JButton jb=<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;an1&quot;</span>);</span><br><span class="line">        <span class="comment">//内部类</span></span><br><span class="line">        jb.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;aaghah&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><h3 id="3-1-1-引入"><a href="#3-1-1-引入" class="headerlink" title="3.1.1 引入"></a>3.1.1 引入</h3><p>假如我们要定义如下类:<br>学生类,老师类和工人类，分析如下。</p><ol><li><p>学生类<br>属性:姓名,年龄<br>行为:吃饭,睡觉</p></li><li><p>老师类<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，教书</p></li><li><p>班主任<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，管理</p></li></ol><p>如果我们定义了这三个类去开发一个系统，那么这三个类中&#x3D;&#x3D;就存在大量重复的信息&#x3D;&#x3D;（属性:姓名，年龄。行为：吃饭，睡觉）。这样就导致了<strong>相同代码大量重复</strong>，代码显得很臃肿和冗余，那么如何解决呢？</p><p>&#x3D;&#x3D;假如多个类中存在相同属性和行为时，我们可以将这些内容抽取到单独一个类中&#x3D;&#x3D;，那么多个类无需再定义这些属性和行为，只要<strong>继承</strong>那一个类即可。如图所示：</p><img src="/xu-runbo/post/cd36ea51/1-17012414461172.jpg" class=""><p>其中，多个类可以称为<strong>子类</strong>，单独被继承的那一个类称为<strong>父类</strong>、<strong>超类（superclass）</strong>或者<strong>基类</strong>。</p><p>父&#x2F;超&#x2F;基</p><h3 id="3-1-2-继承的含义"><a href="#3-1-2-继承的含义" class="headerlink" title="3.1.2 继承的含义"></a>3.1.2 继承的含义</h3><p>继承描述的是事物之间的所属关系，这种关系是：<code>is-a</code> 的关系。</p><p>例如，兔子属于食草动物，食草动物属于动物。可见，父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。</p><blockquote><p><strong>继承</strong>：就是子类继承父类的<strong>属性</strong>和<strong>行为</strong>，&#x3D;&#x3D;使得子类对象可以直接具有与父类相同的属性、相同的行为。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;子类可以直接访问父类中的<strong>非私有</strong>的属性和行为。&#x3D;&#x3D;</p></blockquote><h3 id="3-1-3-继承的好处"><a href="#3-1-3-继承的好处" class="headerlink" title="3.1.3 继承的好处"></a>3.1.3 继承的好处</h3><ol><li>提高<strong>代码的复用性</strong>（减少代码冗余，相同代码重复利用）。</li><li>使类与类之间产生了关系。</li></ol><h2 id="3-2-继承的格式"><a href="#3-2-继承的格式" class="headerlink" title="3.2 继承的格式"></a>3.2 继承的格式</h2><p>通过 <code>extends</code> 关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>需要注意：Java是单继承的，一个类只能继承一个直接父类，跟现实世界很像，但是Java中的子类是更加强大的。</strong>&#x3D;&#x3D;</p><h2 id="3-3-继承案例"><a href="#3-3-继承案例" class="headerlink" title="3.3 继承案例"></a>3.3 继承案例</h2><h3 id="3-3-1-案例"><a href="#3-3-1-案例" class="headerlink" title="3.3.1 案例"></a>3.3.1 案例</h3><p>请使用继承定义以下类:</p><ol><li>学生类<br>属性:姓名,年龄<br>行为:吃饭,睡觉</li><li>老师类<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，教书</li><li>班主任<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，管理</li></ol><h3 id="3-3-2-案例图解分析"><a href="#3-3-2-案例图解分析" class="headerlink" title="3.3.2 案例图解分析"></a>3.3.2 案例图解分析</h3><p>老师类，学生类，还有班主任类，实际上都是属于人类的，我们可以定义一个人类，把他们相同的属性和行为都定义在人类中，然后继承人类即可，子类特有的属性和行为就定义在子类中了。</p><p>如下图所示。</p><h3 id="3-3-3-案例代码实现"><a href="#3-3-3-案例代码实现" class="headerlink" title="3.3.3 案例代码实现"></a>3.3.3 案例代码实现</h3><p><strong>1.父类Human类</strong></p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">   <span class="comment">// 合理隐藏</span></span><br><span class="line">   <span class="keyword">private</span> String name ;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 合理暴露</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.子类Teacher类</strong></p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师在认真教技术！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.子类Student类</strong></p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Human</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.子类BanZhuren类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">    </span><br><span class="line">       <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;班主任强调纪律问题！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.测试类</strong></p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">dlei</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        dlei.setName(<span class="string">&quot;播仔&quot;</span>);</span><br><span class="line">        dlei.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">        dlei.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">        System.out.println(dlei.getName());</span><br><span class="line">        System.out.println(dlei.getAge());</span><br><span class="line">        System.out.println(dlei.getSalary());</span><br><span class="line">        dlei.teach();</span><br><span class="line">        </span><br><span class="line">        <span class="type">BanZhuRen</span> <span class="variable">linTao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BanZhuRen</span>();</span><br><span class="line">        linTao.setName(<span class="string">&quot;灵涛&quot;</span>);</span><br><span class="line">        linTao.setAge(<span class="string">&quot;28&quot;</span>);</span><br><span class="line">        linTao.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">        System.out.println(linTao.getName());</span><br><span class="line">        System.out.println(linTao.getAge());</span><br><span class="line">        System.out.println(linTao.getSalary());</span><br><span class="line">        linTao.admin();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">xugan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        xugan.setName(<span class="string">&quot;播仔&quot;</span>);</span><br><span class="line">        xugan.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">        <span class="comment">//xugan.setSalary(1000.99); // xugan没有薪水属性，报错！</span></span><br><span class="line">        System.out.println(xugan.getName());</span><br><span class="line">        System.out.println(xugan.getAge());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-小结"><a href="#3-3-4-小结" class="headerlink" title="3.3.4 &#x3D;&#x3D;小结&#x3D;&#x3D;"></a>3.3.4 &#x3D;&#x3D;小结&#x3D;&#x3D;</h3><img src="/xu-runbo/post/cd36ea51/image-20231128203159919-17012414461174.png" class="" title="image-20231128203159919"> <p>&#x3D;&#x3D;1.继承实际上是<strong>子类相同的属性和行为可以定义在父类中</strong>，子类<strong>特有的属性和行为由自己定义</strong>，这样就<strong>实现了相同属性和行为的重复利用</strong>，从而提高了代码复用。&#x3D;&#x3D;</p><p>2.子类继承父类，就可以直接得到父类的成员变量和方法。是否可以继承所有成分呢？</p><h2 id="3-4-子类不能继承的内容"><a href="#3-4-子类不能继承的内容" class="headerlink" title="3.4 &#x3D;&#x3D;子类不能继承的内容&#x3D;&#x3D;"></a>3.4 &#x3D;&#x3D;子类不能继承的内容&#x3D;&#x3D;</h2><img src="/xu-runbo/post/cd36ea51/image-20231128203101666-17012414461175.png" class="" title="image-20231128203101666"><img src="java1-0/image-20231128203218031-17012414461186.png" alt="image-20231128203218031" style="zoom:50%;" />  <blockquote><p>子类不能继承的内容：</p><ol><li><p><strong>私有成员方法：</strong> 私有成员变量继承了，只不过不可以直接的方法访问，可以通过公共的get方法去访问.,但是私有的成员方法真的访问不了。</p><img src="/xu-runbo/post/cd36ea51/image-20231128203431800-170124144611810.png" class="" title="image-20231128203431800">  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> privateVariable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 私有方法的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 子类不能继承 privateVariable 和 privateMethod</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>构造方法：</strong> 构造方法不能被继承。子类会调用父类的构造方法，但是子类无法直接继承父类的构造方法。子类可以通过使用 <code>super()</code> 调用父类的构造方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 父类的构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 子类不能继承父类的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 通过super()调用父类的构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>final 成员：</strong> 如果成员变量被声明为 <code>final</code>，则子类不能重写它，且它的值不能被修改。</p><p>如果方法被声明为 <code>final</code>，则子类不能覆盖（override）该方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">finalVariable</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">finalMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// final方法的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 子类不能重写finalVariable或finalMethod</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>静态成员和方法：</strong> 静态成员变量和静态方法属于类而不是实例，因此它们不会被继承。</p><p>子类可以直接访问父类的静态成员和方法，但是无法继承。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">staticVariable</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 子类不能继承staticVariable或staticMethod</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="3-4-1-引入"><a href="#3-4-1-引入" class="headerlink" title="3.4.1 引入"></a>3.4.1 引入</h3><blockquote><p>并不是父类的所有内容都可以给子类继承的：</p><p><strong>子类不能继承父类的构造方法。</strong></p><p>&#x3D;&#x3D;<strong>值得注意的是子类可以继承父类的私有成员（成员变量，方法），只是子类无法直接访问而已，可以通过getter&#x2F;setter方法访问父类的private成员变量。</strong>&#x3D;&#x3D;</p></blockquote><h3 id="3-4-1-演示代码"><a href="#3-4-1-演示代码" class="headerlink" title="3.4.1 演示代码"></a>3.4.1 演示代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">        System.out.println(z.num1);</span><br><span class="line"><span class="comment">//System.out.println(z.num2); // 私有的子类无法使用</span></span><br><span class="line">        <span class="comment">// 通过getter/setter方法访问父类的private成员变量</span></span><br><span class="line">        System.out.println(z.getNum2());</span><br><span class="line"></span><br><span class="line">        z.show1();</span><br><span class="line">        <span class="comment">// z.show2(); // 私有的子类无法使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum2</span><span class="params">(<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚方法表"><a href="#虚方法表" class="headerlink" title="&#x3D;&#x3D;虚方法表&#x3D;&#x3D;"></a>&#x3D;&#x3D;虚方法表&#x3D;&#x3D;</h2><h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><img src="/xu-runbo/post/cd36ea51/image-20231128203535526-17012414461187.png" class="" title="image-20231128203535526"><p> a类成员想调用p类的方法P</p><p>一级一级往上找？拜托，太逊了，真的很耗费时间</p><ol><li>从最顶级(n)的父类那里设立了一个&#x3D;&#x3D;虚方法表&#x3D;&#x3D;</li><li>这个虚方法表里面放了&#x3D;&#x3D;经常要用到的非private,非final,非static的方法&#x3D;&#x3D;</li><li>下一级(n-1)会继承顶级的&#x3D;&#x3D;虚方法表&#x3D;&#x3D;并且把自己常用的方法也放入并且融合为一个心的proplus虚方法表</li><li>以此类推循环，直到A类的成员就可以从虚方法表里面找到P类的方法P，虚方法！如果不是虚方法还要一层一层找</li></ol><img src="/xu-runbo/post/cd36ea51/image-20231128203554245-17012414461188.png" class="" title="image-20231128203554245"><h3 id="内存图分析"><a href="#内存图分析" class="headerlink" title="内存图分析"></a>内存图分析</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="/xu-runbo/post/cd36ea51/image-20231128203659819-17012414461189.png" class="" title="image-20231128203659819"></h3><h2 id="继承中成员的访问特点"><a href="#继承中成员的访问特点" class="headerlink" title="继承中成员的访问特点"></a>继承中成员的访问特点</h2><img src="/xu-runbo/post/cd36ea51/image-20231128203726825-170124144611827.png" class="" title="image-20231128203726825"> <h3 id="super使用场景"><a href="#super使用场景" class="headerlink" title="super使用场景"></a>super使用场景</h3><blockquote><p><code>super</code> 关键字主要用于在子类中引用父类的成员，但它的使用场景并不仅限于子类的方法中。主要的使用场景包括：</p><ol><li><p><strong>在子类的方法中使用：</strong> 这是 <code>super</code> 最常见的用法。在子类的方法中，可以使用 <code>super</code> 关键字来调用父类的成员变量和方法，解决命名冲突或者直接访问父类的实现。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent class method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Child class method&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Child class number: &quot;</span> + number);</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent class number: &quot;</span> + <span class="built_in">super</span>.number); <span class="comment">// 使用 super 调用父类的成员变量</span></span><br><span class="line">        <span class="built_in">super</span>.display(); <span class="comment">// 使用 super 调用父类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在子类的构造方法中使用：</strong> 在子类的构造方法中，可以使用 <code>super</code> 关键字来调用父类的构造方法。这样&#x3D;&#x3D;可以<strong>确保在创建子类对象时，先执行父类的构造方法，然后再执行子类的构造方法</strong>。&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent class constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 调用父类的构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Child class constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在内部类中使用：</strong> 如果在子类中定义了内部类，并且内部类中存在与外部类相同名称的成员，可以使用 <code>super</code> 关键字来引用外部类的成员。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inner class x: &quot;</span> + x); <span class="comment">// 访问内部类的 x</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Outer class x: &quot;</span> + Outer.<span class="built_in">this</span>.x); <span class="comment">// 使用 super 关键字访问外部类的 x</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><img src="/xu-runbo/post/cd36ea51/image-20231128203811005-170124144611811.png" class="" title="image-20231128203811005"><h2 id="3-5-继承后的特点—成员变量"><a href="#3-5-继承后的特点—成员变量" class="headerlink" title="3.5 继承后的特点—成员变量"></a>3.5 继承后的特点—成员变量</h2><p>当类之间产生了继承关系后，其中各类中的成员变量，又产生了哪些影响呢？</p><h3 id="3-5-1-成员变量不重名"><a href="#3-5-1-成员变量不重名" class="headerlink" title="3.5.1 成员变量不重名"></a>3.5.1 成员变量不重名</h3><p>如果子类父类中出现<strong>不重名</strong>的成员变量，这时的访问是<strong>没有影响的</strong>。代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Zi中的成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Fu num=&quot;</span>+num); <span class="comment">// 继承而来，所以直接访问。</span></span><br><span class="line"><span class="comment">// 访问子类中的num2</span></span><br><span class="line">System.out.println(<span class="string">&quot;Zi num2=&quot;</span>+num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z.show();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">演示结果：</span><br><span class="line"><span class="type">Fu</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="3-5-2-成员变量重名"><a href="#3-5-2-成员变量重名" class="headerlink" title="3.5.2 成员变量重名"></a>3.5.2 成员变量重名</h3><p>如果子类父类中出现<strong>重名</strong>的成员变量，这时的访问是<strong>有影响的</strong>。代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu1</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi1</span> <span class="keyword">extends</span> <span class="title class_">Fu1</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Fu num=&quot;</span> + num);</span><br><span class="line"><span class="comment">// 访问子类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Zi num=&quot;</span> + num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi1</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi1</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z1.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">演示结果：</span><br><span class="line"><span class="type">Fu</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p>子父类中出现了同名的成员变量时，子类会优先访问自己对象中的成员变量。如果此时想访问父类成员变量如何解决呢？我们可以使用super关键字。</p><h3 id="3-5-3-super访问父类成员变量"><a href="#3-5-3-super访问父类成员变量" class="headerlink" title="3.5.3  super访问父类成员变量"></a>3.5.3  super访问父类成员变量</h3><p>子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用<code>super</code> 关键字，修饰父类成员变量，类似于之前学过的 <code>this</code> 。</p><p>&#x3D;&#x3D;需要注意的是：<strong>super代表的是父类对象的引用，this代表的是当前对象的引用。</strong>&#x3D;&#x3D;</p><p><strong>使用格式：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">super</span>.父类成员变量名/方法</span><br></pre></td></tr></table></figure><p>子类方法需要修改，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 访问方法中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;method num=&quot;</span> + num);</span><br><span class="line">        <span class="comment">// 访问子类中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Zi num=&quot;</span> + <span class="built_in">this</span>.num);</span><br><span class="line">        <span class="comment">// 访问父类中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Fu num=&quot;</span> + <span class="built_in">super</span>.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi1</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi1</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z1.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">演示结果：</span><br><span class="line">method num=<span class="number">1</span></span><br><span class="line">Zi num=<span class="number">6</span></span><br><span class="line">Fu num=<span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>小贴士：Fu 类中的成员变量是非私有的，子类中可以直接访问。</p><p>若Fu 类中的成员变量私有了，子类是不能直接访问的。通常编码时，我们遵循封装的原则，使用private修饰成员变量，那么如何访问父类的私有成员变量呢？对！可以在父类中提供公共的getXxx方法和setXxx方法。</p></blockquote><h2 id="3-6-继承后的特点—成员方法"><a href="#3-6-继承后的特点—成员方法" class="headerlink" title="3.6 继承后的特点—成员方法"></a>3.6 继承后的特点—成员方法</h2><p>当类之间产生了关系，其中各类中的成员方法，又产生了哪些影响呢？</p><h3 id="3-6-1-成员方法不重名"><a href="#3-6-1-成员方法不重名" class="headerlink" title="3.6.1 成员方法不重名"></a>3.6.1 成员方法不重名</h3><p>如果子类父类中出现<strong>不重名</strong>的成员方法，这时的调用是<strong>没有影响的</strong>。对象调用方法时，会先在子类中查找有没有对应的方法，若子类中存在就会执行子类中的方法，若子类中不存在就会执行父类中相应的方法。代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu类中的show方法执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi类中的show2方法执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">     <span class="comment">//子类中没有show方法，但是可以找到父类方法去执行</span></span><br><span class="line">z.show(); </span><br><span class="line">z.show2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-2-成员方法重名"><a href="#3-6-2-成员方法重名" class="headerlink" title="3.6.2 成员方法重名"></a>3.6.2 成员方法重名</h3><p>如果子类父类中出现<strong>重名</strong>的成员方法，则创建子类对象调用该方法的时候，&#x3D;&#x3D;子类对象会优先调用自己的方法。&#x3D;&#x3D;</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu show&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">//子类重写了父类的show方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi show&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsDemo05</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">     <span class="comment">// 子类中有show方法，只执行重写后的show方法</span></span><br><span class="line">z.show();  <span class="comment">// Zi show</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-方法重写"><a href="#3-7-方法重写" class="headerlink" title="3.7 方法重写"></a>3.7 方法重写</h2><h3 id="3-7-1-概念"><a href="#3-7-1-概念" class="headerlink" title="3.7.1 概念"></a>3.7.1 概念</h3><blockquote><p><strong>方法重写</strong> ：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。<strong>声明不变，重新实现</strong>。</p></blockquote><h3 id="3-7-2-使用场景与案例"><a href="#3-7-2-使用场景与案例" class="headerlink" title="3.7.2 使用场景与案例"></a>3.7.2 使用场景与案例</h3><blockquote><p>发生在子父类之间的关系。<br>子类继承了父类的方法，但是&#x3D;&#x3D;<strong>子类觉得父类的这方法不足以满足自己的需求</strong>&#x3D;&#x3D;，子类重新写了一个与父类同名的方法，以便覆盖父类的该方 法。</p></blockquote><p>例如：我们定义了一个动物类代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物跑的很快！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物都可以叫~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个猫类，猫可能认为父类cry()方法不能满足自己的需求</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们一起学猫叫，喵喵喵！喵的非常好听！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line">      <span class="type">Cat</span> <span class="variable">ddm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>()；</span><br><span class="line">        <span class="comment">// 调用父类继承而来的方法</span></span><br><span class="line">        ddm.run();</span><br><span class="line">      <span class="comment">// 调用子类重写的方法</span></span><br><span class="line">      ddm.cry();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-2-Override重写注解"><a href="#3-7-2-Override重写注解" class="headerlink" title="3.7.2 @Override重写注解"></a>3.7.2 @Override重写注解</h3><blockquote><ul><li><p>@Override:注解，重写注解校验！</p></li><li><p>&#x3D;&#x3D;这个注解标记的方法，就说明这个方法必须是重写父类的方法，否则编译阶段报错&#x3D;&#x3D;。</p></li><li><p>建议重写都加上这个注解，一方面可以提高代码的可读性，一方面可以防止重写出错！</p></li></ul></blockquote><p>加上后的子类代码形式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">     <span class="comment">// 声明不变，重新实现</span></span><br><span class="line">    <span class="comment">// 方法名称与父类全部一样，只是方法体中的功能重写写了！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们一起学猫叫，喵喵喵！喵的非常好听！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-3-注意事项"><a href="#3-7-3-注意事项" class="headerlink" title="3.7.3 &#x3D;&#x3D;注意事项&#x3D;&#x3D;"></a>3.7.3 &#x3D;&#x3D;注意事项&#x3D;&#x3D;</h3><ol><li>&#x3D;&#x3D;方法重写是发生在子父类之间的关系。&#x3D;&#x3D;</li><li>&#x3D;&#x3D;子类方法覆盖父类方法，**<a href="#%E6%9D%83%E9%99%90">必须要保证权限大于等于父类权限</a>**。&#x3D;&#x3D;</li><li>&#x3D;&#x3D;子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。&#x3D;&#x3D;</li></ol><h2 id="3-8-继承后的特点—构造方法"><a href="#3-8-继承后的特点—构造方法" class="headerlink" title="3.8 继承后的特点—构造方法"></a>3.8 继承后的特点—构造方法</h2><h3 id="3-8-1-引入"><a href="#3-8-1-引入" class="headerlink" title="3.8.1 引入"></a>3.8.1 引入</h3><p>当类之间产生了关系，其中各类中的构造方法，又产生了哪些影响呢？<br>首先我们要回忆两个事情，构造方法的定义格式和作用。</p><ol><li><p>&#x3D;&#x3D;<strong>构造方法的名字是与类名一致的。</strong>所以子类是无法继承父类构造方法的。&#x3D;&#x3D;</p></li><li><blockquote><p><strong>构造方法的作用是初始化对象成员变量数据的</strong>。</p><p>所以子类的初始化过程中，必须先执行父类的初始化动作。</p><p>子类的构造方法中默认有一个<code>super()</code> ，表示调用父类的构造方法</p><p>父类成员变量初始化后，才可以给子类使用。（<strong>先有爸爸，才能有儿子</strong>）</p></blockquote></li></ol><hr><p>&#x3D;&#x3D;<strong>继承后子类构方法器特点:子类所有构造方法的第一行都会默认先调用<em>父类的无参构造方法</em></strong>&#x3D;&#x3D;**</p><hr><h3 id="3-8-2-案例"><a href="#3-8-2-案例" class="headerlink" title="3.8.2 案例"></a>3.8.2 案例</h3><p>按如下需求定义类:</p><ol><li>人类<br>成员变量: 姓名,年龄<br>成员方法: 吃饭</li><li>学生类<br>成员变量: 姓名,年龄,成绩<br>成员方法: 吃饭</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="comment">//super();  // 调用父类无参,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99.9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">父类无参</span><br><span class="line">子类无参</span><br><span class="line">----------</span><br><span class="line">父类无参</span><br><span class="line">子类有参</span><br></pre></td></tr></table></figure><h3 id="3-8-3-小结"><a href="#3-8-3-小结" class="headerlink" title="3.8.3 小结"></a>3.8.3 小结</h3><ul><li>&#x3D;&#x3D;子类构造方法执行的时候，都会在第一行默认先调用父类无参数构造方法一次。&#x3D;&#x3D;</li><li>子类构造方法的第一行都隐含了一个**super()<strong>去调用父类无参数构造方法，</strong>super()**可以省略不写。</li></ul><h2 id="3-9-super-…-和this-…"><a href="#3-9-super-…-和this-…" class="headerlink" title="3.9 super(…)和this(…)"></a>3.9 super(…)和this(…)</h2><h3 id="3-9-1-引入"><a href="#3-9-1-引入" class="headerlink" title="3.9.1  引入"></a>3.9.1  引入</h3><p>请看上节中的如下案例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="comment">//super();  // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用子类有参数构造方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99.9</span>);</span><br><span class="line">        System.out.println(s2.getScore()); <span class="comment">// 99.9</span></span><br><span class="line">        System.out.println(s2.getName()); <span class="comment">// 输出 null</span></span><br><span class="line">        System.out.println(s2.getAge()); <span class="comment">// 输出 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>发现，<strong>子类有参数构造方法只是初始化了自己对象中的成员变量score</strong></p><p>而父类中的成员变量name和age依然是没有数据的，怎么解决这个问题呢?</p><p>&#x3D;&#x3D;借助与super(…)去调用父类构造方法，以便初始化继承自父类对象的name和age.&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name ， <span class="type">int</span> age，<span class="type">double</span> score)</span> &#123;</span><br><span class="line">   <span class="built_in">super</span>(name ,age);<span class="comment">// 调用父类有参构造方法Person(String name , int age)初始化name和age</span></span><br><span class="line">   <span class="built_in">this</span>.score = score;    </span><br><span class="line">   System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样才能完美的初始化子类的所有成员变量，包括从父亲那里继承的</p></blockquote><h3 id="3-9-2-super和this的用法格式"><a href="#3-9-2-super和this的用法格式" class="headerlink" title="3.9.2 super和this的用法格式"></a>3.9.2 super和this的用法格式</h3><p>super和this完整的用法如下，其中this，super访问成员我们已经接触过了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.成员变量    --    本类的</span><br><span class="line"><span class="built_in">super</span>.成员变量    --    父类的</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.成员方法名()  --    本类的    </span><br><span class="line"><span class="built_in">super</span>.成员方法名()   --    父类的</span><br></pre></td></tr></table></figure><p>接下来我们使用调用构造方法格式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">super</span>(...) -- 调用父类的构造方法，根据参数匹配确认</span><br><span class="line"><span class="built_in">this</span>(...) -- 调用本类的其他构造方法，根据参数匹配确认</span><br></pre></td></tr></table></figure><h3 id="3-9-3-super-…-用法演示"><a href="#3-9-3-super-…-用法演示" class="headerlink" title="3.9.3 super(….)用法演示"></a>3.9.3 super(….)用法演示</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span><span class="string">&quot;凤姐&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name , <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">        <span class="built_in">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name ， <span class="type">int</span> age，<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name ,age);<span class="comment">// 调用父类有参构造方法Person(String name , int age)初始化name和age</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用子类有参数构造方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>，<span class="number">20</span>，<span class="number">99</span>);</span><br><span class="line">        System.out.println(s2.getScore()); <span class="comment">// 99</span></span><br><span class="line">        System.out.println(s2.getName()); <span class="comment">// 输出 张三</span></span><br><span class="line">        System.out.println(s2.getAge()); <span class="comment">// 输出 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong>子类的每个构造方法中均有默认的super()，调用父类的空参构造。&#x3D;&#x3D;手动调用父类构造会覆盖默认的super()。&#x3D;&#x3D;</strong></p><p><strong>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</strong></p><p>super(..)是根据参数去确定调用父类哪个构造方法的。</p><h3 id="3-9-4-super-…-案例图解"><a href="#3-9-4-super-…-案例图解" class="headerlink" title="3.9.4 super(…)案例图解"></a>3.9.4 super(…)案例图解</h3><p><strong>父类空间优先于子类对象产生</strong></p><p>在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。目的在于子类对象中包含了其对应的父类空间，便可以包含其父类的成员，如果父类成员非private修饰，则子类可以随意使用父类成员。代码体现在子类的构造七调用时，一定先调用父类的构造方法。理解图解如下：</p><img src="/xu-runbo/post/cd36ea51/2-170124144611813.jpg" class=""><h3 id="3-9-5-this-…-用法演示"><a href="#3-9-5-this-…-用法演示" class="headerlink" title="3.9.5 this(…)用法演示"></a>3.9.5 this(…)用法演示</h3><p>this(…)</p><ul><li>&#x3D;&#x3D;默认是去找本类中的其他构造方法&#x3D;&#x3D;，根据参数来确定具体调用哪一个构造方法。</li><li>为了借用其他构造方法的功能。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima._08this和<span class="built_in">super</span>调用构造方法;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this(...):</span></span><br><span class="line"><span class="comment"> *    默认是去找本类中的其他构造方法，根据参数来确定具体调用哪一个构造方法。</span></span><br><span class="line"><span class="comment"> *    为了借用其他构造方法的功能。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">xuGan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(xuGan.getName()); <span class="comment">// 输出:徐干</span></span><br><span class="line">        System.out.println(xuGan.getAge());<span class="comment">// 输出:21</span></span><br><span class="line">        System.out.println(xuGan.getSex());<span class="comment">// 输出： 男</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 很弱，我的兄弟很牛逼啊，我可以调用其他构造方法：Student(String name, int age, char sex)</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;徐干&quot;</span>,<span class="number">21</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">        <span class="built_in">this</span>.age = age   ;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex   ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-6-小结"><a href="#3-9-6-小结" class="headerlink" title="3.9.6 小结"></a>3.9.6 小结</h3><ul><li><strong>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</strong></li><li><strong>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</strong></li><li><strong>super(..)和this(…)是根据参数去确定调用父类哪个构造方法的。</strong></li><li>super(..)可以调用父类构造方法初始化继承自父类的成员变量的数据。</li><li>this(..)可以调用本类中的其他构造方法。</li></ul><blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;父类的无参构造&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;Parent class parameterized constructor with value: &quot;</span> + value);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">     Child c=<span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">     Child c1=<span class="keyword">new</span> <span class="title class_">Child</span>(<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="built_in">super</span>(); <span class="comment">// 默认调用父类的无参构造方法</span></span><br><span class="line">     System.out.println(<span class="string">&quot;子类的无参构造&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>(); <span class="comment">// 调用本类的无参构造方法，间接调用了父类的无参构造方法</span></span><br><span class="line">     System.out.println(<span class="string">&quot;子类的value: &quot;</span> + value);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//父类的无参构造</span></span><br><span class="line"><span class="comment">//子类的无参构造</span></span><br><span class="line"><span class="comment">//-----------</span></span><br><span class="line"><span class="comment">//父类的无参构造</span></span><br><span class="line"><span class="comment">//子类的无参构造</span></span><br><span class="line"><span class="comment">//子类的value: 1</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="3-10-继承的特点"><a href="#3-10-继承的特点" class="headerlink" title="3.10 继承的特点"></a>3.10 继承的特点</h2><ol><li>Java只支持单继承，不支持多继承。</li></ol>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个类只能有一个父类，不可以有多个父类。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125; <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// class C2 extends A, B &#123;&#125; // error</span></span><br></pre></td></tr></table></figure><ol start="2"><li>一个类可以有多个子类。</li></ol>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A可以有多个子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C2</span> <span class="keyword">extends</span>  <span class="title class_">A</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>可以多层继承。</li></ol>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">C1</span> &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>顶层父类是Object类。所有的类默认继承Object，作为父类。</p></blockquote><h2 id="测试案例："><a href="#测试案例：" class="headerlink" title="测试案例："></a>测试案例：</h2><p>会写一个继承结构下的标准Javabean即可</p><p>需求：</p><p>​猫：属性，姓名，年龄，颜色</p><p>​狗：属性，姓名，年龄，颜色，吼叫</p><p> 分享书写技巧：</p><p>​        1.在大脑中要区分谁是父，谁是子</p><p>​        2.把共性写到父类中，独有的东西写在子类中</p><p>​        3.开始编写标准Javabean（从上往下写）</p><p>​        4.在测试类中，创建对象并赋值调用</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">//姓名，年龄，颜色</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name, <span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//因为猫类中没有独有的属性。</span></span><br><span class="line">    <span class="comment">//所以此时不需要写私有的成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要带子类和父类中所有的属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name, <span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name,age,color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//Dog ：吼叫</span></span><br><span class="line">    <span class="keyword">private</span> String wang;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参构造：带子类加父类所有的属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age, String color,String wang)</span> &#123;</span><br><span class="line">        <span class="comment">//共性的属性交给父类赋值</span></span><br><span class="line">        <span class="built_in">super</span>(name,age,color);</span><br><span class="line">        <span class="comment">//独有的属性自己赋值</span></span><br><span class="line">        <span class="built_in">this</span>.wang = wang;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWang</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wang;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWang</span><span class="params">(String wang)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wang = wang;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Animal ： 姓名，年龄，颜色</span></span><br><span class="line">        <span class="comment">//Cat :</span></span><br><span class="line">        <span class="comment">//Dog ：吼叫</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建狗的对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>,<span class="number">2</span>,<span class="string">&quot;黑色&quot;</span>,<span class="string">&quot;嗷呜~~&quot;</span>);</span><br><span class="line">        System.out.println(d.getName()+<span class="string">&quot;, &quot;</span> + d.getAge() + <span class="string">&quot;, &quot;</span> + d.getColor() + <span class="string">&quot;, &quot;</span> + d.getWang());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建猫的对象</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;中华田园猫&quot;</span>,<span class="number">3</span>,<span class="string">&quot;黄色&quot;</span>);</span><br><span class="line">        System.out.println(c.getName() + <span class="string">&quot;, &quot;</span> + c.getAge() + <span class="string">&quot;, &quot;</span> + c.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="多态包final★★"><a href="#多态包final★★" class="headerlink" title="&#x3D;&#x3D;多态包final★★&#x3D;&#x3D;"></a>&#x3D;&#x3D;多态包final★★&#x3D;&#x3D;</h1><ul><li><p><input disabled="" type="checkbox"> 能够说出使用多态的前提条件</p></li><li><p><input disabled="" type="checkbox"> 理解多态的向上转型</p></li><li><p><input disabled="" type="checkbox"> 理解多态的向下转型</p></li><li><p><input disabled="" type="checkbox"> 能够知道多态的使用场景</p></li><li><p><input disabled="" type="checkbox"> 包的作用</p></li><li><p><input disabled="" type="checkbox"> public和private权限修饰符的作用</p></li><li><p><input disabled="" type="checkbox"> 描述final修饰的类的特点</p></li><li><p><input disabled="" type="checkbox"> 描述final修饰的方法的特点</p></li><li><p><input disabled="" type="checkbox"> 描述final修饰的变量的特点</p></li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="最简单的用法"><a href="#最简单的用法" class="headerlink" title="最简单的用法"></a>最简单的用法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> soft1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.AnnotationMirror;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">        test(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line">        Animal a=<span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        System.out.println(a.name);</span><br><span class="line"><span class="comment">//        a.Eat();</span></span><br><span class="line">        <span class="comment">//编译的时候会看左边是否有这个成员方法，没有就报错，也就是现在是子类特有的时候</span></span><br><span class="line"></span><br><span class="line">        Dog b=(Dog)a;</span><br><span class="line">        b.Eat();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Animal a)</span></span><br><span class="line">    &#123;</span><br><span class="line">        a.Say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    String name=<span class="string">&quot;动物&quot;</span>;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">Say</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>  <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    String name=<span class="string">&quot;狗&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Say</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪汪&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">Eat</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃东西！Q&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    String name=<span class="string">&quot;猫&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Say</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喵喵喵&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-1-多态的形式"><a href="#1-1-多态的形式" class="headerlink" title="1.1 多态的形式"></a>1.1 多态的形式</h2><img src="/xu-runbo/post/cd36ea51/image-20231124204452286-170124144611812.png" class="" title="image-20231124204452286"> <blockquote><p>可以以一种&#x3D;&#x3D;<strong>通用的方式操作对象</strong>&#x3D;&#x3D;，而&#x3D;&#x3D;不需要关心对象的具体类型：&#x3D;&#x3D;</p><ol><li><p><strong>多态的概念</strong>：多态是指&#x3D;&#x3D;<strong>同样的方法调用可以在不同的对象上产生不同的行为</strong>&#x3D;&#x3D;。在Java中，多态性通过&#x3D;&#x3D;方法的重写&#x3D;&#x3D;和&#x3D;&#x3D;方法的重载&#x3D;&#x3D;来实现。</p></li><li><p><strong>继承与多态</strong>：&#x3D;&#x3D;多态是建立在继承关系之上&#x3D;&#x3D;。子类可以&#x3D;&#x3D;覆盖（重写）&#x3D;&#x3D;从父类继承而来的方法，当通过父类引用调用这些被子类重写的方法时，&#x3D;&#x3D;<strong>根据实际的子类类型会执行相应的重写方法。</strong>&#x3D;&#x3D;</p></li><li><p><strong>方法重写（Override）</strong>：子类可以提供一个&#x3D;&#x3D;<strong>与父类方法签名相同的方法</strong>&#x3D;&#x3D;，并且可以&#x3D;&#x3D;重新定义该方法的行为&#x3D;&#x3D;。当使用父类的引用调用被子类重写的方法时，将根据实际的对象类型执行相应的重写方法。</p></li><li><p><strong>动态绑定</strong>：Java中的多态是通过动态绑定实现的，也称为&#x3D;&#x3D;运行时多态&#x3D;&#x3D;。这意味着方法调用的具体实现是在运行时确定的，而不是在编译时确定的。</p></li><li><p><strong>抽象类和接口</strong>：抽象类和接口是实现多态的重要方式。&#x3D;&#x3D;<strong>抽象类和接口定义了规范</strong>&#x3D;&#x3D;，子类可以根据需要去实现这些规范，并且可以&#x3D;&#x3D;<strong>通过父类或接口类型引用子类对象</strong>&#x3D;&#x3D;，实现统一的对外接口。</p></li><li><p><strong>向上转型</strong>：可以使用&#x3D;&#x3D;父类类型的引用指向子类对象&#x3D;&#x3D;，这被称为向上转型。通过向上转型，可以在不关心具体子类类型的情况下，统一地对待各个子类对象，实现多态。</p></li></ol></blockquote><p><strong>多态是继封装、继承之后，面向对象的第三大特性。</strong></p><p><strong>多态是出现在继承或者实现关系中的</strong>。</p><p><strong>多态体现的格式</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类/实现类构造器;</span><br><span class="line">变量名.方法名();</span><br></pre></td></tr></table></figure><p><strong>多态的前提</strong>：有继承关系，子类对象是可以赋值给父类类型的变量。例如Animal是一个动物类型，而Cat是一个猫类型。Cat继承了Animal，Cat对象也是Animal类型，自然可以赋值给父类类型的变量。</p><h2 id="1-2-多态的使用场景"><a href="#1-2-多态的使用场景" class="headerlink" title="1.2 多态的使用场景"></a>1.2 多态的使用场景</h2><p>如果没有多态，在下图中register方法只能传递学生对象，其他的Teacher和administrator对象是无法传递给register方法方法的，在这种情况下，只能定义三个不同的register方法分别接收学生，老师和管理员。</p><p>有了多态之后，方法的形参就可以定义为共同的父类Person。</p><p><strong>要注意的是：</strong></p><ul><li>&#x3D;&#x3D;当一个方法的形参是一个类，我们可以传递<strong>这个类所有的子类对象。</strong>&#x3D;&#x3D;</li><li>&#x3D;&#x3D;当一个方法的形参是一个接口，我们可以传递这个接口<strong>所有的实现类对象</strong>（后面会学）。&#x3D;&#x3D;</li><li>而且多态还可以&#x3D;&#x3D;根据传递的不同对象来调用不同类中的方法。&#x3D;&#x3D;</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    空参构造</span><br><span class="line">    带全部参数的构造</span><br><span class="line">    get和set方法</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">1</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Administrator</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;管理员的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">2</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">3</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建三个对象，并调用register方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;王建国&quot;</span>);</span><br><span class="line">        t.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Administrator</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Administrator</span>();</span><br><span class="line">        admin.setName(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">        admin.setAge(<span class="number">35</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        register(s);</span><br><span class="line">        register(t);</span><br><span class="line">        register(admin);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个方法既能接收老师，又能接收学生，还能接收管理员</span></span><br><span class="line">    <span class="comment">//只能把参数写成这三个类型的父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">        p.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-多态的定义和前提"><a href="#1-3-多态的定义和前提" class="headerlink" title="1.3 多态的定义和前提"></a>1.3 多态的定义和前提</h2><p><strong>多态</strong>： &#x3D;&#x3D;是指同一行为，具有多个不同表现形式。&#x3D;&#x3D;</p><p>从上面案例可以看出，Cat和Dog都是动物，都是吃这一行为，但是出现的效果（表现形式）是不一样的。</p><p> <strong>前提【重点】</strong></p><ol><li><p>有继承或者实现关系</p></li><li><p>&#x3D;&#x3D;方法的重写【意义体现：不重写，无意义】&#x3D;&#x3D;</p></li><li><p>&#x3D;&#x3D;父类引用指向子类对象【格式体现】&#x3D;&#x3D;</p><blockquote><p>父类类型：指子类对象继承的&#x3D;&#x3D;父类类型&#x3D;&#x3D;，或者实现的&#x3D;&#x3D;父接口类型。&#x3D;&#x3D;</p></blockquote></li></ol><h2 id="1-4-多态的运行特点"><a href="#1-4-多态的运行特点" class="headerlink" title="1.4 多态的运行特点"></a>1.4 多态的运行特点</h2><img src="/xu-runbo/post/cd36ea51/image-20231124205912921-170124144611816.png" class="" title="image-20231124205912921"><blockquote><p><strong>调用成员变量时：编译看左边，运行看左边</strong></p><p>调用成员方法时：编译看左边，&#x3D;&#x3D;运行看右边&#x3D;&#x3D;</p></blockquote><p>代码示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>()；</span><br><span class="line"><span class="comment">//编译看左边的父类中有没有name这个属性，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，把父类name属性的值打印出来</span></span><br><span class="line">System.out.println(f.name);</span><br><span class="line"><span class="comment">//编译看左边的父类中有没有show这个方法，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，运行的是子类中的show方法</span></span><br><span class="line">f.show();</span><br></pre></td></tr></table></figure><h2 id="多态的内存解释"><a href="#多态的内存解释" class="headerlink" title="多态的内存解释"></a>多态的内存解释</h2><img src="/xu-runbo/post/cd36ea51/image-20231124213633072-170124144611817.png" class="" title="image-20231124213633072"> <h2 id="1-5-多态的弊端"><a href="#1-5-多态的弊端" class="headerlink" title="1.5 多态的弊端"></a>1.5 多态的弊端</h2><img src="/xu-runbo/post/cd36ea51/image-20231124215826563-170124144611818.png" class="" title="image-20231124215826563"> <p>我们已经知道多态&#x3D;&#x3D;编译阶段是看左边父类类型的&#x3D;&#x3D;，如果子类有些独有的功能，此时<strong>多态的写法就无法访问子类独有功能了</strong>。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>｛</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西！&quot;</span>)</span><br><span class="line">    ｝</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        a.eat();</span><br><span class="line">        a.catchMouse();<span class="comment">//编译报错，编译看左边，Animal没有这个方法</span></span><br><span class="line">        <span class="comment">//直接报错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;子类转换为父类，这是默认的也就是自动类型转换&#x3D;&#x3D;</p><p>&#x3D;&#x3D;但是父类想要转换为子类，也就是降级？那就得强制转换了。&#x3D;&#x3D;</p><h2 id="instanceof关键字"><a href="#instanceof关键字" class="headerlink" title="instanceof关键字"></a>instanceof关键字</h2><p><code>instanceof</code> 是 Java 中的一个关键字，用于检查一个对象是否是一个特定类的实例，或者是否是其子类的实例。它的语法是 <code>object instanceof Class</code>，其中 <code>object</code> 是要检查的对象，<code>Class</code> 是要检查的类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal a=<span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="comment">//如果这个对象运行时是Dog类，那么就强制转换为DOg并且变量设置为b</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog b)</span><br><span class="line">&#123;</span><br><span class="line">    b.Eat();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat c) &#123;</span><br><span class="line">    c.Sleep();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;转不了，会报错&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-引用类型转换"><a href="#1-6-引用类型转换" class="headerlink" title="1.6 引用类型转换"></a>1.6 引用类型转换</h2><h3 id="1-6-1-为什么要转型"><a href="#1-6-1-为什么要转型" class="headerlink" title="1.6.1 为什么要转型"></a>1.6.1 为什么要转型</h3><p><strong>多态的写法就无法访问子类独有功能了。</strong></p><p>&#x3D;&#x3D;当使用多态方式调用方法时，首先检查父类中是否有该方法&#x3D;&#x3D;如果没有，则编译错误。</p><p>也就是说，<strong>不能调用</strong>子类拥有，而父类没有的方法。</p><p>编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。</p><p>所以，想要调用子类特有的方法，必须做向下转型。</p><p>回顾基本数据类型转换</p><ul><li>自动转换: 范围小的赋值给范围大的.自动完成:double d &#x3D; 5; </li><li>强制转换: 范围大的赋值给范围小的,强制转换:int i &#x3D; (int)3.14</li></ul><p>​     多态的转型分为向上转型（自动转换）与向下转型（强制转换）两种。</p><h3 id="1-6-2-向上转型（自动转换）"><a href="#1-6-2-向上转型（自动转换）" class="headerlink" title="1.6.2 向上转型（自动转换）"></a>1.6.2 向上转型（自动转换）</h3><ul><li><strong>向上转型</strong>：多态本身是子类类型向父类类型向上转换（自动转换）的过程，这个过程是默认的。<br>当父类引用指向一个子类对象时，便是向上转型。<br>使用格式：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类类型  变量名 = <span class="keyword">new</span> 子类类型();</span><br><span class="line">如：<span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><p><strong>原因是：父类类型相对与子类来说是大范围的类型，Animal是动物类，是父类类型。Cat是猫类，是子类类型。Animal类型的范围当然很大，包含一切动物。</strong>所以子类范围小可以直接自动转型给父类类型的变量。</p><h3 id="1-6-向下转型-（强制转换）"><a href="#1-6-向下转型-（强制转换）" class="headerlink" title="1.6&#x3D;&#x3D;向下转型&#x3D;&#x3D;（强制转换）"></a>1.6&#x3D;&#x3D;向下转型&#x3D;&#x3D;（强制转换）</h3><ul><li><strong>向下转型</strong>：父类类型向子类类型向下转换的过程，这个过程是强制的。<br>一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。</li></ul><p>使用格式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">子类类型 变量名 = (子类类型) 父类变量名;</span><br><span class="line">如:<span class="type">Aniaml</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">   <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span>(Cat) a;  </span><br></pre></td></tr></table></figure><h3 id="1-6-4-案例演示"><a href="#1-6-4-案例演示" class="headerlink" title="1.6.4 案例演示"></a>1.6.4 案例演示</h3><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，<strong>不能调用</strong>子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做向下转型。</p><p>转型演示，代码如下：</p><p>定义类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchHouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;看家&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat(); <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">        c.catchMouse(); <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-5-转型的异常"><a href="#1-6-5-转型的异常" class="headerlink" title="1.6.5 转型的异常"></a>1.6.5 转型的异常</h3><p>转型的过程中，一不小心就会遇到这样的问题</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">        d.watchHouse();        <span class="comment">// 调用的是 Dog 的 watchHouse 【运行报错】</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码可以通过编译，但是运行时，却报出了 <code>ClassCastException</code> ，类型转换异常！这是因为，明明创建了Cat类型对象，运行时，当然不能转换成Dog对象的。</p><h3 id="1-6-6-instanceof关键字"><a href="#1-6-6-instanceof关键字" class="headerlink" title="1.6.6 instanceof关键字"></a>1.6.6 instanceof关键字</h3><p>为了避免ClassCastException的发生，Java提供了 <code>instanceof</code> 关键字，给引用变量做类型的校验，格式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">变量名 <span class="keyword">instanceof</span> 数据类型 </span><br><span class="line">如果变量属于该数据类型或者其子类类型，返回<span class="literal">true</span>。</span><br><span class="line">如果变量不属于该数据类型或者其子类类型，返回<span class="literal">false</span>。</span><br></pre></td></tr></table></figure><p>所以，转换前，我们最好先做一个判断，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">            c.catchMouse();        <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">            d.watchHouse();       <span class="comment">// 调用的是 Dog 的 watchHouse</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-7-instanceof新特性"><a href="#1-6-7-instanceof新特性" class="headerlink" title="1.6.7 instanceof新特性"></a>1.6.7 instanceof新特性</h3><p>JDK14的时候提出了新特性，把判断和强转合并成了一行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新特性</span></span><br><span class="line"><span class="comment">//先判断a是否为Dog类型，如果是，则强转成Dog类型，转换之后变量名为d</span></span><br><span class="line"><span class="comment">//如果不是，则不强转，结果直接是false</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;</span><br><span class="line">    d.lookHome();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;</span><br><span class="line">    c.catchMouse();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-综合练习"><a href="#1-7-综合练习" class="headerlink" title="1.7 综合练习"></a>1.7 综合练习</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">需求：根据需求完成代码:</span><br><span class="line"><span class="number">1.</span>定义狗类</span><br><span class="line">属性：</span><br><span class="line">年龄，颜色</span><br><span class="line">行为:</span><br><span class="line">eat(String something)(something表示吃的东西)</span><br><span class="line">看家lookHome方法(无参数)</span><br><span class="line"><span class="number">2.</span>定义猫类</span><br><span class="line">属性：</span><br><span class="line">年龄，颜色</span><br><span class="line">行为:</span><br><span class="line">eat(String something)方法(something表示吃的东西)</span><br><span class="line">逮老鼠catchMouse方法(无参数)</span><br><span class="line"><span class="number">3.</span>定义Person类<span class="comment">//饲养员</span></span><br><span class="line">属性：</span><br><span class="line">姓名，年龄</span><br><span class="line">行为：</span><br><span class="line">keepPet(Dog dog,String something)方法</span><br><span class="line">功能：喂养宠物狗，something表示喂养的东西</span><br><span class="line">行为：</span><br><span class="line">keepPet(Cat cat,String something)方法</span><br><span class="line">功能：喂养宠物猫，something表示喂养的东西</span><br><span class="line">生成空参有参构造，set和get方法  </span><br><span class="line"><span class="number">4.</span>定义测试类(完成以下打印效果):</span><br><span class="line">keepPet(Dog dog,String somethind)方法打印内容如下：</span><br><span class="line">年龄为<span class="number">30</span>岁的老王养了一只黑颜色的<span class="number">2</span>岁的狗</span><br><span class="line"><span class="number">2</span>岁的黑颜色的狗两只前腿死死的抱住骨头猛吃</span><br><span class="line">keepPet(Cat cat,String somethind)方法打印内容如下：</span><br><span class="line">年龄为<span class="number">25</span>岁的老李养了一只灰颜色的<span class="number">3</span>岁的猫</span><br><span class="line"><span class="number">3</span>岁的灰颜色的猫眯着眼睛侧着头吃鱼</span><br><span class="line"><span class="number">5.</span>思考：</span><br><span class="line"><span class="number">1.</span>Dog和Cat都是Animal的子类，以上案例中针对不同的动物，定义了不同的keepPet方法，过于繁琐，能否简化，并体会简化后的好处？</span><br><span class="line"><span class="number">2.</span>Dog和Cat虽然都是Animal的子类，但是都有其特有方法，能否想办法在keepPet中调用特有方法？</span><br></pre></td></tr></table></figure><p>画图分析：</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动物类（父类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物在吃&quot;</span> + something);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//猫类（子类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(age, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span> &#123;</span><br><span class="line">        System.out.println(getAge() + <span class="string">&quot;岁的&quot;</span> + getColor() + <span class="string">&quot;颜色的猫眯着眼睛侧着头吃&quot;</span> + something);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//狗类（子类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(age, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为</span></span><br><span class="line">    <span class="comment">//eat(String something)(something表示吃的东西)</span></span><br><span class="line">    <span class="comment">//看家lookHome方法(无参数)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span> &#123;</span><br><span class="line">        System.out.println(getAge() + <span class="string">&quot;岁的&quot;</span> + getColor() + <span class="string">&quot;颜色的狗两只前腿死死的抱住&quot;</span> + something + <span class="string">&quot;猛吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookHome</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗在看家&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//饲养员类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//饲养狗</span></span><br><span class="line">   <span class="comment">/* public void keepPet(Dog dog, String something) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;年龄为&quot; + age + &quot;岁的&quot; + name + &quot;养了一只&quot; + dog.getColor() + &quot;颜色的&quot; + dog.getAge() + &quot;岁的狗&quot;);</span></span><br><span class="line"><span class="comment">        dog.eat(something);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //饲养猫</span></span><br><span class="line"><span class="comment">    public void keepPet(Cat cat, String something) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;年龄为&quot; + age + &quot;岁的&quot; + name + &quot;养了一只&quot; + cat.getColor() + &quot;颜色的&quot; + cat.getAge() + &quot;岁的猫&quot;);</span></span><br><span class="line"><span class="comment">        cat.eat(something);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//想要一个方法，能接收所有的动物，包括猫，包括狗</span></span><br><span class="line">    <span class="comment">//方法的形参：可以写这些类的父类 Animal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keepPet</span><span class="params">(Animal a, String something)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;养了一只&quot;</span> + a.getColor() + <span class="string">&quot;颜色的&quot;</span> + a.getAge() + <span class="string">&quot;岁的狗&quot;</span>);</span><br><span class="line">            d.eat(something);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;养了一只&quot;</span> + c.getColor() + <span class="string">&quot;颜色的&quot;</span> + c.getAge() + <span class="string">&quot;岁的猫&quot;</span>);</span><br><span class="line">            c.eat(something);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这种动物&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象并调用方法</span></span><br><span class="line">       <span class="comment">/* Person p1 = new Person(&quot;老王&quot;,30);</span></span><br><span class="line"><span class="comment">        Dog d = new Dog(2,&quot;黑&quot;);</span></span><br><span class="line"><span class="comment">        p1.keepPet(d,&quot;骨头&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Person p2 = new Person(&quot;老李&quot;,25);</span></span><br><span class="line"><span class="comment">        Cat c = new Cat(3,&quot;灰&quot;);</span></span><br><span class="line"><span class="comment">        p2.keepPet(c,&quot;鱼&quot;);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建饲养员的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;老王&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">2</span>,<span class="string">&quot;黑&quot;</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="number">3</span>,<span class="string">&quot;灰&quot;</span>);</span><br><span class="line">        p.keepPet(d,<span class="string">&quot;骨头&quot;</span>);</span><br><span class="line">        p.keepPet(c,<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>a instanceof B</p><p>如果a实际是B类</p></blockquote><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="包的概念"><a href="#包的概念" class="headerlink" title="包的概念"></a>包的概念</h2><blockquote><p>包（Package）是Java中用于组织和管理类的一种机制，它有助于将类分组、避免命名冲突，并提供了一种访问控制的手段。</p><ol><li><p><strong>定义包：</strong> 在Java中，使用 <code>package</code> 关键字来定义一个包。包的定义通常放在源文件的开头，位于 <code>package</code> 关键字后面。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;这个类就属于 <code>com.example.myapp</code> 这个包。&#x3D;&#x3D;</p></li><li><p><strong>包的命名规范：</strong> &#x3D;&#x3D;包名通常使用小写字母，多个单词可以使用点（<code>.</code>）分隔&#x3D;&#x3D;。</p><p>按照惯例，&#x3D;&#x3D;<strong>包名是反域名</strong>（reverse domain name）的形式，确保全球唯一性&#x3D;&#x3D;。例如，<code>com.example</code> 是一个常见的包名前缀。</p></li><li><p><strong>包的导入：</strong> 在Java中，使用 <code>import</code> 语句来导入其他包中的类，以便在当前类中使用这些类。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 使用 java.util 包中的 ArrayList 和 List 类</span></span><br><span class="line">    List&lt;String&gt; myList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>类路径（Classpath）：</strong> 在运行Java程序时，&#x3D;&#x3D;<strong>Java虚拟机（JVM）需要知道在哪里找到编译后的字节码文件</strong>&#x3D;&#x3D;。类路径是一个包含类文件的目录路径或JAR文件的路径列表。包名和类路径结合，可以确保正确加载和运行类。</p></li><li><p><strong>默认包：</strong>&#x3D;&#x3D;如果一个类没有指定所属的包，它就属于默认包&#x3D;&#x3D;但是最好的做法是将每个类都放在一个明确定义的包中，以避免命名冲突和提高代码的可维护性。</p></li><li><p><strong>访问修饰符：</strong> 包也是Java中访问控制的一部分。类、变量和方法可以使用 <code>public</code>、<code>protected</code>、<code>default</code>（包级别的访问）和 <code>private</code> 这些访问修饰符来限定对它们的访问权限。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapp;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> publicVar;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> protectedVar;</span><br><span class="line">    <span class="type">int</span> defaultVar; <span class="comment">// 包级别的访问权限</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> privateVar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h2 id="2-1-包"><a href="#2-1-包" class="headerlink" title="2.1 包"></a>2.1 包</h2><p>​包在操作系统中其实就是一个&#x3D;&#x3D;文件夹&#x3D;&#x3D;。<strong>包是用来分门别类的管理技术，不同的技术类放在不同的包下</strong>，方便管理和维护。</p><p>在IDEA项目中，建包的操作如下：</p><img src="/xu-runbo/post/cd36ea51/aaa-170124144611820.jpg" class=""><p><strong>包名的命名规范</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">路径名.路径名.xxx.xxx</span><br><span class="line"><span class="comment">// 例如：com.itheima.oa</span></span><br></pre></td></tr></table></figure><ul><li>包名一般是公司域名的倒写。例如：黑马是<a href="http://www.itheima.com,包名就可以定义成com.itheima.技术名称./">www.itheima.com,包名就可以定义成com.itheima.技术名称。</a></li><li>包名必须用”.“连接。</li><li>包名的每个路径名必须是一个合法的标识符，而且不能是Java的关键字。</li></ul><h2 id="2-2-导包"><a href="#2-2-导包" class="headerlink" title="2.2 导包"></a>2.2 导包</h2><p>什么时候需要导包？</p><p>​情况一：在使用Java中提供的非核心包中的类时</p><p>​情况二：使用自己写的其他包中的类时</p><p>什么时候不需要导包？</p><p>​情况一：在使用Java核心包（java.lang）中的类时</p><p>​情况二：在使用自己写的同一个包中的类时</p><h2 id="2-3-使用不同包下的相同类怎么办？、"><a href="#2-3-使用不同包下的相同类怎么办？、" class="headerlink" title="2.3 使用不同包下的相同类怎么办？、"></a>2.3 使用不同包下的相同类怎么办？、</h2><p>&#x3D;&#x3D;使用完整的导包&#x3D;&#x3D;</p><ol><li><p><strong>使用完整的类名：</strong> 可以使用完整的类名（包括包名）来引用相同类。这样，即使存在相同类名，由于包名不同，不会发生冲突。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 com.example.package1 包下的类</span></span><br><span class="line"><span class="keyword">package</span> com.example.package1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在 com.example.package2 包下的类</span></span><br><span class="line"><span class="keyword">package</span> com.example.package2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在其他类中使用这两个类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.package1.MyClass;</span><br><span class="line"><span class="keyword">import</span> com.example.package2.MyClass as MyClass2; <span class="comment">// 使用 as 关键字重命名，避免类名冲突</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnotherClass</span> &#123;</span><br><span class="line">    <span class="type">MyClass</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">    com.example.package2.<span class="type">MyClass</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.example</span><br></pre></td></tr></table></figure></li></ol><h1 id="权限修饰符-1"><a href="#权限修饰符-1" class="headerlink" title="权限修饰符"></a>权限修饰符</h1><h2 id="3-1-权限修饰符"><a href="#3-1-权限修饰符" class="headerlink" title="3.1 权限修饰符"></a>3.1 权限修饰符</h2><p>访问权限修饰符是按照从最大权限到最小权限的顺序排列的。下面是权限从高到低的顺序：</p><ol><li><p><strong>public：</strong></p><ul><li>公共访问级别，对所有类都是可见的。</li></ul></li><li><p><strong>protected：</strong></p><ul><li>受保护访问级别，对同一包内的类和所有子类可见。</li></ul></li><li><p><strong>默认（包级别，默认级别）：</strong></p><ul><li>如果没有指定任何访问修饰符，默认为包级别，对同一包内的类可见。</li></ul></li><li><p><strong>private：</strong></p><ul><li>私有访问级别，仅对同一类可见。</li><li><code>public &gt; protected &gt; 默认 &gt; private</code></li></ul></li></ol><ul><li>&#x3D;&#x3D;protect扩大了private的权限，但是又不能达到public的权利&#x3D;&#x3D;</li></ul><h2 id="3-2-不同权限的访问能力"><a href="#3-2-不同权限的访问能力" class="headerlink" title="3.2 不同权限的访问能力"></a>3.2 不同权限的访问能力</h2><table><thead><tr><th></th><th>public</th><th>protected</th><th>默认</th><th>private</th></tr></thead><tbody><tr><td>同一类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一包中的类</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>不同包的子类</td><td>√</td><td>&#x3D;&#x3D;√&#x3D;&#x3D;</td><td></td><td></td></tr><tr><td>不同包中的无关类</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><p>可见，public具有最大权限。private则是最小权限。</p><p>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p><ul><li>成员变量使用<code>private</code> ，隐藏细节。</li><li>构造方法使用<code> public</code> ，方便创建对象。</li><li>成员方法使用<code>public</code> ，方便调用方法。</li></ul><blockquote><p>小贴士：不加权限修饰符，就是默认权限</p></blockquote><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>​学习了继承后，我们知道，子类可以在父类的基础上改写父类内容，比如，方法重写。</p><p>如果有一个方法我&#x3D;&#x3D;不想别人去改写里面内容，该怎么办呢？&#x3D;&#x3D;</p><p>Java提供了<code>final</code> 关键字，表示修饰的内容不可变。const</p><ul><li><p><strong>final</strong>：  &#x3D;&#x3D;不可改变，最终的含义。可以用于修饰类、方法和变量。&#x3D;&#x3D;</p><blockquote><ul><li>类：被修饰的类，不能被继承,因为一旦有后代就会不符合最终的含义了.</li><li>方法：被修饰的方法，不能被重写。</li><li>变量：被修饰的变量，有且仅能被赋值一次。不能被i修改，，</li></ul></blockquote></li></ul><h2 id="4-2-使用方式"><a href="#4-2-使用方式" class="headerlink" title="4.2 使用方式"></a>4.2 使用方式</h2><h3 id="4-2-1-修饰类"><a href="#4-2-1-修饰类" class="headerlink" title="4.2.1 修饰类"></a>4.2.1 修饰类</h3><p>&#x3D;&#x3D;final修饰的类，不能被继承。&#x3D;&#x3D;</p><blockquote><p>关键字”final”通常&#x3D;&#x3D;放在修饰符（如public、private等）之后&#x3D;&#x3D;，用于声明一个不可继承的类、不可修改的方法或不可变的变量。</p><p>都行啊</p></blockquote><p>格式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> class 类名 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;<span class="comment">//直接红下划线</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// class Zi extends Fu &#123;&#125; // 报错,不能继承final的类</span></span><br></pre></td></tr></table></figure><p>查询API发现像 <code>public final class String</code> 、<code>public final class Math</code> 、<code>public final class Scanner</code> 等，很多我们学习过的类，都是被final修饰的，目的就是供我们使用，而不让我们所以改变其内容。</p><h3 id="4-2-2-修饰方法"><a href="#4-2-2-修饰方法" class="headerlink" title="4.2.2 修饰方法"></a>4.2.2 修饰方法</h3><p>final修饰的方法，不能被重写。<br>格式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码: </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu2</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu2 show1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu2 show2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi2</span> <span class="keyword">extends</span> <span class="title class_">Fu2</span> &#123;</span><br><span class="line"><span class="comment">//@Override</span></span><br><span class="line"><span class="comment">//public void show1() &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;Zi2 show1&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi2 show2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/cd36ea51/image-20231125165759409-170124144611821.png" class="" title="image-20231125165759409"> <h3 id="4-2-3-修饰变量-局部变量"><a href="#4-2-3-修饰变量-局部变量" class="headerlink" title="4.2.3 修饰变量-局部变量"></a>4.2.3 修饰变量-局部变量</h3><ol><li><strong>局部变量——基本类型</strong><br>基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。代码如下：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明变量，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> a;</span><br><span class="line">        <span class="comment">// 第一次赋值 </span></span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        a = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明变量，直接赋值，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        b = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考，下面两种写法，哪种可以通过编译？</p><p>写法1：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    c = i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 <code>final</code> 的定义，写法1报错！写法2，为什么通过编译呢？因为每次循环，都是一次新的变量c。这也是大家需要注意的地方。</p><h3 id="4-2-4-修饰变量-成员变量"><a href="#4-2-4-修饰变量-成员变量" class="headerlink" title="4.2.4 修饰变量-成员变量"></a>4.2.4 修饰变量-成员变量</h3><p>&#x3D;&#x3D;成员变量涉及到初始化的问题，初始化方式有显示初始化和构造方法初始化，只能选择其中一个：&#x3D;&#x3D;</p><ul><li>显示初始化(在定义成员变量的时候立马赋值)（常用）；</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>构造方法初始化(在构造方法中赋值一次)（不常用，了解即可）。</p></li><li><img src="java1-0/image-20231125170144515-170124144611822.png" alt="image-20231125170144515" style="zoom:50%;" /> <p><strong>注意：每个构造方法中都要赋值一次！</strong></p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//     this.num2 = 20;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//     this.num2 = 20;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>被final修饰的常量名称，一般都有书写规范，所有字母都<strong>大写</strong>。</p></blockquote><h2 id="final关键字总结"><a href="#final关键字总结" class="headerlink" title="final关键字总结"></a>final关键字总结</h2><blockquote><p><code>final</code> 是Java中的关键字，它可以用于修饰类、方法、变量等，表示不可改变的。</p><ol><li><p><strong>final 修饰变量：</strong> 使用 <code>final</code> 修饰的变量表示常量，一旦赋值后不可再修改。</p><p>&#x3D;&#x3D;常量通常使用大写字母命名，多个单词用下划线分隔。&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_VALUE</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>final 修饰方法：</strong> 使用 <code>final</code> 修饰的方法表示该方法不可被子类重写（覆盖）。</p><p>子类无法改变 <code>final</code> 方法的实现。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">finalMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// final方法的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 无法重写 finalMethod</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>final 修饰类：</strong> 使用 <code>final</code> 修饰的类表示该类不可被继承。</p><p>不能有其他类继承这个被 <code>final</code> 修饰的类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FinalClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法继承 FinalClass</span></span><br><span class="line"><span class="comment">// public class ChildClass extends FinalClass &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>final 修饰成员变量：</strong> 对于非基本数据类型的成员变量（即引用类型），<code>final</code> 表示该引用不可变</p><p>也就是mylist这辈子就指定<code>new ArrayList&lt;&gt;()</code>了</p><p>但是对象的状态（属性）是可以改变的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;String&gt; myList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，<code>myList</code> 引用不能再指向其他 <code>List</code> 对象，但是 <code>myList</code> 中的元素可以被修改。</p></li><li><p><strong>final 参数：</strong> 在方法的参数中使用 <code>final</code> 修饰，表示该参数在方法中不可被修改。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="comment">// value 不可被修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>final 关键字的性能优化：</strong> 在某些情况下，<code>final</code> 修饰的变量对于编译器来说是一个常量，可以进行一些优化，例如内联。这有助于提高代码的执行效率。</p></li></ol><p><code>final</code> 关键字用于表示不可变性，可以应用于变量、方法、类等。</p><p>使用 <code>final</code> 有助于提高代码的可读性、安全性，并且在一些情况下可以进行性能优化。</p></blockquote><h1 id="抽象类-接口-内部类★★★"><a href="#抽象类-接口-内部类★★★" class="headerlink" title="&#x3D;&#x3D;抽象类&amp;接口&amp;内部类★★★&#x3D;&#x3D;"></a>&#x3D;&#x3D;抽象类&amp;接口&amp;内部类★★★&#x3D;&#x3D;</h1><ul><li><input disabled="" type="checkbox"> 能够写出抽象类的格式</li><li><input disabled="" type="checkbox"> 能够写出抽象方法的格式</li><li><input disabled="" type="checkbox"> 能说出抽象类的应用场景</li><li><input disabled="" type="checkbox"> 写出定义接口的格式</li><li><input disabled="" type="checkbox"> 写出实现接口的格式</li><li><input disabled="" type="checkbox"> 说出接口中成员的特点</li><li><input disabled="" type="checkbox"> 能说出接口的应用场景</li><li><input disabled="" type="checkbox"> 能说出接口中为什么会出现带有方法体的方法</li><li><input disabled="" type="checkbox"> 能完成适配器设计模式</li></ul><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><blockquote><ol><li>抽象类（Abstract Class）：</li></ol><ul><li>抽象类是通过使用关键字<code>abstract</code>来定义的。</li><li>抽象类不能被实例化，&#x3D;&#x3D;只能作为父类被继承。&#x3D;&#x3D;</li><li>抽象方法没有具体的实现，需要子类进行实现。</li><li>子类继承抽象类时，必须实现抽象类中的所有抽象方法，除非子类也是抽象类。</li><li><img src="java1-0/image-20231125210047489-170124144611823.png" alt="image-20231125210047489" style="zoom:50%;" /></li></ul></blockquote><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><h3 id="1-1-1-抽象类引入"><a href="#1-1-1-抽象类引入" class="headerlink" title="1.1.1 抽象类引入"></a>1.1.1 抽象类引入</h3><p>​父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了(因为子类对象会调用自己重写的方法)。</p><p>换句话说，父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类只需要提供一个没有方法体的定义即可，具体实现交给子类自己去实现。</p><p>**我们把&#x3D;&#x3D;没有方法体的方法&#x3D;&#x3D;称为抽象方法。Java语法规定，&#x3D;&#x3D;包含抽象方法的类就是抽象类&#x3D;&#x3D;**。</p><p>&#x3D;&#x3D;或者简单的加上关键字也是抽象类，但是不一定有抽象方法&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Say</span><span class="params">()</span></span>;</span><br><span class="line">这就是一个抽象方法;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Say</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">这不是抽象方法，而是一个空实现的函数;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li><strong>抽象方法</strong> ： 没有方法体的方法。</li><li><strong>抽象类</strong>：包含抽象方法的类。</li></ul><blockquote><p>&#x3D;&#x3D;含抽象方法的一定是抽象类&#x3D;&#x3D;</p><p>&#x3D;&#x3D;抽象类不一定有抽象方法&#x3D;&#x3D;</p></blockquote><h2 id="1-2-abstract使用格式"><a href="#1-2-abstract使用格式" class="headerlink" title="1.2 abstract使用格式"></a>1.2 abstract使用格式</h2><p><strong>abstract是抽象的意思，用于修饰方法方法和类，修饰的方法是抽象方法，修饰的类是抽象类。</strong></p><blockquote><p>有抽象方法的类就是抽象类</p><p>final&#x2F;static&#x2F;abstract都是放修饰词的后面</p></blockquote><h3 id="1-2-1-抽象方法"><a href="#1-2-1-抽象方法" class="headerlink" title="1.2.1 抽象方法"></a>1.2.1 抽象方法</h3><p>使用<code>abstract</code> 关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。</p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">abstract</span> 返回值类型 方法名 (参数列表);</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">Eat</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-抽象类"><a href="#1-2-2-抽象类" class="headerlink" title="1.2.2 抽象类"></a>1.2.2 抽象类</h3><p>如果一个类包含抽象方法，那么该类必须是抽象类。</p><p>&#x3D;&#x3D;<strong>注意：抽象类不一定有抽象方法，但是有抽象方法的类必须定义成抽象类。</strong>&#x3D;&#x3D;</p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> class 类名字 &#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-抽象类的使用"><a href="#1-2-3-抽象类的使用" class="headerlink" title="1.2.3 抽象类的使用"></a>1.2.3 抽象类的使用</h3><p><strong>要求</strong>：&#x3D;&#x3D;<strong>继承</strong>抽象类的子类<strong>必须重写父类所有的抽象方法</strong>。&#x3D;&#x3D;</p><p>》 》》而不是要重写所有方法</p><p>而且重写的时候不加<code>abstract</code></p><blockquote><p>也就是说如果继承了抽象类，要重写，就把所有的抽象方法都重写&#x2F;实现了，实现了就可以不抽象了</p><p>要不重写，拿自己也要不变成抽象类了，因为也包含继承下来的抽象方法了。</p><hr><p>更详细地解释一下：</p><ol><li><p><strong>&#x3D;&#x3D;继承抽象类并实现抽象方法&#x3D;&#x3D;：</strong> 如果一个类继承了抽象类</p><p>那么它必须要么自己也是一个抽象类，要么实现（重写）抽象类中的所有抽象方法。</p><p>&#x3D;&#x3D;一个类只有在实现了所有抽象方法之后才能被实例化。&#x3D;&#x3D;</p><p>一旦一个类实现了抽象类中的所有抽象方法，它就不再是抽象的，可以被实例化和使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他非抽象方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;<strong>不重写抽象方法：</strong>&#x3D;&#x3D;如果一个类继承了抽象类但没有实现所有的抽象方法</p><p>那么这个类也必须声明为抽象类。这样，它的子类可以选择性地实现这些抽象方法，或者它自己也可以继续保持抽象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 其他抽象方法...</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AnotherAbstractClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="comment">// 不重写所有抽象方法，所以仍然是抽象类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 其他抽象方法...</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AnotherAbstractClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 其他抽象方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>继承抽象类的子类要么实现抽象方法，要么自己也声明为抽象类。</p><p>确保了抽象类的抽象方法在整个继承层次中得到实现，从而使得最终的子类是可以实例化和使用的。</p></blockquote><p>否则，该子类也必须声明为抽象类.</p><p>代码举例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类,抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="comment">// 抽象方法必须要放在抽象类中</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.重写父类的抽象方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;管理其他人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cook</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;厨师炒菜多加点盐...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建抽象类,抽象类不能创建对象</span></span><br><span class="line"><span class="comment">// 假设抽象类让我们创建对象,里面的抽象方法没有方法体,无法执行.所以不让我们创建对象</span></span><br><span class="line"><span class="comment">//Employee e = new Employee();</span></span><br><span class="line"><span class="comment">//e.work();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建子类</span></span><br><span class="line"><span class="type">Manager</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">m.work();</span><br><span class="line"></span><br><span class="line"><span class="type">Cook</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cook</span>(<span class="string">&quot;ap002&quot;</span>, <span class="string">&quot;库克&quot;</span>, <span class="number">1</span>);</span><br><span class="line">c.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong>。</p><hr><h2 id="1-3-抽象类的特征"><a href="#1-3-抽象类的特征" class="headerlink" title="1.3 抽象类的特征"></a>1.3 抽象类的特征</h2><p>抽象类的特征总结起来可以说是 <strong>有得有失</strong></p><p><strong>有得：抽象类得到了拥有抽象方法的能力。</strong></p><p><strong>有失：抽象类失去了创建对象的能力。</strong></p><p>其他成员（构造方法，实例方法，静态方法等）抽象类都是具备的。</p><h2 id="1-4-抽象类的细节"><a href="#1-4-抽象类的细节" class="headerlink" title="1.4 抽象类的细节"></a>1.4 抽象类的细节</h2><p>不需要背，只要当idea报错之后，知道如何修改即可。</p><p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote></li><li><p>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>&#x3D;&#x3D;抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则子类也必须定义成抽象类，编译无法通过而报错&#x3D;&#x3D;</p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li><li><p>&#x3D;&#x3D;抽象类存在的意义是为了被子类继承。&#x3D;&#x3D;</p><blockquote><p>理解：抽象类中已经实现的是模板中确定的成员，抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。</p></blockquote></li></ol><h2 id="1-5-抽象类存在的意义"><a href="#1-5-抽象类存在的意义" class="headerlink" title="1.5 抽象类存在的意义"></a>1.5 抽象类存在的意义</h2><p>​抽象类存在的意义是为了被子类继承，否则抽象类将毫无意义。</p><p>抽象类可以&#x3D;&#x3D;<strong>强制让子类</strong>，一定要按照规定的格式进行重写。&#x3D;&#x3D;</p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><blockquote><p>接口（Interface）&#x3D;&#x3D;是一种抽象类型&#x3D;&#x3D;，<strong>它定义了一组抽象方法</strong>，但不能包含具体的实现。</p><p>接口提供了一种多继承机制，一个类可以实现多个接口。以下是关于Java接口的核心知识：</p><ol><li><p><strong>定义接口：</strong> 使用 <code>interface</code> 关键字来定义接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>; <span class="comment">// 抽象方法，不包含方法体</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口中可以包含常量（实际上是静态常量）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">MAX_VALUE</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实现接口：</strong> 使用 <code>implements</code> 关键字，一个类可以实现一个或多个接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现接口中的抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>多继承：</strong> 一个类可以同时实现多个接口，从而实现多继承的效果。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyOtherClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span>, AnotherInterface &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现 MyInterface 中的抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">anotherAbstractMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现 AnotherInterface 中的抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>默认方法和静态方法：</strong> Java 8 引入了接口中的默认方法（default method）和静态方法（static method）。默认方法允许在接口中提供方法的默认实现，而静态方法是在接口级别上的工具方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abstractMethod</span><span class="params">()</span>; <span class="comment">// 默认抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 默认方法的实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类可以选择性地重写默认方法，但不能重写静态方法。</p></li><li><p><strong>常量：</strong> 接口中的变量默认是常量，即使用 <code>final</code> 和 <code>static</code> 修饰的变量，其值在接口中被设定，并且不能在实现类中修改。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">MAX_VALUE</span> <span class="operator">=</span> <span class="number">100</span>; <span class="comment">// 常量</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>; <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ul><li>接口是通过使用关键字<code>interface</code>来定义的。</li><li>&#x3D;&#x3D;接口定义了一组相关的方法，但没有具体的实现。&#x3D;&#x3D;</li><li>类可以实现一个或多个接口，通过关键字<code>implements</code>来实现接口。</li><li>实现接口的类必须提供接口中定义的所有方法的实现。因为全是抽象的要去实现</li><li>&#x3D;&#x3D;接口可以包含常量、抽象方法、默认方法和静态方法&#x3D;&#x3D;</li></ul></blockquote><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>我们已经学完了抽象类，抽象类中可以用抽象方法，也可以有普通方法，构造方法，成员变量等。</p><blockquote><p>接口是更加彻底的抽象——-接口中全部是抽象方法</p></blockquote><p>那么什么是接口呢？<strong>接口是更加彻底的抽象，JDK7之前，包括JDK7，接口中全部是抽象方法。接口同样是不能创建对象的</strong>。</p><p>&#x3D;&#x3D;抽象类都是不能被实例化的&#x3D;&#x3D;</p><p>接口不能直接实例化，只能通过实现该接口的类来创建对象。</p><p>一个类可以实现多个接口，从而具备多个接口定义的行为</p><h2 id="2-2-定义格式"><a href="#2-2-定义格式" class="headerlink" title="2.2 定义格式"></a>2.2 定义格式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口的定义格式：</span></span><br><span class="line">修饰词 interface 接口名称&#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的声明：interface</span></span><br><span class="line"><span class="comment">// 接口名称：首字母大写，满足“驼峰模式”</span></span><br></pre></td></tr></table></figure><h2 id="2-3-接口成分的特点"><a href="#2-3-接口成分的特点" class="headerlink" title="&#x3D;&#x3D;2.3 接口成分的特点&#x3D;&#x3D;"></a>&#x3D;&#x3D;2.3 接口成分的特点&#x3D;&#x3D;</h2><p>**<img src="java1-0/image-20231129102236587.png" alt="image-20231129102236587" style="zoom: 50%;" /> **</p><blockquote><p>Java接口中的方法默认是public和abstract的。如果在接口中不显式指定访问修饰符，默认为public；如果不显式指定方法为抽象方法（abstract），也会被默认为抽象方法。</p><p>因此，下面两个接口方法声明是等价的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在接口中定义的方法不包含方法体（实现），而是由&#x3D;&#x3D;<strong>实现该接口的类来提供具体的实现</strong>&#x3D;&#x3D;。在Java 8及以后的版本，接口还引入了默认方法和静态方法，允许在接口中提供具体的实现。</p><p>默认方法使用<code>default</code>关键字声明，而静态方法使用<code>static</code>关键字声明。这些特性让接口更加灵活，能够适应新的编程模型。</p><img src="/xu-runbo/post/cd36ea51/image-20231129103539639.png" class="" title="image-20231129103539639"> </blockquote><p>  在JDK7，包括JDK7之前，接口中的<strong>只有</strong>包含：抽象方法和常量</p><h3 id="2-3-1-抽象方法"><a href="#2-3-1-抽象方法" class="headerlink" title="2.3.1.抽象方法"></a>2.3.1.抽象方法</h3><p>​       注意：&#x3D;&#x3D;<strong>接口中的抽象方法默认会自动加上public abstract修饰程序员无需自己手写！！</strong>&#x3D;&#x3D;</p><p>但是重写的时候就得带上publicl了！！！</p><p>​       按照规范：以后接口中的抽象方法建议不要写上public abstract。因为没有必要啊，默认会加上。</p><h3 id="2-3-2-常量"><a href="#2-3-2-常量" class="headerlink" title="2.3.2 常量"></a>2.3.2 常量</h3><p> 在接口中定义的成员变量&#x3D;&#x3D;默认会加上&#x3D;&#x3D;： public static final修饰。也就是说在接口中定义的成员变量实际上是一个常量。这里是使用public static final修饰后，变量值就不可被修改，并且是静态化的变量可以直接用接口名访问，所以也叫常量。</p><p>&#x3D;&#x3D;常量必须要给初始值&#x3D;&#x3D;。常量命名规范建议字母全部大写，多个单词用下划线连接。</p><h3 id="2-3-3-案例演示"><a href="#2-3-3-案例演示" class="headerlink" title="2.3.3 案例演示"></a>2.3.3 案例演示</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterF</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法！</span></span><br><span class="line">    <span class="comment">//    public abstract void run();</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract String getName();</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract int add(int a , int b);</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 它的最终写法是：</span></span><br><span class="line">    <span class="comment">// public static final int AGE = 12 ;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AGE</span>  <span class="operator">=</span> <span class="number">12</span>; <span class="comment">//常量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">SCHOOL_NAME</span> <span class="operator">=</span> <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="default，static关键字，私有方法"><a href="#default，static关键字，私有方法" class="headerlink" title="default，static关键字，私有方法"></a>default，static关键字，私有方法</h2><h3 id="Default"><a href="#Default" class="headerlink" title="Default"></a>Default</h3><img src="/xu-runbo/post/cd36ea51/image-20231129105956830.png" class="" title="image-20231129105956830"><img src="java1-0/image-20231129110549076.png" alt="image-20231129110549076" style="zoom:50%;" /> <h3 id="static方法"><a href="#static方法" class="headerlink" title="static方法"></a>static方法</h3><p>只能用接口.去调用</p><p>因为是属于接口这个类的</p><img src="/xu-runbo/post/cd36ea51/image-20231129111030363.png" class="" title="image-20231129111030363"> <blockquote><p><code>default</code> 关键字是Java 8引入的一个特性</p><p>主要用于在接口中定义默认方法（Default Methods）。</p><p>&#x3D;&#x3D;默认方法是指<strong>接口可以提供一个具体的方法实现</strong>，而<strong>不需要实现该接口的所有类都必须显式地提供实现</strong>。&#x3D;&#x3D;</p><ol><li><p><strong>默认方法的定义：</strong> 在接口中使用 <code>default</code> 关键字来定义默认方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">regularMethod</span><span class="params">()</span>; <span class="comment">// 抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">defaultMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 默认方法的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述例子中，<code>defaultMethod</code> 是一个默认方法，提供了默认的实现。实现该接口的类可以选择性地重写这个方法。</p></li><li><p><strong>实现类的处理：</strong> &#x3D;&#x3D;如果实现类不提供对默认方法的具体实现，将自动继承接口中的默认实现。&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">regularMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 实现抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不提供 defaultMethod 的实现，将继承 MyInterface 中的默认实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>冲突解决：</strong> 如果一个类实现了多个接口，并且这些接口中都包含相同的默认方法，编译器会报告冲突。此时，实现类必须显式地提供对冲突方法的实现，以解决冲突。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceA</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">commonMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InterfaceA&#x27;s default implementation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceB</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">commonMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InterfaceB&#x27;s default implementation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConcreteClass</span> <span class="keyword">implements</span> <span class="title class_">InterfaceA</span>, InterfaceB &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commonMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 解决冲突，提供具体实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyConcreteClass&#x27;s implementation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>接口中的静态方法：</strong> 除了默认方法，还有接口中的静态方法，使用 <code>static</code> 关键字声明。</p><p>&#x3D;&#x3D;接口中的静态方法可以直接通过接口名调用，而不需要实现类的实例。&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 静态方法的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><p>静态私有方法给静态的方法服务</p><p>非静态的私有方法给公共方法服务</p><img src="/xu-runbo/post/cd36ea51/image-20231129111516919.png" class="" title="image-20231129111516919"><img src="java1-0/image-20231129111523437.png" alt="image-20231129111523437" style="zoom:50%;" /> <img src="java1-0/image-20231129111730617.png" alt="image-20231129111730617" style="zoom:50%;" />   <img src="java1-0/image-20231129111739131.png" alt="image-20231129111739131" style="zoom:50%;" /> <h2 id="接口和类之间的-关系"><a href="#接口和类之间的-关系" class="headerlink" title="接口和类之间的 关系"></a>接口和类之间的 关系</h2><img src="/xu-runbo/post/cd36ea51/image-20231129103929345.png" class="" title="image-20231129103929345"> <p>实现的多个接口中同名且同参的方法  只要重写一次就行, 但是同名不同参的视为两个不同的方法 <strong>都要重写</strong></p><p>相当于会自动合并</p><img src="/xu-runbo/post/cd36ea51/image-20231129104503859.png" class="" title="image-20231129104503859"><p>&#x3D;&#x3D;接口之间的继承的时候，要把继承下来的所有都要重写&#x3D;&#x3D;</p><img src="/xu-runbo/post/cd36ea51/image-20231129104737528.png" class="" title="image-20231129104737528">  <h2 id="2-4-基本的实现"><a href="#2-4-基本的实现" class="headerlink" title="2.4 基本的实现"></a>2.4 基本的实现</h2><h3 id="2-4-1-实现接口-的概述"><a href="#2-4-1-实现接口-的概述" class="headerlink" title="2.4.1 &#x3D;&#x3D;实现接口&#x3D;&#x3D;的概述"></a>2.4.1 &#x3D;&#x3D;实现接口&#x3D;&#x3D;的概述</h3><p>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类，也可以称为接口的子类。</p><p>实现的动作&#x3D;&#x3D;类似继承&#x3D;&#x3D;，&#x3D;&#x3D;格式相仿&#x3D;&#x3D;，只是关键字不同，实现使用 <code> implements</code>关键字。</p><p>一个类帮忙实现了接口，那么类似继承，也是可以使用自己实现的方法的</p><h3 id="2-4-2-实现接口的格式"><a href="#2-4-2-实现接口的格式" class="headerlink" title="2.4.2 实现接口的格式"></a>2.4.2 实现接口的格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**接口的实现：</span></span><br><span class="line"><span class="comment">    在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment">    实现类的格式:*/</span></span><br><span class="line">class 类名 implements 接口<span class="number">1</span>,接口<span class="number">2</span>,接口<span class="number">3.</span>..&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面格式可以看出，接口是可以被多实现的。大家可以想一想为什么呢？</p><blockquote><p>通过&#x3D;&#x3D;允许一个类实现多个接口&#x3D;&#x3D;</p><p>但不是多继承，java是不允许多继承的</p><p>&#x3D;&#x3D;在不同的接口中定义不同的行为，使得实现类能够具备多种功能。这种设计方式称为接口的多继承。&#x3D;&#x3D;</p></blockquote><h3 id="2-4-3-类实现接口的要求和意义"><a href="#2-4-3-类实现接口的要求和意义" class="headerlink" title="2.4.3 类实现接口的要求和意义"></a>2.4.3 类实现接口的要求和意义</h3><blockquote><ol><li>必须重写实现的全部接口中所有抽象方法。</li><li>如果一个类实现了接口，&#x3D;&#x3D;但是没有重写完全部接口的全部抽象方法，这个类也必须定义成抽象类。&#x3D;&#x3D;</li><li><strong>意义：接口体现的是一种规范，接口对实现类是一种强制性的约束，要么全部完成接口申明的功能，要么自己也定义成抽象类。这正是一种强制性的规范。</strong></li></ol></blockquote><h3 id="2-4-4-类与接口基本实现案例"><a href="#2-4-4-类与接口基本实现案例" class="headerlink" title="2.4.4  类与接口基本实现案例"></a>2.4.4  类与接口基本实现案例</h3><p>假如我们定义一个运动员的<strong>接口</strong>（规范），代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   接口：接口体现的是规范。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>; <span class="comment">// 抽象方法，跑步。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span>; <span class="comment">// 抽象方法，遵守法律。</span></span><br><span class="line">    String <span class="title function_">compittion</span><span class="params">(String project)</span>;  <span class="comment">// 抽象方法，比赛。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来定义一个乒乓球运动员类，实现接口，实现接口的<strong>实现类</strong>代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima._03接口的实现;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口的实现：</span></span><br><span class="line"><span class="comment"> *    在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment"> *    实现类的格式:</span></span><br><span class="line"><span class="comment"> *      class 类名 implements 接口1,接口2,接口3...&#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      &#125;</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PingPongMan</span>  <span class="keyword">implements</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员稍微跑一下！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员守法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">compittion</span><span class="params">(String project)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;参加&quot;</span>+project+<span class="string">&quot;得金牌！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建实现类对象。</span></span><br><span class="line">        <span class="type">PingPongMan</span> <span class="variable">zjk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PingPongMan</span>();</span><br><span class="line">        zjk.run();</span><br><span class="line">        zjk.law();</span><br><span class="line">        System.out.println(zjk.compittion(<span class="string">&quot;全球乒乓球比赛&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-5-类与接口的-多实现-案例"><a href="#2-4-5-类与接口的-多实现-案例" class="headerlink" title="2.4.5 类与接口的&#x3D;&#x3D;多实现&#x3D;&#x3D;案例"></a>2.4.5 类与接口的&#x3D;&#x3D;多实现&#x3D;&#x3D;案例</h3><p><strong>类与接口之间的关系是多实现的，一个类可以同时实现多个接口。</strong></p><p>首先我们先定义两个接口，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 这一个运动员的规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后定义一个实现类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java中接口是可以被多实现的：</span></span><br><span class="line"><span class="comment"> *    一个类可以实现多个接口: Law, SportMan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpMan</span> <span class="keyword">implements</span> <span class="title class_">Law</span> ,SportMan &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;尊长守法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;训练跑步！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出类与接口之间是可以多实现的，我们可以理解成实现多个规范，这是合理的。</p><h2 id="2-5-接口与接口的多继承"><a href="#2-5-接口与接口的多继承" class="headerlink" title="2.5 接口与接口的多继承"></a>2.5 接口与接口的多继承</h2><p>Java中，接口与接口之间是可以多继承的：也就是一个接口可以同时继承多个接口。大家一定要注意：</p><blockquote><blockquote><p><strong>类与接口是实现关系</strong></p><p><strong>接口与接口是继承关系</strong></p></blockquote></blockquote><blockquote><p><strong>&#x3D;&#x3D;接口继承接口就是把其他接口的抽象方法与本接口进行了合并。&#x3D;&#x3D;</strong></p></blockquote><p>案例演示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Abc</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"> *  总结：</span><br><span class="line"> *     接口与类之间是多实现的。</span><br><span class="line"> *     接口与接口之间是多继承的。</span><br><span class="line"> * */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> <span class="keyword">extends</span> <span class="title class_">Law</span> , Abc &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6扩展：接口的细节"><a href="#2-6扩展：接口的细节" class="headerlink" title="2.6扩展：接口的细节"></a>2.6扩展：接口的细节</h2><p>不需要背，只要当idea报错之后，知道如何修改即可。</p><p>关于接口的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li>当两个接口中存在相同抽象方法的时候，该怎么办？</li></ol><blockquote><p>只要重写一次即可。此时重写的方法，既表示重写1接口的，也表示重写2接口的。</p></blockquote><ol start="2"><li>实现类能不能继承A类的时候，同时实现其他接口呢？</li></ol><blockquote><p>继承的父类，就好比是亲爸爸一样<br>实现的接口，就好比是干爹一样<br>可以继承一个类的同时，再实现多个接口，只不过，要把接口里面所有的抽象方法，全部实现。</p><p>&#x3D;&#x3D;先继承后实现接口&#x3D;&#x3D;</p><img src="java1-0/image-20231125203433779-170124144611824.png" alt="image-20231125203433779" style="zoom:50%;" /> </blockquote><ol start="3"><li>实现类能不能继承一个抽象类的时候，同时实现其他接口呢？</li></ol><blockquote><p>实现类可以继承一个抽象类的同时，再实现其他多个接口，只不过要把里面所有的抽象方法全部重写。</p></blockquote><ol start="4"><li>实现类Zi，实现了一个接口，还继承了一个Fu类。假设在接口中有一个方法，父类中也有一个相同的方法。子类如何操作呢？</li></ol><blockquote><p>处理办法一：如果父类中的方法体，能满足当前业务的需求，在子类中可以不用重写。<br>处理办法二：如果父类中的方法体，不能满足当前业务的需求，需要在子类中重写。</p></blockquote><ol start="5"><li>如果一个接口中，有10个抽象方法，但是我在实现类中，只需要用其中一个，该怎么办?</li></ol><blockquote><p>当一个接口中有多个抽象方法，而实现类只需要使用其中的一个或部分时，可以使用适配器模式来简化实现类的代码。适配器模式允许我们创建一个中间类（适配器），该类实现接口并提供默认实现，而实现类只需要继承适配器并重写需要的方法。</p><p>让我们通过一个例子来理解适配器模式的原理，假设有一个接口 <code>MyInterface</code>，它有多个抽象方法，但实现类 <code>MyClass</code> 只需要实现其中的一个方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span>;</span><br><span class="line"> <span class="comment">// ... 其他方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类只需要使用其中的 method1 方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 实现 method1 方法</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 实现 method2 和 method3 方法（即使我们不需要它们）</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 不需要的实现</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 不需要的实现</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，可以使用适配器模式来简化实现类。首先，创建一个适配器类 <code>MyAdapter</code> 实现接口，为所有抽象方法提供默认实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdapter</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 提供默认实现</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 提供默认实现</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 提供默认实现</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，实现类只需要继承适配器，并重写需要的方法即可：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">extends</span> <span class="title class_">MyAdapter</span> &#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 实现实际需要的 method1 方法</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，实现类就只需要关注自己需要的方法，而不必强制性地实现所有抽象方法。适配器模式通过提供默认实现来减轻实现类的负担，使得代码更加简洁和易读。</p></blockquote><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><img src="/xu-runbo/post/cd36ea51/image-20231129112500842.png" class="" title="image-20231129112500842"><img src="/xu-runbo/post/cd36ea51/image-20231129112801892.png" class="" title="image-20231129112801892"> <h2 id="接口总结"><a href="#接口总结" class="headerlink" title="接口总结"></a>接口总结</h2><img src="java1-0/image-20231129112033077.png" alt=" " style="zoom:50%;" /> <h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="3-1-快速上手"><a href="#3-1-快速上手" class="headerlink" title="3.1 快速上手"></a>3.1 快速上手</h2><img src="/xu-runbo/post/cd36ea51/image-20231129113048655.png" class="" title="image-20231129113048655"> <img src="/xu-runbo/post/cd36ea51/image-20231129113355558.png" class="" title="image-20231129113355558"> <p>内部类是public修饰的时候</p><p>外部可以直接像使用类那样使用<code>Inner =new Inner();</code></p><p>private修饰的时候就只能通过外部类的方法来返回一个内部类了</p><img src="java1-0/image-20231129120927860.png" alt="image-20231129120927860" style="zoom:50%;" /> <h3 id="3-1-1-什么是内部类"><a href="#3-1-1-什么是内部类" class="headerlink" title="3.1.1 什么是内部类"></a>3.1.1 什么是内部类</h3><p>将一个类A定义在另一个类B里面，里面的那个类A就称为<strong>内部类</strong>，B则称为<strong>外部类</strong>。</p><p>&#x3D;&#x3D;可以把内部类理解成寄生，外部类理解成宿主。&#x3D;&#x3D;</p><h3 id="3-1-2-什么时候使用内部类"><a href="#3-1-2-什么时候使用内部类" class="headerlink" title="3.1.2 什么时候使用内部类"></a>3.1.2 什么时候使用内部类</h3><p>一个事物内部还有一个独立的事物，&#x3D;&#x3D;内部的事物脱离外部的事物无法独立使用&#x3D;&#x3D;</p><ol><li><p>人里面有一颗心脏。</p></li><li><p>汽车内部有一个发动机。</p></li><li><p>为了实现更好的封装性。</p></li></ol><h2 id="3-2-内部类的分类"><a href="#3-2-内部类的分类" class="headerlink" title="3.2 内部类的分类"></a>3.2 内部类的分类</h2><img src="java1-0/image-20231129113620672.png" alt="image-20231129113620672" style="zoom:50%;" /> <blockquote><p>内部类是定义在其他类内部的类。它们是一种嵌套类的形式，具有访问外部类成员和提供封装的特性。</p><ol><li><p>访问权限：&#x3D;&#x3D;<strong>内部类可以访问外部类的所有成员，包括私有成员。</strong>&#x3D;&#x3D;这种访问权限的特点使得内部类能够很方便地与外部类进行交互。</p></li><li><p>封装性：&#x3D;&#x3D;内部类可以使用private修饰，使得它们只能在外部类中访问&#x3D;&#x3D;。这样可以有效地隐藏内部实现细节，并将相关的功能封装在一起。</p></li><li><p>关联性：内部类通常用于表示外部类的一种关联关系。</p></li><li><p>实例化和访问：&#x3D;&#x3D;内部类的实例化<strong>必须在外部类的实例化之后进行</strong>&#x3D;&#x3D;，因为内部类的生命周期依赖于外部类对象。通过外部类的实例，可以访问内部类的构造方法和成员。</p></li><li><p>类型：根据定义的位置和作用域，Java的内部类有几种类型：</p><ul><li>成员内部类（Member Inner Class）：定义在外部类的成员位置，可以访问外部类的所有成员。</li><li>静态嵌套类（Static Nested Class）：定义在外部类的静态成员位置，可以直接通过外部类来创建实例。</li><li>方法内部类（Local Inner Class）：定义在方法内部，且只能在方法内部访问，通常用于解决某个具体问题。</li><li>匿名内部类（Anonymous Inner Class）：没有名称的内部类，通常作为接口的实现或继承某个类的子类。</li></ul></li></ol></blockquote><h2 id="3-3-成员内部类"><a href="#3-3-成员内部类" class="headerlink" title="3.3 成员内部类"></a>3.3 成员内部类</h2><p><strong>成员内部类特点</strong>：</p><ul><li>无static修饰的内部类，属于外部类对象的。</li><li>宿主：外部类对象。</li></ul><p><strong>内部类的使用格式</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">外部类.内部类。 <span class="comment">// 访问内部类的类型都是用 外部类.内部类</span></span><br></pre></td></tr></table></figure><p><strong>获取成员内部类对象的两种方式</strong>：</p><p>方式一：外部直接创建成员内部类的对象,要求public class内部对象<code>package soft1;</code>否则在类外是访问不到Hert的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> soft1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Hert</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Hert</span><span class="params">(String verson)</span> &#123;</span><br><span class="line">            Verson = verson;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String Verson;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Say</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(Person.<span class="built_in">this</span>.age+Person.<span class="built_in">this</span>.name+<span class="built_in">this</span>.Verson+<span class="string">&quot;正在运作&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过成员函数返回。。。</span></span><br><span class="line">    <span class="keyword">public</span> Hert <span class="title function_">getinstnceof</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Hert</span>(<span class="string">&quot;9.0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> soft1;</span><br><span class="line"><span class="comment">//Main.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Person.Hert hert=new Person(13,&quot;牛马&quot;).new Hert(&quot;2.0心脏&quot;);</span></span><br><span class="line"><span class="comment">//        hert.Say();</span></span><br><span class="line">        Person p=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">12</span>,<span class="string">&quot;dasd&quot;</span>);</span><br><span class="line"><span class="comment">//        soft1.Person$Hert@3b07d329</span></span><br><span class="line">        System.out.println(p.getinstnceof());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">外部类.内部类 变量 = <span class="keyword">new</span> 外部类（）.new 内部类（）;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/cd36ea51/image-20231129115459046.png" class="" title="image-20231129115459046"><p>2.但是我需要的是Car类中的Engine类，则我需要在堆空间中的Car的内存中再开辟一块内存来存储Engine类，<br>  因为在堆中用来开辟空间的语句是new<br>  其实从内存角度也可以理解这个<strong>new嵌套</strong>吧，因为<strong>需要创建这个类的对象</strong>所以需要&#x3D;&#x3D;先开辟外部类Car的空间&#x3D;&#x3D;</p><p>方式二：在外部类中定义一个方法提供内部类的对象</p><p><strong>案例演示</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//  宿主：外部类对象。</span></span><br><span class="line">       <span class="comment">// Outer out = new Outer();</span></span><br><span class="line">        <span class="comment">// 创建内部类对象。</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        oi.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="comment">// 成员内部类，属于外部类对象的。</span></span><br><span class="line">    <span class="comment">// 拓展：成员内部类不能定义静态成员。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="comment">// 这里面的东西与类是完全一样的。</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;内部类中的方法被调用了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        Ovject son=o.getInstance();</span><br><span class="line">        <span class="comment">//多态的使用</span></span><br><span class="line">        System.out.println(o.getInstance());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-成员内部类的细节"><a href="#3-4-成员内部类的细节" class="headerlink" title="3.4 成员内部类的细节"></a>3.4 成员内部类的细节</h2><p>编写成员内部类的注意点：</p><ol><li>成员内部类可以被一些修饰符所修饰，比如： private，默认，protected，public，static等</li><li>在成员内部类里面，&#x3D;&#x3D;JDK16之前不能定义静态变量，JDK16开始才可以定义静态变量。&#x3D;&#x3D;</li><li>创建内部类对象时，对象中有一个隐含的Outer.this记录外部类对象的地址值。（请参见3.6节的内存图）</li></ol><p>详解：</p><p>​&#x3D;&#x3D;内部类被private修饰，外界无法直接获取内部类的对象，只能通过3.3节中的方式二获取内部类的对象&#x3D;&#x3D;</p><p>​</p><p>被其他权限修饰符修饰的内部类一般用3.3节中的方式一直接获取内部类的对象</p><p>​内部类被static修饰是成员内部类中的特殊情况，叫做静态内部类下面单独学习。</p><p>​&#x3D;&#x3D;内部类如果想要访问外部类的成员变量，外部类的变量必须用final修饰，JDK8以前必须手动写final&#x3D;&#x3D;，JDK8之后不需要手动写，JDK默认加上。 </p><h2 id="3-5-成员内部类面试题"><a href="#3-5-成员内部类面试题" class="headerlink" title="3.5 成员内部类面试题"></a>3.5 成员内部类面试题</h2><p>内部类存储有外部类对象的地址<code>外部类.this</code></p><img src="/xu-runbo/post/cd36ea51/image-20231129142114448.png" class="" title="image-20231129142114448"> <p>请在?地方向上相应代码,以达到输出的内容</p><p>注意：&#x3D;&#x3D;内部类访问外部类对象的格式是：<strong>外部类名.this</strong>&#x3D;&#x3D;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer.<span class="type">inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">inner</span>();</span><br><span class="line">        oi.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;<span class="comment">// 外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在成员位置定义一个类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">            System.out.println(???);<span class="comment">// 10   答案：a</span></span><br><span class="line">            System.out.println(???);<span class="comment">// 20答案：this.a</span></span><br><span class="line">            System.out.println(???);<span class="comment">// 30答案：Outer.this.a</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-成员内部类内存图"><a href="#3-6-成员内部类内存图" class="headerlink" title="3.6 成员内部类内存图"></a>3.6 成员内部类内存图</h2><blockquote><p><code>Outer.Inner oi=new Outer().new Inner()</code></p><p>先加载main方法，所需的类，<img src="/xu-runbo/post/cd36ea51/image-20231129142315304.png" class="" title="image-20231129142315304"> </p><p>然后在堆区开辟空间<code>oi记录的是内部类的地址，因为 Outer().new Inner()</code></p><p>然后调用show方法，</p><blockquote><p>a就近原则，在方法里找</p><p>this.a是在内部类里面找</p><p>outer.this.a是在外部类找</p></blockquote></blockquote><h2 id="3-7-静态内部类"><a href="#3-7-静态内部类" class="headerlink" title="3.7 静态内部类"></a>3.7 静态内部类</h2><p><strong>静态内部类特点</strong>：</p><ul><li>静态内部类是一种特殊的成员内部类。</li></ul><ul><li><p>&#x3D;&#x3D;有static修饰，属于外部类本身的。&#x3D;&#x3D;</p></li><li><p>总结：静态内部类与其他类的用法完全一样。只是访问的时候需要加上外部类.内部类。</p></li><li><blockquote><ul><li><strong>拓展1</strong>:静态内部类可以直接访问外部类的静态成员。</li><li><strong>拓展2</strong>:静态内部类不可以直接访问外部类的非静态成员，如果要访问需要创建外部类的对象。</li><li><strong>拓展3</strong>:&#x3D;&#x3D;静态内部类中没有的Outer.this。&#x3D;&#x3D;</li><li>静态类就是没有this，因为是属于类的</li></ul></blockquote></li></ul><p><strong>内部类的使用格式</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">外部类.内部类。</span><br></pre></td></tr></table></figure><p><strong>静态内部类对象的创建格式</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">外部类.内部类  变量 = <span class="keyword">new</span>  外部类.内部类构造器;</span><br></pre></td></tr></table></figure><p><strong>调用方法的格式：</strong></p><ul><li><img src="/xu-runbo/post/cd36ea51/image-20231129142621128.png" class="" title="image-20231129142621128"></li></ul><p><strong>案例演示</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> soft1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> outerStaticField;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> outerInstanceField;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> innerStaticField;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> innerInstanceField;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">innerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 可以直接访问外部类的静态成员</span></span><br><span class="line">            outerStaticField = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 无法直接访问外部类的非静态成员，需要通过外部类的实例来访问</span></span><br><span class="line">            <span class="type">OuterClass</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">            outer.outerInstanceField = <span class="number">20</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">outerMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 创建静态内部类的实例</span></span><br><span class="line">        <span class="type">StaticInnerClass</span> <span class="variable">inner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticInnerClass</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以通过静态内部类的实例访问它的成员</span></span><br><span class="line">        inner.innerStaticField = <span class="number">30</span>;</span><br><span class="line">        inner.innerInstanceField = <span class="number">40</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-8-局部内部类"><a href="#3-8-局部内部类" class="headerlink" title="3.8 局部内部类"></a>3.8 局部内部类</h2><p>没有修饰词，类似局部变量</p><ul><li><strong>局部内部类</strong> ：定义在<strong>方法中</strong>的类。</li></ul><p>定义格式:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 外部类名 &#123;</span><br><span class="line">数据类型 变量名;</span><br><span class="line"></span><br><span class="line">修饰符 返回值类型 方法名(参数列表) &#123;</span><br><span class="line"><span class="comment">// …</span></span><br><span class="line">class 内部类 &#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-匿名内部类【重点】"><a href="#3-9-匿名内部类【重点】" class="headerlink" title="3.9 &#x3D;&#x3D;匿名内部类【重点】&#x3D;&#x3D;"></a>3.9 &#x3D;&#x3D;匿名内部类【重点】&#x3D;&#x3D;</h2><h3 id="3-9-1-概述"><a href="#3-9-1-概述" class="headerlink" title="3.9.1 概述"></a>3.9.1 概述</h3><img src="java1-0/image-20231129144022569.png" alt="image-20231129144022569" style="zoom:67%;" /> <p>&#x3D;&#x3D;<strong>其实是匿名内部类的对象</strong>，真正的匿名类是蓝色圈起来的&#x3D;&#x3D; </p><p><strong>匿名内部类</strong> ：是内部类的简化写法。他是一个&#x3D;&#x3D;隐含了名字的内部类。&#x3D;&#x3D;</p><p>开发中，最常用到的内部类就是匿名内部类了。</p><h3 id="3-9-2-格式"><a href="#3-9-2-格式" class="headerlink" title="3.9.2 格式"></a>3.9.2 格式</h3><img src="java1-0/image-20231129145630167.png" alt="image-20231129145630167" style="zoom:50%;" /> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名或者接口名() &#123;</span><br><span class="line">     重写方法;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>包含了：</p><ul><li><p>&#x3D;&#x3D;继承或者实现关系&#x3D;&#x3D;</p></li><li><p>方法重写</p></li><li><p>空参构造函数创建对象</p></li></ul><p>&#x3D;&#x3D;也就是  匿名类继承父类-重写方法-空参创建匿名对象一步完成而已&#x3D;&#x3D;</p><p>所以从语法上来讲，这个整体其实是匿名内部类对象</p><blockquote><p>不是真正的匿名了，只不过不需要我们提供名字而已，是可以在.class中看到</p></blockquote><h3 id="反编译javap-class文件"><a href="#反编译javap-class文件" class="headerlink" title="&#x3D;&#x3D;反编译javap .class文件&#x3D;&#x3D;"></a>&#x3D;&#x3D;反编译javap .class文件&#x3D;&#x3D;</h3><img src="/xu-runbo/post/cd36ea51/image-20231129145422303.png" class="" title="image-20231129145422303"><img src="/xu-runbo/post/cd36ea51/image-20231129145427437.png" class="" title="image-20231129145427437"><p>进入到当前目录，然后cmd</p><img src="/xu-runbo/post/cd36ea51/image-20231129145429894.png" class="" title="image-20231129145429894"><h3 id="3-9-2-什么时候用到匿名内部类"><a href="#3-9-2-什么时候用到匿名内部类" class="headerlink" title="3.9.2 什么时候用到匿名内部类"></a>3.9.2 什么时候用到匿名内部类</h3><p><strong>实际上，如果我们希望定义一个只要使用一次的类，就可考虑使用匿名内部类。匿名内部类的本质作用</strong></p><p><strong>是为了简化代码</strong>。 </p><p>之前我们使用接口时，似乎得做如下几步操作：</p><ol><li>定义子类</li><li>重写接口中的方法</li><li>创建子类对象</li><li>调用重写后的方法</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义接口的实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="comment">// 2. 重写抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗刨式...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 3. 创建实现类对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// 4. 调用方法</span></span><br><span class="line">        s.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的目的，最终只是为了调用方法，那么能不能简化一下，把以上四步合成一步呢？匿名内部类就是做这样的快捷方式。</p><h3 id="3-9-3-匿名内部类前提和格式"><a href="#3-9-3-匿名内部类前提和格式" class="headerlink" title="3.9.3 匿名内部类前提和格式"></a>3.9.3 匿名内部类前提和格式</h3><p>匿名内部类必须<strong>继承一个父类</strong>或者<strong>实现一个父接口</strong>。</p><p><strong>匿名内部类格式</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类名或者接口名()&#123;</span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-9-4-使用方式"><a href="#3-9-4-使用方式" class="headerlink" title="3.9.4 使用方式"></a>3.9.4 使用方式</h3><p>以接口为例，匿名内部类的使用，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用匿名内部类</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;自由泳...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.swimming();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接口 变量 = new 实现类(); // 多态,走子类的重写方法</span></span><br><span class="line">        <span class="type">Swim</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;蛙泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        s2.swimming();</span><br><span class="line">        s2.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/cd36ea51/image-20231126165113479-170124144611826.png" class="" title="image-20231126165113479"> <h3 id="3-9-5-匿名内部类的特点"><a href="#3-9-5-匿名内部类的特点" class="headerlink" title="3.9.5 匿名内部类的特点"></a>3.9.5 匿名内部类的特点</h3><ol><li>定义一个没有名字的内部类</li><li>这个类实现了父类，或者父类接口</li><li>匿名内部类会创建这个没有名字的类的对象</li></ol><h3 id="3-9-6-匿名内部类的使用场景"><a href="#3-9-6-匿名内部类的使用场景" class="headerlink" title="3.9.6 匿名内部类的使用场景"></a>3.9.6 匿名内部类的使用场景</h3><p>通常在方法的形式参数是接口或者抽象类时，也可以将匿名内部类作为参数传递。代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 普通方式传入对象</span></span><br><span class="line">        <span class="comment">// 创建实现类对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        </span><br><span class="line">        goSwimming(s);</span><br><span class="line">        <span class="comment">// 匿名内部类使用场景:作为方法参数传递</span></span><br><span class="line">        <span class="type">Swim</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;蝶泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 传入匿名内部类</span></span><br><span class="line">        goSwimming(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完美方案: 一步到位</span></span><br><span class="line">        goSwimming(<span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;大学生, 蛙泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        goSwimming(<span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小学生, 自由泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法,模拟请一些人去游泳</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">goSwimming</span><span class="params">(Swim s)</span> &#123;</span><br><span class="line">        s.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名内部类的小结"><a href="#匿名内部类的小结" class="headerlink" title="匿名内部类的小结"></a>匿名内部类的小结</h3><img src="/xu-runbo/post/cd36ea51/image-20231129150624933.png" class="" title="image-20231129150624933">   ]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++泛型编程和STL</title>
      <link href="/xu-runbo/post/c6b8c88d.html"/>
      <url>/xu-runbo/post/c6b8c88d.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-泛型编程和STL"><a href="#C-泛型编程和STL" class="headerlink" title="C++泛型编程和STL"></a>C++泛型编程和STL</h1><ul><li>本阶段主要针对C++&#x3D;&#x3D;泛型编程&#x3D;&#x3D;和&#x3D;&#x3D;STL&#x3D;&#x3D;技术做详细讲解，探讨C++更深层的使用</li></ul><h2 id="1-模板"><a href="#1-模板" class="headerlink" title="1 模板"></a>1 模板</h2><h3 id="1-1-模板的概念"><a href="#1-1-模板的概念" class="headerlink" title="1.1 模板的概念"></a>1.1 模板的概念</h3><p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong></p><p>例如生活中的模板</p><p>一寸照片模板：</p><img src="/xu-runbo/post/c6b8c88d/1547105026929.png" class="" width="1547105026929"><p>PPT模板：</p><img src="/xu-runbo/post/c6b8c88d/1547103297864.png" class="" width="1547103297864"><img src="/xu-runbo/post/c6b8c88d/1547103359158.png" class="" width="1547103359158"><p>模板的特点：</p><ul><li>模板不可以直接使用，它只是一个框架</li><li>模板的通用并不是万能的</li></ul><h3 id="1-2-函数模板"><a href="#1-2-函数模板" class="headerlink" title="1.2 函数模板"></a>1.2 函数模板</h3><ul><li><p>C++另一种编程思想称为 &#x3D;&#x3D;泛型编程&#x3D;&#x3D; ，<strong>主要利用的技术就是模板</strong></p></li><li><p>C++提供两种模板机制:<strong>函数模板</strong>和<strong>类模板</strong></p></li></ul><h4 id="1-2-1-函数模板语法"><a href="#1-2-1-函数模板语法" class="headerlink" title="1.2.1 函数模板语法"></a>1.2.1 函数模板语法</h4><p>函数模板作用：</p><p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p><p><strong>语法：</strong> </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">函数声明或定义</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>template  —  声明创建模板</p><p>typename  — 表面其后面的&#x3D;&#x3D;符号是一种数据类型&#x3D;&#x3D;，可以用class代替</p><p>T    —   通用的数据类型，名称可以替换，通常为&#x3D;&#x3D;大写字母&#x3D;&#x3D;</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//说明，我紧接着要写一个函数模板啦,下面的T编译器你不要给我报错.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapInt</span><span class="params">(<span class="type">int</span>&amp; a, <span class="type">int</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swapDouble</span><span class="params">(<span class="type">double</span>&amp; a, <span class="type">double</span>&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">swapInt</span>(a, b);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> c = <span class="number">10.5</span>;</span><br><span class="line"><span class="type">double</span> d = <span class="number">20.5</span>;</span><br><span class="line"><span class="built_in">swapDouble</span>(c, d);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;c=&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d=&quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------模板的使用(2)-------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.显示使用</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------模板的使用_显示使用-------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">mySwap</span>&lt;<span class="type">int</span>&gt;(a, b);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="built_in">mySwap</span>(c, d);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;c=&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d=&quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------模板的使用_编译器自动推导使用-------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">mySwap</span>(a, b);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"><span class="built_in">mySwap</span>(c, d);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;c=&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d=&quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>函数模板利用关键字 template</li><li>使用函数模板有两种方式：&#x3D;&#x3D;自动类型推导&#x3D;&#x3D;、&#x3D;&#x3D;显示指定类型&#x3D;&#x3D;</li><li>模板的目的是为了提高复用性，将类型参数化</li></ul><p>天才提示:有区别,当T为包含子类的类时,用class编译器会误认为对象声明</p><hr><h4 id="1-2-2-函数模板-注意事项"><a href="#1-2-2-函数模板-注意事项" class="headerlink" title="1.2.2 函数模板&#x3D;&#x3D;注意事项&#x3D;&#x3D;"></a>1.2.2 函数模板&#x3D;&#x3D;注意事项&#x3D;&#x3D;</h4><p>注意事项：</p><blockquote><ul><li><p><strong>自动类型推导</strong>，必须推导出一致的数据类型T,才可以使用</p></li><li><p>模板必须要<strong>确定出T的数据类型</strong>，才可以使用</p></li></ul></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//说明，我紧接着要写一个函数模板啦,下面的T编译器你不要给我报错.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySwap</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Say</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我没用到T，我还让编译器自动推导传入的T是何种数据类型&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;//模板要推出一致的数据类型&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">mySwap</span>(a, b);<span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mySwap(a,c)//错误,编译器自动推导出一个int和char，不一致。</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;//模板要确定T的数据类型&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Say();//执行不了一点，编译器汗流浃背了</span></span><br><span class="line"><span class="built_in">Say</span>&lt;<span class="type">int</span>&gt;();</span><br><span class="line">    Say&lt;&gt;();<span class="comment">//函数模板的空参列表！</span></span><br><span class="line"> <span class="comment">//Say(void)();//也不行，void用于函数的返回类型啊..</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>&#x3D;&#x3D;使用模板时必须<strong>确定出通用数据类型T</strong>，并且能够推<strong>导出一致的类型</strong>&#x3D;&#x3D;</li></ul><h4 id="1-2-3-函数模板案例"><a href="#1-2-3-函数模板案例" class="headerlink" title="1.2.3 函数模板案例"></a>1.2.3 函数模板案例</h4><p>案例描述：</p><ul><li>利用函数模板封装一个&#x3D;&#x3D;排序的函数&#x3D;&#x3D;，可以对<strong>不同数据类型数组</strong>进行排序</li><li>排序规则从大到小，排序算法为<strong>选择排序</strong></li><li>分别利用<strong>char数组</strong>和<strong>int数组</strong>进行测试</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void sort(int a[])</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//排序模板</span></span><br><span class="line"><span class="comment">//void mySort(T a[],int line)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//T temp;</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; line-1; i++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//for (int j = 0; j &lt; line - i - 1; j++)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////降序</span></span><br><span class="line"><span class="comment">//if (a[j] &lt; a[j + 1])</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//temp = a[j];</span></span><br><span class="line"><span class="comment">//a[j] = a[j + 1];</span></span><br><span class="line"><span class="comment">//a[j + 1] = temp;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySort</span><span class="params">(T a[], <span class="type">int</span> line)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> minindex = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; line; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[minindex])</span><br><span class="line">&#123;</span><br><span class="line">minindex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp = a[i];</span><br><span class="line">a[i] = a[minindex];</span><br><span class="line">a[minindex] = temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//打印模板</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(T a[],<span class="type">int</span> line)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=line<span class="number">-1</span>)</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------进阶排序,可选择升降排序</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;<span class="comment">//排序模板</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mySort</span><span class="params">(T a[], <span class="type">int</span> line,<span class="type">bool</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">T temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line <span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; line - i - <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//升序</span></span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = a[j];</span><br><span class="line">a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">a[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; a[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = a[j];</span><br><span class="line">a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">a[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arrayInt[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="type">int</span> line = <span class="built_in">sizeof</span>(arrayInt) / <span class="built_in">sizeof</span>(arrayInt[<span class="number">0</span>]);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------测试int数组------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是int数组原来的状态&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">myPrint</span>(arrayInt,line);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是int数组降序排序后状态&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">mySort</span>(arrayInt, line);</span><br><span class="line"><span class="built_in">myPrint</span>(arrayInt, line);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是int数组升序后状态&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">mySort</span>(arrayInt, line, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">myPrint</span>(arrayInt, line);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------测试char数组----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">char</span> str[<span class="number">9</span>] = <span class="string">&quot;abcdefg&quot;</span>;<span class="comment">//1 7 6 8 2 3 4</span></span><br><span class="line"><span class="comment">//cin.getline(str,10);</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是char数组原来的状态&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> charline = <span class="built_in">sizeof</span>(str) / <span class="built_in">sizeof</span>(str[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">myPrint</span>(str, charline);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是char数组降序后的状态&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">mySort</span>(str, charline);</span><br><span class="line"><span class="built_in">myPrint</span>(str, charline);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是char数组升序后状态&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">mySort</span>(str, charline, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">myPrint</span>(str, charline);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：模板可以提高代码复用，需要熟练掌握</p><hr><h4 id="1-2-4-普通函数与函数模板的区别"><a href="#1-2-4-普通函数与函数模板的区别" class="headerlink" title="1.2.4 普通函数与函数模板的区别"></a>1.2.4 普通函数与函数模板的区别</h4><p><strong>普通函数与函数模板区别：</strong></p><ul><li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li><li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li><li>如果利用显示指定类型的方式，可以发生隐式类型转换</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 普通函数可以自动类型转换隐式</span></span><br><span class="line"><span class="comment">//2. 函数模板自动类型转换的时候不可以发生类型抓换，显示的时候可以</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">newtest</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">20</span>, b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">test</span>(a, b) &lt;&lt; endl;<span class="comment">//30</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">test</span>(a, c) &lt;&lt; endl;<span class="comment">//117,10+97=117</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;//测试模板的两种调用方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">newtest</span>(a, b) &lt;&lt; endl;            </span><br><span class="line"> </span><br><span class="line"><span class="comment">//cout &lt;&lt; newtest(a, c) &lt;&lt; endl;//自动类型推导是不能自动类型转换的  </span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">newtest</span>&lt;<span class="type">int</span>&gt;(a, c);<span class="comment">//117,显式的使用模板会自动类型转换！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure><p>总结：建议使用显示&#x3D;&#x3D;指定类型的方式，调用函数模板，因为可以自己确定通用类型T&#x3D;&#x3D;</p><p>显示的指定！</p><h4 id="1-2-5-普通函数与函数模板的调用规则"><a href="#1-2-5-普通函数与函数模板的调用规则" class="headerlink" title="1.2.5 普通函数与函数模板的调用规则"></a>1.2.5 普通函数与函数模板的调用规则</h4><p>调用规则如下：</p><blockquote><ol><li>如果函数模板和普通函数都可以实现，&#x3D;&#x3D;优先调用普通函数&#x3D;&#x3D;</li><li>可以通过空模板参数列表来强制调用函数模板</li><li><strong>函数模板也可以发生重载</strong></li><li>如果函数模板可以产生更好的匹配,优先调用函数模板</li></ol></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 如果函数模板和普通函数都可以实现， == 优先调用普通函数 ==</span></span><br><span class="line"><span class="comment">//2. 可以通过空模板参数列表来强制调用函数模板</span></span><br><span class="line"><span class="comment">//3. * *函数模板也可以发生重载 * *</span></span><br><span class="line"><span class="comment">//4. 如果函数模板可以产生更好的匹配, 优先调用函数模板</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;普通函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(T a,T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;函数模板的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//模板的重载</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(T a, T b,T c )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;函数重载模板的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果二者都可以调用且实现，会优先调用函数！函数学的提前。。。</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">test</span>(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//强制想使用模板的版本呢？</span></span><br><span class="line">    <span class="comment">//使用模板空参列表</span></span><br><span class="line">test&lt;&gt;(a,b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//模板的重载//</span></span><br><span class="line">test&lt;&gt;(a, b, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果函数模板可以产生更好的匹配, 优先调用函数模板</span></span><br><span class="line"><span class="type">char</span> c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="type">char</span> d = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line"><span class="built_in">test</span>(c, d);</span><br><span class="line"><span class="comment">//编译器会执行与他更好匹配的结果！-=-=函数模板的调用==</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为用函数的话需要先转换再使用，会麻烦</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：&#x3D;&#x3D;<strong>既然提供了函数模板，最好就不要提供普通函数，否则容易出现二义性</strong>&#x3D;&#x3D;</p><h4 id="1-2-6-模板的局限性"><a href="#1-2-6-模板的局限性" class="headerlink" title="1.2.6 模板的局限性"></a>1.2.6 模板的局限性</h4><p><strong>局限性：</strong></p><ul><li>模板的通用性并不是万能的</li></ul><p><strong>例如：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   a = b;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p><p>再例如：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   <span class="keyword">if</span>(a &gt; b) &#123; ... &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行</p><p>因此C++为了解决这种问题，提供&#x3D;&#x3D;模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong>&#x3D;&#x3D;</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>==(Person&amp; p1, Person&amp; p2);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age) :<span class="built_in">name</span>(name), <span class="built_in">age</span>(age) &#123;&#125;</span><br><span class="line"></span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板的通用性并不是万能的</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//内置数据类型可以直接使用通用的函数模板</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">mycompare</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对模板功能呢的具体化,有具体传入参数的时候会走这条路template&lt;&gt;+模板函数的具体重载</span></span><br><span class="line"><span class="comment">//自定义数据类型，不会调用普通的函数模板</span></span><br><span class="line"><span class="comment">//可以创建具体化的Person数据类型的模板，用于特殊处理这个类型</span></span><br><span class="line"><span class="comment">//template&lt;&gt; bool mycompare(Person&amp; a, Person&amp; b) &#123;</span></span><br><span class="line"><span class="comment">//if (a.age == b.age &amp;&amp; a.name == b.name)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return true;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//return false;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局运算符==的重载</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(Person&amp; p1, Person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.name == p2.name &amp;&amp; p1.age == p2.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> ret = <span class="built_in">mycompare</span>(a, b);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a==b&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a!=b&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;tom&quot;</span>, <span class="number">11</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;tom&quot;</span>, <span class="number">11</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在没有扩充模板的具体化的时候//编译器蒙蔽了，到a==b的时候汗流浃背了，不知道对象的==如何玩</span></span><br><span class="line"><span class="type">int</span> ret1 = <span class="built_in">mycompare</span>(p1, p2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret1)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1==p2&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1!=p2&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<br>    &#x2F;&#x2F;自定义数据类型，不会调用普通的函数模板<br>    &#x2F;&#x2F;可以创建具体化的Person数据类型的模板，用于特殊处理这个类型</p><ul><li>利用&#x3D;&#x3D;具体化的模板，可以解决自定义类型的通用化&#x3D;&#x3D;</li><li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li></ul><p>friend+ 函数声明</p><p>友元</p><p>&#x3D;&#x3D;大众类型用模板，特定类型再写特定函数&#x3D;&#x3D;</p><h3 id="1-3-类模板"><a href="#1-3-类模板" class="headerlink" title="1.3 类模板"></a>1.3 类模板</h3><h4 id="1-3-1-类模板语法"><a href="#1-3-1-类模板语法" class="headerlink" title="1.3.1 类模板语法"></a>1.3.1 类模板语法</h4><p>类模板作用：</p><ul><li>建立一个&#x3D;&#x3D;通用类&#x3D;&#x3D;，&#x3D;&#x3D;类中的成员 数据类型可以不具体制定&#x3D;&#x3D;，用一个<strong>虚拟的类型</strong>来代表。</li></ul><p><strong>语法：</strong> </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">类\</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> nametype,<span class="keyword">typename</span> agetype&gt;要有多个数据类型，用逗号隔开</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>template  —  声明创建模板</p><p>typename  — 表面其后面的符号是一种数据类型，可以用class代替</p><p>T    —   通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class Person</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//public:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Person(string name, int age) :name(name), age(age) &#123;&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//string name;</span></span><br><span class="line"><span class="comment">//int age;</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模板类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> nametype,<span class="keyword">typename</span> agetype&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(nametype name, agetype age) :<span class="built_in">name</span>(name), <span class="built_in">age</span>(age) &#123;  &#125;;</span><br><span class="line"></span><br><span class="line">nametype name;</span><br><span class="line">agetype age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person&lt;string, <span class="type">int</span>&gt; <span class="title">person</span><span class="params">(<span class="string">&quot;熏悟空&quot;</span>, <span class="number">989</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; person.name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; person.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Person&lt;string,<span class="type">double</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;王八蛋&quot;</span>, <span class="number">19.5</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; p.name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：类模板和函数模板语法相似，在&#x3D;&#x3D;声明模板template后面加类，此类称为类模板&#x3D;&#x3D;</p><h4 id="1-3-2-类模板与函数模板区别"><a href="#1-3-2-类模板与函数模板区别" class="headerlink" title="1.3.2 类模板与函数模板区别"></a>1.3.2 类模板与函数模板区别</h4><p>类模板与函数模板区别主要有两点：</p><ol><li><p>&#x3D;&#x3D;<strong>类模板没有自动类型推导的使用方式</strong>&#x3D;&#x3D;</p></li><li><p>类模板在模板参数列表中&#x3D;&#x3D;<strong>可以有默认参数</strong>&#x3D;&#x3D;</p></li><li><p>&#x3D;&#x3D;函数模板也有默认参数&#x3D;&#x3D;</p></li><li><pre><code class="c++">#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;//模板类template&lt;typename T,typename Y=int&gt;void mySay(T a,T b)&#123;    cout &lt;&lt; &quot;a==&quot; &lt;&lt; a &lt;&lt; endl;    cout &lt;&lt; &quot;b==&quot; &lt;&lt; b &lt;&lt; endl;&#125;int main()&#123;    //不能自动推导，默认参数    mySay&lt;int ,double&gt;(2,5.0);//从“double”转换到“T”，可能丢失数据        mySay(2, 3);    return 0;&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**示例：**</span><br><span class="line"></span><br><span class="line">```C++</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//模板类</span><br><span class="line">template&lt;typename nametype,typename agetype=char&gt;</span><br><span class="line">class Person &#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Person(nametype name, agetype age) :name(name), age(age) &#123;  &#125;;</span><br><span class="line"></span><br><span class="line">nametype name;</span><br><span class="line">agetype age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">//1可以有默认参数</span><br><span class="line">//2没有自动类型推导</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//Person p2(&quot;dasdas&quot;, 22);//错误，类模板，没有自动类型推导</span><br><span class="line">Person&lt;string, int&gt; person(&quot;熏悟空&quot;, 989);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; person.name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; person.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">Person&lt;string, double&gt; p(&quot;王八蛋&quot;, 19.5);</span><br><span class="line">cout &lt;&lt; p.name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">Person&lt;string&gt; p2(&quot;牛马&quot;,&#x27;s&#x27;);</span><br><span class="line">//默认参数，你不传入就用我的默认int类型，你传入了就用你的类型</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; p2.name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol><p>总结：</p><ul><li>&#x3D;&#x3D;<strong>类模板使用只能用显示指定类型方式</strong>&#x3D;&#x3D;</li><li>类模板中的模板参数列表&#x3D;&#x3D;可以有默认参数&#x3D;&#x3D;</li></ul><h4 id="1-3-3-类模板中成员函数创建时机"><a href="#1-3-3-类模板中成员函数创建时机" class="headerlink" title="1.3.3 类模板中成员函数创建时机"></a>1.3.3 类模板中成员函数创建时机</h4><p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p><ul><li>&#x3D;&#x3D;普通类中的成员函数一开始就可以创建&#x3D;&#x3D;</li><li>类模板中的成员函数在调用时才创建</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person1 show&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person2 show&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板中的成员函数，并不是一开始就创建的，而是在模板调用时再生成</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123; obj.<span class="built_in">showPerson1</span>(); &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123; obj.<span class="built_in">showPerson2</span>(); &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyClass&lt;Person1&gt; m;</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">fun1</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//m.fun2();//编译会出错，说明函数调用才会去创建成员函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：&#x3D;&#x3D;类模板中的成员函数并不是一开始就创建的，在调用时才去创建&#x3D;&#x3D;</p><h4 id="1-3-4-类模板对象做函数参数"><a href="#1-3-4-类模板对象做函数参数" class="headerlink" title="1.3.4 &#x3D;&#x3D;类模板对象做函数参数&#x3D;&#x3D;"></a>1.3.4 &#x3D;&#x3D;类模板对象做函数参数&#x3D;&#x3D;</h4><p>学习目标：</p><ul><li>类模板实例化出的对象，向函数传参的方式</li></ul><p>一共有三种传入方式：</p><ol><li>指定传入的类型   — 直接显示对象的数据类型</li><li>参数模板化           — 将对象中的参数变为模板进行传递</li><li>整个类模板化       — 将这个对象类型 模板化进行传递</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Name</span>,<span class="keyword">class</span> <span class="title class_">Age</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(Name name, Age age) :<span class="built_in">name</span>(name), <span class="built_in">age</span>(age) &#123;&#125;;</span><br><span class="line">Name name;</span><br><span class="line">Age age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; name &lt;&lt; <span class="string">&quot;-==-&quot;</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//用我们类模板实例化的对象如何传入参数呢？</span></span><br><span class="line"><span class="comment">//一共有三种传入方式：</span></span><br><span class="line"><span class="comment">//1. 指定传入的类型-- - 直接显示对象的数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print1</span><span class="params">(Person&lt;string, <span class="type">int</span>&gt; p)</span> </span>&#123;</span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;1牛马&quot;</span>, <span class="number">111</span>);</span><br><span class="line"><span class="built_in">Print1</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. 参数模板化-- - 将对象中的参数变为模板进行传递</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">class</span> Y&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print2</span><span class="params">(Person&lt;T, Y&gt;p)</span> </span>&#123;</span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;2牛马&quot;</span>, <span class="number">222</span>);</span><br><span class="line"><span class="built_in">Print2</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3. 整个类模板化-- - 将这个对象类型 模板化进行传递</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print3</span><span class="params">(T p)</span> </span>&#123;</span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;string, <span class="type">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;3牛马&quot;</span>, <span class="number">333</span>);</span><br><span class="line"><span class="built_in">Print3</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;----------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li><li>使用比较广泛是第一种：指定传入的类型</li></ul><ol><li><img src="/xu-runbo/post/c6b8c88d/image-20231107175812155.png" class="" title="image-20231107175812155"> </li><li><img src="/xu-runbo/post/c6b8c88d/image-20231107175822932.png" class="" title="image-20231107175822932"> </li><li><img src="/xu-runbo/post/c6b8c88d/image-20231107175837844.png" class="" title="image-20231107175837844"></li></ol><h4 id="1-3-5-类模板与继承"><a href="#1-3-5-类模板与继承" class="headerlink" title="1.3.5 类模板与继承"></a>1.3.5 类模板与继承</h4><p>当类模板碰到继承时，需要注意一下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</li><li>如果不指定，编译器无法给子类分配内存</li><li>如果想灵活指定出父类中T的类型，子类也需变为类模板</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line">T m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class Son:public Base  //错误，c++编译需要给子类分配内存，必须知道父类中T的类型才可以向下继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base&lt;<span class="type">int</span>&gt; <span class="comment">//必须指定一个类型</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类模板继承类模板 ,可以用T2指定父类中的T类型</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> :<span class="keyword">public</span> Base&lt;T2&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son2</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T1).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">typeid</span>(T2).<span class="built_in">name</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son2&lt;<span class="type">int</span>, <span class="type">char</span>&gt; child1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>&#x3D;&#x3D;如果父类是类模板，子类需要指定出父类中T的数据类型&#x3D;&#x3D;</p><h4 id="1-3-6-类模板成员函数类外实现"><a href="#1-3-6-类模板成员函数类外实现" class="headerlink" title="1.3.6&#x3D;&#x3D;类模板成员函数类外实现&#x3D;&#x3D;"></a>1.3.6&#x3D;&#x3D;类模板成员函数类外实现&#x3D;&#x3D;</h4><p>学习目标：能够掌握类模板中的成员函数类外实现</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*当子类继承的父类是一个类模板时，子类在声明的时候，要指定出父类中T的类型</span></span><br><span class="line"><span class="comment">//* 如果不指定，编译器无法给子类分配内存</span></span><br><span class="line"><span class="comment">//* 如果想灵活指定出父类中T的类型，子类也需变为类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="keyword">class</span> <span class="title class_">Y</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(T a, Y b);</span><br><span class="line"><span class="comment">//Person(T a,Y b):a(a),b(b)&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//void showPerson()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;姓名&quot; &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;年龄&quot; &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">T a;</span><br><span class="line">Y b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="keyword">class</span> <span class="title class_">Y</span>&gt;</span><br><span class="line"> Person&lt;T, Y&gt;::<span class="built_in">Person</span>(T a, Y b)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line"> <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Y</span>&gt;</span><br><span class="line"> <span class="type">void</span> Person&lt;T,Y&gt;::<span class="built_in">showPerson</span>() &#123;</span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"> cout &lt;&lt; <span class="string">&quot;年龄&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Person&lt;string, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;dsa&quot;</span>, <span class="number">2323</span>)</span></span>;</span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：类模板中成员函数类外实现时，需要加上&#x3D;&#x3D;模板参数列表&#x3D;&#x3D;</p><p>template &lt;class T，class Y&gt;</p><p>Person&lt;T,Y&gt;::—————-Person（T a,T b）</p><p>void  showPerson()</p><h4 id="1-3-7-类模板分文件编写"><a href="#1-3-7-类模板分文件编写" class="headerlink" title="1.3.7 类模板分文件编写"></a>1.3.7 类模板分文件编写</h4><p>学习目标：</p><ul><li>掌握类模板成员函数分文件编写产生的问题以及解决方式</li></ul><blockquote><p>&#x3D;&#x3D;因为编译器是在调用的时候才创建的&#x3D;&#x3D;</p><p>传统的</p><p>.h写类的定义</p><p>.cpp写类的实现</p><img src="/xu-runbo/post/c6b8c88d/image-20231108093954392.png" class="" title="image-20231108093954392"> <p>解决办法1：</p><p>用的时候直接include “x.cpp”</p><p>解决办法2:</p><p>直接.cpp合在.h里面并且修改后缀为.hpp</p><p>&#x3D;&#x3D;这样大家都约定好的.hpp是模板类的声明和实现&#x3D;&#x3D;</p></blockquote><p>问题：</p><ul><li>类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到</li></ul><p>解决：</p><blockquote><ul><li>解决方式1：直接包含.cpp源文件</li><li>解决方式2：将声明和实现写到同一个文件中，并更改后缀名为.hpp，hpp是约定的名称，并不是强制</li></ul></blockquote><p><strong>示例：</strong></p><p>person.hpp中代码：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(T1 name, T2 age);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数 类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line">Person&lt;T1, T2&gt;::<span class="built_in">Person</span>(T1 name, T2 age) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="type">void</span> Person&lt;T1, T2&gt;::<span class="built_in">showPerson</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类模板分文件编写.cpp中代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#include &quot;person.h&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;person.cpp&quot;</span> <span class="comment">//解决方式1，包含cpp源文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决方式2，将声明和实现写到一起，文件后缀名改为.hpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;person.hpp&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person&lt;string, <span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p><h4 id="1-3-8-类模板与友元"><a href="#1-3-8-类模板与友元" class="headerlink" title="1.3.8 类模板与友元"></a>1.3.8 类模板与友元</h4><p>学习目标：</p><ul><li>掌握类模板配合友元函数的类内和类外实现</li></ul><p>！！全局函数&#x3D;&#x3D;类内实现&#x3D;&#x3D;- 直接在类内声明友元即可</p><p>全局函数&#x3D;&#x3D;类外实现&#x3D;&#x3D;- 需要提前让编译器知道全局函数的存在</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、全局函数配合友元  类外实现 - 先做函数模板声明，下方在做函数模板定义，在做友元</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt; <span class="keyword">class</span> <span class="title class_">Person</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果声明了函数模板，可以将实现写到后面，否则需要将实现体写到类的前面让编译器提前看到</span></span><br><span class="line"><span class="comment">//template&lt;class T1, class T2&gt; void printPerson2(Person&lt;T1, T2&gt; &amp; p); </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printPerson2</span><span class="params">(Person&lt;T1, T2&gt; &amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;类外实现 ---- 姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1、全局函数配合友元   类内实现</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">printPerson</span><span class="params">(Person&lt;T1, T2&gt; &amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数配合友元  类外实现</span></span><br><span class="line"><span class="keyword">friend</span> <span class="type">void</span> printPerson2&lt;&gt;(Person&lt;T1, T2&gt; &amp; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(T1 name, T2 age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、全局函数在类内实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person &lt;string, <span class="type">int</span> &gt;<span class="built_in">p</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">printPerson</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、全局函数在类外实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person &lt;string, <span class="type">int</span> &gt;<span class="built_in">p</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="built_in">printPerson2</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：&#x3D;&#x3D;<strong>建议全局函数做类内实现，用法简单，而且编译器可以直接识别</strong>&#x3D;&#x3D;</p><p><code>friend void 函数名(模板类参数)</code></p><p>{</p><p>直接实现！}</p><h4 id="1-3-9-类模板案例"><a href="#1-3-9-类模板案例" class="headerlink" title="1.3.9 &#x3D;&#x3D;类模板案例&#x3D;&#x3D;"></a>1.3.9 &#x3D;&#x3D;类模板案例&#x3D;&#x3D;</h4><p>案例描述:  实现一个通用的数组类，要求如下：</p><ul><li>可以对内置数据类型以及自定义数据类型的数据进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator&#x3D;防止浅拷贝问题</li><li>提供尾插法和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数组中的元素</li><li>可以获取数组中当前元素个数和数组的容量</li></ul><p><strong>示例：</strong></p><p>myArray.hpp中代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myarray</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;capacity == <span class="keyword">this</span>-&gt;m_size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;point[<span class="keyword">this</span>-&gt;m_size] = p;</span><br><span class="line"><span class="comment">//在数组插入我们的数据</span></span><br><span class="line"><span class="comment">//更新</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">//逻辑的尾删</span></span><br><span class="line"><span class="comment">//this-&gt;point[size - 1] = NULL;</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_size--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过下标访问</span></span><br><span class="line"><span class="comment">//T的时候是简单的返回，返回引用的时候就可以链式编程了</span></span><br><span class="line">T&amp; <span class="keyword">operator</span>[] (<span class="type">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;point[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回容量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_capacity</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回当前的大小</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Myarray</span>(<span class="type">int</span> capacity)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是Myarrray的有参构造&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;capacity = capacity;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;point = <span class="keyword">new</span> T[capacity];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"><span class="built_in">Myarray</span>(<span class="type">const</span> Myarray &amp;p) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是Myarrray的拷贝构造&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;capacity = p.capacity;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_size = p.m_size;</span><br><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;point != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;point;</span><br><span class="line"><span class="keyword">this</span>-&gt;point = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;point = <span class="keyword">new</span> T[p.capacity];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p.m_size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;point[i] = p.point[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//防止浅拷贝的问题</span></span><br><span class="line">Myarray&amp; <span class="keyword">operator</span>= (<span class="type">const</span> Myarray&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是我的赋值=的构造函数！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;point != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;point;</span><br><span class="line"><span class="keyword">this</span>-&gt;point = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;capacity = p.capacity;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_size = p.m_size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;point = <span class="keyword">new</span> <span class="built_in">T</span>(p.capacity);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p.m_size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;point[i] = p.point[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Myarray</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是Myarrray的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;point != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;point;</span><br><span class="line"><span class="keyword">this</span>-&gt;point = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> capacity;</span><br><span class="line"><span class="type">int</span> m_size;</span><br><span class="line">T* point;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="type">void</span> Myarray&lt;T&gt;::<span class="built_in">Print</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;<span class="built_in">get_size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="keyword">this</span>-&gt;point[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类模板案例—数组类封装.cpp中</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;myarray.hpp&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123;&#125;;</span><br><span class="line"><span class="comment">//需要默认构造是因为，创造数组的时候，数组中的每个默认元素都是用默认构造创造出来的，所以不能少默认构造</span></span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age) :<span class="built_in">name</span>(name), <span class="built_in">age</span>(age) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PersonPrint</span><span class="params">(Myarray&lt;Person&gt;&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p.<span class="built_in">get_size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名为&quot;</span> &lt;&lt; p[i].name &lt;&lt; <span class="string">&quot;年龄为&quot;</span> &lt;&lt; p[i].age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyPrint</span><span class="params">(Myarray&lt;<span class="type">int</span>&gt; &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//注意对象作为形参传入的时候会调用拷贝构造函数，要严格对应自己的拷贝函数的对应关系，&amp;来接受</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p.<span class="built_in">get_size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试有参构造</span></span><br><span class="line"><span class="comment">//Myarray&lt;int&gt; array(5);</span></span><br><span class="line"><span class="comment">//测试成功</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试拷贝构造</span></span><br><span class="line"><span class="function">Myarray&lt;<span class="type">int</span>&gt; <span class="title">array1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//Myarray&lt;int&gt; array2(array1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试=的浅拷贝问题</span></span><br><span class="line">Myarray &lt;<span class="type">int</span>&gt; <span class="built_in">array3</span>(<span class="number">100</span>);</span><br><span class="line">array3 = array1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和</span></span><br><span class="line"><span class="comment">//Myarray&lt;int&gt; arr3 = array1;是有区别的</span></span><br><span class="line"><span class="comment">//Myarray&lt;int&gt; arr3(array1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;测试我们的vector青春版&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Myarray&lt;<span class="type">int</span>&gt; <span class="title">test</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">test.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写一个成员函数遍历</span></span><br><span class="line">test.<span class="built_in">Print</span>();</span><br><span class="line"><span class="comment">//用全局函数遍历</span></span><br><span class="line"><span class="built_in">MyPrint</span>(test);</span><br><span class="line">test.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">MyPrint</span>(test);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;测试我们的自定义数据&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;赵云&quot;</span>, <span class="number">11</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;安其拉&quot;</span>, <span class="number">22</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;马超&quot;</span>, <span class="number">33</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;牛马&quot;</span>, <span class="number">51</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Myarray&lt;Person&gt; <span class="title">PersonArray</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">PersonArray.<span class="built_in">push_back</span>(p1);</span><br><span class="line">PersonArray.<span class="built_in">push_back</span>(p2);</span><br><span class="line">PersonArray.<span class="built_in">push_back</span>(p3);</span><br><span class="line">PersonArray.<span class="built_in">push_back</span>(p4);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PersonPrint</span>(PersonArray);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>能够利用所学知识点实现通用的数组</p><h2 id="2-STL初识"><a href="#2-STL初识" class="headerlink" title="2 STL初识"></a>2 STL初识</h2><h3 id="2-1-STL的诞生"><a href="#2-1-STL的诞生" class="headerlink" title="2.1 STL的诞生"></a>2.1 STL的诞生</h3><ul><li><p>长久以来，软件界一直希望建立一种可重复利用的东西</p></li><li><p>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是&#x3D;&#x3D;<strong>复用性的提升</strong>&#x3D;&#x3D;</p></li><li><p>大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作</p></li><li><p>为了&#x3D;&#x3D;建立数据结构和算法的一套标准,诞生了<strong>STL</strong>&#x3D;&#x3D;</p></li></ul><h3 id="2-2-STL基本概念"><a href="#2-2-STL基本概念" class="headerlink" title="2.2 STL基本概念"></a>2.2 STL基本概念</h3><ul><li>STL(Standard Template Library,<strong>&#x3D;&#x3D;标准模板库&#x3D;&#x3D;</strong>)</li><li>STL 从广义上分为: <strong>容器(container) 算法(algorithm) 迭代器(iterator)</strong></li><li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接。</li><li>STL 几乎所有的代码都采用了模板类或者模板函数</li></ul><h3 id="2-3-STL六大组件"><a href="#2-3-STL六大组件" class="headerlink" title="2.3 STL六大组件"></a>2.3 STL六大组件</h3><p>STL大体分为六大组件，分别是:&#x3D;&#x3D;<strong>容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</strong>&#x3D;&#x3D;</p><ol><li>容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。</li><li>算法：各种常用的算法，如sort、find、copy、for_each等</li><li>迭代器：扮演了容器与算法之间的胶合剂。</li><li>仿函数：行为类似函数，可作为算法的某种策略。</li><li>适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。</li><li>空间配置器：负责空间的配置与管理。</li></ol><h3 id="2-4-STL中容器、算法、迭代器"><a href="#2-4-STL中容器、算法、迭代器" class="headerlink" title="2.4  STL中容器、算法、迭代器"></a>2.4  STL中容器、算法、迭代器</h3><p><strong>容器：</strong>置物之所也</p><p>STL<strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p><p>常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等</p><p>这些容器分为<strong>序列式容器</strong>和<strong>关联式容器</strong>两种:</p><p>&#x3D;&#x3D;<strong>序列式容器</strong>:强调值的排序，序列式容器中的每个元素均有固定的位置。&#x3D;&#x3D;<br>&#x3D;&#x3D;<strong>关联式容器</strong>:二叉树结构，各元素之间没有严格的物理上的顺序关系&#x3D;&#x3D;</p><p><strong>算法：</strong>问题之解法也</p><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)</p><p>算法分为:<strong>质变算法</strong>和<strong>非质变算法</strong>。</p><p>&#x3D;&#x3D;质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等&#x3D;&#x3D;</p><p>&#x3D;&#x3D;非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等&#x3D;&#x3D;</p><p><strong>迭代器：</strong>容器和算法之间粘合剂</p><p>&#x3D;&#x3D;提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又<strong>无需暴露该容器的内部表示方式。</strong>&#x3D;&#x3D;</p><blockquote><p>&#x3D;&#x3D;每个容器都有自己专属的迭代器&#x3D;&#x3D;</p></blockquote><hr><p>迭代器使用非常类似于&#x3D;&#x3D;指针&#x3D;&#x3D;，初学阶段我们可以先理解迭代器为指针</p><p>迭代器种类：</p><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>只读，支持++、&#x3D;&#x3D;、！&#x3D;</td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>读写操作，并能向前推进迭代器</td><td>读写，支持++、&#x3D;&#x3D;、！&#x3D;</td></tr><tr><td>&#x3D;&#x3D;双向迭代器&#x3D;&#x3D;</td><td>读写操作，并能向前和向后操作</td><td>读写，支持++、–，</td></tr><tr><td>&#x3D;&#x3D;随机访问迭代器&#x3D;&#x3D;</td><td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td>读写，支持++、–、[n]、-n、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;</td></tr></tbody></table><p>常用的容器中迭代器种类为&#x3D;&#x3D;双向迭代器，和随机访问迭代器&#x3D;&#x3D;</p><h3 id="2-5-容器算法迭代器初识"><a href="#2-5-容器算法迭代器初识" class="headerlink" title="2.5 容器算法迭代器初识"></a>2.5 容器算法迭代器初识</h3><p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p><p>STL中&#x3D;&#x3D;最常用的容器为Vector&#x3D;&#x3D;，可以理解为&#x3D;&#x3D;数组&#x3D;&#x3D;，下面我们将学习如何向这个容器中插入数据、并遍历这个容器</p><h4 id="2-5-1-vector存放内置数据类型"><a href="#2-5-1-vector存放内置数据类型" class="headerlink" title="2.5.1 vector存放内置数据类型"></a>2.5.1 vector存放内置数据类型</h4><p>容器：     <code>vector</code></p><p>算法：     <code>for_each</code></p><p>迭代器： <code>vector&lt;int&gt;::iterator</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//for_each需要用</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; v &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span></span><br><span class="line"><span class="comment">//v.begin()返回迭代器，这个迭代器指向容器中第一个数据</span></span><br><span class="line"><span class="comment">//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator start = v.<span class="built_in">begin</span>();</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator end = v.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一种遍历的方式传统的for循环&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//重载了[]符号</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; v[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (start; start &lt; end; start++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *start &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;第二种遍历的方式&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//while (start!=end)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; *start&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//start++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第三种遍历的方式&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(), myprint);</span><br><span class="line"></span><br><span class="line">for_each(start, end, myprint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-Vector存放自定义数据类型"><a href="#2-5-2-Vector存放自定义数据类型" class="headerlink" title="2.5.2 Vector存放自定义数据类型"></a>2.5.2 Vector存放自定义数据类型</h4><p>学习目标：vector中存放自定义数据类型，并打印输出</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string n, <span class="type">int</span> a) :<span class="built_in">name</span>(n), <span class="built_in">age</span>(a) &#123;&#125;;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">const</span> Person&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name是&quot;</span> &lt;&lt; p.name &lt;&lt; <span class="string">&quot;年龄是&quot;</span> &lt;&lt; p.age&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每一个容器都有自己的迭代器，迭代器是用来遍历容器中的元素</span></span><br><span class="line"><span class="comment">//v.begin()返回迭代器，这个迭代器指向容器中第一个数据</span></span><br><span class="line"><span class="comment">//v.end()返回迭代器，这个迭代器指向容器元素的最后一个元素的下一个位置</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt;::iterator 拿到vector&lt;int&gt;这种容器的迭代器类型</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;Person&gt; v;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;牛马4&quot;</span>, <span class="number">22</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;牛马3&quot;</span>, <span class="number">12</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;牛马2&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;牛马1&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;牛马5&quot;</span>, <span class="number">23</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">v.<span class="built_in">push_back</span>(p4);</span><br><span class="line">v.<span class="built_in">push_back</span>(p5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在vector里面放对象的指针！</span></span><br><span class="line"></span><br><span class="line">vector&lt;Person*&gt; v1;</span><br><span class="line"><span class="function">Person <span class="title">p11</span><span class="params">(<span class="string">&quot;牛马4&quot;</span>, <span class="number">22</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p22</span><span class="params">(<span class="string">&quot;牛马3&quot;</span>, <span class="number">12</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p33</span><span class="params">(<span class="string">&quot;牛马2&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p44</span><span class="params">(<span class="string">&quot;牛马1&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p55</span><span class="params">(<span class="string">&quot;牛马5&quot;</span>, <span class="number">23</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">v1.<span class="built_in">push_back</span>(&amp;p11);</span><br><span class="line">v1.<span class="built_in">push_back</span>(&amp;p22);</span><br><span class="line">v1.<span class="built_in">push_back</span>(&amp;p33);</span><br><span class="line">v1.<span class="built_in">push_back</span>(&amp;p44);</span><br><span class="line">v1.<span class="built_in">push_back</span>(&amp;p55);</span><br><span class="line"><span class="comment">//-------------------------------------------------------</span></span><br><span class="line"><span class="comment">//运算符优先级的问题，（），先解引用在成员运算符</span></span><br><span class="line"><span class="comment">//因为&quot;.&quot;运算符的优先级高于&quot;*&quot;运算符，所以需要使用括号来改变优先级。</span></span><br><span class="line"><span class="comment">//使用括号来明确指定运算符的优先级，避免混淆。</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;Person*&gt;::iterator start1 = v1.<span class="built_in">begin</span>(); start1!=v1.<span class="built_in">end</span>(); start1++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名是！&quot;</span> &lt;&lt; (*start1)-&gt;name &lt;&lt; (*start1)-&gt;age &lt;&lt; endl;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;姓名是！&quot; &lt;&lt; *start1-&gt;name &lt;&lt; *start1-&gt;age &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>指针自增</p><p>指针的++操作用于&#x3D;&#x3D;<strong>将指针的值增加一个单位</strong>，具体取决于指针<strong>指向的数据类型的大小</strong>。&#x3D;&#x3D;例如，如果一个指针指向一个整型变量，执行++操作将使指针指向下一个整型变量的地址。</p></blockquote><p>for_each+&lt;类型&gt;myprint+vector;</p><h4 id="2-5-3-Vector容器嵌套容器"><a href="#2-5-3-Vector容器嵌套容器" class="headerlink" title="2.5.3 Vector容器嵌套容器"></a>2.5.3 Vector容器嵌套容器</h4><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">newprint</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">for_each(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), myprint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; father;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s2;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s3;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s4;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; s5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">s1.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">s2.<span class="built_in">push_back</span>(i + <span class="number">2</span>);</span><br><span class="line">s3.<span class="built_in">push_back</span>(i + <span class="number">3</span>);</span><br><span class="line">s4.<span class="built_in">push_back</span>(i + <span class="number">4</span>);</span><br><span class="line">s5.<span class="built_in">push_back</span>(i + <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">for_each(s1.<span class="built_in">begin</span>(), s1.<span class="built_in">end</span>(), myprint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">for_each(s2.<span class="built_in">begin</span>(), s2.<span class="built_in">end</span>(), myprint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">for_each(s3.<span class="built_in">begin</span>(), s3.<span class="built_in">end</span>(), myprint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">for_each(s4.<span class="built_in">begin</span>(), s4.<span class="built_in">end</span>(), myprint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">for_each(s5.<span class="built_in">begin</span>(), s5.<span class="built_in">end</span>(), myprint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;分割线！------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//然后father里面装vector</span></span><br><span class="line"></span><br><span class="line">father.<span class="built_in">push_back</span>(s1);</span><br><span class="line">father.<span class="built_in">push_back</span>(s2);</span><br><span class="line">father.<span class="built_in">push_back</span>(s3);</span><br><span class="line">father.<span class="built_in">push_back</span>(s4);</span><br><span class="line">father.<span class="built_in">push_back</span>(s5);</span><br><span class="line"></span><br><span class="line">for_each(father.<span class="built_in">begin</span>(), father.<span class="built_in">end</span>(), newprint);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;分割线！---------双层for循环--------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;::iterator it = father.<span class="built_in">begin</span>(); it != father.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = (*it).<span class="built_in">begin</span>(); i &lt; (*it).<span class="built_in">end</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优先级()区分</span></span><br><span class="line"><span class="comment">//vector的迭代器是用指针来玩的</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;分割线！---------双层for循环但是[]--------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;father.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; temp = father[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;temp.<span class="built_in">size</span>();j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; temp[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-STL-常用容器"><a href="#3-STL-常用容器" class="headerlink" title="3 STL- 常用容器"></a>3 STL- 常用容器</h2><h3 id="3-1-string容器"><a href="#3-1-string容器" class="headerlink" title="3.1 string容器"></a>3.1 string容器</h3><h4 id="3-1-1-string基本概念"><a href="#3-1-1-string基本概念" class="headerlink" title="3.1.1 string基本概念"></a>3.1.1 string基本概念</h4><p><strong>本质：</strong></p><ul><li>&#x3D;&#x3D;string是C++风格的字符串，而string本质上是一个类&#x3D;&#x3D;</li></ul><p><strong>string和char * 区别：</strong></p><ul><li>char * 是一个指针</li><li>string是一个类，类内部封装了char*，管理这个字符串，是一个char*型的容器。</li></ul><p><strong>特点：</strong></p><p>string 类内部封装了很多成员方法</p><p>例如：查找find，拷贝copy，删除delete 替换replace，插入insert</p><p>string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p><h4 id="3-1-2-string构造函数"><a href="#3-1-2-string构造函数" class="headerlink" title="3.1.2 string构造函数"></a>3.1.2 string构造函数</h4><p>构造函数原型：</p><ul><li><code>string();</code>          &#x2F;&#x2F;创建一个空的字符串 例如: string str;<br><code>string(const char* s);</code>        &#x2F;&#x2F;使用字符串s初始化</li><li><code>string(const string&amp; str);</code>    &#x2F;&#x2F;使用一个string对象初始化另一个string对象</li><li><code>string(int n, char c);</code>           &#x2F;&#x2F;使用n个字符c初始化</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//string构造</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string s1; <span class="comment">//创建空字符串，调用无参构造函数</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    <span class="comment">//“hello world”字符串字面量也是char*</span></span><br><span class="line"><span class="function">string <span class="title">s2</span><span class="params">(str)</span></span>; <span class="comment">//把c_string转换成了string</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str2 = &quot;</span> &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s3</span><span class="params">(s2)</span></span>; <span class="comment">//调用拷贝构造函数</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">s4</span><span class="params">(<span class="number">10</span>, <span class="string">&#x27;a&#x27;</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：string的多种构造方式没有可比性，灵活使用即可</p><h4 id="3-1-3-string赋值操作"><a href="#3-1-3-string赋值操作" class="headerlink" title="3.1.3 string赋值操作"></a>3.1.3 string赋值操作</h4><p>功能描述：</p><ul><li>给string字符串进行赋值</li></ul><p>赋值的函数原型：</p><ul><li><code>string&amp; operator=(const char* s);</code>             &#x2F;&#x2F;char*类型字符串 赋值给当前的字符串</li><li><code>string&amp; operator=(const string &amp;s);</code>         &#x2F;&#x2F;把字符串s赋给当前的字符串</li><li><code>string&amp; operator=(char c);</code>                          &#x2F;&#x2F;字符赋值给当前的字符串</li><li><code>string&amp; assign(const char *s);</code>                  &#x2F;&#x2F;把字符串s赋给当前的字符串</li><li><code>string&amp; assign(const char *s, int n);</code>     &#x2F;&#x2F;把字符串s的前n个字符赋给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code>              &#x2F;&#x2F;把字符串s赋给当前字符串</li><li><code>string&amp; assign(int n, char c);</code>                  &#x2F;&#x2F;用n个字符c赋给当前字符串</li><li><code>string&amp; assign(const string &amp;s, int pos, int n);</code>&#x2F;&#x2F;字符串s中从pos开始的n个字符赋给当前字符串</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string str1;</span><br><span class="line">str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str1 = &quot;</span> &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str2;</span><br><span class="line">str2 = str1;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str2 = &quot;</span> &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str3;</span><br><span class="line">str3 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str3 = &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str4;</span><br><span class="line">str4.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str4 = &quot;</span> &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str5;</span><br><span class="line">str5.<span class="built_in">assign</span>(<span class="string">&quot;hello c++&quot;</span>,<span class="number">5</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str5 = &quot;</span> &lt;&lt; str5 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">string str6;</span><br><span class="line">str6.<span class="built_in">assign</span>(str5);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str6 = &quot;</span> &lt;&lt; str6 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str7;</span><br><span class="line">str7.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str7 = &quot;</span> &lt;&lt; str7 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>​string的赋值方式很多，<code>operator=</code>  这种方式是比较实用的</p><h4 id="3-1-4-string字符串拼接"><a href="#3-1-4-string字符串拼接" class="headerlink" title="3.1.4 string字符串拼接"></a>3.1.4 string字符串拼接</h4><p><strong>功能描述：</strong></p><ul><li>实现在字符串末尾拼接字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; operator+=(const char* str);</code>                   &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const char c);</code>                         &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code>                &#x2F;&#x2F;重载+&#x3D;操作符</li><li><code>string&amp; append(const char *s); </code>                               &#x2F;&#x2F;把字符串s连接到当前字e符串结尾</li><li><code>string&amp; append(const char *s, int n);</code>                 &#x2F;&#x2F;把字符串s的前n个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code>                           &#x2F;&#x2F;同operator+&#x3D;(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code>&#x3D;&#x3D;字符串s中从pos开始的n个字符连接到字符串&#x3D;&#x3D;</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//string构造函数</span></span><br><span class="line">string str1;<span class="comment">//无参构造，空的string</span></span><br><span class="line"><span class="function">string <span class="title">str2</span><span class="params">(str1)</span></span>;<span class="comment">//传入string</span></span><br><span class="line"><span class="function">string <span class="title">str3</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;<span class="comment">//传入char *类型，C++把字符串字面量当作char*</span></span><br><span class="line"><span class="function">string <span class="title">str4</span><span class="params">(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>)</span></span>;<span class="comment">//n个字符char</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; str3 &lt;&lt; <span class="string">&quot;:::&quot;</span> &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//string的赋值=和assign</span></span><br><span class="line"><span class="comment">//字符,char*,string类</span></span><br><span class="line">string newstr3;</span><br><span class="line">newstr3 = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">cout &lt;&lt; newstr3 &lt;&lt; endl;</span><br><span class="line">newstr3 = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">cout &lt;&lt; newstr3 &lt;&lt; endl;</span><br><span class="line">newstr3 = str3;</span><br><span class="line">cout &lt;&lt; newstr3 &lt;&lt; endl;</span><br><span class="line"><span class="comment">//assign</span></span><br><span class="line">string newstr4;</span><br><span class="line">newstr4.<span class="built_in">assign</span>(str3, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; newstr4 &lt;&lt; endl;</span><br><span class="line">newstr4.<span class="built_in">assign</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">cout &lt;&lt; newstr4&lt;&lt;endl;</span><br><span class="line">newstr4.<span class="built_in">assign</span>(<span class="built_in">string</span>(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">cout &lt;&lt; newstr4 &lt;&lt; endl;</span><br><span class="line">newstr4.<span class="built_in">assign</span>(<span class="string">&quot;hello&quot;</span>,<span class="number">4</span>);</span><br><span class="line">cout &lt;&lt; newstr4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; typeid(string(&quot;name&quot;)).name();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//string的+=重载，</span></span><br><span class="line">string czstr1 = <span class="string">&quot;我&quot;</span>;</span><br><span class="line">czstr1 += <span class="string">&quot;dsa&quot;</span>;</span><br><span class="line">cout &lt;&lt; czstr1 &lt;&lt; endl;</span><br><span class="line">czstr1 += <span class="string">&#x27;s&#x27;</span>;</span><br><span class="line">cout &lt;&lt; czstr1 &lt;&lt; endl;</span><br><span class="line">czstr1 += <span class="built_in">string</span>(<span class="string">&quot;哦怕&quot;</span>);</span><br><span class="line">cout &lt;&lt; czstr1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">czstr1.<span class="built_in">append</span>(<span class="string">&quot;Lol&quot;</span>);</span><br><span class="line">cout &lt;&lt; czstr1 &lt;&lt; endl;</span><br><span class="line">czstr1.<span class="built_in">append</span>(<span class="string">&quot;hello world&quot;</span>, <span class="number">5</span>);</span><br><span class="line">cout &lt;&lt; czstr1 &lt;&lt; endl;</span><br><span class="line">czstr1.<span class="built_in">append</span>(<span class="built_in">string</span>(<span class="string">&quot;opopo&quot;</span>));</span><br><span class="line">cout &lt;&lt; czstr1 &lt;&lt; endl;</span><br><span class="line">czstr1.<span class="built_in">append</span>(<span class="built_in">string</span>(<span class="string">&quot;abcdef&quot;</span>), <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; czstr1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：字符串拼接的重载版本很多，初学阶段记住几种即可</p><h4 id="3-1-5-string查找和替换"><a href="#3-1-5-string查找和替换" class="headerlink" title="3.1.5 string查找和替换"></a>3.1.5 string查找和替换</h4><p><strong>功能描述：</strong></p><ul><li>查找：查找指定字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>int find(const string&amp; str, int pos = 0) const;</code>              &#x2F;&#x2F;查找str第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos = 0) const; </code>                     &#x2F;&#x2F;查找s第一次出现位置,从pos开始查找</li><li><code>int find(const char* s, int pos, int n) const; </code>               &#x2F;&#x2F;从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c, int pos = 0) const; </code>                       &#x2F;&#x2F;查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str, int pos = npos) const;</code>      &#x2F;&#x2F;查找str最后一次位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos = npos) const;</code>              &#x2F;&#x2F;查找s最后一次出现位置,从pos开始查找</li><li><code>int rfind(const char* s, int pos, int n) const;</code>              &#x2F;&#x2F;从pos查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c, int pos = 0) const;  </code>                      &#x2F;&#x2F;查找字符c最后一次出现位置</li><li><code>string&amp; replace(int start, int n, const string&amp; str); </code>       &#x2F;&#x2F;替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int start, int n,const char* s); </code>                 &#x2F;&#x2F;替换从pos开始的n个字符为字符串s</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//*`int find(const string &amp; str, int pos = 0) const; `              //查找str第一次出现位置,从pos开始查找</span></span><br><span class="line"><span class="comment">//* `int find(const char* s, int pos = 0) const; `                     //查找s第一次出现位置,从pos开始查找</span></span><br><span class="line"><span class="comment">//* `int find(const char* s, int pos, int n) const; `               //从pos位置查找s的前n个字符第一次位置</span></span><br><span class="line"><span class="comment">//* `int find(const char c, int pos = 0) const; `                       //查找字符c第一次出现位置</span></span><br><span class="line"><span class="comment">//* `int rfind(const string &amp; str, int pos = npos) const; `      //查找str最后一次位置,从pos开始查找</span></span><br><span class="line"><span class="comment">//* `int rfind(const char* s, int pos = npos) const; `              //查找s最后一次出现位置,从pos开始查找</span></span><br><span class="line"><span class="comment">//* `int rfind(const char* s, int pos, int n) const; `              //从pos查找s的前n个字符最后一次位置</span></span><br><span class="line"><span class="comment">//* `int rfind(const char c, int pos = 0) const;  `                      //查找字符c最后一次出现位置</span></span><br><span class="line"><span class="comment">//* `string&amp; replace(int start, int n, const string &amp; str); `       //替换从pos开始n个字符为字符串str</span></span><br><span class="line"><span class="comment">//* `string&amp; replace(int start, int n, cons t char* s); `                 //替换从pos开始的n个字符为字符串s</span></span><br><span class="line">string str = <span class="string">&quot;i love you forever&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找一个love从左到右第一次出现的下标&quot;</span> &lt;&lt; str.<span class="built_in">find</span>(<span class="string">&quot;love&quot;</span>)&lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找一个&#x27;love&#x27;o&#x27;从左到右第一次出现的下标&quot;</span> &lt;&lt; str.<span class="built_in">find</span>(<span class="string">&#x27;o&#x27;</span>)&lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找一个&#x27;&#x27;you&#x27;从左到右第一次出现的下标&quot;</span> &lt;&lt; str.<span class="built_in">find</span>(<span class="string">&quot;you&quot;</span>) &lt;&lt; endl;<span class="comment">//7</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一次出现o的下标&quot;</span> &lt;&lt; str.<span class="built_in">find</span>(<span class="string">&#x27;o&#x27;</span>)&lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;最后出现o的下标&quot;</span> &lt;&lt; str.<span class="built_in">rfind</span>(<span class="string">&#x27;o&#x27;</span>)&lt;&lt;endl;</span><br><span class="line">cout &lt;&lt;str.<span class="built_in">length</span>()&lt;&lt; <span class="string">&quot;最后出现e的下标&quot;</span> &lt;&lt; str.<span class="built_in">rfind</span>(<span class="string">&#x27;e&#x27;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从哪开始，要替换多少个，要替换的东西</span></span><br><span class="line">str.<span class="built_in">replace</span>(<span class="number">7</span>, <span class="number">3</span>, <span class="string">&quot;LOLLL&quot;</span>);</span><br><span class="line"><span class="comment">//从小标7开始后三个要替换为&quot;LOLLL&quot;</span></span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>find查找是从左往后，rfind从右往左</li><li>find找到字符串后返回查找的第一个字符位置，找不到返回-1</li><li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul><h4 id="3-1-6-string字符串比较"><a href="#3-1-6-string字符串比较" class="headerlink" title="3.1.6 string字符串比较"></a>3.1.6 string字符串比较</h4><p><strong>功能描述：</strong></p><ul><li>字符串之间的比较</li></ul><p>在C++中，<code>std::string</code>类型可以使用<code>&gt;</code>和<code>&lt;</code>来进行字典序比较。这是因为<code>std::string</code>类重载了<code>&gt;</code>和<code>&lt;</code>运算符，使得可以直接对字符串进行比较。</p><p>因此，如果你希望按照字符串的字典序来比较键值对，你可以直接在map中使用默认的比较函数对象，而不需要定义自定义的比较函数对象。</p><p>根据字符串的字典序来排序键值对</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">compare</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string&amp; s1, <span class="type">const</span> string&amp; s2)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1 &gt; s2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>比较方式：</strong></p><ul><li>字符串比较是&#x3D;&#x3D;<strong>按字符的ASCII码进行对比</strong>&#x3D;&#x3D;</li></ul><p><code>str1.compre(str2)</code></p><p>&#x3D; 返回   0 str1&#x3D;str2</p><p>&gt; 返回   1 str1&gt;str2</p><p>&lt; 返回  -1str1&lt;str2</p><p><strong>函数原型：</strong></p><ul><li><code>int compare(const string &amp;s) const; </code>  &#x2F;&#x2F;与字符串s比较</li><li><code>int compare(const char *s) const;</code>      &#x2F;&#x2F;与字符串s比较</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string str1 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">string str2 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">string str3 = <span class="string">&quot;xello world&quot;</span>;</span><br><span class="line">string str4 = <span class="string">&quot;helao world&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;相等？&quot;</span> &lt;&lt; str1.<span class="built_in">compare</span>(str2)&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str4))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str1大!&quot;</span>&lt;&lt;str1.<span class="built_in">compare</span>(str4) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str3))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str3大&quot;</span> &lt;&lt; str1.<span class="built_in">compare</span>(str3) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：字符串对比主要是用于比较两个字符串是否相等，判断谁大谁小的意义并不是很大</p><p>比较过程中遇到第一个不相等的字符就会结束比较，所以后面的字符完全没有影响</p><blockquote><p>srr1.compare(str2)</p><p>str1</p><p>str2</p><p>做减法，遇到上减下&gt;&lt;0就退出了</p><p>遇到&#x3D;继续往后比较直到末尾或者比较到&gt;&lt;或</p></blockquote><h4 id="3-1-7-string字符存取"><a href="#3-1-7-string字符存取" class="headerlink" title="3.1.7 string字符存取"></a>3.1.7 string字符存取</h4><p>string中单个字符存取方式有两种</p><ul><li><code>char&amp; operator[](int n); </code>     &#x2F;&#x2F;通过[]方式取字符</li><li><code>char&amp; at(int n);   </code>                    &#x2F;&#x2F;通过at方法获取字符</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//重载的[]</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; str.<span class="built_in">find</span>(<span class="string">&#x27;l&#x27;</span>)&lt;&lt;endl;</span><br><span class="line"><span class="type">int</span> l1index = str.<span class="built_in">find</span>(<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">cout &lt;&lt; str[l1index] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; str.<span class="built_in">at</span>(l1index) &lt;&lt; endl;</span><br><span class="line">str[l1index] = <span class="string">&#x27;p&#x27;</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">str.<span class="built_in">at</span>(l1index) = <span class="string">&#x27;z&#x27;</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;总结string的size和length方法没有区别，cstr的数组sizeof和strlen是由区别的&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size的大小&quot;</span> &lt;&lt; str.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;lengt的大小&quot;</span> &lt;&lt; str.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* cpstr = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> cstr[<span class="number">6</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;对于c字符数组&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;cstr的字符个数&quot;</span> &lt;&lt; <span class="built_in">strlen</span>(cstr)&lt;&lt; endl;<span class="comment">//5不包含\0</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;cstr的size的大小&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(cstr) &lt;&lt; endl;<span class="comment">//6包含末尾的\0</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;cstr的size的大小&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(cstr)/<span class="built_in">sizeof</span>(cstr[<span class="number">0</span>]) &lt;&lt; endl;<span class="comment">//6包含末尾的\0</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;对于char*&quot;</span> &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;cpstr的字符个数&quot;</span> &lt;&lt; <span class="built_in">strlen</span>(cpstr) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;cpstr的size&quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(cpstr) &lt;&lt; endl;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;string的size大小&quot; &lt;&lt; size&lt;&lt;endl;//是指针的大小</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：string字符串中单个字符存取有两种方式，&#x3D;&#x3D;利用 [ ] 或 at&#x3D;&#x3D;</p><h4 id="3-1-8-string插入和删除"><a href="#3-1-8-string插入和删除" class="headerlink" title="3.1.8 string插入和删除"></a>3.1.8 string插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>对string字符串进行插入和删除字符操作</li><li>&#x3D;&#x3D;<strong>都会指定从哪里插入！</strong>&#x3D;&#x3D;</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string&amp; insert(int pos, const char* s);  </code>                &#x2F;&#x2F;插入字符串</li><li><code>string&amp; insert(int pos, const string&amp; str); </code>        &#x2F;&#x2F;插入字符串</li><li><code>string&amp; insert(int pos, int n, char c);</code>                &#x2F;&#x2F;在指定位置插入n个字符c</li><li><code>string&amp; erase(int pos, int n = npos);</code>                    &#x2F;&#x2F;删除从Pos开始的n个字符</li></ul><hr><p> <strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">str.<span class="built_in">insert</span>(<span class="number">1</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    <span class="comment">//从这个下标就是插入的内容了</span></span><br><span class="line">   <span class="comment">// 1就是新插入字符串的第一个小标</span></span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;<span class="comment">//h111ello</span></span><br><span class="line">str.<span class="built_in">erase</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;<span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>插入和删除的起始下标都是从0开始</p><h4 id="3-1-9-string子串"><a href="#3-1-9-string子串" class="headerlink" title="3.1.9 string子串"></a>3.1.9 string子串</h4><p><strong>功能描述：</strong></p><ul><li>从字符串中获取想要的子串</li></ul><p><strong>函数原型：</strong></p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code>   &#x2F;&#x2F;返回由pos开始的n个字符组成的字符串</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string str = <span class="string">&quot;zhangsan@qq.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> index = str.<span class="built_in">find</span>(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">cout &lt;&lt; index &lt;&lt; endl;</span><br><span class="line">string aimstr = str.<span class="built_in">substr</span>(index, <span class="number">7</span>);</span><br><span class="line">cout &lt;&lt; aimstr &lt;&lt; endl;</span><br><span class="line">string username = str.<span class="built_in">substr</span>(<span class="number">0</span>, index);</span><br><span class="line">cout &lt;&lt; username &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>灵活的运用求子串功能，可以在实际开发中获取有效的信息</p><h3 id="3-2-vector容器"><a href="#3-2-vector容器" class="headerlink" title="3.2 vector容器"></a>3.2 vector容器</h3><h4 id="vector-的遍历"><a href="#vector-的遍历" class="headerlink" title="vector 的遍历"></a>vector 的遍历</h4><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot;*&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1Print(v);</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3Print&lt;vector&lt;int&gt;&gt;(v);</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(T p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2Print&lt;int&gt;(v);</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;T&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot;=&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Print</span>&lt;<span class="type">int</span>&gt;(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">Print&lt;vector&lt;<span class="type">int</span>&gt;&gt;(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot;~&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="3-2-1-vector基本概念"><a href="#3-2-1-vector基本概念" class="headerlink" title="3.2.1 vector基本概念"></a>3.2.1 vector基本概念</h4><p><strong>功能：</strong></p><ul><li>vector数据结构和<strong>数组非常相似</strong>，也称为<strong>单端数组</strong></li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处在于&#x3D;&#x3D;数组是静态空间&#x3D;&#x3D;，而vector可以&#x3D;&#x3D;<strong>动态扩展</strong>&#x3D;&#x3D;</li></ul><p><strong>动态扩展：</strong></p><ul><li>并不是在原空间之后续接新空间，而是找更大的内存空间，然后&#x3D;&#x3D;将原数据拷贝新空间，释放原空间&#x3D;&#x3D;</li></ul><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Myarray&amp; <span class="keyword">operator</span>= (<span class="type">const</span> Myarray&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是我的赋值=的构造函数！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;point != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;point;</span><br><span class="line"><span class="keyword">this</span>-&gt;point = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;capacity = p.capacity;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_size = p.m_size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;point = <span class="keyword">new</span> <span class="built_in">T</span>(p.capacity);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p.m_size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;point[i] = p.point[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先把原来的数据搬过去，然后再delete原来的，创建一个新的</p></blockquote><img src="/xu-runbo/post/c6b8c88d/clip_image002.jpg" class="" title="说明: 2015-11-10_151152"><ul><li><p>vector容器的迭代器是&#x3D;&#x3D;支持随机访问的迭代器&#x3D;&#x3D;</p></li><li><blockquote><p><code>begin</code>指向链表的第一个元素（头节点），而<code>end</code>指向的是最后一个元素的下一个位置。这意味着当使用迭代器进行遍历时，<code>end</code>指示的位置是一个特殊的位置，它不包含有效的元素，用于标识遍历的结束。</p></blockquote></li></ul><h4 id="3-2-2-vector构造函数"><a href="#3-2-2-vector构造函数" class="headerlink" title="3.2.2 vector构造函数"></a>3.2.2 vector构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建vector容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>vector&lt;T&gt; v; </code>                    &#x2F;&#x2F;采用模板实现类实现，默认构造函数</li><li><code>vector(v.begin(), v.end());   </code>       &#x2F;&#x2F;将v[begin(), end())区间中的元素拷贝给本身。</li><li><code>vector(n, elem);</code>                            &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>vector(const vector &amp;vec);</code>         &#x2F;&#x2F;拷贝构造函数。</li><li>vector<int> v &#x3D; { 1,2,3,4,5 };</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v1</span><span class="params">(v.begin(), v.end())</span></span>;</span><br><span class="line"><span class="comment">//将v[begin(), end())区间中的元素拷贝给本身</span></span><br><span class="line"><span class="comment">//左闭右开</span></span><br><span class="line">for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), myprint);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">10</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">for_each(v3.<span class="built_in">begin</span>(), v3.<span class="built_in">end</span>(), myprint);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v4</span><span class="params">(v3)</span></span>;</span><br><span class="line">for_each(v4.<span class="built_in">begin</span>(), v4.<span class="built_in">end</span>(), myprint);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>vector的多种构造方式没有可比性，灵活使用即可</p><h4 id="3-2-3-vector赋值操作"><a href="#3-2-3-vector赋值操作" class="headerlink" title="3.2.3 vector赋值操作"></a>3.2.3 vector赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给vector容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>vector&amp; operator=(const vector &amp;vec);</code>&#x2F;&#x2F;重载等号操作符</p></li><li><p><code>assign(beg, end);</code>       &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。&#x3D;&#x3D;befg,end是迭代器&#x3D;&#x3D;</p></li><li><p><code>assign(n, elem);</code>        &#x2F;&#x2F;将n个elem拷贝赋值给本身。</p></li></ul><blockquote><p>指针的+1自增自减都是单位的移动</p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;=的重载！&quot;</span> &lt;&lt; endl;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">v1 = v;</span><br><span class="line"></span><br><span class="line">for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), myprint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//1 1 1 1 1 1 1 1 1 1 p</span></span><br><span class="line"><span class="comment">//1 1 1 1 1</span></span><br><span class="line"><span class="comment">//[v.begin(), v.end() - 5)</span></span><br><span class="line">v.<span class="built_in">assign</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>()<span class="number">-5</span>);</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">3</span>);</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1 1 1 1 1 1 1 1 1 1<br>&#x3D;的重载！<br>1 1 1 1 1 1 1 1 1 1<br>1 1 1 1 1<br>3 3 3 3 3 3 3 3 3 3</p></blockquote><p>总结： vector赋值方式比较简单，使用operator&#x3D;，或者assign都可以</p><h4 id="3-2-4-vector容量和大小"><a href="#3-2-4-vector容量和大小" class="headerlink" title="3.2.4  vector容量和大小"></a>3.2.4  vector容量和大小</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器的容量和大小操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>empty(); </code>                            &#x2F;&#x2F;判断容器是否为空</p></li><li><p><code>capacity();</code>                      &#x2F;&#x2F;容器的容量</p></li><li><p><code>size();</code>                              &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>resize(int num);</code>             &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值（0）填充新位置。</p><p>​      &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(int num, elem);</code>  &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><p>​              &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(T p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;T&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot;=&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vector的\n大小&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n容量&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size是实际的大小，capacity是容器的大小&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (v.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vector为空&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vector不为空&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;resize的使用&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">v1.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line">for_each(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), myprint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vector的大小&quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n容量&quot;</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">v1.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vector的大小&quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n容量&quot;</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">v1.<span class="built_in">resize</span>(<span class="number">20</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">Print</span>(v1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">Print&lt;&gt;(v1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Print</span>&lt;<span class="type">int</span>&gt;(v1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;vector的大小&quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n容量&quot;</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h4><blockquote><ul><li><p><code>resize(int num);</code>             &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值（0）填充新位置。</p><p>​      &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(int num, elem);</code>  &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><p>​              &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除</p></li></ul></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的容量capacity是&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的大小size是&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;会帮我自动扩一点&quot;</span> &lt;&lt; endl;</span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的容量capacity是&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的大小size是&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;resize操纵的是实际大小，变小原本的删掉，变大用默认或者指定的n来代替&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>判断是否为空  — empty</li><li>返回元素个数  — size</li><li>返回容器容量  — capacity</li><li>重新指定大小  —  resize</li></ul><h4 id="3-2-5-vector插入和删除"><a href="#3-2-5-vector插入和删除" class="headerlink" title="3.2.5 &#x3D;&#x3D;vector插入和删除&#x3D;&#x3D;"></a>3.2.5 &#x3D;&#x3D;vector插入和删除&#x3D;&#x3D;</h4><p><strong>功能描述：</strong></p><ul><li>对vector容器进行插入、删除操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>push_back(ele);</code>                                         &#x2F;&#x2F;尾部插入元素ele</li><li><code>pop_back();</code>                                                &#x2F;&#x2F;删除最后一个元素</li><li><code>insert(const_iterator pos, ele);</code>        &#x2F;&#x2F;迭代器指向位置pos插入元素ele</li><li><code>insert(const_iterator pos, int count,ele);</code>&#x2F;&#x2F;迭代器指向位置pos插入count个元素ele</li><li><code>erase(const_iterator pos);</code>                     &#x2F;&#x2F;删除迭代器指向的元素</li><li><code>erase(const_iterator start, const_iterator end);</code>&#x2F;&#x2F;删除迭代器从start到end之间的元素</li><li><code>clear();</code>                                                        &#x2F;&#x2F;删除容器中所有元素</li></ul><hr><h5 id="迭代器失效"><a href="#迭代器失效" class="headerlink" title="&#x3D;&#x3D;迭代器失效&#x3D;&#x3D;"></a>&#x3D;&#x3D;<a href="#%E7%AC%ACvector%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%A4%B1%E6%95%88">迭代器失效</a>&#x3D;&#x3D;</h5><hr><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(T p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;T&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot;=&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//*`push_back(ele); `                                         //尾部插入元素ele</span></span><br><span class="line"><span class="comment">//* `pop_back(); `                                                //删除最后一个元素</span></span><br><span class="line"><span class="comment">//* `insert(const_iterator pos, ele); `        //迭代器指向位置pos插入元素ele</span></span><br><span class="line"><span class="comment">//* `insert(const_iterator pos, int count, ele); `/ / 迭代器指向位置pos插入count个元素ele</span></span><br><span class="line"><span class="comment">//* `erase(const_iterator pos); `                     //删除迭代器指向的元素</span></span><br><span class="line"><span class="comment">//* `erase(const_iterator start, const_iterator end); `/ / 删除迭代器从start到end之间的元素</span></span><br><span class="line"><span class="comment">//* `clear(); `                                                        //删除容器中所有元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">v.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator start = v.<span class="built_in">begin</span>();</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator end = v.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v.<span class="built_in">insert</span>(start, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//迭代器失效是因为在插入元素后，容器内部的元素可能会被重新分配内存，导致原来的迭代器指向的位置不再有效。</span></span><br><span class="line"><span class="comment">///////////////------------------------</span></span><br><span class="line"><span class="comment">//v.insert(start, 2, 1);//wrong</span></span><br><span class="line">v.<span class="built_in">insert</span>(v.<span class="built_in">begin</span>(), <span class="number">10</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">///////////////------------------------</span></span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;删除倒数第一个&quot;</span> &lt;&lt; endl;</span><br><span class="line">v.<span class="built_in">erase</span>(v.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;删除第5到第12个&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//左闭右开</span></span><br><span class="line">v.<span class="built_in">erase</span>(v.<span class="built_in">begin</span>() + <span class="number">4</span>, v.<span class="built_in">begin</span>() + <span class="number">12</span>);</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>尾插  — push_back</li><li>尾删  — pop_back</li><li>插入  — insert    (位置迭代器)</li><li>删除  — erase  （位置迭代器）</li><li>清空  —  clear</li></ul><h5 id="迭代器指定位置"><a href="#迭代器指定位置" class="headerlink" title="&#x3D;&#x3D;迭代器指定位置&#x3D;&#x3D;"></a>&#x3D;&#x3D;迭代器指定位置&#x3D;&#x3D;</h5><blockquote><p>v.begin()是第一个位置</p><p>v.begin()+n是第n+1个位置</p><p>v.end()是倒数第一个位置的下一个位置</p><p>v.end()-n是倒数第n个位置</p><p>但是一般取不到右边[)</p><p>要想搞掉倒数第n个位置n&#x3D;v.size()-正数第几个</p><p>用v.end()-(n-1);</p><img src="/xu-runbo/post/c6b8c88d/image-20231112132640382.png" class="" title="image-20231112132640382"> </blockquote><h4 id="3-2-6-vector数据存取"><a href="#3-2-6-vector数据存取" class="headerlink" title="3.2.6 vector数据存取"></a>3.2.6 vector数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对vector中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code>     &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>operator[]; </code>       &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>front(); </code>            &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code>              &#x2F;&#x2F;返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; v.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = v.<span class="built_in">begin</span>(); i &lt; v.<span class="built_in">end</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot;*&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一个元素是&quot;</span> &lt;&lt; v.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot;等于*v.begin()=v[1]=v.at(1):::&quot;</span> &lt;&lt; *v.<span class="built_in">begin</span>() &lt;&lt; v[<span class="number">0</span>] &lt;&lt; v.<span class="built_in">at</span>(<span class="number">0</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;最后元素是&quot;</span> &lt;&lt; v.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot;等于*(v.end()-1)=v[1]=v.at(1):::&quot;</span> &lt;&lt; *(v.<span class="built_in">end</span>() - <span class="number">1</span>) &lt;&lt; v[v.<span class="built_in">size</span>()<span class="number">-1</span>] &lt;&lt; v.<span class="built_in">at</span>(v.<span class="built_in">size</span>() - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>除了用迭代器获取vector容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="3-2-7-vector互换容器"><a href="#3-2-7-vector互换容器" class="headerlink" title="3.2.7 vector互换容器"></a>3.2.7 vector互换容器</h4><p><strong>功能描述：</strong></p><ul><li>实现两个容器内元素进行互换</li></ul><p><strong>函数原型：</strong></p><ul><li><code>swap(vec);</code>  &#x2F;&#x2F; 将vec与本身的元素互换</li></ul><p>&#x3D;&#x3D;<strong>指针指向的交换</strong>&#x3D;&#x3D;</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的容量capacity是&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的大小size是&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;会帮我自动扩一点&quot;</span> &lt;&lt; endl;</span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的容量capacity是&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的大小size是&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;resize操纵的是实际大小，变小原本的删掉，变大用默认或者指定的n来代替&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------用swap来巧妙的减少浪费内存-------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt;  <span class="title">v1</span><span class="params">(v)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1的容量capacity是&quot;</span> &lt;&lt; v1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1的大小size是&quot;</span> &lt;&lt; v1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;再交换之后&quot;</span> &lt;&lt; endl;</span><br><span class="line">v1.<span class="built_in">swap</span>(v);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的容量capacity是&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v的大小size是&quot;</span> &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(v)</span></span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v3;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v3.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print</span>(v2);</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;容量&quot;</span> &lt;&lt; v2.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;大小&quot;</span> &lt;&lt;v2.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line"><span class="built_in">Print</span>(v3);</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;容量&quot;</span> &lt;&lt; v3.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;大小&quot;</span> &lt;&lt; v3.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">v2.<span class="built_in">swap</span>(v3);</span><br><span class="line"><span class="built_in">Print</span>(v2);</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;容量&quot;</span> &lt;&lt; v2.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;大小&quot;</span> &lt;&lt; v2.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Print</span>(v3);</span><br><span class="line">cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;容量&quot;</span> &lt;&lt; v3.<span class="built_in">capacity</span>() &lt;&lt; <span class="string">&quot;大小&quot;</span> &lt;&lt; v3.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/c6b8c88d/image-20231112140402317.png" class="" title="image-20231112140402317"> <img src="/xu-runbo/post/c6b8c88d/image-20231112141627674.png" class="" title="image-20231112141627674"> <p>总结：swap可以使两个容器互换，可以达到实用的收缩内存效果</p><h4 id="3-2-8-vector预留空间"><a href="#3-2-8-vector预留空间" class="headerlink" title="3.2.8 vector预留空间"></a>3.2.8 vector预留空间</h4><p><strong>功能描述：</strong></p><ul><li>减少vector在动态扩展容量时的扩展次数</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reserve(int len);</code>&#x2F;&#x2F;容器预留len个元素长度，预留位置不初始化，元素不可访问。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (p != &amp;v[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">p = &amp;v[<span class="number">0</span>];</span><br><span class="line">num++;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这次扩展到&quot;</span> &lt;&lt; v.<span class="built_in">capacity</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态扩展，这个过程扩展了多少次？</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;动态扩展了&quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt; newv;</span><br><span class="line">newv.<span class="built_in">reserve</span>(<span class="number">1000000</span>);</span><br><span class="line"><span class="comment">//cout &lt;&lt; newv[999];//会直接爆炸</span></span><br><span class="line"><span class="type">int</span> newnum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>* newp = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">newv.<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">if</span> (newp != &amp;newv[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">newp = &amp;newv[<span class="number">0</span>];</span><br><span class="line">newnum++;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这次扩展到&quot;</span> &lt;&lt; newv.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态扩展，这个过程扩展了多少次？</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;动态扩展了&quot;</span> &lt;&lt; newnum &lt;&lt; endl;</span><br><span class="line"><span class="comment">//这次扩展到1000000</span></span><br><span class="line"><span class="comment">//动态扩展了1</span></span><br><span class="line">cout &lt;&lt; newv[<span class="number">999</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/c6b8c88d/image-20231112143123284.png" class="" title="image-20231112143123284"> <img src="/xu-runbo/post/c6b8c88d/image-20231112143015731.png" class="" title="image-20231112143015731"> <p>总结：如果数据量较大，可以一开始利用reserve&#x3D;&#x3D;预留空间&#x3D;&#x3D;</p><h4 id="vector排序"><a href="#vector排序" class="headerlink" title="vector排序"></a>vector排序</h4><ul><li><code>algorithm里面的sort函数排序</code></li><li><a href="#sort">参见deque的排序</a></li></ul><h3 id="3-3-deque容器-双向"><a href="#3-3-deque容器-双向" class="headerlink" title="3.3 deque容器(双向)"></a>3.3 deque容器(双向)</h3><h4 id="3-3-1-deque容器基本概念"><a href="#3-3-1-deque容器基本概念" class="headerlink" title="3.3.1 deque容器基本概念"></a>3.3.1 deque容器基本概念</h4><p><strong>功能：</strong></p><ul><li>双端数组，可以对头端进行插入删除操作</li></ul><p><strong>deque与vector区别：</strong></p><ul><li>vector对于头部的插入删除效率低，数据量越大，效率越低</li><li>deque相对而言，对头部的插入删除速度回比vector快</li><li>vector访问元素时的速度会比deque快,这和两者内部实现有关</li></ul><img src="/xu-runbo/post/c6b8c88d/clip_image002-1547547642923.jpg" class="" title="说明: 2015-11-19_204101"><p>deque内部工作原理:</p><p>deque内部有个&#x3D;&#x3D;<strong>中控器</strong>&#x3D;&#x3D;，维护每段缓冲区中的内容，&#x3D;&#x3D;缓冲区中存放真实数据&#x3D;&#x3D;</p><p>中控器维护的是&#x3D;&#x3D;每个缓冲区的地址&#x3D;&#x3D;，使得使用deque时像一片连续的内存空间</p><img src="/xu-runbo/post/c6b8c88d/clip_image002-1547547896341.jpg" class="" title="clip_image002-1547547896341"><ul><li><strong>deque容器的迭代器也是支持随机访问的</strong></li></ul><h4 id="3-3-2-deque构造函数"><a href="#3-3-2-deque构造函数" class="headerlink" title="3.3.2 deque构造函数"></a>3.3.2 deque构造函数</h4><p><strong>功能描述：</strong></p><ul><li>deque容器构造</li></ul><p><strong>函数原型：</strong></p><ul><li><code>deque&lt;T&gt;</code> deqT;                      &#x2F;&#x2F;默认构造形式</li><li><code>deque(v.begin(), v.end());</code>                  &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>deque(n, elem);</code>                    &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>deque(const deque &amp;deq);</code>   &#x2F;&#x2F;拷贝构造函数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(deque&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line"><span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">d1</span><span class="params">(d)</span></span>;</span><br><span class="line"><span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">d2</span><span class="params">(<span class="number">10</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">deque&lt;<span class="type">int</span>&gt; <span class="title">d3</span><span class="params">(d2.begin()+<span class="number">3</span>,d2.end())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d.<span class="built_in">push_front</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d3.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line"><span class="built_in">Print</span>(d1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Print</span>(d2);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Print</span>(d3);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>&#x3D;&#x3D;deque容器和vector容器的构造方式几乎一致，&#x3D;&#x3D;灵活使用即可</p><h4 id="3-3-3-deque赋值操作"><a href="#3-3-3-deque赋值操作" class="headerlink" title="3.3.3 deque赋值操作"></a>3.3.3 deque赋值操作</h4><p><strong>功能描述：</strong></p><ul><li>给deque容器进行赋值</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque&amp; operator=(const deque &amp;deq); </code>         &#x2F;&#x2F;重载等号操作符</p></li><li><p><code>assign(beg, end);</code>                                           &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</p></li><li><p><code>assign(n, elem);</code>                                             &#x2F;&#x2F;将n个elem拷贝赋值给本身。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printDeque</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp; d)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (deque&lt;<span class="type">int</span>&gt;::const_iterator it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//赋值操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; d1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printDeque</span>(d1);</span><br><span class="line"></span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d2;</span><br><span class="line">d2 = d1;</span><br><span class="line"><span class="built_in">printDeque</span>(d2);</span><br><span class="line"></span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d3;</span><br><span class="line">d3.<span class="built_in">assign</span>(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printDeque</span>(d3);</span><br><span class="line"></span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d4;</span><br><span class="line">d4.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">printDeque</span>(d4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：deque赋值操作也与vector相同，需熟练掌握</p><h4 id="3-3-4-deque大小操作"><a href="#3-3-4-deque大小操作" class="headerlink" title="3.3.4 deque大小操作"></a>3.3.4 deque大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对deque容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>deque.empty();</code>                       &#x2F;&#x2F;判断容器是否为空</p></li><li><p><code>deque.size();</code>                         &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>deque.resize(num);</code>                &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</p><p>​                             &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>deque.resize(num, elem);</code>     &#x2F;&#x2F;重新指定容器的长度为num,若容器变长，则以elem值填充新位置。</p><p>​                                                     &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(deque&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line">cout &lt;&lt; d.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">d.<span class="built_in">assign</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>() - <span class="number">3</span>);</span><br><span class="line">cout &lt;&lt; d.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (d.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;deque是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;deque不是空 的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">d.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line">d.<span class="built_in">resize</span>(<span class="number">25</span>);</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line"><span class="comment">//0-1-2-3-4-5-6-7-8-9-</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//7</span></span><br><span class="line"><span class="comment">//deque不是空 的</span></span><br><span class="line"><span class="comment">//0-1-2-3-4-</span></span><br><span class="line"><span class="comment">//0-1-2-3-4-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0-0</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>deque没有容量的概念</li><li>判断是否为空   — empty</li><li>返回元素个数   — size</li><li>重新指定个数   — resize</li></ul><h4 id="3-3-5-deque-插入和删除"><a href="#3-3-5-deque-插入和删除" class="headerlink" title="3.3.5&#x3D;&#x3D;deque 插入和删除&#x3D;&#x3D;"></a>3.3.5&#x3D;&#x3D;deque 插入和删除&#x3D;&#x3D;</h4><p><strong>功能描述：</strong></p><ul><li>向deque容器中插入和删除数据</li></ul><p><strong>函数原型：</strong></p><p>&#x3D;&#x3D;两端&#x3D;&#x3D;插入操作：</p><ul><li><code>push_back(elem);</code>          &#x2F;&#x2F;在容器尾部添加一个数据</li><li><code>push_front(elem);</code>        &#x2F;&#x2F;在容器头部插入一个数据</li><li><code>pop_back();</code>                   &#x2F;&#x2F;删除容器最后一个数据</li><li><code>pop_front();</code>                 &#x2F;&#x2F;删除容器第一个数据</li></ul><p>指定位置操作：</p><img src="/xu-runbo/post/c6b8c88d/image-20231113152711982.png" class="" title="image-20231113152711982"> <ul><li><p><code>insert(pos,elem);</code>         &#x2F;&#x2F;在pos位置插入一个elem元素的拷贝，返回新数据的位置。</p></li><li><p><code>insert(pos,n,elem);</code>     &#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</p></li><li><p><code>insert(pos,beg,end);</code>    &#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。</p></li><li><p><code>clear();</code>                           &#x2F;&#x2F;清空容器的所有数据</p></li><li><p>&#x3D;&#x3D;都是迭代器&#x3D;&#x3D;</p></li><li><img src="/xu-runbo/post/c6b8c88d/image-20231113152226172.png" class="" title="image-20231113152226172"> </li><li><p><code>erase(beg,end);</code>             &#x2F;&#x2F;删除[beg,end)区间的数据，&#x3D;&#x3D;返回下一个数据的位置。&#x3D;&#x3D;</p></li><li><p><code>erase(pos);</code>                    &#x2F;&#x2F;删除pos位置的数据，&#x3D;&#x3D;返回下一个数据的位置。&#x3D;&#x3D;</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(deque&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line">d.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line">d.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line">d.<span class="built_in">erase</span>(d.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line"><span class="comment">//d.erase(0);//错误</span></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">d.<span class="built_in">insert</span>(d.<span class="built_in">begin</span>(), <span class="number">100</span>);</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line">d.<span class="built_in">insert</span>(d.<span class="built_in">begin</span>(), <span class="number">2</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line">d.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ds--ad-a&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>插入和删除提供的位置是迭代器！</li><li>尾插   —  push_back</li><li>尾删   —  pop_back</li><li>头插   —  push_front</li><li>头删   —  pop_front</li></ul><h4 id="3-3-6-deque-数据存取"><a href="#3-3-6-deque-数据存取" class="headerlink" title="3.3.6 deque 数据存取"></a>3.3.6 deque 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对deque 中的数据的存取操作</li></ul><p><strong>函数原型：</strong></p><ul><li><code>at(int idx); </code>     &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>operator[]; </code>      &#x2F;&#x2F;返回索引idx所指的数据</li><li><code>front(); </code>            &#x2F;&#x2F;返回容器中第一个数据元素</li><li><code>back();</code>              &#x2F;&#x2F;返回容器中最后一个数据元素</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(deque&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">d.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一个元素是&quot;</span> &lt;&lt; d.<span class="built_in">at</span>(<span class="number">0</span>)&lt;&lt;<span class="string">&quot;-&quot;</span> &lt;&lt; d[<span class="number">0</span>] &lt;&lt;<span class="string">&quot;-&quot;</span> &lt;&lt; d.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d.at(0) == d[0]==d.front()&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;最后一个元素是&quot;</span> &lt;&lt; d.<span class="built_in">back</span>() &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; d.<span class="built_in">at</span>(d.<span class="built_in">size</span>() - <span class="number">1</span>) &lt;&lt; <span class="string">&quot;-&quot;</span> &lt;&lt; d[d.<span class="built_in">size</span>() - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d.back()==d.at(d.size() - 1)==d[d.size() - 1]&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;和vector一样&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">//第一个元素是0-0-0</span></span><br><span class="line"><span class="comment">//d.at(0) == d[0]==d.front()最后一个元素是9-9-9</span></span><br><span class="line"><span class="comment">//d.back()==d.at(d.size() - 1)==d[d.size() - 1]和vector一样</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>除了用迭代器获取deque容器中元素，[ ]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="3-3-7-deque-排序"><a href="#3-3-7-deque-排序" class="headerlink" title="3.3.7  deque 排序"></a>3.3.7 <a name="sort"> deque 排序</a></h4><p><strong>功能描述：</strong></p><ul><li>利用算法实现对deque容器进行排序</li></ul><p><strong>算法：</strong></p><ul><li><code>sort(iterator beg, iterator end)</code>  &#x2F;&#x2F;对beg和end区间内元素进行排序</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string n, <span class="type">int</span> a) :<span class="built_in">age</span>(a), <span class="built_in">name</span>(n) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">string name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">newPrint</span><span class="params">(deque&lt;Person&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Person i : p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; i.name &lt;&lt; <span class="string">&quot;年龄：&quot;</span>&lt;&lt;i.age &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(deque&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">shengxu</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">jiangxu</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Psheng</span><span class="params">(Person&amp; p1, Person&amp; p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p1.age &lt; p2.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Pjiang</span><span class="params">(Person&amp; p1, Person&amp; p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p1.age &gt; p2.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line">d.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">d.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">d.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">d.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">d.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line"><span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(),shengxu);</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line"><span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), jiangxu);</span><br><span class="line"><span class="built_in">Print</span>(d);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sort函数不指定第三个参数的时候是默认的升序排序&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">deque&lt;Person&gt; p;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;uma1&quot;</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;ni23ma2&quot;</span>, <span class="number">91</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;ndsama3&quot;</span>, <span class="number">21</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;nsada4&quot;</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">p.<span class="built_in">push_back</span>(p1);</span><br><span class="line">p.<span class="built_in">push_back</span>(p2);</span><br><span class="line">p.<span class="built_in">push_back</span>(p3);</span><br><span class="line">p.<span class="built_in">push_back</span>(p4);</span><br><span class="line"><span class="built_in">newPrint</span>(p);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;按照自定义升序排序后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), Psheng);</span><br><span class="line"><span class="built_in">newPrint</span>(p);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;按照自定义降序排序后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">sort</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), Pjiang);</span><br><span class="line"><span class="built_in">newPrint</span>(p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：sort算法非常实用，使用时包含头文件 algorithm即可</p><h3 id="3-4-案例-评委打分"><a href="#3-4-案例-评委打分" class="headerlink" title="3.4 案例-评委打分"></a>3.4 案例-评委打分</h3><h4 id="3-4-1-案例描述"><a href="#3-4-1-案例描述" class="headerlink" title="3.4.1 案例描述"></a>3.4.1 案例描述</h4><p>有5名选手：选手ABCDE，10个评委分别对每一名选手打分，去除最高分，去除评委中最低分，取平均分。</p><h4 id="3-4-2-实现步骤"><a href="#3-4-2-实现步骤" class="headerlink" title="3.4.2 实现步骤"></a>3.4.2 实现步骤</h4><ol><li>创建五名选手，放到vector中</li><li>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分打分存到deque容器中</li><li>sort算法对deque容器中分数排序，去除最高和最低分</li><li>deque容器遍历一遍，累加总分</li><li>获取平均分</li></ol><p><strong>示例代码：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(std::string name, <span class="type">int</span> score) :<span class="built_in">m_name</span>(name), <span class="built_in">m_score</span>(score) &#123;&#125;;</span><br><span class="line">std::string m_name;<span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> m_score;<span class="comment">//平均分</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">const</span> vector&lt;Person&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Person p : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; p.m_name &lt;&lt; <span class="string">&quot;平均分&quot;</span> &lt;&lt; p.m_score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creatPerson</span><span class="params">(vector&lt;Person&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string name;</span><br><span class="line">string indexname = <span class="string">&quot;ABCDEF&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">name = <span class="string">&quot;姓名&quot;</span>;</span><br><span class="line">name += indexname[j];</span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(name, score));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setScore</span><span class="params">(vector&lt;Person&gt; &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;Person&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> randscore = <span class="built_in">rand</span>() % <span class="number">41</span> + <span class="number">60</span>;<span class="comment">//60---100</span></span><br><span class="line">d.<span class="built_in">push_back</span>(randscore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for (int q : d)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; q &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">d.<span class="built_in">pop_back</span>();</span><br><span class="line">d.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; d.<span class="built_in">size</span>(); l++)</span><br><span class="line">&#123;</span><br><span class="line">sum += d.<span class="built_in">at</span>(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> avg = sum / d.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">(*i).m_score = avg;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">sheng</span><span class="params">(Person p1, Person p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p1.m_score &gt; p2.m_score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(<span class="built_in">time</span>(<span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//1创建一个vector存储五个人</span></span><br><span class="line">vector&lt;Person&gt; v;</span><br><span class="line"><span class="built_in">creatPerson</span>(v);</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始打分</span></span><br><span class="line"><span class="built_in">setScore</span>(v);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;打分后\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;升序排序后\n&quot;</span>;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), sheng);</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong> 选取不同的容器操作数据，可以提升代码的效率</p><h3 id="3-5-stack-容器"><a href="#3-5-stack-容器" class="headerlink" title="3.5 &#x3D;&#x3D;stack&#x3D;&#x3D;容器"></a>3.5 &#x3D;&#x3D;stack&#x3D;&#x3D;容器</h3><h4 id="3-5-1-stack-基本概念"><a href="#3-5-1-stack-基本概念" class="headerlink" title="3.5.1 stack 基本概念"></a>3.5.1 stack 基本概念</h4><img src="/xu-runbo/post/c6b8c88d/image-20231114172319173.png" class="" title="image-20231114172319173"><p><strong>概念：</strong>stack是一种<strong>先进后出</strong>(First In Last Out,FILO)的数据结构，它只有一个出口</p><img src="/xu-runbo/post/c6b8c88d/clip_image002-1547604555425.jpg" class="" title="说明: 2015-11-15_195707"><p>&#x3D;&#x3D;<strong>栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为</strong>&#x3D;&#x3D;</p><p>栈中进入数据称为  — <strong>入栈</strong>  <code>push</code></p><p>栈中弹出数据称为  — <strong>出栈</strong>  <code>pop</code></p><p>&#x3D;&#x3D;<strong>栈是自顶向下的，堆是向上的</strong>&#x3D;&#x3D;</p><p>生活中的栈：</p><img src="/xu-runbo/post/c6b8c88d/clip_image002.png" class="" title="img"><img src="/xu-runbo/post/c6b8c88d/clip_image002-1547605111510.jpg" class="" title="img"><h4 id="3-5-2-stack-常用接口"><a href="#3-5-2-stack-常用接口" class="headerlink" title="3.5.2 stack 常用接口"></a>3.5.2 stack 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><img src="/xu-runbo/post/c6b8c88d/image-20231114172608589.png" class="" title="image-20231114172608589"> <p>构造函数：</p><ul><li><code>stack&lt;T&gt; stk;</code>                                 &#x2F;&#x2F;stack采用模板类实现， stack对象的默认构造形式</li><li><code>stack(const stack &amp;stk);</code>            &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code>           &#x2F;&#x2F;重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code>      &#x2F;&#x2F;向栈顶添加元素</li><li><code>pop();</code>                &#x2F;&#x2F;从栈顶移除第一个元素</li><li><code>top(); </code>                &#x2F;&#x2F;返回栈顶元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code>            &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size(); </code>              &#x2F;&#x2F;返回栈的大小</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getfirst</span><span class="params">(stack&lt;<span class="type">int</span>&gt; &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.<span class="built_in">top</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delfirst</span><span class="params">(stack&lt;<span class="type">int</span>&gt;&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">isempty</span><span class="params">(stack&lt;<span class="type">int</span>&gt;&amp; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈现在是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈不是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="built_in">isempty</span>(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">s.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">isempty</span>(s);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈现在的大小&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈顶的第一个数据是...&quot;</span>&lt;&lt;<span class="built_in">getfirst</span>(s) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈现在的大小&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="built_in">delfirst</span>(s);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈顶的第一个数据是...&quot;</span> &lt;&lt; <span class="built_in">getfirst</span>(s) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈现在的大小&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="built_in">delfirst</span>(s);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈顶的第一个数据是...&quot;</span> &lt;&lt; <span class="built_in">getfirst</span>(s) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;栈现在的大小&quot;</span> &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//栈现在是空的</span></span><br><span class="line"><span class="comment">//栈不是空的</span></span><br><span class="line"><span class="comment">//栈现在的大小10</span></span><br><span class="line"><span class="comment">//栈顶的第一个数据是...9</span></span><br><span class="line"><span class="comment">//栈现在的大小10</span></span><br><span class="line"><span class="comment">//栈顶的第一个数据是...8</span></span><br><span class="line"><span class="comment">//栈现在的大小9</span></span><br><span class="line"><span class="comment">//栈顶的第一个数据是...7</span></span><br><span class="line"><span class="comment">//栈现在的大小8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>入栈   — push</li><li>出栈   — pop</li><li>返回栈顶   — top</li><li>判断栈是否为空   — empty</li><li>返回栈大小   — size</li></ul><h3 id="3-6-queue-容器"><a href="#3-6-queue-容器" class="headerlink" title="3.6 &#x3D;&#x3D;queue&#x3D;&#x3D; 容器"></a>3.6 &#x3D;&#x3D;queue&#x3D;&#x3D; 容器</h3><h4 id="3-6-1-queue-基本概念"><a href="#3-6-1-queue-基本概念" class="headerlink" title="3.6.1 queue 基本概念"></a>3.6.1 queue 基本概念</h4><p><strong>概念：</strong>Queue是一种<strong>先进先出</strong>(First In First Out,FIFO)的数据结构，它有一个出口一个入口</p><img src="/xu-runbo/post/c6b8c88d/image-20231115134539209.png" class=""><img src="/xu-runbo/post/c6b8c88d/clip_image002-1547606475892.jpg" class="" title="说明: 2015-11-15_214429"><p>队列容器允许从一端新增元素，从另一端移除元素</p><p>队列中只&#x3D;&#x3D;有队头和队尾才可以被外界使用&#x3D;&#x3D;，因此队列&#x3D;&#x3D;不允许有遍历行为&#x3D;&#x3D;</p><p>队列中进数据称为 — <strong>入队</strong>    <code>push</code></p><p>队列中出数据称为 — <strong>出队</strong>    <code>pop</code></p><p>生活中的队列：</p><img src="/xu-runbo/post/c6b8c88d/1547606785041.png" class="" width="1547606785041"><h4 id="3-6-2-queue-常用接口"><a href="#3-6-2-queue-常用接口" class="headerlink" title="3.6.2 queue 常用接口"></a>3.6.2 queue 常用接口</h4><p>功能描述：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>queue&lt;T&gt; que;</code>                                 &#x2F;&#x2F;queue采用模板类实现，queue对象的默认构造形式</li><li><code>queue(const queue &amp;que);</code>            &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code>           &#x2F;&#x2F;重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code>                             &#x2F;&#x2F;往队尾添加元素</li><li><code>pop();</code>                                      &#x2F;&#x2F;从队头移除第一个元素</li><li><code>back();</code>                                    &#x2F;&#x2F;返回最后一个元素</li><li><code>front(); </code>                                  &#x2F;&#x2F;返回第一个元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code>            &#x2F;&#x2F;判断堆栈是否为空</li><li><code>size(); </code>              &#x2F;&#x2F;返回栈的大小</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string m_Name;</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建队列</span></span><br><span class="line">queue&lt;Person&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备数据</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;唐僧&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">1000</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;猪八戒&quot;</span>, <span class="number">900</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;沙僧&quot;</span>, <span class="number">800</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向队列中添加元素  入队操作</span></span><br><span class="line">q.<span class="built_in">push</span>(p1);</span><br><span class="line">q.<span class="built_in">push</span>(p2);</span><br><span class="line">q.<span class="built_in">push</span>(p3);</span><br><span class="line">q.<span class="built_in">push</span>(p4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//队列不提供迭代器，更不支持随机访问</span></span><br><span class="line"><span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="comment">//输出队头元素</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;队头元素-- 姓名： &quot;</span> &lt;&lt; q.<span class="built_in">front</span>().m_Name</span><br><span class="line">&lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; q.<span class="built_in">front</span>().m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;队尾元素-- 姓名： &quot;</span> &lt;&lt; q.<span class="built_in">back</span>().m_Name</span><br><span class="line">&lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; q.<span class="built_in">back</span>().m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">//弹出队头元素</span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;队列大小为：&quot;</span> &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>入队   — push</li><li>出队   — pop</li><li>返回队头元素   — front</li><li>返回队尾元素   — back</li><li>判断队是否为空   — empty</li><li>返回队列大小   — size</li></ul><h3 id="3-7-list容器-双向"><a href="#3-7-list容器-双向" class="headerlink" title="3.7 list容器(双向)"></a>3.7 list容器(双向)</h3><h4 id="3-7-1-list基本概念"><a href="#3-7-1-list基本概念" class="headerlink" title="3.7.1 list基本概念"></a>3.7.1 list基本概念</h4><img src="/xu-runbo/post/c6b8c88d/image-20231115142638186.png" class="" title="image-20231115142638186"><p><strong>功能：</strong>将数据进行&#x3D;&#x3D;链式存储&#x3D;&#x3D;</p><p>&#x3D;&#x3D;<strong>链表</strong>（list）是一种物理存储单元上非连续&#x3D;&#x3D;的存储结构，数据元素的逻辑顺序是通过&#x3D;&#x3D;链表中的指针链接实现&#x3D;&#x3D;的</p><p>链表的组成：&#x3D;&#x3D;链表由一系列<strong>结点</strong>组成&#x3D;&#x3D;</p><p>结点的组成：&#x3D;&#x3D;一个是存储数据元素的<strong>数据域</strong>，另一个是存储下一个结点地址的<strong>指针域</strong>&#x3D;&#x3D;</p><blockquote><p>单向链表和双向链表的主要区别在于节点之间的链接方式和支持的遍历方向。</p><ol><li>链接方式：<ul><li>单向链表：每个节点只包含指向下一个节点的指针。节点可以从头到尾依次遍历，但无法直接访问前一个节点。</li><li>双向链表：每个节点既包含指向下一个节点的指针，也包含指向前一个节点的指针。节点可以从头到尾或从尾到头双向遍历，可以直接访问前一个节点和后一个节点。</li></ul></li><li>遍历方向：<ul><li>单向链表：只能从头节点开始按照指针顺序向后遍历，无法反向遍历。</li><li>双向链表：可以从头节点或尾节点开始，根据指针的方向正向或反向遍历。</li></ul></li><li>内存占用：<ul><li>单向链表：每个节点只包含指向下一个节点的指针，占用的内存相对较少。</li><li>双向链表：每个节点既包含指向下一个节点的指针，也包含指向前一个节点的指针，占用的内存相对较多。</li></ul></li><li>操作复杂性：<ul><li>单向链表：插入和删除操作只需改变指针的指向，相对较简单。</li><li>双向链表：插入和删除操作需要同时改变前后节点的指针，稍微复杂一些。</li></ul></li></ol></blockquote><p>STL中的链表是一个&#x3D;&#x3D;双向循环链表&#x3D;&#x3D;</p><blockquote><ol><li>每个节点有两个指针域，分别指向前一个节点和后一个节点。</li><li>尾节点的后向指针指向头节点，头节点的前向指针指向尾节点，形成了一个闭合的环。</li><li>由于是循环的结构，可以从任何一个节点开始，沿着指针方向向前或向后遍历整个链表，直到回到出发节点。</li></ol></blockquote><img src="/xu-runbo/post/c6b8c88d/clip_image002-1547608564071.jpg" class="" title="说明: 2015-11-15_225145"><p>由于&#x3D;&#x3D;链表的存储方式并不是连续的内存空间&#x3D;&#x3D;，因此链表list中的迭代器&#x3D;&#x3D;只支持前移和后移&#x3D;&#x3D;，属于<strong>双向迭代器</strong></p><blockquote><p>如果要访问链表中的第n个元素，需要从链表的头节点开始沿着指针移动n次，直到达到目标位置。这样的操作时间复杂度是O(n)，其中n是目标位置。</p><p>如果循环链表为空（没有任何元素），那么<code>begin</code>和<code>end</code>应该指向同一个位置，即都指向一个空的节点（比如nullptr）。</p><p>链表之所以不支持随机访问，是因为链表中的元素并不按照连续的内存地址存储。</p></blockquote><p>list的优点：</p><ul><li>采用<strong>动态存储分配，不会造成内存浪费和溢出</strong></li><li>链表执行插入和删除操作十分方便，<strong>修改指针即可，不需要移动大量元素</strong></li></ul><p>list的缺点：</p><ul><li>链表灵活，但是&#x3D;&#x3D;空间(指针域) 和 时间（遍历）额外耗费较大&#x3D;&#x3D;</li><li>占据空间大（指针）</li></ul><p>List有一个重要的性质，&#x3D;&#x3D;<strong>插入操作和删除操作都不会造成原有list迭代器的失效</strong>&#x3D;&#x3D;，这在vector是不成立的。</p><blockquote><p>虽然不会失效，但是不及时更新迭代器的话，迭代器一直指向旧list的那个位置</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt;::iterator begin = l1.<span class="built_in">begin</span>();</span><br><span class="line"><span class="built_in">advance</span>(begin, <span class="number">3</span>);</span><br><span class="line">l1.<span class="built_in">insert</span>(begin, <span class="number">111</span>);</span><br><span class="line"><span class="built_in">Print</span>(l1);</span><br><span class="line"><span class="comment">//begin = l1.begin();</span></span><br><span class="line"><span class="comment">//advance(begin, 3);</span></span><br><span class="line">l1.<span class="built_in">insert</span>(begin, <span class="number">1111</span>);</span><br><span class="line"><span class="built_in">Print</span>(l1);</span><br><span class="line">l1.<span class="built_in">erase</span>(begin);</span><br><span class="line"><span class="built_in">Print</span>(l1);</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/c6b8c88d/image-20231115154005315.png" class="" title="image-20231115154005315"><p>及时更新迭代器</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt;::iterator begin = l1.<span class="built_in">begin</span>();</span><br><span class="line"><span class="built_in">advance</span>(begin, <span class="number">3</span>);</span><br><span class="line">l1.<span class="built_in">insert</span>(begin, <span class="number">111</span>);</span><br><span class="line"><span class="built_in">Print</span>(l1);</span><br><span class="line">begin = l1.<span class="built_in">begin</span>();</span><br><span class="line"><span class="built_in">advance</span>(begin, <span class="number">3</span>);</span><br><span class="line">l1.<span class="built_in">insert</span>(begin, <span class="number">1111</span>);</span><br><span class="line"><span class="built_in">Print</span>(l1);</span><br><span class="line">begin = l1.<span class="built_in">begin</span>();</span><br><span class="line"><span class="built_in">advance</span>(begin, <span class="number">3</span>);</span><br><span class="line">l1.<span class="built_in">erase</span>(begin);</span><br><span class="line"><span class="built_in">Print</span>(l1);</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/c6b8c88d/image-20231115154151971.png" class="" title="image-20231115154151971"> </blockquote><p>总结：STL中<strong>List和vector是两个最常被使用的容器</strong>，各有优缺点</p><h4 id="3-7-2-list构造函数"><a href="#3-7-2-list构造函数" class="headerlink" title="3.7.2  list构造函数"></a>3.7.2  list构造函数</h4><p><strong>功能描述：</strong></p><ul><li>创建list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>list&lt;T&gt; lst;</code>                               &#x2F;&#x2F;list采用采用模板类实现,对象的默认构造形式：</li><li><code>list(beg,end);</code>                           &#x2F;&#x2F;构造函数将[beg, end)区间中的元素拷贝给本身。</li><li><code>list(n,elem);</code>                             &#x2F;&#x2F;构造函数将n个elem拷贝给本身。</li><li><code>list(const list &amp;lst);</code>            &#x2F;&#x2F;拷贝构造函数。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(<span class="type">const</span> list&lt;<span class="type">int</span>&gt;&amp; L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (list&lt;<span class="type">int</span>&gt;::const_iterator it = L.<span class="built_in">begin</span>(); it != L.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list&lt;<span class="type">int</span>&gt;L1;</span><br><span class="line">L1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">L1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">L1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">L1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printList</span>(L1);</span><br><span class="line"></span><br><span class="line">list&lt;<span class="type">int</span>&gt;<span class="built_in">L2</span>(L1.<span class="built_in">begin</span>(),L1.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printList</span>(L2);</span><br><span class="line"></span><br><span class="line">list&lt;<span class="type">int</span>&gt;<span class="built_in">L3</span>(L2);</span><br><span class="line"><span class="built_in">printList</span>(L3);</span><br><span class="line"></span><br><span class="line">list&lt;<span class="type">int</span>&gt;<span class="built_in">L4</span>(<span class="number">10</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">printList</span>(L4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：list构造方式同其他几个STL常用容器，熟练掌握即可</p><img src="/xu-runbo/post/c6b8c88d/image-20231115144000649.png" class="" title="image-20231115144000649"><p>可以用{}来列表初始化</p><h4 id="3-7-3-list-赋值和交换"><a href="#3-7-3-list-赋值和交换" class="headerlink" title="3.7.3 list 赋值和交换"></a>3.7.3 list 赋值和交换</h4><p><strong>功能描述：</strong></p><ul><li>给list容器进行赋值，以及交换list容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>assign(beg, end);</code>            &#x2F;&#x2F;将[beg, end)区间中的数据拷贝赋值给本身。</li><li><code>assign(n, elem);</code>              &#x2F;&#x2F;将n个elem拷贝赋值给本身。</li><li><code>list&amp; operator=(const list &amp;lst);</code>         &#x2F;&#x2F;重载等号操作符</li><li><code>swap(lst);</code>                         &#x2F;&#x2F;将lst与本身的元素互换。</li></ul><ol><li><p><strong>void assign (size_type n, const T&amp; val)</strong><br>这个重载用于将列表的内容替换为 n 个值为 val 的元素。例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::list&lt;<span class="type">int</span>&gt; mylist;</span><br><span class="line">mylist.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 将列表替换为包含 5 个值为 10 的元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>template <class InputIterator> void assign (InputIterator first, InputIterator last)</strong><br>这个重载接受两个迭代器参数，用于指定一个范围，将列表的内容替换为这个范围内的元素。例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::list&lt;<span class="type">int</span>&gt; mylist;</span><br><span class="line"><span class="type">int</span> myints[] = &#123;<span class="number">1776</span>, <span class="number">7</span>, <span class="number">4</span>&#125;;</span><br><span class="line">mylist.<span class="built_in">assign</span>(myints, myints+<span class="number">3</span>); <span class="comment">// 将列表替换为数组 myints 中的元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>void assign (std::initializer_list<T> il)</strong><br>这个重载使用初始化列表作为参数，用于将列表的内容替换为初始化列表中的元素。例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::list&lt;<span class="type">int</span>&gt; mylist;</span><br><span class="line">mylist.<span class="built_in">assign</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;); <span class="comment">// 将列表替换为初始化列表中的元素</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(list&lt;<span class="type">int</span>&gt; l1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;遍历&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (list&lt;<span class="type">int</span>&gt;::iterator i = l1.<span class="built_in">begin</span>(); i!=l1.<span class="built_in">end</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">list&lt;<span class="type">int</span>&gt; l1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">-3</span>; j &lt; <span class="number">0</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">l1.<span class="built_in">push_back</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">l1.<span class="built_in">push_front</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Print</span>(l1);</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">l2</span><span class="params">(l1)</span></span>;</span><br><span class="line"><span class="built_in">Print</span>(l2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">list&lt;<span class="type">int</span>&gt;l3;</span><br><span class="line">l3.<span class="built_in">assign</span>(l1.<span class="built_in">begin</span>(), l1.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">Print</span>(l3);</span><br><span class="line">l3.<span class="built_in">assign</span>(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line"><span class="built_in">Print</span>(l3);</span><br><span class="line">l3 = l1;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;l3&quot;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Print</span>(l3);</span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">l4</span><span class="params">(&#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;l4&quot;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Print</span>(l4);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换swap()&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l3.<span class="built_in">swap</span>(l4);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;l3&quot;</span>;</span><br><span class="line"><span class="built_in">Print</span>(l3);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;l4&quot;</span>;</span><br><span class="line"><span class="built_in">Print</span>(l4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：list赋值和交换操作能够灵活运用即可</p><h4 id="3-7-4-list-大小操作"><a href="#3-7-4-list-大小操作" class="headerlink" title="3.7.4 list 大小操作"></a>3.7.4 list 大小操作</h4><p><strong>功能描述：</strong></p><ul><li>对list容器的大小进行操作</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>size(); </code>                             &#x2F;&#x2F;返回容器中元素的个数</p></li><li><p><code>empty(); </code>                           &#x2F;&#x2F;判断容器是否为空</p></li><li><p><code>resize(num);</code>                   &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以默认值填充新位置。</p><p>​    &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li><li><p><code>resize(num, elem); </code>       &#x2F;&#x2F;重新指定容器的长度为num，若容器变长，则以elem值填充新位置。</p><p> &#x2F;&#x2F;如果容器变短，则末尾超出容器长度的元素被删除。</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(list&lt;<span class="type">int</span>&gt; l1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;遍历&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (list&lt;<span class="type">int</span>&gt;::iterator i = l1.<span class="built_in">begin</span>(); i!=l1.<span class="built_in">end</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">list&lt;<span class="type">int</span>&gt; l1;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">-3</span>; j &lt; <span class="number">0</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">l1.<span class="built_in">push_back</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">l1.<span class="built_in">push_front</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">list&lt;<span class="type">int</span>&gt; <span class="title">l2</span><span class="params">(l1)</span></span>;</span><br><span class="line"><span class="built_in">Print</span>(l1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!l1.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;现在size是&quot;</span> &lt;&lt; l1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;尾部是&quot;</span> &lt;&lt; l1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;头部是&quot;</span> &lt;&lt; l1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">l1.<span class="built_in">pop_front</span>();</span><br><span class="line">l1.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line">l2.<span class="built_in">resize</span>(<span class="number">5</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------缩小size后------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="built_in">Print</span>(l2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>判断是否为空   — empty</li><li>返回元素个数   — size</li><li>重新指定个数   — resize</li></ul><h4 id="3-7-5-list-插入和删除"><a href="#3-7-5-list-插入和删除" class="headerlink" title="3.7.5 &#x3D;&#x3D;list 插入和删除&#x3D;&#x3D;"></a>3.7.5 &#x3D;&#x3D;list 插入和删除&#x3D;&#x3D;<a name="双向迭代器"></a></h4><p><strong>功能描述：</strong></p><ul><li>对list容器进行数据的插入和删除</li></ul><blockquote><p>​l1.insert(l1.begin() + 3, 1);&#x2F;&#x2F;wrong</p><p>对于 <code>std::list</code> 容器，插入操作并不支持像 <code>std::vector</code> 那样使用 <code>begin() + n</code> 来直接指定位置。因为 <code>std::list</code> 是一个双向链表，插入操作涉及到链表节点的重新连接，所以需要通过迭代器来指定插入位置。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">it = L.<span class="built_in">begin</span>();</span><br><span class="line">L.<span class="built_in">erase</span>(++it);</span><br><span class="line">自增和自减还是ok的，但是+-n就不行了</span><br></pre></td></tr></table></figure><hr><p><code>std::advance</code> 的函数签名如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">InputIt</span>, <span class="keyword">class</span> <span class="title class_">Distance</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">advance</span><span class="params">(InputIt&amp; it, Distance n)</span></span>;</span><br></pre></td></tr></table></figure><p><code>std::advance</code> 函数的作用是将迭代器 <code>it</code> 向前或向后移动 <code>n</code> 个位置。如果 <code>n</code> 是正数，迭代器将向前移动；如果 <code>n</code> 是负数，迭代器将向后移动。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">l1.<span class="built_in">insert</span>(l1.<span class="built_in">begin</span>() + <span class="number">3</span>, <span class="number">1</span>);<span class="comment">//wrong</span></span><br><span class="line">list&lt;<span class="type">int</span>&gt;::iterator begin = l1.<span class="built_in">begin</span>();</span><br><span class="line"><span class="built_in">advance</span>(begin, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">advance</span>(l1.<span class="built_in">begin</span>(), <span class="number">3</span>);<span class="comment">//wrong</span></span><br></pre></td></tr></table></figure><p><code>l1.begin()</code>返回的是一个指向容器中第一个元素的迭代器，而不是一个迭代器对象，因此不能直接调用<code>advance</code>函数来移动它的位置。相反，应该先将<code>l1.begin()</code>返回的迭代器存储在一个变量中，然后再使用<code>advance</code>函数来移动它的位置</p></blockquote><p><strong>函数原型：</strong></p><ul><li><p>push_back(elem);&#x2F;&#x2F;在容器尾部加入一个元素</p></li><li><p>pop_back();&#x2F;&#x2F;删除容器中最后一个元素</p></li><li><p>push_front(elem);&#x2F;&#x2F;在容器开头插入一个元素</p></li><li><p>pop_front();&#x2F;&#x2F;从容器开头移除第一个元素</p><img src="/xu-runbo/post/c6b8c88d/image-20231115151641905.png" class="" title="image-20231115151641905"></li><li><p>insert(pos,elem);&#x2F;&#x2F;在pos位置插elem元素的拷贝，返回新数据的位置。</p><img src="/xu-runbo/post/c6b8c88d/image-20231115151508120.png" class="" title="image-20231115151508120"> </li><li><p>insert(pos,n,elem);&#x2F;&#x2F;在pos位置插入n个elem数据，无返回值。</p><img src="/xu-runbo/post/c6b8c88d/image-20231115151453514.png" class="" title="image-20231115151453514"> </li><li><p>insert(pos,beg,end);&#x2F;&#x2F;在pos位置插入[beg,end)区间的数据，无返回值。</p><img src="/xu-runbo/post/c6b8c88d/image-20231115151531927.png" class="" title="image-20231115151531927"> </li><li><p>clear();&#x2F;&#x2F;移除容器的所有数据</p></li><li><p>erase(beg,end);&#x2F;&#x2F;删除[beg,end)区间的数据，返回下一个数据的位置。</p><img src="/xu-runbo/post/c6b8c88d/image-20231115152951103.png" class="" title="image-20231115152951103"> </li><li><p>erase(pos);&#x2F;&#x2F;删除pos位置的数据，返回下一个数据的位置。</p><img src="/xu-runbo/post/c6b8c88d/image-20231115152937488.png" class="" title="image-20231115152937488"> </li><li><p>&#x3D;&#x3D;<strong>remove(elem);&#x2F;&#x2F;删除容器中所有与elem值匹配的元素。</strong>&#x3D;&#x3D;</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(<span class="type">const</span> list&lt;<span class="type">int</span>&gt;&amp; L)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (list&lt;<span class="type">int</span>&gt;::const_iterator it = L.<span class="built_in">begin</span>(); it != L.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入和删除</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list&lt;<span class="type">int</span>&gt; L;</span><br><span class="line"><span class="comment">//尾插</span></span><br><span class="line">L.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">L.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">L.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line"><span class="comment">//头插</span></span><br><span class="line">L.<span class="built_in">push_front</span>(<span class="number">100</span>);</span><br><span class="line">L.<span class="built_in">push_front</span>(<span class="number">200</span>);</span><br><span class="line">L.<span class="built_in">push_front</span>(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printList</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line">L.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">printList</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">//头删</span></span><br><span class="line">L.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="built_in">printList</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">list&lt;<span class="type">int</span>&gt;::iterator it = L.<span class="built_in">begin</span>();</span><br><span class="line">L.<span class="built_in">insert</span>(++it, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">printList</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">it = L.<span class="built_in">begin</span>();</span><br><span class="line">L.<span class="built_in">erase</span>(++it);</span><br><span class="line"><span class="built_in">printList</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除</span></span><br><span class="line">L.<span class="built_in">push_back</span>(<span class="number">10000</span>);</span><br><span class="line">L.<span class="built_in">push_back</span>(<span class="number">10000</span>);</span><br><span class="line">L.<span class="built_in">push_back</span>(<span class="number">10000</span>);</span><br><span class="line"><span class="built_in">printList</span>(L);</span><br><span class="line">L.<span class="built_in">remove</span>(<span class="number">10000</span>);</span><br><span class="line"><span class="built_in">printList</span>(L);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//清空</span></span><br><span class="line">L.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">printList</span>(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>尾插   — push_back</li><li>尾删   — pop_back</li><li>头插   — push_front</li><li>头删   — pop_front</li><li>插入   — insert</li><li>删除   — erase</li><li>移除   — remove</li><li>清空   — clear</li></ul><p>list的迭代器不能+n</p><p>只能用advance或者自增自减++–</p><p>双向迭代器，不能跳跃移动</p><h4 id="3-7-6-list-数据存取"><a href="#3-7-6-list-数据存取" class="headerlink" title="3.7.6 list 数据存取"></a>3.7.6 list 数据存取</h4><p><strong>功能描述：</strong></p><ul><li>对list容器中数据进行存取</li></ul><p><strong>函数原型：</strong></p><ul><li><code>front();</code>        &#x2F;&#x2F;返回第一个元素。</li><li><code>back();</code>         &#x2F;&#x2F;返回最后一个元素。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数据存取</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">list&lt;<span class="type">int</span>&gt;L1;</span><br><span class="line">L1.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">L1.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">L1.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">L1.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; L1.at(0) &lt;&lt; endl;//错误 不支持at访问数据</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; L1[0] &lt;&lt; endl; //错误  不支持[]方式访问数据</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一个元素为： &quot;</span> &lt;&lt; L1.<span class="built_in">front</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;最后一个元素为： &quot;</span> &lt;&lt; L1.<span class="built_in">back</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//list容器的迭代器是双向迭代器，不支持随机访问</span></span><br><span class="line">list&lt;<span class="type">int</span>&gt;::iterator it = L1.<span class="built_in">begin</span>();</span><br><span class="line"><span class="comment">//it = it + 1;//错误，不可以跳跃访问，即使是+1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>list容器中不可以通过[]或者at方式访问数据</li><li>返回第一个元素   — front</li><li>返回最后一个元素   — back</li></ul><h4 id="3-7-7-list-反转和排序"><a href="#3-7-7-list-反转和排序" class="headerlink" title="&#x3D;&#x3D;3.7.7 list 反转和排序&#x3D;&#x3D;"></a>&#x3D;&#x3D;3.7.7 list 反转和排序&#x3D;&#x3D;</h4><p><strong>功能描述：</strong></p><ul><li>将容器中的元素反转，以及将容器中的数据进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><code>reverse();</code>   &#x2F;&#x2F;反转链表</li><li><code>sort();</code>        &#x2F;&#x2F;链表排序</li></ul><blockquote><p>&#x2F;&#x2F;不支持&#x3D;&#x3D;随机访问迭代器&#x3D;&#x3D;的&#x3D;&#x3D;不能用标准排序算法&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>()wrong</span><br><span class="line">l1.<span class="built_in">sort</span>()<span class="comment">//right</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;会有对应的sort成员函数</p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">jiang</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">sheng</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(list&lt;<span class="type">int</span>&gt; &amp;l1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;遍历&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (list&lt;<span class="type">int</span>&gt;::const_iterator i = l1.<span class="built_in">begin</span>(); i!=l1.<span class="built_in">end</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">list&lt;<span class="type">int</span>&gt; l1;</span><br><span class="line">l1.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">l1.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">l1.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">l1.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">l1.<span class="built_in">push_back</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;反转后&quot;</span> &lt;&lt; endl;</span><br><span class="line">l1.<span class="built_in">reverse</span>();</span><br><span class="line"><span class="built_in">Print</span>(l1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;升序&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort(l1.begin(), l1.end(),sheng);</span></span><br><span class="line">l1.<span class="built_in">sort</span>();</span><br><span class="line"><span class="built_in">Print</span>(l1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;降序&quot;</span> &lt;&lt; endl;</span><br><span class="line">l1.<span class="built_in">sort</span>(jiang);</span><br><span class="line"><span class="comment">//sort(l1.begin(), l1.end(), jiang);</span></span><br><span class="line"><span class="built_in">Print</span>(l1);</span><br><span class="line"><span class="comment">//不支持随机访问迭代器的不能用标准排序算法</span></span><br><span class="line"><span class="comment">//会有对应的sort成员函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>反转   — reverse</li><li>排序   — sort （成员函数）</li></ul><h4 id="3-7-8-排序案例"><a href="#3-7-8-排序案例" class="headerlink" title="3.7.8 排序案例"></a>3.7.8 排序案例</h4><p>案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高</p><p>排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//排序规则：按照年龄进行升序，如果年龄相同按照身高进行降序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string n, <span class="type">int</span> a, <span class="type">int</span> s) :<span class="built_in">name</span>(n), <span class="built_in">age</span>(a), <span class="built_in">shengao</span>(s) &#123;&#125;;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> shengao;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creatPerson</span><span class="params">(vector&lt;Person&gt; &amp;v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string name = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">string abc = <span class="string">&quot;ABCDEF&quot;</span>;</span><br><span class="line">string newname = <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">int</span> height;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">newname = name + abc[i];</span><br><span class="line">age = <span class="built_in">rand</span>()%<span class="number">11</span>+<span class="number">10</span>;</span><br><span class="line">height= <span class="built_in">rand</span>() % <span class="number">21</span> + <span class="number">160</span>;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">Person</span>(newname, age, height));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;Person&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Person i : p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; i.name &lt;&lt; <span class="string">&quot;年龄:&quot;</span> &lt;&lt; i.age &lt;&lt; <span class="string">&quot;身高:&quot;</span> &lt;&lt; i.shengao &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(Person p1, Person p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.age != p2.age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p1.age &lt; p2.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> p1.shengao &gt; p2.shengao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(<span class="built_in">time</span>(<span class="number">0</span>)));</span><br><span class="line">vector&lt;Person&gt; v;</span><br><span class="line"><span class="built_in">creatPerson</span>(v);</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), compare);</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"><span class="comment">//姓名:学生A年龄:12身高 : 27</span></span><br><span class="line"><span class="comment">//姓名 : 学生B年龄 : 20身高 : 87</span></span><br><span class="line"><span class="comment">//姓名 : 学生C年龄 : 14身高 : 113</span></span><br><span class="line"><span class="comment">//姓名 : 学生D年龄 : 12身高 : 145</span></span><br><span class="line"><span class="comment">//姓名 : 学生E年龄 : 13身高 : 45</span></span><br><span class="line"><span class="comment">//排序后</span></span><br><span class="line"><span class="comment">//姓名 : 学生D年龄:12身高 : 145</span></span><br><span class="line"><span class="comment">//姓名 : 学生A年龄 : 12身高 : 27</span></span><br><span class="line"><span class="comment">//姓名 : 学生E年龄 : 13身高 : 45</span></span><br><span class="line"><span class="comment">//姓名 : 学生C年龄 : 14身高 : 113</span></span><br><span class="line"><span class="comment">//姓名 : 学生B年龄 : 20身高 : 87</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><p>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</p></li><li><p>高级排序只是在排序规则上再进行一次逻辑规则制定，并不复杂</p></li></ul><h3 id="3-8-set-multiset-容器（双向）"><a href="#3-8-set-multiset-容器（双向）" class="headerlink" title="3.8 set&#x2F; multiset 容器（双向）"></a>3.8 set&#x2F; multiset 容器（双向）</h3><h4 id="3-8-1-set基本概念"><a href="#3-8-1-set基本概念" class="headerlink" title="3.8.1 set基本概念"></a>3.8.1 set基本概念</h4><p><strong>简介：</strong></p><ul><li>所有元素都&#x3D;&#x3D;会在插入时<strong>自动被排序</strong>&#x3D;&#x3D;</li></ul><p><strong>本质：</strong></p><ul><li>set&#x2F;multiset属于&#x3D;&#x3D;<strong>关联式容器</strong>&#x3D;&#x3D;，底层结构是用&#x3D;&#x3D;<strong>二叉树</strong>&#x3D;&#x3D;实现。</li></ul><p><strong>set和multiset区别</strong>：</p><ul><li><p>set&#x3D;&#x3D;不允许容器中有重复的元素&#x3D;&#x3D;</p></li><li><p>multiset&#x3D;&#x3D;<strong>允许容器中有重复的元素</strong>&#x3D;&#x3D;</p><blockquote><p><strong>包含了set的头文件也可以用multiset！</strong></p></blockquote></li></ul><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><blockquote><p>二叉树是一种&#x3D;&#x3D;树形数据结构&#x3D;&#x3D;，它由&#x3D;&#x3D;节点&#x3D;&#x3D;组成，&#x3D;&#x3D;每个节点最多有两个子节点&#x3D;&#x3D;，分别称为左子节点和右子节点。二叉树通常被用来模拟自然界中的层级关系，比如家族关系、文件系统等。</p><p>为了更容易理解二叉树的核心概念，可以通过以下方式学习：</p><ol><li><p><strong>节点（Node）：</strong> 二叉树的基本单元就是节点。每个节点包含一个值，并且可能具有指向左子节点和右子节点的引用。</p></li><li><p><strong>根节点（Root Node）：</strong> 二叉树的顶部节点称为根节点。它是整棵树的起点。</p></li><li><p><strong>子节点（Child Node）：</strong> 每个节点最多有两个子节点，分别称为左子节点和右子节点。</p></li><li><p><strong>叶子节点（Leaf Node）：</strong> 没有子节点的节点称为叶子节点，它们位于树的末端。</p></li><li><p><strong>深度（Depth）：</strong> 从根节点到某个节点的唯一路径的长度称为该节点的深度。根节点的深度为0。</p></li><li><p><strong>高度（Height）：</strong> 从一个节点到它的叶子节点的最长路径经过的边的数量称为该节点的高度。树的高度等于根节点的高度。</p></li><li><p><strong>遍历（Traversal）：</strong> 遍历是指按照一定顺序访问树中的所有节点。常见的遍历方式有前序遍历、中序遍历和后序遍历。</p></li><li><p><strong>平衡二叉树（Balanced Binary Tree）：</strong> 如果一棵二叉树的每个节点的左子树和右子树的高度差不超过1，则称这棵二叉树是平衡二叉树。</p></li><li><p><strong>二叉搜索树（Binary Search Tree）：</strong> 一种特殊的二叉树，左子树上所有节点的值均小于根节点的值，右子树上所有节点的值均大于根节点的值。</p></li><li><p><strong>操作：</strong> 二叉树支持插入、删除、查找等操作，这些操作可以帮助我们在树中存储和检索数据。</p></li></ol><img src="/xu-runbo/post/c6b8c88d/image-20231116152617605.png" class="" title="image-20231116152617605"></blockquote><h4 id="3-8-2-set构造和赋值"><a href="#3-8-2-set构造和赋值" class="headerlink" title="3.8.2 set构造和赋值"></a>3.8.2 set构造和赋值</h4><p>功能描述：创建set容器以及赋值</p><p>构造：</p><ul><li><code>set&lt;T&gt; st;</code>                        &#x2F;&#x2F;默认构造函数：</li><li><code>set(const set &amp;st);</code>       &#x2F;&#x2F;拷贝构造函数</li></ul><p>赋值：</p><ul><li><code>set&amp; operator=(const set &amp;st);</code>    &#x2F;&#x2F;重载等号操作符</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSet</span><span class="params">(set&lt;<span class="type">int</span>&gt; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">8</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line"><span class="comment">/////////////set的特点：1：只有插入的方式存储数据，而且对插入的数据自动升序排序</span></span><br><span class="line"><span class="comment">////////////2.不允许有重复的数据！</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintSet</span>(s);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">s1</span><span class="params">(s)</span></span>;</span><br><span class="line"><span class="built_in">PrintSet</span>(s1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;等号赋值操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s3;</span><br><span class="line">s3 = s1;</span><br><span class="line"><span class="built_in">PrintSet</span>(s3);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>set容器插入数据时用insert</li><li>set容器插入数据的数据会自动(升序)排序</li></ul><blockquote><p>Set是一种容器，&#x3D;&#x3D;用于存储独特（唯一）的元素，它不允许重复值&#x3D;&#x3D;。在C++中，Set通常使用红黑树（Red-Black Tree）实现，这是一种&#x3D;&#x3D;自平衡的二叉搜索树&#x3D;&#x3D;。</p><p><code>resize</code>方法通常用于动态调整容器的大小。对于具有固定大小的容器（如数组），可以通过<code>resize</code>方法增加或减少容器的大小。</p><p>然而，对于Set容器来说，它的大小是由其中的元素数量决定的，并且&#x3D;&#x3D;Set容器不允许重复值，所以它的大小是动态变化的。&#x3D;&#x3D;<code>就算扩大了用0来补充但是不能有重复的元素，那resize了个什么？</code></p><p>由于Set容器使用红黑树来实现，红黑树的结构与容器的大小相关。每次插入、删除元素时，红黑树会自动进行平衡操作，以保持树的平衡性.</p><p>&#x3D;&#x3D;<strong>Set容器的大小是由树的结构和元素的数量共同决定的，而不是由用户手动指定的</strong>&#x3D;&#x3D;</p></blockquote><h4 id="set放自定义数据的时候如何自动排序呢"><a href="#set放自定义数据的时候如何自动排序呢" class="headerlink" title="set放自定义数据的时候如何自动排序呢"></a><a name="自定义数据时候的比较">set放自定义数据的时候如何自动排序呢</a></h4><blockquote><p><code>std::set</code> 默认使用 <code>operator&lt;</code> 来进行对象的比较，而不是 <code>operator&gt;</code>。因此，在使用 <code>std::set</code> 存储自定义对象时，你需要重载 <code>&lt;</code> 运算符来定义对象的比较规则。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age, string name) :<span class="built_in">age</span>(age), <span class="built_in">name</span>(name) &#123;&#125;;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">string name;</span><br><span class="line"><span class="comment">//需要自定义比较规则,而且set默认是用&lt;来比较的，重载&gt;就报错了！</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Person &amp;p) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == p.name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;age &gt; p.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;name &gt; p.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSet</span><span class="params">(<span class="type">const</span> set&lt;Person&gt; &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> Person i : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; i.name &lt;&lt; <span class="string">&quot;年龄&quot;</span> &lt;&lt; i.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;Person&gt; s;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">11</span>, <span class="string">&quot;小明2&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">12</span>, <span class="string">&quot;小明1&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">13</span>, <span class="string">&quot;小明3&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="number">14</span>, <span class="string">&quot;小明5&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p5</span><span class="params">(<span class="number">15</span>, <span class="string">&quot;小明0&quot;</span>)</span></span>;</span><br><span class="line">s.<span class="built_in">insert</span>(p1);</span><br><span class="line">s.<span class="built_in">insert</span>(p2);</span><br><span class="line">s.<span class="built_in">insert</span>(p4);</span><br><span class="line">s.<span class="built_in">insert</span>(p5);</span><br><span class="line">s.<span class="built_in">insert</span>(p5);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintSet</span>(s);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-3-set大小和交换"><a href="#3-8-3-set大小和交换" class="headerlink" title="3.8.3 set大小和交换"></a>3.8.3 set大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计set容器大小以及交换set容器</li></ul><p><strong>函数原型：</strong></p><ul><li><code>size();</code>          &#x2F;&#x2F;返回容器中元素的数目</li><li><code>empty();</code>        &#x2F;&#x2F;判断容器是否为空</li><li><code>swap(st);</code>      &#x2F;&#x2F;交换两个集合容器</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSet</span><span class="params">(set&lt;<span class="type">int</span>&gt; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetIsempty</span><span class="params">(set&lt;<span class="type">int</span>&gt; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;set是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;set不是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="built_in">SetIsempty</span>(s);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">8</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintSet</span>(s);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;set的大小&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//Set容器的大小是由树的结构和元素的数量共同决定的，而不是由用户手动指定的</span></span><br><span class="line"><span class="built_in">SetIsempty</span>(s);</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s2;</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">s2.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintSet</span>(s2);</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">swap</span>(s2);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换后&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s:&quot;</span>;</span><br><span class="line"><span class="built_in">PrintSet</span>(s);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s2:&quot;</span>;</span><br><span class="line"><span class="built_in">PrintSet</span>(s2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>统计大小   — size</li><li>判断是否为空   — empty</li><li>交换容器   — swap</li></ul><h4 id="3-8-4-set插入和删除"><a href="#3-8-4-set插入和删除" class="headerlink" title="3.8.4 set插入和删除"></a>3.8.4 set插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>set容器进行插入数据和删除数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code>           &#x2F;&#x2F;在容器中插入元素。</li><li><code>clear();</code>                    &#x2F;&#x2F;清除所有元素</li><li><code>erase(pos);</code>              &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code>    &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(elem);</code>            &#x2F;&#x2F;删除容器中值为elem的元素。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSet</span><span class="params">(set&lt;<span class="type">int</span>&gt; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetIsempty</span><span class="params">(set&lt;<span class="type">int</span>&gt; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;set是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;set不是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="built_in">SetIsempty</span>(s);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">8</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintSet</span>(s);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;双向迭代器&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//s.erase(s.begin()+2);</span></span><br><span class="line">s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>()++);</span><br><span class="line"><span class="built_in">PrintSet</span>(s);</span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">9</span>);</span><br><span class="line"><span class="built_in">PrintSet</span>(s);</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator end = s.<span class="built_in">end</span>();</span><br><span class="line"><span class="built_in">advance</span>(end, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">//s.erase(s.begin(),s.end()--);//不支持--后退操作，可以用advance来指定后退！！！！</span></span><br><span class="line">s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>(), end);</span><br><span class="line"><span class="built_in">PrintSet</span>(s);</span><br><span class="line"><span class="comment">//1 2 3 &amp;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----------&quot;</span> &lt;&lt; endl;</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">PrintSet</span>(s);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;s.erase(s.begin(),s.end());&quot;</span> &lt;&lt; <span class="string">&quot;等价于&quot;</span> &lt;&lt; <span class="string">&quot;s.clear()&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>插入   — insert</li><li>删除   — erase</li><li>清空   — clear</li></ul><blockquote><p>双向迭代器不支持–</p><p>支持++</p><p>或者用advance指定移动位置，但是要及时更新迭代器！</p></blockquote><h4 id="3-8-5-set查找和统计"><a href="#3-8-5-set查找和统计" class="headerlink" title="3.8.5 set查找和统计"></a>3.8.5 set查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对set容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code>                  &#x2F;&#x2F;查找key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code>                &#x2F;&#x2F;统计key的元素个数</li><li>find返回的是迭代器可以*操作，找不到就返回end迭代器</li><li>count返回0&#x2F;1</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSet</span><span class="params">(set&lt;<span class="type">int</span>&gt; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetIsempty</span><span class="params">(set&lt;<span class="type">int</span>&gt; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;set是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;set不是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="built_in">SetIsempty</span>(s);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">8</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintSet</span>(s);</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">find</span>(<span class="number">9</span>)!=s.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到拉！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找不到T_T&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;9的个数为&quot;</span> &lt;&lt; s.<span class="built_in">count</span>(<span class="number">9</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;10的个数为&quot;</span> &lt;&lt; s.<span class="built_in">count</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>查找   —  find    （返回的是迭代器）</li><li>统计   —  count  （对于set，结果为0或者1）</li></ul><h4 id="3-8-6-set和multiset区别"><a href="#3-8-6-set和multiset区别" class="headerlink" title="3.8.6 set和multiset区别"></a>3.8.6 set和multiset区别</h4><p><strong>学习目标：</strong></p><ul><li>掌握set和multiset的区别</li></ul><img src="/xu-runbo/post/c6b8c88d/image-20231116162719295.png" class="" title="image-20231116162719295"> <p>multiset:</p><img src="/xu-runbo/post/c6b8c88d/image-20231116162808656.png" class="" title="image-20231116162808656"> <p><strong>区别：</strong></p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset&#x3D;&#x3D;不会检测数据，&#x3D;&#x3D;因此可以插入重复数据</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintSet</span><span class="params">(set&lt;<span class="type">int</span>&gt; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetIsempty</span><span class="params">(set&lt;<span class="type">int</span>&gt; s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;set是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;set不是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="built_in">SetIsempty</span>(s);</span><br><span class="line"></span><br><span class="line">pair&lt;set&lt;<span class="type">int</span>&gt;::iterator,<span class="type">bool</span>&gt; ret=s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ret.second)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;插入成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;插入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">ret = s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ret.second)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;插入成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;插入失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">multiset&lt;<span class="type">int</span>&gt; ms;</span><br><span class="line">multiset&lt;<span class="type">int</span>&gt;::iterator mret=ms.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;multiset的insert返回的是迭代器这个值解引用操作得到插入的数&quot;</span>&lt;&lt; * mret &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><blockquote><ul><li>如果不允许插入重复数据可以利用set</li><li>如果需要插入重复数据利用multiset</li></ul></blockquote><h4 id="3-8-7-pair对组创建"><a href="#3-8-7-pair对组创建" class="headerlink" title="3.8.7 pair对组创建"></a>3.8.7 pair对组创建</h4><p><strong>功能描述：</strong></p><ul><li>成对出现的数据，利用对组可以返回两个数据</li></ul><p><strong>两种创建方式：</strong></p><ul><li><code>pair&lt;type, type&gt; p ( value1, value2 );</code></li><li><code>pair&lt;type, type&gt; p = make_pair( value1, value2 );</code></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//队组的使用pair</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">pair&lt;string,<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;tom&quot;</span>, <span class="number">11</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;队组的第一个数是&quot;</span> &lt;&lt; p.first &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;队组的第二个参数是&quot;</span> &lt;&lt; p.second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">pair &lt;string, <span class="type">int</span>&gt; p1 = <span class="built_in">make_pair</span>(<span class="string">&quot;牛马&quot;</span>, <span class="number">23</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;队组的第一个数是&quot;</span> &lt;&lt; p1.first &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;队组的第二个参数是&quot;</span> &lt;&lt; p1.second &lt;&lt; endl;</span><br><span class="line"><span class="comment">//队组的第一个数是tom</span></span><br><span class="line"><span class="comment">//队组的第二个参数是11</span></span><br><span class="line"><span class="comment">//队组的第一个数是牛马</span></span><br><span class="line"><span class="comment">//队组的第二个参数是23</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>两种方式都可以创建对组，记住一种即可</p><blockquote><p>不需要包含头文件</p><p>直接使用</p></blockquote><h4 id="3-8-8-set容器排序"><a href="#3-8-8-set容器排序" class="headerlink" title="3.8.8 &#x3D;&#x3D;set容器排序&#x3D;&#x3D;"></a>3.8.8 &#x3D;&#x3D;set容器排序&#x3D;&#x3D;</h4><p>学习目标：</p><ul><li>set容器默认排序规则为从小到大，掌握如何改变排序规则</li><li><img src="/xu-runbo/post/c6b8c88d/image-20231116170340444.png" class="" title="image-20231116170340444"></li></ul><p>主要技术点：</p><ul><li>利用<strong>仿函数</strong>，可以改变排序规则</li></ul><p><strong>示例一</strong>   set存放内置数据类型</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">compare</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">const</span> set&lt;<span class="type">int</span>,compare&gt; &amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (set&lt;<span class="type">int</span>, compare&gt;::const_iterator i = s.<span class="built_in">begin</span>(); i!=s.<span class="built_in">end</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//要在创建对象之前就指定排序规则！</span></span><br><span class="line">set&lt;<span class="type">int</span>, compare&gt; s;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line"> <span class="built_in">Print</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：利用仿函数可以指定set容器的排序规则</p><p><strong>示例二</strong> <a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E6%97%B6%E5%80%99%E7%9A%84%E6%AF%94%E8%BE%83">set存放自定义数据类型</a></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string m_Name;</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">comparePerson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Person&amp; p1, <span class="type">const</span> Person &amp;p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//按照年龄进行排序  降序</span></span><br><span class="line"><span class="keyword">return</span> p1.m_Age &gt; p2.m_Age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;Person, comparePerson&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;刘备&quot;</span>, <span class="number">23</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;关羽&quot;</span>, <span class="number">27</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;张飞&quot;</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;赵云&quot;</span>, <span class="number">21</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">s.<span class="built_in">insert</span>(p1);</span><br><span class="line">s.<span class="built_in">insert</span>(p2);</span><br><span class="line">s.<span class="built_in">insert</span>(p3);</span><br><span class="line">s.<span class="built_in">insert</span>(p4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (set&lt;Person, comparePerson&gt;::iterator it = s.<span class="built_in">begin</span>(); it != s.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>对于自定义数据类型，set必须指定排序规则才可以插入数据</p><blockquote><p>提前指定排序规则</p><p>或者重载&lt;！</p><p>但是推荐提前用仿函数指定排序规则</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">comparePerson</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> Person&amp; p1, <span class="type">const</span> Person &amp;p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//按照年龄进行排序  降序</span></span><br><span class="line"><span class="keyword">return</span> p1.m_Age &gt; p2.m_Age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><hr><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age, string name) :<span class="built_in">age</span>(age), <span class="built_in">name</span>(name) &#123;&#125;;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">string name;</span><br><span class="line"><span class="comment">//需要自定义比较规则,而且set默认是用&lt;来比较的，重载&gt;就报错了！</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Person &amp;p) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == p.name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;age &gt; p.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;name &gt; p.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-9-map-multimap容器"><a href="#3-9-map-multimap容器" class="headerlink" title="3.9 map&#x2F; multimap容器"></a>3.9 map&#x2F; multimap容器</h3><h4 id="3-9-1-map基本概念"><a href="#3-9-1-map基本概念" class="headerlink" title="3.9.1 map基本概念"></a>3.9.1 map基本概念</h4><p><strong>简介：</strong></p><ul><li>map中所有元素都是&#x3D;&#x3D;pair&#x3D;&#x3D;</li><li>pair中<strong>第一个元素为key（键值）</strong>，起到索引作用，<strong>第二个元素为value（实值）</strong></li><li>&#x3D;&#x3D;所有元素都会根据<strong>元素的键自动升序排序</strong>&#x3D;&#x3D;</li></ul><p><strong>本质：</strong></p><ul><li>map&#x2F;multimap属于<strong>关联式容器</strong>，底层结构是用二叉树实现。</li></ul><p><strong>优点：</strong></p><ul><li><strong>可以根据key值快速找到value值</strong></li></ul><p>map和multimap<strong>区别</strong>：</p><ul><li>map不允许容器中有<strong>重复key值元素</strong></li><li>multimap允许容器中有<strong>重复key值元素</strong></li></ul><h4 id="3-9-2-map构造和赋值"><a href="#3-9-2-map构造和赋值" class="headerlink" title="3.9.2  map构造和赋值"></a>3.9.2  map构造和赋值</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行构造和赋值操作</li></ul><p><strong>函数原型：</strong></p><p><strong>构造：</strong></p><ul><li><code>map&lt;T1, T2&gt; mp;</code>                     &#x2F;&#x2F;map默认构造函数: </li><li><code>map(const map &amp;mp);</code>             &#x2F;&#x2F;拷贝构造函数</li></ul><p><strong>赋值：</strong></p><ul><li><code>map&amp; operator=(const map &amp;mp);</code>    &#x2F;&#x2F;重载等号操作符</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintMap</span><span class="params">(map&lt;string, <span class="type">int</span>&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (pair&lt;string, <span class="type">int</span>&gt; i : m)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; i.first &lt;&lt; <span class="string">&quot;序号&quot;</span> &lt;&lt; i.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;string,<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;xasd&quot;</span>, <span class="number">2332</span>)</span></span>;</span><br><span class="line">pair&lt;string, <span class="type">int</span>&gt; pp = <span class="built_in">make_pair</span>(<span class="string">&quot;niuma&quot;</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马5&quot;</span>, <span class="number">4</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马1&quot;</span>, <span class="number">9</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马2&quot;</span>, <span class="number">1</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马3&quot;</span>, <span class="number">3</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马4&quot;</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintMap</span>(m);</span><br><span class="line"></span><br><span class="line"><span class="function">map&lt;string, <span class="type">int</span>&gt; <span class="title">m1</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="built_in">PrintMap</span>(m1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; m2;</span><br><span class="line">m2 = m;</span><br><span class="line"><span class="built_in">PrintMap</span>(m2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：map中所有元素都是成对出现，插入数据时候要使用对组</p><h4 id="3-9-3-map大小和交换"><a href="#3-9-3-map大小和交换" class="headerlink" title="3.9.3 map大小和交换"></a>3.9.3 map大小和交换</h4><p><strong>功能描述：</strong></p><ul><li>统计map容器大小以及交换map容器</li></ul><p>函数原型：</p><ul><li><code>size();</code>          &#x2F;&#x2F;返回容器中元素的数目</li><li><code>empty();</code>        &#x2F;&#x2F;判断容器是否为空</li><li><code>swap(st);</code>      &#x2F;&#x2F;交换两个集合容器</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintMap</span><span class="params">(map&lt;string, <span class="type">int</span>&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (pair&lt;string, <span class="type">int</span>&gt; i : m)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; i.first &lt;&lt; <span class="string">&quot;序号&quot;</span> &lt;&lt; i.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;string,<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;xasd&quot;</span>, <span class="number">2332</span>)</span></span>;</span><br><span class="line">pair&lt;string, <span class="type">int</span>&gt; pp = <span class="built_in">make_pair</span>(<span class="string">&quot;niuma&quot;</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马5&quot;</span>, <span class="number">4</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马1&quot;</span>, <span class="number">9</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马2&quot;</span>, <span class="number">1</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马3&quot;</span>, <span class="number">3</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马4&quot;</span>, <span class="number">5</span>));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size=&quot;</span> &lt;&lt; m.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PrintMap</span>(m);</span><br><span class="line"><span class="keyword">if</span> (m.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;容器是空的！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;容器不是空的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; m1;</span><br><span class="line">m1.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;马5&quot;</span>, <span class="number">94</span>));</span><br><span class="line">m1.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;马1&quot;</span>, <span class="number">97</span>));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size=&quot;</span> &lt;&lt; m1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换swap&quot;</span> &lt;&lt; endl;</span><br><span class="line">m.<span class="built_in">swap</span>(m1);</span><br><span class="line"><span class="built_in">PrintMap</span>(m);</span><br><span class="line"><span class="built_in">PrintMap</span>(m1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>统计大小   — size</li><li>判断是否为空   — empty</li><li>交换容器   — swap</li></ul><h4 id="3-9-4-map插入和删除"><a href="#3-9-4-map插入和删除" class="headerlink" title="3.9.4 map插入和删除"></a>3.9.4 map插入和删除</h4><p><strong>功能描述：</strong></p><ul><li>map容器进行插入数据和删除数据</li></ul><img src="/xu-runbo/post/c6b8c88d/image-20231117195835695.png" class="" title="image-20231117195835695"> <p><strong>函数原型：</strong></p><ul><li><code>insert(elem);</code>           &#x2F;&#x2F;在容器中插入元素。</li><li><code>clear();</code>                    &#x2F;&#x2F;清除所有元素</li><li><code>erase(pos);</code>              &#x2F;&#x2F;删除pos迭代器所指的元素，返回下一个元素的迭代器。</li><li><code>erase(beg, end);</code>    &#x2F;&#x2F;删除区间[beg,end)的所有元素 ，返回下一个元素的迭代器。</li><li><code>erase(key);</code>            &#x2F;&#x2F;&#x3D;&#x3D;删除容器中值为<strong>key</strong>的元素。&#x3D;&#x3D;</li><li>&#x3D;&#x3D;可以用[]来访问value的值&#x3D;&#x3D;但是不建议用[]来插入！</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printMap</span><span class="params">(map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&amp;m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key = &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; value = &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line"><span class="comment">//第一种插入方式</span></span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line"><span class="comment">//第二种插入方式</span></span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line"><span class="comment">//第三种插入方式</span></span><br><span class="line">m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="number">3</span>, <span class="number">30</span>));</span><br><span class="line"><span class="comment">//第四种插入方式</span></span><br><span class="line">m[<span class="number">4</span>] = <span class="number">40</span>; </span><br><span class="line"><span class="built_in">printMap</span>(m);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">m.<span class="built_in">erase</span>(m.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">printMap</span>(m);</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">erase</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printMap</span>(m);</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">m.<span class="built_in">erase</span>(m.<span class="built_in">begin</span>(),m.<span class="built_in">end</span>());</span><br><span class="line">m.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">printMap</span>(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>map插入方式很多，记住其一即可</li></ul><ul><li>插入   — insert </li><li>删除   — erase</li><li>清空   — clear</li></ul><h4 id="3-9-5-map查找和统计"><a href="#3-9-5-map查找和统计" class="headerlink" title="3.9.5 map查找和统计"></a>3.9.5 map查找和统计</h4><p><strong>功能描述：</strong></p><ul><li>对map容器进行查找数据以及统计数据</li></ul><p><strong>函数原型：</strong></p><ul><li><code>find(key);</code>                  &#x2F;&#x2F;&#x3D;&#x3D;查找key&#x3D;&#x3D;是否存在,若存在，返回该键的元素的迭代器；&#x3D;&#x3D;<strong>若不存在，返回set.end();</strong>&#x3D;&#x3D;</li><li><img src="/xu-runbo/post/c6b8c88d/image-20231117200339832.png" class="" title="image-20231117200339832"> </li><li><code>count(key);</code>                &#x2F;&#x2F;统计&#x3D;&#x3D;key的元素个数&#x3D;&#x3D;</li><li>map的只能为1，multimap可能大于1</li><li>是查找的key</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintMap</span><span class="params">(map&lt;string, <span class="type">int</span>&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (pair&lt;string, <span class="type">int</span>&gt; i : m)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; i.first &lt;&lt; <span class="string">&quot;序号&quot;</span> &lt;&lt; i.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;string,<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;xasd&quot;</span>, <span class="number">2332</span>)</span></span>;</span><br><span class="line">pair&lt;string, <span class="type">int</span>&gt; pp = <span class="built_in">make_pair</span>(<span class="string">&quot;niuma&quot;</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">int</span>&gt; m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马5&quot;</span>, <span class="number">4</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马1&quot;</span>, <span class="number">9</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马3&quot;</span>, <span class="number">1</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马3&quot;</span>, <span class="number">3</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马4&quot;</span>, <span class="number">5</span>));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size=&quot;</span> &lt;&lt; m.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PrintMap</span>(m);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;key为3的有多少个？&quot;</span> &lt;&lt; m.<span class="built_in">count</span>(<span class="string">&quot;牛马3&quot;</span>) &lt;&lt; endl;</span><br><span class="line">map&lt;string,<span class="type">int</span>&gt;::iterator res=m.<span class="built_in">find</span>(<span class="string">&quot;牛马5&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (res != m.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到了！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没找到&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>查找   —  find    （返回的是迭代器）</li><li>统计   —  count  （对于map，结果为0或者1）</li></ul><h4 id="3-9-6-map容器排序"><a href="#3-9-6-map容器排序" class="headerlink" title="3.9.6 map容器排序"></a>3.9.6 map容器排序</h4><p><strong>学习目标：</strong></p><ul><li>map容器默认排序规则为 按照key值进行 从小到大排序，掌握如何改变排序规则</li></ul><p><strong>主要技术点:</strong></p><ul><li>利用仿函数，可以改变排序规则</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//比较的是key</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">compare</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> string&amp; s1, <span class="type">const</span> string&amp; s2)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1 &gt; s2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintMap</span><span class="params">(<span class="type">const</span> map&lt;string, <span class="type">int</span>, compare&gt; &amp;m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">const</span> pair&lt;string, <span class="type">int</span>&gt; i : m)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; i.first &lt;&lt; <span class="string">&quot;序号&quot;</span> &lt;&lt; i.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这意味着map的键是string类型，值是int类型，但比较函数对象的参数类型并不匹配。</span></span><br><span class="line"><span class="comment">//根据key啊啊啊啊啊啊啊啊啊啊啊</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map&lt;string, <span class="type">int</span>,compare&gt; m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马5&quot;</span>, <span class="number">4</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马1&quot;</span>, <span class="number">9</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马3&quot;</span>, <span class="number">1</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马3&quot;</span>, <span class="number">3</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;牛马4&quot;</span>, <span class="number">10</span>));</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size=&quot;</span> &lt;&lt; m.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PrintMap</span>(m);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>利用仿函数可以指定map容器的排序规则</li><li>对于自定义数据类型，map必须要指定排序规则,同set容器</li></ul><h3 id="3-10-案例-员工分组"><a href="#3-10-案例-员工分组" class="headerlink" title="3.10 案例-员工分组"></a>3.10 案例-员工分组</h3><h4 id="3-10-1-案例描述"><a href="#3-10-1-案例描述" class="headerlink" title="3.10.1 案例描述"></a>3.10.1 案例描述</h4><ul><li>公司今天招聘了10个员工（ABCDEFGHIJ），10名员工进入公司之后，需要指派员工在那个部门工作</li><li>员工信息有: 姓名  工资组成；部门分为：策划、美术、研发</li><li>随机给10名员工分配部门和工资</li><li>通过multimap进行信息的插入  key(部门编号) value(员工)</li><li>分部门显示员工信息</li></ul><h4 id="3-10-2-实现步骤"><a href="#3-10-2-实现步骤" class="headerlink" title="3.10.2 实现步骤"></a>3.10.2 实现步骤</h4><ol><li>创建10名员工，放到vector中</li><li>遍历vector容器，取出每个员工，进行随机分组</li><li>分组后，将员工部门编号作为key，具体员工作为value，放入到multimap容器中</li><li>分部门显示员工信息</li></ol><p><strong>案例代码：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CEHUA 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MEISHU 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> YANFA 2</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Worker</span>() &#123;&#125;;</span><br><span class="line"><span class="built_in">Worker</span>(string name, <span class="type">int</span> salary) : <span class="built_in">name</span>(name), <span class="built_in">salary</span>(salary) &#123;&#125;;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> salary;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;Worker&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Worker w : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; w.name &lt;&lt; <span class="string">&quot;薪资&quot;</span> &lt;&lt; w.salary &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateWorke</span><span class="params">(vector&lt;Worker&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string words = <span class="string">&quot;ABCDEFGHIJ&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Worker worker;</span></span><br><span class="line"><span class="comment">//worker.name = &quot;员工&quot;;</span></span><br><span class="line"><span class="comment">//worker.name +=words[i];</span></span><br><span class="line"><span class="comment">//worker.salary = rand() % 10000 + 10000; // 10000 ~ 19999</span></span><br><span class="line"><span class="comment">////将员工放入到容器中</span></span><br><span class="line"><span class="comment">//v.push_back(worker);</span></span><br><span class="line">string temp = <span class="string">&quot;员工&quot;</span>;</span><br><span class="line">temp += words[i];</span><br><span class="line"><span class="type">int</span> salary = <span class="built_in">rand</span>() % <span class="number">10000</span> + <span class="number">6000</span>;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="built_in">Worker</span>(temp, salary));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assigndp</span><span class="params">(multimap&lt;<span class="type">int</span>, Worker&gt;&amp; m, vector&lt;Worker&gt;&amp; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Worker w : v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">rand</span>() % <span class="number">3</span>;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(a, w));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintMap</span><span class="params">(multimap&lt;<span class="type">int</span>, Worker&gt;&amp; m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//for (pair&lt;int, Worker&gt; p : m)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//if (p.first == CEHUA)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;这个人是策划部门的&quot; &lt;&lt; &quot;姓名:&quot; &lt;&lt; p.second.name &lt;&lt; &quot;薪资:&quot; &lt;&lt; p.second.salary &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else if (p.first == MEISHU)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;这个人是美术部门的&quot; &lt;&lt; &quot;姓名:&quot; &lt;&lt; p.second.name &lt;&lt; &quot;薪资:&quot; &lt;&lt; p.second.salary &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;这个人是科研部门的&quot; &lt;&lt; &quot;姓名:&quot; &lt;&lt; p.second.name &lt;&lt; &quot;薪资:&quot; &lt;&lt; p.second.salary &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (map&lt;<span class="type">int</span>, Worker&gt;::iterator it = m.<span class="built_in">begin</span>(); it != m.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((*it).first == CEHUA)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这个人是策划部门的&quot;</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; (*it).second.name &lt;&lt; <span class="string">&quot;薪资:&quot;</span> &lt;&lt; (*it).second.salary &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((*it).first == MEISHU)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这个人是美术部门的&quot;</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; (*it).second.name &lt;&lt; <span class="string">&quot;薪资:&quot;</span> &lt;&lt; (*it).second.salary &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这个人是科研部门的&quot;</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; (*it).second.name &lt;&lt; <span class="string">&quot;薪资:&quot;</span> &lt;&lt; (*it).second.salary &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(<span class="built_in">time</span>(<span class="number">0</span>)));</span><br><span class="line">vector&lt;Worker&gt; v;</span><br><span class="line"><span class="built_in">CreateWorke</span>(v);</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">multimap&lt;<span class="type">int</span>, Worker&gt; m;</span><br><span class="line"><span class="built_in">assigndp</span>(m,v);</span><br><span class="line"><span class="built_in">PrintMap</span>(m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>当数据以键值对形式存在，可以考虑用map 或 multimap</li></ul><h2 id="4-STL-函数对象-仿函数"><a href="#4-STL-函数对象-仿函数" class="headerlink" title="4 STL- 函数对象(仿函数)"></a>4 STL- 函数对象(仿函数)</h2><h3 id="4-1-函数对象"><a href="#4-1-函数对象" class="headerlink" title="4.1 函数对象"></a>4.1 函数对象</h3><h4 id="4-1-1-函数对象概念"><a href="#4-1-1-函数对象概念" class="headerlink" title="4.1.1 函数对象概念"></a>4.1.1 函数对象概念</h4><p><strong>概念：</strong></p><ul><li>重载<strong>函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li><li><strong>函数对象</strong>使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li></ul><p><strong>本质：</strong></p><p>函数对象(仿函数)是一个<strong>类</strong>，不是一个函数</p><h4 id="4-1-2-函数对象使用"><a href="#4-1-2-函数对象使用" class="headerlink" title="4.1.2  函数对象使用"></a>4.1.2  函数对象使用</h4><p><strong>特点：</strong></p><ul><li>函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</li><li>函数对象超出普通函数的概念，函数对象可以有&#x3D;&#x3D;自己的状态&#x3D;&#x3D;</li><li>函数对象可以作为参数传递</li></ul><p>&#x3D;&#x3D;和普通函数不一样，这是仿函数的优点，普通函数不定义全局变量或者静态变量会被释放的输出不了，而仿函数可以&#x3D;&#x3D;</p><p><strong>示例:</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//*函数对象在使用时，可以像普通函数那样调用, 可以有参数，可以有返回值</span></span><br><span class="line"><span class="comment">//* 函数对象超出普通函数的概念，函数对象可以有自己的状态</span></span><br><span class="line"><span class="comment">//* 函数对象可以作为参数传递</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">func</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">func</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;hello world!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">func f;</span><br><span class="line">cout&lt;&lt;<span class="built_in">f</span>(<span class="number">10</span>, <span class="number">20</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">func f;</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;调用了&quot;</span> &lt;&lt; f.count &lt;&lt; <span class="string">&quot;次&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">(func &amp;f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line">func f;</span><br><span class="line"><span class="built_in">test03</span>(f);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>仿函数写法非常灵活，可以作为参数进行传递。</li></ul><h3 id="4-2-谓词"><a href="#4-2-谓词" class="headerlink" title="4.2  谓词"></a>4.2  谓词</h3><h4 id="4-2-1-谓词概念"><a href="#4-2-1-谓词概念" class="headerlink" title="4.2.1 谓词概念"></a>4.2.1 谓词概念</h4><p><strong>概念：</strong></p><p>&#x3D;&#x3D;<strong>谓词（Predicate）通常是指一种能够返回布尔值的可调用对象，例如函数、函数指针、函数对象（仿函数）等</strong>&#x3D;&#x3D;</p><ul><li>&#x3D;&#x3D;返回bool类型的仿函数&#x3D;&#x3D;称为<strong>谓词</strong></li><li>如果operator()&#x3D;&#x3D;接受一个参数，那么叫做一元谓词&#x3D;&#x3D;</li><li>如果operator()&#x3D;&#x3D;接受两个参数，那么叫做二元谓词&#x3D;&#x3D;</li></ul> <img src="/xu-runbo/post/c6b8c88d/image-20231121204652564.png" class="" title="image-20231121204652564"> 让写==函数名==，或者==匿名函数对象==也就是谓词！<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">rule</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a == <span class="number">5</span>;</span><br><span class="line">&#125;<span class="comment">//函数充当谓词</span></span><br><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">compre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a==<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//仿函数充当谓词</span></span><br><span class="line"><span class="comment">//仿函数不是函数而是一个类</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-一元谓词"><a href="#4-2-2-一元谓词" class="headerlink" title="4.2.2 一元谓词"></a>4.2.2 一元谓词</h4><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//仿函数，返回值为bool类型，就是谓词！</span></span><br><span class="line"><span class="comment">//一元谓词</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Big</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintV</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compare</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line"><span class="comment">//大于五的数字</span></span><br><span class="line"><span class="comment">//sort(v.begin(), v.end(),compare);</span></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it=<span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(),<span class="built_in">Big</span>());</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = it; i &lt; v.<span class="built_in">end</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：参数只有一个的谓词，称为一元谓词</p><h4 id="find-if"><a href="#find-if" class="headerlink" title="find_if()"></a>find_if()</h4><p>在容器中查找满足特定条件的元素。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> InputIt, <span class="keyword">class</span> UnaryPredicate &gt;</span></span><br><span class="line"><span class="function">InputIt <span class="title">find_if</span><span class="params">( InputIt first, InputIt last, UnaryPredicate p )</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li><code>first</code>和<code>last</code>是表示要搜索的范围的迭代器。<code>first</code>指向要搜索的范围的第一个元素，<code>last</code>指向要搜索的范围之后的位置。</li><li><code>p</code>是一个一元谓词（unary predicate），它是一个可调用&#x3D;&#x3D;对象&#x3D;&#x3D;，用于指定要查找的条件。</li></ol><blockquote><p><code>find_if()</code>函数会在指定范围内查找第一个满足条件<code>p</code>的元素</p><p>并返回&#x3D;&#x3D;指向该元素的迭代器&#x3D;&#x3D;。如果没有找到满足条件的元素，则返回<code>last</code>。</p></blockquote><p>sort</p><img src="/xu-runbo/post/c6b8c88d/image-20231121111138799.png" class="" title="image-20231121111138799"> </blockquote><h4 id="4-2-3-二元谓词"><a href="#4-2-3-二元谓词" class="headerlink" title="4.2.3 二元谓词"></a>4.2.3 二元谓词</h4><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Func</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">jiang</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"><span class="comment">//sort(v.begin(), v.end(), jiang);</span></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">Func</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：参数只有两个的谓词，称为二元谓词</p><p>&#x3D;&#x3D;可以传入<strong>谓词函数名</strong>或者创建一个<strong>匿名函数对象</strong>&#x3D;&#x3D;</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">XXX</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XXX</span><span class="params">(元数)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">asdasdasd</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">谓词函数名</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">XXX</span><span class="params">(元数)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sdad </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-内建函数对象"><a href="#4-3-内建函数对象" class="headerlink" title="4.3 内建函数对象&lt;functional&gt;"></a>4.3 内建函数对象&lt;functional&gt;</h3><h4 id="4-3-1-内建函数对象意义"><a href="#4-3-1-内建函数对象意义" class="headerlink" title="4.3.1 内建函数对象意义"></a>4.3.1 内建函数对象意义</h4><p><strong>概念：</strong></p><ul><li>STL内建了一些函数对象</li></ul><p>C++的内建函数对象是指一些在标准库中预定义的函数对象，它们可以直接在代码中使用，无需额外定义。</p><p>通过使用内建函数对象，可以避免手动编写一些重复的代码，同时也可以利用标准库中已经优化过的函数对象，提高程序的性能。</p><p><strong>分类:</strong></p><ul><li><p><strong>算术</strong>仿函数</p><blockquote><p>加减乘除的运算</p></blockquote></li><li><p><strong>关系</strong>仿函数</p><blockquote><p>比较，相等，大于小于。。。</p></blockquote></li><li><p><strong>逻辑</strong>仿函数</p><blockquote><p>与或非</p></blockquote></li></ul><p><strong>用法：</strong></p><ul><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用内建函数对象，需要引入头文件 <code>#include&lt;functional&gt;</code></li></ul><h4 id="4-3-2-算术仿函数"><a href="#4-3-2-算术仿函数" class="headerlink" title="4.3.2 算术仿函数"></a>4.3.2 算术仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现四则运算</li><li>其中negate是一元运算，其他都是二元运算</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; T plus&lt;T&gt;</code>                &#x2F;&#x2F;加法仿函数</li><li><code>template&lt;class T&gt; T minus&lt;T&gt;</code>              &#x2F;&#x2F;减法仿函数</li><li><code>template&lt;class T&gt; T multiplies&lt;T&gt;</code>    &#x2F;&#x2F;乘法仿函数</li><li><code>template&lt;class T&gt; T divides&lt;T&gt;</code>         &#x2F;&#x2F;除法仿函数</li><li><code>template&lt;class T&gt; T modulus&lt;T&gt;</code>         &#x2F;&#x2F;取模仿函数</li><li><code>template&lt;class T&gt; T negate&lt;T&gt;</code>           &#x2F;&#x2F;取反仿函数</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testjia</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">plus&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">cout &lt;&lt; <span class="built_in">a</span>(<span class="number">10</span>, <span class="number">30</span>)&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testqufan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">negate&lt;<span class="type">int</span>&gt; b;</span><br><span class="line">cout &lt;&lt; <span class="built_in">b</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testjian</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">minus&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">cout &lt;&lt; <span class="built_in">c</span>(<span class="number">30</span>, <span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testcheng</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">multiplies&lt;<span class="type">int</span>&gt; d;</span><br><span class="line">cout &lt;&lt; <span class="built_in">d</span>(<span class="number">90</span>, <span class="number">80</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testchu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">divides&lt;<span class="type">int</span>&gt; e;</span><br><span class="line">cout &lt;&lt; <span class="built_in">e</span>(<span class="number">5</span>, <span class="number">3</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testquyu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">modulus&lt;<span class="type">int</span>&gt; f;</span><br><span class="line">cout &lt;&lt; <span class="built_in">f</span>(<span class="number">30</span>, <span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">testjia</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--=---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">testqufan</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--=---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">testjian</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--=---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">testcheng</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--=---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">testchu</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--=---------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">testquyu</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：使用内建函数对象时，需要引入头文件 <code>#include &lt;functional&gt;</code></p><h4 id="4-3-3-关系仿函数-sort"><a href="#4-3-3-关系仿函数-sort" class="headerlink" title="4.3.3 关系仿函数_____sort"></a>4.3.3 关系仿函数_____<a href="#sort">sort</a></h4><p><strong>功能描述：</strong></p><ul><li>实现关系对比</li></ul><p><strong>仿函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt;</code>                    &#x2F;&#x2F;等于</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt;</code>            &#x2F;&#x2F;不等于</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code>                      &#x2F;&#x2F;大于</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code>          &#x2F;&#x2F;大于等于</li><li><code>template&lt;class T&gt; bool less&lt;T&gt;</code>                           &#x2F;&#x2F;小于</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code>               &#x2F;&#x2F;小于等于</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Compare</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">sheng</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">Compare</span>());</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;===================&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), sheng);</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">less</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;===================&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：关系仿函数中最常用的就是greater&lt;&gt;大于</p><blockquote><p><code>sort(v.begin(), v.end(), less&lt;int&gt;());</code></p><p><code>sort(v.begin(), v.end(), greater&lt;int&gt;());</code></p></blockquote><h4 id="4-3-4-逻辑仿函数"><a href="#4-3-4-逻辑仿函数" class="headerlink" title="4.3.4 逻辑仿函数"></a>4.3.4 逻辑仿函数</h4><p><strong>功能描述：</strong></p><ul><li>实现逻辑运算</li></ul><p><strong>函数原型：</strong></p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code>              &#x2F;&#x2F;逻辑与</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code>                &#x2F;&#x2F;逻辑或</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code>              &#x2F;&#x2F;逻辑非</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;<span class="type">bool</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">bool</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">bool</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">bool</span>&gt; v1;</span><br><span class="line">v1.<span class="built_in">resize</span>(v.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">transform</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), v1.<span class="built_in">begin</span>(), <span class="built_in">logical_not</span>&lt;<span class="type">bool</span>&gt;());</span><br><span class="line"><span class="comment">//标准算法里的，</span></span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"><span class="built_in">Print</span>(v1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：逻辑仿函数实际应用较少，了解即可</p><blockquote><p>transform搬运算法</p><p>搬运之前，空容器是要有足够的空间的！</p><p>而且要指定放置位置的v1.begin()。</p></blockquote><h2 id="5-STL-常用算法"><a href="#5-STL-常用算法" class="headerlink" title="5 STL- 常用算法&lt;algorithm&gt; &lt;numeric&gt;"></a>5 STL- 常用算法&lt;algorithm&gt; &lt;numeric&gt;</h2><p><strong>概述</strong>:</p><ul><li><p>算法主要是由头文件<code>&lt;algorithm&gt;</code> &#96;&#96; <numeric>&#96;组成。</p></li><li><p><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较、 交换、查找、遍历操作、复制、修改等等</p></li><li><p><code>&lt;numeric&gt;</code>体积很小，只包括几个在序列上面进行简单数学运算的模板函数</p></li><li><p><code>&lt;functional&gt;</code>定义了一些模板类,用以声明函数对象。</p></li></ul><h3 id="5-1-常用遍历算法"><a href="#5-1-常用遍历算法" class="headerlink" title="5.1 常用遍历算法"></a>5.1 常用遍历算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的遍历算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>for_each</code>     &#x2F;&#x2F;遍历容器</li><li><code>transform</code>   &#x2F;&#x2F;搬运容器到另一个容器中</li></ul><h4 id="5-1-1-for-each"><a href="#5-1-1-for-each" class="headerlink" title="5.1.1 for_each"></a>5.1.1 for_each</h4><p><strong>功能描述：</strong></p><ul><li>实现遍历容器</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>for_each(iterator beg, iterator end, _func);  </code></p><p>&#x2F;&#x2F; 遍历算法 遍历容器元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _func &#x3D;&#x3D;<strong>函数或者函数对象</strong>&#x3D;&#x3D;<code>指定你的遍历方式！</code></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(类型 a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">bool</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot;=&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">bool</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">true</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), Print);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>for_each在实际开发中是最常用遍历算法，需要熟练掌握</p><h4 id="5-1-2-transform"><a href="#5-1-2-transform" class="headerlink" title="5.1.2 transform"></a>5.1.2 transform</h4><p><strong>功能描述：</strong></p><ul><li>&#x3D;&#x3D;<strong>搬运</strong>&#x3D;&#x3D;容器到另一个容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></li></ul><p>&#x2F;&#x2F;beg1 <strong>源容器</strong>开始迭代器</p><p>&#x2F;&#x2F;end1 源容器结束迭代器</p><p>&#x2F;&#x2F;beg2 &#x3D;&#x3D;目标容器&#x3D;&#x3D;开始迭代器vnew.begin();</p><p>&#x2F;&#x2F;_func &#x3D;&#x3D;函数或者函数对象&#x3D;&#x3D;</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ts</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nv;</span><br><span class="line"></span><br><span class="line">nv.<span class="built_in">resize</span>(v.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">transform</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), nv.<span class="built_in">begin</span>(), <span class="built_in">ts</span>());</span><br><span class="line"></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), Print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">for_each(nv.<span class="built_in">begin</span>(), nv.<span class="built_in">end</span>(), Print);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong> 搬运的&#x3D;&#x3D;<strong>目标容器必须要提前开辟空间，否则无法正常搬运</strong>&#x3D;&#x3D;</p><h3 id="5-2-常用查找算法"><a href="#5-2-常用查找算法" class="headerlink" title="5.2 常用查找算法"></a>5.2 常用查找算法</h3><p>学习目标：</p><ul><li>掌握常用的查找算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>find</code>                     &#x2F;&#x2F;查找元素</li><li><code>find_if</code>               &#x2F;&#x2F;按条件查找元素</li><li><code>adjacent_find</code>    &#x2F;&#x2F;查找相邻重复元素</li><li><code>binary_search</code>    &#x2F;&#x2F;二分查找法</li><li><code>count</code>                   &#x2F;&#x2F;统计元素个数</li><li><code>count_if</code>             &#x2F;&#x2F;按条件统计元素个数</li></ul><h4 id="5-2-1-find"><a href="#5-2-1-find" class="headerlink" title="5.2.1 find"></a>5.2.1 find</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end()</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find(iterator beg, iterator end, value);  </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 查找的元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找容器中是否有 5 这个元素</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="built_in">end</span>()) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到:&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重载==</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Person&amp; p) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name == p.m_Name &amp;&amp; <span class="keyword">this</span>-&gt;m_Age == p.m_Age) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_Name;</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;Person&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数据</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;ccc&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;ddd&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">v.<span class="built_in">push_back</span>(p4);</span><br><span class="line"></span><br><span class="line">vector&lt;Person&gt;::iterator it = <span class="built_in">find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), p2);</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="built_in">end</span>()) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结： 利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p><h4 id="5-2-2-find-if"><a href="#5-2-2-find-if" class="headerlink" title="5.2.2 find_if"></a>5.2.2 find_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件查找元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>find_if(iterator beg, iterator end, _Pred);  </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _Pred 函数或者谓词（返回bool类型的仿函数）</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//内置数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GreaterFive</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val &gt; <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">GreaterFive</span>());</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="built_in">end</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到大于5的数字:&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_Name;</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Greater20</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Person &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p.m_Age &gt; <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;Person&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数据</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;aaa&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;bbb&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;ccc&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;ddd&quot;</span>, <span class="number">40</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">v.<span class="built_in">push_back</span>(p4);</span><br><span class="line"></span><br><span class="line">vector&lt;Person&gt;::iterator it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">Greater20</span>());</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没有找到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到姓名:&quot;</span> &lt;&lt; it-&gt;m_Name &lt;&lt; <span class="string">&quot; 年龄: &quot;</span> &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：find_if按条件查找使查找更加灵活，提供的仿函数可以改变不同的策略</p><h4 id="5-2-3-adjacent-find"><a href="#5-2-3-adjacent-find" class="headerlink" title="5.2.3 adjacent_find"></a>5.2.3 adjacent_find</h4><p><strong>功能描述：</strong></p><ul><li>查找相邻重复元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>adjacent_find(iterator beg, iterator end);  </code></p><p>&#x2F;&#x2F; 查找相邻重复元素,返回相邻元素的第一个位置的迭代器</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找相邻重复元素</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">adjacent_find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="built_in">end</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找不到!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到相邻重复元素为:&quot;</span> &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：面试题中如果出现查找相邻重复元素，记得用STL中的adjacent_find算法</p><h4 id="5-2-4-binary-search-要求先排序"><a href="#5-2-4-binary-search-要求先排序" class="headerlink" title="&#x3D;&#x3D;5.2.4 binary_search(要求先排序)&#x3D;&#x3D;"></a>&#x3D;&#x3D;5.2.4 binary_search(要求先排序)&#x3D;&#x3D;</h4><p><strong>功能描述：</strong></p><ul><li>查找指定元素是否存在</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>bool binary_search(iterator beg, iterator end, value);  </code></p><p>&#x2F;&#x2F; 查找指定的元素，&#x3D;&#x3D;查到 返回true  否则false&#x3D;&#x3D;</p><p>&#x2F;&#x2F; 注意: 在&#x3D;&#x3D;<strong>要先排好序且和sort成对使用</strong>&#x3D;&#x3D;</p><blockquote><p>如果用到函数对象或者仿函数</p><p>就都要用</p></blockquote><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 查找的元素</p></li></ul><blockquote><p><a href="#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">二分查找的原理</a></p><ol><li>先排序好的</li><li>然后要找的数比中间的数比较，排除一半，反复。。。直到找到</li></ol></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序前&quot;</span> &lt;&lt; endl;</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), Print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;排序后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), Print);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;二分查找的数字&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> key;</span><br><span class="line"><span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">binary_search</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), key,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;()))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到拉！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没找到！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;一一对应&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vv</span><span class="params">(v)</span></span>;</span><br><span class="line"><span class="built_in">sort</span>(vv.<span class="built_in">begin</span>(),vv.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">binary_search</span>(vv.<span class="built_in">begin</span>(), vv.<span class="built_in">end</span>(), key))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到拉！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;没找到！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;要用仿函数大家一起用，要不用都不用&quot;</span> &lt;&lt; <span class="string">&quot;二分查找默认是升序的&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>二分查找法查找效率很高，值得注意的是查找的容器中元素必须的有序序列</p><blockquote><p>&#x3D;&#x3D;升序排序对应一种二分::::::::降序排序对应一种二分&#x3D;&#x3D;</p><p>当使用 <code>sort</code> 函数进行排序时，如果你选择了自定义的比较函数（例如 <code>greater&lt;int&gt;()</code>），那么在后续使用需要有序序列的算法时，也需要使用相同的比较函数。</p><p>如果选择使用 <code>sort(v.begin(), v.end(), greater&lt;int&gt;())</code> 进行降序排序，那么在后续使用二分查找时，确实需要使用相同的比较函数，即 <code>binary_search(v.begin(), v.end(), key, greater&lt;int&gt;())</code>。</p><img src="/xu-runbo/post/c6b8c88d/image-20231121202111825.png" class="" title="image-20231121202111825">  <hr><p>如果不打算使用相同的比较函数，一种简单的解决方案是使用默认的升序排序，即 <code>sort(v.begin(), v.end())</code>。这样，在后续的二分查找等算法中，你就可以使用默认的比较函数而无需额外指定。</p></blockquote><h4 id="5-2-5-count"><a href="#5-2-5-count" class="headerlink" title="5.2.5 count"></a>5.2.5 count</h4><p><strong>功能描述：</strong></p><ul><li>统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count(iterator beg, iterator end, value);  </code></p><p>&#x2F;&#x2F; 统计元素出现次数</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 统计的元素</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//内置数据类型</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4的个数为： &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Person &amp; p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Age == p.m_Age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">string m_Name;</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;Person&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;刘备&quot;</span>, <span class="number">35</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;关羽&quot;</span>, <span class="number">35</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;张飞&quot;</span>, <span class="number">35</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;赵云&quot;</span>, <span class="number">30</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;曹操&quot;</span>, <span class="number">25</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">v.<span class="built_in">push_back</span>(p1);</span><br><span class="line">v.<span class="built_in">push_back</span>(p2);</span><br><span class="line">v.<span class="built_in">push_back</span>(p3);</span><br><span class="line">v.<span class="built_in">push_back</span>(p4);</span><br><span class="line">v.<span class="built_in">push_back</span>(p5);</span><br><span class="line">    </span><br><span class="line">    <span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;诸葛亮&quot;</span>,<span class="number">35</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), p);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong> 统计自定义数据类型时候，需要配合重载 <code>operator==</code></p><h4 id="5-2-6-count-if"><a href="#5-2-6-count-if" class="headerlink" title="5.2.6 count_if"></a>5.2.6 count_if</h4><p><strong>功能描述：</strong></p><ul><li>按条件统计元素个数</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>count_if(iterator beg, iterator end, _Pred);  </code></p><p>&#x2F;&#x2F; 按条件统计元素出现次数</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _Pred 谓词</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ts</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Find</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a == <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">FFind</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a == <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">9</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">7</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">8</span>);</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), Print);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">adjacent_find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;查找元素的个数&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;7的个数为&quot;</span> &lt;&lt; <span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">7</span>)&lt;&lt;endl;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;7的个数为&quot; &lt;&lt; count_if(v.begin(), v.end(), Find);</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;7的个数为&quot;</span> &lt;&lt; <span class="built_in">count_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">Find</span>()) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;7的个数为&quot;</span> &lt;&lt; <span class="built_in">count_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), FFind);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>按值统计用count，按条件统计用count_if</p><h3 id="5-3-常用排序算法"><a href="#5-3-常用排序算法" class="headerlink" title="5.3 常用排序算法"></a>5.3 常用排序算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的排序算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>sort</code>             &#x2F;&#x2F;对容器内元素进行排序</li><li><code>random_shuffle</code>   &#x2F;&#x2F;洗牌   指定范围内的元素随机调整次序</li><li><code>merge </code>           &#x2F;&#x2F; 容器元素合并，并存储到另一容器中</li><li><code>reverse</code>       &#x2F;&#x2F; 反转指定范围的元素</li></ul><h4 id="5-3-1-sort"><a href="#5-3-1-sort" class="headerlink" title="5.3.1 sort"></a><a name="sort">5.3.1 sort</a></h4><p><strong>功能描述：</strong></p><ul><li>对容器内元素进行排序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>sort(iterator beg, iterator end, _Pred);  </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F;  beg    开始迭代器</p><p>&#x2F;&#x2F;  end    结束迭代器</p><p>&#x2F;&#x2F; _Pred  谓词</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">compare</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;<span class="comment">//等价于greater&lt;int&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort默认从小到大排序</span></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从大到小排序</span></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>sort属于开发中最常用的算法之一，需熟练掌握</p><h4 id="5-3-2-random-shuffle"><a href="#5-3-2-random-shuffle" class="headerlink" title="5.3.2 random_shuffle"></a>5.3.2 random_shuffle</h4><p><strong>功能描述：</strong></p><ul><li>洗牌   指定范围内的元素随机调整次序</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>random_shuffle(iterator beg, iterator end);  </code></p><p>&#x2F;&#x2F; 指定范围内的元素&#x3D;&#x3D;<strong>随机调整次序</strong>&#x3D;&#x3D;</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintV</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;为了使每一次洗牌都不一样&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(<span class="built_in">time</span>(<span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;洗牌！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">random_shuffle</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>random_shuffle洗牌算法比较实用，使用时记得加随机数种子</p><h4 id="5-3-3-merge-要求先排序"><a href="#5-3-3-merge-要求先排序" class="headerlink" title="&#x3D;&#x3D;5.3.3 merge(要求先排序)&#x3D;&#x3D;"></a>&#x3D;&#x3D;5.3.3 merge(要求先排序)&#x3D;&#x3D;</h4><p><strong>功能描述：</strong></p><ul><li>两个容器元素合并，并存储到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>&#x2F;&#x2F; 容器元素合并，并存储到另一容器中</p><p>&#x2F;&#x2F; 注意: 两个&#x3D;&#x3D;容器必须是<strong>有序的</strong>&#x3D;&#x3D;</p><p>&#x2F;&#x2F; beg1   容器1开始迭代器<br>&#x2F;&#x2F; end1   容器1结束迭代器<br>&#x2F;&#x2F; beg2   容器2开始迭代器<br>&#x2F;&#x2F; end2   容器2结束迭代器<br>&#x2F;&#x2F; dest    目标容器开始迭代器</p><blockquote><p>配对使用，binary_find一样</p><img src="/xu-runbo/post/c6b8c88d/image-20231121202144179.png" class="" title="image-20231121202144179"><img src="/xu-runbo/post/c6b8c88d/image-20231121202201509.png" class="" title="image-20231121202201509"> <hr><img src="/xu-runbo/post/c6b8c88d/image-20231121202223628.png" class="" title="image-20231121202223628"><img src="/xu-runbo/post/c6b8c88d/image-20231121202237278.png" class="" title="image-20231121202237278"></blockquote></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintV</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;为了使每一次洗牌都不一样&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(<span class="built_in">time</span>(<span class="number">0</span>)));</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v1</span><span class="params">(v)</span></span>;</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v洗牌！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">random_shuffle</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;都要先排好序!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line">v2.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>() + v.<span class="built_in">size</span>());</span><br><span class="line"><span class="built_in">merge</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>());</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;也类似binary_find一样，排序的时候用到了指定的仿函数或者函数对象那么就要用对应的重载版本的merge!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PrintV</span>(v2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>merge合并的两个容器必须的&#x3D;&#x3D;有序序列&#x3D;&#x3D;</p><h4 id="5-3-4-reverse"><a href="#5-3-4-reverse" class="headerlink" title="5.3.4 reverse"></a>5.3.4 reverse</h4><p><strong>功能描述：</strong></p><ul><li>将容器内元素进行反转</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>reverse(iterator beg, iterator end);  </code></p><p>&#x2F;&#x2F; 反转指定范围的元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><blockquote><p>可以逆转局部或者全部!</p></blockquote></li></ul><img src="/xu-runbo/post/c6b8c88d/image-20231121202658658.png" class="" title="image-20231121202658658"> <p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintV</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;将大局逆转吧！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">reverse</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">reverse</span>(v.<span class="built_in">begin</span>()+<span class="number">1</span>, v.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>reverse反转区间内元素，面试题可能涉及到</p><p>》》》》</p><blockquote><p>挑战自己？</p><p>手写一个这样的逆置算法？汗流浃背了吧hh</p><hr><hr></blockquote><h3 id="5-4-常用拷贝和替换算法"><a href="#5-4-常用拷贝和替换算法" class="headerlink" title="5.4 常用拷贝和替换算法"></a>5.4 常用拷贝和替换算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的拷贝和替换算法</li></ul><p><strong>算法简介：</strong></p><ul><li><code>copy</code>                      &#x2F;&#x2F; 容器内指定范围的元素拷贝到另一容器中</li><li><code>replace</code>                &#x2F;&#x2F; 将容器内指定范围的旧元素修改为新元素</li><li><code>replace_if </code>          &#x2F;&#x2F; 容器内指定范围满足条件的元素替换为新元素</li><li><code>swap</code>                     &#x2F;&#x2F; 互换两个容器的元素</li></ul><h4 id="5-4-1-copy"><a href="#5-4-1-copy" class="headerlink" title="5.4.1 copy"></a>5.4.1 copy</h4><p><strong>功能描述：</strong></p><ul><li>容器内指定范围的元素拷贝到另一容器中</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>copy(iterator beg, iterator end, iterator dest);  </code></p><p>&#x2F;&#x2F; 按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>&#x2F;&#x2F; beg  开始迭代器</p><p>&#x2F;&#x2F; end  结束迭代器</p><p>&#x2F;&#x2F; dest 目标起始迭代器</p></li></ul><blockquote><img src="/xu-runbo/post/c6b8c88d/image-20231121203401706.png" class="" title="image-20231121203401706"> <p>可以拷贝指定区间或者全部</p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintV</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nv;</span><br><span class="line">nv.<span class="built_in">resize</span>(v.<span class="built_in">size</span>());</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝一下！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">copy</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), nv.<span class="built_in">begin</span>());</span><br><span class="line"><span class="comment">//copy(v.begin()+1, v.end()-1, nv.begin());</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line"><span class="built_in">PrintV</span>(nv);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>利用copy算法在拷贝时，&#x3D;&#x3D;目标容器记得提前开辟空间&#x3D;&#x3D;</p><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">a...................</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b;</span><br><span class="line">a.<span class="built_in">resize</span>(a.<span class="built_in">size</span>());</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>要提前开辟好空间</strong>&#x3D;&#x3D;</p></blockquote><h4 id="5-4-2-replace"><a href="#5-4-2-replace" class="headerlink" title="5.4.2 replace"></a>5.4.2 replace</h4><p><strong>功能描述：</strong></p><ul><li>将容器内指定范围的旧元素修改为新元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace(iterator beg, iterator end, oldvalue, newvalue);  </code></p><p>&#x2F;&#x2F; 将区间内旧元素 替换成 新元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x3D;&#x3D;指定区间&#x3D;&#x3D;</p><p>&#x3D;&#x3D;替换规则&#x3D;&#x3D;</p><p>&#x2F;&#x2F; oldvalue 旧元素</p><p>&#x2F;&#x2F; newvalue 新元素</p></li></ul><blockquote><img src="/xu-runbo/post/c6b8c88d/image-20231121203946301.png" class="" title="image-20231121203946301"> </blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintV</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nv</span><span class="params">(<span class="number">10</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="built_in">PrintV</span>(nv);</span><br><span class="line"><span class="built_in">replace</span>(nv.<span class="built_in">begin</span>()+<span class="number">1</span>, nv.<span class="built_in">end</span>()<span class="number">-1</span>, <span class="number">5</span>,<span class="number">55</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintV</span>(nv);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>replace会替换区间内满足条件的元素</p><h4 id="5-4-3-replace-if"><a href="#5-4-3-replace-if" class="headerlink" title="5.4.3 replace_if"></a>5.4.3 replace_if</h4><p><strong>功能描述:</strong>  </p><ul><li>将区间内满足条件的元素，替换成指定元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>replace_if(iterator beg, iterator end, _pred, newvalue);  </code></p><p>&#x2F;&#x2F; 按条件替换元素，满足条件的替换成指定元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; _pred&#x3D;&#x3D;谓词或者仿函数！)&#x3D;&#x3D;</p><p>&#x2F;&#x2F; newvalue 替换的新元素</p></li></ul><blockquote><img src="/xu-runbo/post/c6b8c88d/image-20231121204336430.png" class="" title="image-20231121204336430"></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myPrint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReplaceGreater30</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> val &gt;= <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;替换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">myPrint</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将容器中大于等于的30 替换成 3000</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;替换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">replace_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">ReplaceGreater30</span>(), <span class="number">3000</span>);</span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">myPrint</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>replace_if按条件查找，可以利用仿函数灵活筛选满足的条件</p><h4 id="5-4-4-swap"><a href="#5-4-4-swap" class="headerlink" title="5.4.4 swap"></a>5.4.4 swap</h4><p><strong>功能描述：</strong></p><ul><li>互换两个容器的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>swap(container c1, container c2);  </code></p><p>&#x2F;&#x2F; 互换两个容器的元素</p><p>&#x2F;&#x2F; c1容器1</p><p>&#x2F;&#x2F; c2容器2</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintV</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">rule</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a == <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">10</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">30</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">50</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">20</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">40</span>);</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">nv</span><span class="params">(<span class="number">10</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="built_in">PrintV</span>(nv);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换之后&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">swap</span>(v, nv);</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line"><span class="built_in">PrintV</span>(nv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>swap交换容器时，注意交换的容器要同种类型</p><h3 id="5-5-常用算术生成算法"><a href="#5-5-常用算术生成算法" class="headerlink" title="5.5 常用算术生成算法&lt;numeric&gt;"></a>5.5 常用算术生成算法&lt;numeric&gt;</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的算术生成算法</li></ul><p><strong>注意：</strong></p><ul><li>算术生成算法属于小型算法，使用时包含的头文件为 <code>#include &lt;numeric&gt;</code></li></ul><p><strong>算法简介：</strong></p><ul><li><p><code>accumulate</code>      &#x2F;&#x2F; 计算容器元素累计总和</p></li><li><p><code>fill</code>                 &#x2F;&#x2F; 向容器中添加元素</p></li></ul><h4 id="5-5-1-accumulate-累计"><a href="#5-5-1-accumulate-累计" class="headerlink" title="5.5.1 accumulate(累计)"></a>5.5.1 accumulate(累计)</h4><p><strong>功能描述：</strong></p><ul><li>计算区间内 容器元素累计总和</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>accumulate(iterator beg, iterator end, value);  </code></p><p>&#x2F;&#x2F; 计算容器元素累计总和</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 起始值</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintV</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">rule</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a == <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;算数和！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//指定sum的初始值！返回算数和后的sum</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">accumulate</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">0</span>) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>accumulate使用时头文件注意是 numeric，这个算法很实用</p><h4 id="5-5-2-fill"><a href="#5-5-2-fill" class="headerlink" title="5.5.2 fill"></a>5.5.2 fill</h4><p><strong>功能描述：</strong></p><ul><li>向容器中填充指定的元素</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>fill(iterator beg, iterator end, value);  </code></p><p>&#x2F;&#x2F; 向容器中填充元素</p><p>&#x2F;&#x2F; beg 开始迭代器</p><p>&#x2F;&#x2F; end 结束迭代器</p><p>&#x2F;&#x2F; value 填充的值</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintV</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">rule</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a == <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">fill</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">11</span>);</span><br><span class="line"><span class="built_in">PrintV</span>(v);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>利用fill可以将容器区间内元素填充为 指定的值</p><h3 id="5-6-常用集合算法"><a href="#5-6-常用集合算法" class="headerlink" title="5.6 常用集合算法"></a>5.6 常用集合算法</h3><p><strong>学习目标：</strong></p><ul><li>掌握常用的集合算法</li></ul><img src="/xu-runbo/post/c6b8c88d/image-20231121210757908.png" class="" title="image-20231121210757908"> <p><strong>算法简介：</strong></p><ul><li><code>set_intersection</code>          &#x2F;&#x2F; 求两个容器的交集</li><li>​                     &#x2F;&#x2F; 求两个容器的并集</li><li><code>set_difference </code>              &#x2F;&#x2F; 求两个容器的差集</li></ul><blockquote><p><code>std::set_intersection</code> 和 <code>std::set_difference</code> 和<code>set_union</code>  这类算法并不要求输入序列必须是有序的，它们只要求输入序列是有序的范围（即是由迭代器指定的范围）。这就意味着，可以在无序序列上使用这些算法。</p><hr><p>但要注意，如果你的序列是无序的，这些算法的行为可能会变得更加随机，并且结果可能不如在有序序列上的行为那样可预测。</p><p>虽然可以在无序序列上使用 </p><p>但最好的实践是在有序序列上使用，以确保算法的性能和可靠性。</p></blockquote><h4 id="5-6-1-set-intersection-交集"><a href="#5-6-1-set-intersection-交集" class="headerlink" title="5.6.1 set_intersection(交集)"></a>5.6.1 set_intersection(交集)</h4><p><strong>功能描述：</strong></p><ul><li>求两个容器的交集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>&#x2F;&#x2F; 求两个集合的交集</p><p>&#x2F;&#x2F; <strong>注意:两个集合必须是有序序列</strong></p><p>&#x2F;&#x2F; beg1 容器1开始迭代器<br>&#x2F;&#x2F; end1 容器1结束迭代器<br>&#x2F;&#x2F; beg2 容器2开始迭代器<br>&#x2F;&#x2F; end2 容器2结束迭代器<br>&#x2F;&#x2F; dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myPrint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">v2.<span class="built_in">push_back</span>(i+<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vTarget;</span><br><span class="line"><span class="comment">//取两个里面较小的值给目标容器开辟空间</span></span><br><span class="line">vTarget.<span class="built_in">resize</span>(<span class="built_in">min</span>(v1.<span class="built_in">size</span>(), v2.<span class="built_in">size</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回目标容器的最后一个元素的迭代器地址</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator itEnd = </span><br><span class="line">        <span class="built_in">set_intersection</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">for_each(vTarget.<span class="built_in">begin</span>(), itEnd, <span class="built_in">myPrint</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong> </p><ul><li>求交集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器中取小值</strong></li><li>set_intersection返回值既是交集中最后一个元素的位置</li></ul><h4 id="5-6-2-set-union-并集"><a href="#5-6-2-set-union-并集" class="headerlink" title="5.6.2 set_union(并集)"></a>5.6.2 set_union(并集)</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的并集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>&#x2F;&#x2F; 求两个集合的并集</p><p>&#x2F;&#x2F; <strong>注意:两个集合必须是有序序列</strong></p><p>&#x2F;&#x2F; beg1 容器1开始迭代器<br>&#x2F;&#x2F; end1 容器1结束迭代器<br>&#x2F;&#x2F; beg2 容器2开始迭代器<br>&#x2F;&#x2F; end2 容器2结束迭代器<br>&#x2F;&#x2F; dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myPrint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">v2.<span class="built_in">push_back</span>(i+<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vTarget;</span><br><span class="line"><span class="comment">//取两个容器的和给目标容器开辟空间</span></span><br><span class="line">vTarget.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>() + v2.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回目标容器的最后一个元素的迭代器地址</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator itEnd = </span><br><span class="line">        <span class="built_in">set_union</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">for_each(vTarget.<span class="built_in">begin</span>(), itEnd, <span class="built_in">myPrint</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong> </p><ul><li>求并集的两个集合必须的有序序列</li><li>目标容器开辟空间需要<strong>两个容器相加</strong></li><li>set_union返回值既是并集中最后一个元素的位置</li></ul><h4 id="5-6-3-set-difference-差集"><a href="#5-6-3-set-difference-差集" class="headerlink" title="5.6.3  set_difference(差集)"></a>5.6.3  set_difference(差集)</h4><p><strong>功能描述：</strong></p><ul><li>求两个集合的差集</li></ul><p><strong>函数原型：</strong></p><ul><li><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);  </code></p><p>&#x2F;&#x2F; 求两个集合的差集</p><p>&#x2F;&#x2F; <strong>注意:两个集合必须是有序序列</strong></p><p>&#x2F;&#x2F; beg1 容器1开始迭代器<br>&#x2F;&#x2F; end1 容器1结束迭代器<br>&#x2F;&#x2F; beg2 容器2开始迭代器<br>&#x2F;&#x2F; end2 容器2结束迭代器<br>&#x2F;&#x2F; dest 目标容器开始迭代器</p></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myPrint</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v2;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br><span class="line">v2.<span class="built_in">push_back</span>(i+<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; vTarget;</span><br><span class="line"><span class="comment">//取两个里面较大的值给目标容器开辟空间</span></span><br><span class="line">vTarget.<span class="built_in">resize</span>( <span class="built_in">max</span>(v1.<span class="built_in">size</span>() , v2.<span class="built_in">size</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回目标容器的最后一个元素的迭代器地址</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1与v2的差集为： &quot;</span> &lt;&lt; endl;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator itEnd = </span><br><span class="line">        <span class="built_in">set_difference</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>());</span><br><span class="line">for_each(vTarget.<span class="built_in">begin</span>(), itEnd, <span class="built_in">myPrint</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v2与v1的差集为： &quot;</span> &lt;&lt; endl;</span><br><span class="line">itEnd = <span class="built_in">set_difference</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>());</span><br><span class="line">for_each(vTarget.<span class="built_in">begin</span>(), itEnd, <span class="built_in">myPrint</span>());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong> </p><ul><li>求差集的两个集合必须的有序序列</li><li>目标容器开辟空间需要从<strong>两个容器取较大值</strong></li><li>set_difference返回值既是差集中最后一个元素的位置</li></ul><h4 id="综合版本"><a href="#综合版本" class="headerlink" title="综合版本"></a>综合版本</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintV</span><span class="params">(vector&lt;<span class="type">int</span>&gt; v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : v)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">rule</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a == <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1 = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v2= &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="built_in">sort</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//v1-v2=1 2</span></span><br><span class="line"><span class="comment">//v2 -v1=6 ,7</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v3;</span><br><span class="line">v3.<span class="built_in">resize</span>(<span class="number">10</span>);</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v4</span><span class="params">(v3)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v5</span><span class="params">(v3)</span></span>;<span class="comment">//A-B</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v6</span><span class="params">(v3)</span></span>;<span class="comment">//B-A</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v3.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>() + v2.<span class="built_in">size</span>());</span><br><span class="line"><span class="built_in">set_union</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), v3.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">PrintV</span>(v1);</span><br><span class="line"><span class="built_in">PrintV</span>(v2);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1和v2的并集！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PrintV</span>(v3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set_intersection</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), v4.<span class="built_in">begin</span>());</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1和v2的交集！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PrintV</span>(v4);</span><br><span class="line"></span><br><span class="line"><span class="built_in">set_difference</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), v5.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">set_difference</span>( v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(),v6.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v1-v2！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PrintV</span>(v5);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;v2-v1！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">PrintV</span>(v6);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="数组作为函数参数传递的时候"><a href="#数组作为函数参数传递的时候" class="headerlink" title="数组作为函数参数传递的时候"></a>数组作为函数参数传递的时候</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">int</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> line = <span class="built_in">sizeof</span>(a) / <span class="built_in">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//得不到数组元素的个数！</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;line是多少呢？&quot;</span> &lt;&lt; line &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为&#x3D;&#x3D;在函数中，数组名会退化为指针，&#x3D;&#x3D;sizeof(a)实际上是指针的大小，而不是数组的大小。所以无法正确地计算数组的长度。如果想要在函数内部获取数组的长度，可以&#x3D;&#x3D;通过传递数组的长度作为函数参数来实现。&#x3D;&#x3D;</p></blockquote><h3 id="sizeof-str-sizeof-str-0-endl-10"><a href="#sizeof-str-sizeof-str-0-endl-10" class="headerlink" title="sizeof(str) / sizeof(str[0])  endl;//10"></a><code>sizeof(str) / sizeof(str[0])  endl;//10</code></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str[<span class="number">10</span>] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(str) / <span class="built_in">sizeof</span>(str[<span class="number">0</span>]) &lt;&lt; endl;<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择算法"><a href="#选择算法" class="headerlink" title="选择算法"></a>选择算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//void test(char str[])</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> array[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span> &#125;;</span><br><span class="line"><span class="type">int</span> line = <span class="built_in">sizeof</span>(array) / <span class="built_in">sizeof</span>(array[<span class="number">0</span>]);</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> minindex = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; line; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (array[j] &lt; array[minindex])</span><br><span class="line">&#123;</span><br><span class="line">minindex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">temp = array[minindex];</span><br><span class="line">array[minindex] = array[i];</span><br><span class="line">array[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//升序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; array[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><img src="/xu-runbo/post/c6b8c88d/image-20231108211031360.png" class="" title="image-20231108211031360"><blockquote><p>总结多使用引用，如果下面没有修改引用的数据的话最好再加上const</p><p>最后，当对象要作为参数的时候，就要注意形参的写法，要和拷贝构造函数保持一致！</p><p>少加一个&amp;就。。。</p></blockquote><h3 id="vector迭代器的失效"><a href="#vector迭代器的失效" class="headerlink" title="vector迭代器的失效"></a><a name="第vector迭代器的失效">vector迭代器的失效</a></h3><blockquote><p>迭代器失效是因为在插入元素后，容器内部的元素可能会被重新分配内存，导致原来的迭代器指向的位置不再有效。</p><p>在C++的标准库中，vector是一个动态数组，它的内部实现是通过动态分配内存来存储元素的。</p><p>当vector的容量不足以容纳新的元素时，它会重新分配一块更大的内存空间，并将原来的元素复制到新的内存空间中。</p><p>这个过程可能会导致原来的迭代器失效，&#x3D;&#x3D;<strong>因为迭代器指向的位置在内存重新分配后可能已经不再是有效的位置</strong>。&#x3D;&#x3D;</p><p>经典场景 </p><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;<span class="type">int</span>&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(T p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(vector&lt;T&gt; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator i = p.<span class="built_in">begin</span>(); i &lt; p.<span class="built_in">end</span>(); i++) &#123;</span><br><span class="line">cout &lt;&lt; *i &lt;&lt; <span class="string">&quot;=&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">                                                    <span class="comment">//删除容器中所有元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">v.<span class="built_in">pop_back</span>();</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator start = v.<span class="built_in">begin</span>();</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator end = v.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v.<span class="built_in">insert</span>(start, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器失效是因为在插入元素后，容器内部的元素可能会被重新分配内存，导致原来的迭代器指向的位置不再有效。</span></span><br><span class="line"><span class="comment">///////////////------------------------</span></span><br><span class="line">v.<span class="built_in">insert</span>(start, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">v.<span class="built_in">insert</span>(v.<span class="built_in">begin</span>(), <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">///////////////------------------------</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">Print</span>(v);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入后，还想用原来的迭代器进行插入，就会爆炸！</p></blockquote></blockquote><h3 id="vector的拷贝构造函数"><a href="#vector的拷贝构造函数" class="headerlink" title="vector的拷贝构造函数"></a>vector的拷贝构造函数</h3><img src="/xu-runbo/post/c6b8c88d/image-20231112140507379.png" class="" title="image-20231112140507379"> <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v1</span><span class="params">(v)</span></span>;</span><br><span class="line">是根据v的size来构造一个数据一样的;</span><br></pre></td></tr></table></figure><h3 id="const-迭代器"><a href="#const-迭代器" class="headerlink" title="const&amp;迭代器"></a>const&amp;迭代器</h3><img src="/xu-runbo/post/c6b8c88d/image-20231113202838393.png" class="" title="image-20231113202838393"> <p>想实现，不让修改我们的 内部数据</p><p>但是报错了</p><img src="/xu-runbo/post/c6b8c88d/image-20231113202932847.png" class="" title="image-20231113202932847"> <p>就好了！</p><h3 id="随机数的简单使用"><a href="#随机数的简单使用" class="headerlink" title="随机数的简单使用"></a>随机数的简单使用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">srand</span>(<span class="built_in">static_cast</span>&lt;<span class="type">unsigned</span> <span class="type">int</span>&gt;(<span class="built_in">time</span>(<span class="number">0</span>)));</span><br><span class="line"><span class="type">int</span> randscore = <span class="built_in">rand</span>() % <span class="number">41</span> + <span class="number">60</span>;<span class="comment">//60---100</span></span><br></pre></td></tr></table></figure><p>time(0)</p><p>当前系统时间的种子。</p><p>rand（）x得到[0,x-1]的随机数；</p><h3 id="extern关键字"><a href="#extern关键字" class="headerlink" title="extern关键字"></a>extern关键字</h3><blockquote><p>extern”关键字声明的变量是&#x3D;&#x3D;<strong>对其他文件中定义的全局变量的引用</strong>。&#x3D;&#x3D;</p><p>它只是一个声明，告诉编译器该变量在其他文件中已经定义，并且我们可以在当前文件中使用它。</p></blockquote><p>file1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a=10;</span><br></pre></td></tr></table></figure><p>file 2</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能在file2中使用a变量了&#x3D;&#x3D;，而且还是引用的形式传过来的，修改之后实体也被修改了&#x3D;&#x3D;</p><p>跨文件的全局变量使用应当谨慎。全局变量的修改可能会导致代码的可读性和维护性下降，因为很难追踪全局变量的使用和修改情况。在一般情况下，建议尽可能地避免使用全局变量，并使用其他适当的编程技术，如函数参数、类成员或局部变量来传递和存储数据。</p><h3 id="static-cast的使用"><a href="#static-cast的使用" class="headerlink" title="static_cast的使用"></a>static_cast的使用</h3><p>static_cast 是 C++ 中进行&#x3D;&#x3D;<strong>显式类型转换</strong>&#x3D;&#x3D;的一个重要操作符，经常用于以下场景：</p><ol><li>在&#x3D;&#x3D;不同数值类型之间进行转换&#x3D;&#x3D;，比如将整数转换为浮点数，或者将浮点数转换为整数。</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">42</span>;</span><br><span class="line"><span class="type">double</span> convertedNum = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(num);</span><br></pre></td></tr></table></figure><ol start="2"><li>在进行继承结构中，进行基类指针向派生类指针的转换。</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Base* basePtr = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">Derived* derivedPtr = <span class="built_in">static_cast</span>&lt;Derived*&gt;(basePtr);</span><br></pre></td></tr></table></figure><ol start="3"><li>将&#x3D;&#x3D;空指针转换为目标类型的指针&#x3D;&#x3D;。</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>* voidPtr = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="type">int</span>* intPtr = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>*&gt;(voidPtr);</span><br></pre></td></tr></table></figure><ol start="4"><li>将枚举类型转换为整数类型。</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum class</span> <span class="title class_">Color</span> &#123; RED, GREEN, BLUE &#125;;</span><br><span class="line"><span class="type">int</span> colorValue = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(Color::RED);</span><br></pre></td></tr></table></figure><blockquote><p>static_cast 在编译时进行类型检查，可以避免一些潜在的类型错误，并且提供了一种清晰明了的方式来进行类型转换。</p><p>但是在使用 static_cast 时，开发者需要保证转换是合理和安全的，因为&#x3D;&#x3D;<strong>static_cast 并不会执行运行时的边界检查</strong>&#x3D;&#x3D;</p></blockquote><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><p>&#x3D;&#x3D;<strong>将基类的成员函数声明为虚函数的主要原因是实现多态性（polymorphism）。</strong>&#x3D;&#x3D;通过将基类的函数声明为虚函数，可以在派生类中重写（override）这些函数，并且通过&#x3D;&#x3D;<strong>基类指针或引用</strong>&#x3D;&#x3D;调用这些函数时，&#x3D;&#x3D;可以根据实际对象的类型来决定调用哪个版本的函数。&#x3D;&#x3D;</p><p>下面是一些使用虚函数的好处：</p><ol><li><p>实现&#x3D;&#x3D;运行时多态性&#x3D;&#x3D;：当基类指针或引用指向派生类对象时，可以&#x3D;&#x3D;根据实际的对象类型来调用相应的函数。&#x3D;&#x3D;这使得程序能够更加灵活和动态，而不需要在编译时确定具体的函数调用。</p></li><li><p>便于统一处理不同派生类对象：如果基类的函数是虚函数，那么可以通过基类指针或引用来统一处理不同派生类对象，而不需要关心对象的具体类型。</p></li><li><p>支持动态绑定：使用虚函数可以实现动态绑定（dynamic binding），即在运行时确定调用的函数版本，而不是在编译时确定。这对于实现一些基于对象类型的特定行为非常有用。</p></li></ol><p>举例来说，假设有一个基类 Animal 和它的派生类 Dog 和 Cat，如果 Animal 类中的某个函数声明为虚函数（比如 speak()），那么在使用 Animal 类指针或引用调用 speak() 函数时，程序会根据实际指向的对象类型来确定调用 Dog::speak() 还是 Cat::speak()。</p><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>纯虚函数在C++中起着非常重要的作用，&#x3D;&#x3D;<strong>它是一种特殊的虚函数，没有具体的实现，只有函数声明</strong>。&#x3D;&#x3D;纯虚函数通过&#x3D;&#x3D;<strong>在基类中定义接口，要求派生类必须实现这些函数，从而达到强制派生类实现特定功能的目的。</strong>&#x3D;&#x3D;</p><p>纯虚函数通常用于以下情况：</p><ol><li>定义接口：当我们希望创建一个接口（即定义一组函数的抽象接口），但不希望在基类中提供这些函数的具体实现时，&#x3D;&#x3D;<strong>可以使用纯虚函数。这样的基类通常被称为抽象基类，因为它不能被实例化，只能作为接口被其他类继承。</strong>&#x3D;&#x3D;</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractShape</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">area</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;  <span class="comment">// 纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;    <span class="comment">// 纯虚函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>强制派生类实现特定行为：通过将函数声明为纯虚函数，基类要求&#x3D;&#x3D;<strong>任何派生类都必须提供对应的实现</strong>&#x3D;&#x3D;。这样可以确保派生类正确地实现了基类定义的接口。</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Interface</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>= <span class="number">0</span>;  <span class="comment">// 纯虚函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteClass</span> : <span class="keyword">public</span> Interface &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">doSomething</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现具体的功能</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>总之，纯虚函数提供了一种将接口与实现分离的方式，同时强制要求派生类提供特定行为的机制。通过使用纯虚函数，可以更好地实现抽象和多态，是面向对象设计中非常有用的特性。</p><h3 id="sort标准排序函数"><a href="#sort标准排序函数" class="headerlink" title="sort标准排序函数"></a>sort标准排序函数</h3><blockquote><p>&#x2F;&#x2F;不支持随机访问迭代器的不能用标准排序算法<br>&#x2F;&#x2F;会有对应的sort成员函数</p></blockquote><pre><code>//不支持随机访问迭代器的不能用标准排序算法//会有对应的sort成员函数</code></pre><p>list链表只有双向迭代器，无法用sort(l1.begin(),l1.end())</p><p>会报错！！！</p><p>用对用的sort成员函数，一个重载版本指定降序，默认是升序</p><h3 id="双向迭代器"><a href="#双向迭代器" class="headerlink" title="双向迭代器"></a>双向迭代器</h3><p>正向迭代器和反向迭代器都支持前进操作(<code>++</code>)，&#x3D;&#x3D;但不支持后退操作(<code>--</code>)。&#x3D;&#x3D;</p><p>–操作虽然不报错但是没有实际的用处！</p><p>此外，它们还支持解引用操作(<code>*</code>)，以获取迭代器当前指向的元素值。</p><p><a href="#%E5%8F%8C%E5%90%91%E8%BF%AD%E4%BB%A3%E5%99%A8">list</a></p><p>end()可以理解成尾后指针，方便记忆</p><blockquote><p>双向迭代器，它并不支持 <code>&lt;</code> 操作符进行比较</p></blockquote><h3 id="重载"><a href="#重载" class="headerlink" title="()重载"></a>()重载</h3><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载()"></a>4.5.6 函数调用运算符重载()</h4><ul><li>函数调用运算符 ()  也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><blockquote><h4 id="operator（）（）只能在类里面定义，报错说不允许他为全局函数。"><a href="#operator（）（）只能在类里面定义，报错说不允许他为全局函数。" class="headerlink" title="operator（）（）只能在类里面定义，报错说不允许他为全局函数。"></a>operator（）（）只能在类里面定义，报错说不允许他为全局函数。</h4></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string text)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myadd</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+<span class="number">1</span> + b+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//匿名对象调用  </span></span><br><span class="line"><span class="comment">//有参构造Person(10)单独写就是匿名对象  当前行结束之后，马上析构，直接构造析构然后立马销毁</span></span><br><span class="line"><span class="comment">//Person()单独写就是匿名对象  当前行结束之后，马上析构，直接构造析构然后立马销毁</span></span><br><span class="line">person p;</span><br><span class="line"><span class="built_in">p</span>(<span class="string">&quot;你好啊）OP&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----匿名函数----------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">person</span>()(<span class="string">&quot;你好啊匿名函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">Myadd add;</span><br><span class="line">cout&lt;&lt;<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">30</span>)&lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----匿名函数----------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Myadd</span>()(<span class="number">90</span>, <span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常函数"><a href="#常函数" class="headerlink" title="常函数"></a>常函数</h3><blockquote><p>常函数（const member function）是指在类的成员函数声明或定义中使用 const 关键字修饰的成员函数。</p><ol><li><p>常对象只能调用常函数。常对象是指被声明为 const 的对象<code>const Person p(&quot;牛马&quot;)</code></p></li><li><p>常函数内部不能修改对象的&#x3D;&#x3D;非静态成员变量&#x3D;&#x3D;。在常函数中，对于非静态成员变量的修改操作是不允许的，除非该成员变量被声明为<code> mutable。</code></p></li><li><p>&#x3D;&#x3D;常函数可以被同名的非常函数重载。&#x3D;&#x3D;如果一个类中同时存在常函数和非常函数，它们可以拥有相同的函数名，<strong>常对象调用只能调用常函数</strong>根据对象是否为常对象来决定调用哪个版本的函数。</p></li><li><p>常函数可以提高代码的可读性和安全性。通过将适当的成员函数声明为常函数，可以明确表明&#x3D;&#x3D;函数不会修改对象的状态&#x3D;&#x3D;，从而使代码更加清晰和可维护。</p></li><li><pre><code class="c++">class compare &#123;public:                bool operator()(int a, int b) const    &#123;        return a &gt; b;    &#125;&#125;;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### ==函数指针==</span><br><span class="line"></span><br><span class="line">定义: 函数指针是一个==指向函数的指针变量==。函数指针可以用来传递函数作为参数，也可以用来在程序运行时动态调用函数。</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line">// 声明一个函数指针类型</span><br><span class="line">typedef void (*funcptr)(int)</span><br><span class="line">//从此定义了一个funcptr类型，是指向（返回值为void，参数为int）函数的指针！也就是函数指针</span><br><span class="line">void myFunction(int x) &#123;</span><br><span class="line">   // 函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 声明一个函数指针变量并赋值</span><br><span class="line">FunctionPtr ptr = &amp;myFunction;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ol></blockquote><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><blockquote><p>&#x3D;&#x3D;函数可以作为参数&#x3D;&#x3D;传递给另一个函数，这通常用于回调函数的实现。</p><p>回调函数是一个作为参数传递给其他函数的函数</p><p>用于在特定事件发生时被调用。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//包含头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*funcptr)</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//从此定义了一个funcptr类型，是指向（返回值为void，参数为int）函数的指针！也就是函数指针</span></span><br><span class="line"><span class="comment">//定义一个函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt;t&lt;&lt;<span class="string">&quot;----&quot;</span> &lt;&lt; <span class="string">&quot;hhh我要作为函数参数传入函数并且调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试回调函数的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">(funcptr p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">p</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">newtest</span><span class="params">(<span class="type">void</span> (*ptr)(<span class="type">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">ptr</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ptr</span><span class="params">(<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;tttt&quot;</span> &lt;&lt; t &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">funcptr point = &amp;func;</span><br><span class="line"><span class="built_in">test</span>(point);</span><br><span class="line"><span class="built_in">newtest</span>(&amp;ptr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="Typedef"><a href="#Typedef" class="headerlink" title="&#x3D;&#x3D;Typedef&#x3D;&#x3D;"></a>&#x3D;&#x3D;Typedef&#x3D;&#x3D;</h4><p>作用</p><blockquote><p>给数据类型取别名的关键字。</p><p>将一个数据类型定义为一个新的类型名称，使得代码更加清晰易读</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*FunctionPtr)</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//声明了一个新的类型FunctionPtr，它是一个指向参数为int类型、返回类型为void的函数的指针类型。</span></span><br></pre></td></tr></table></figure></blockquote><hr><p>typedef的最详细最核心的用法和知识：</p><ol><li><strong>给类型起别名</strong></li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> type new_name;</span><br></pre></td></tr></table></figure><p>例如以后int可以用myint代替</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> my_int;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>定义类型</p><blockquote><p>1. </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span>* int_ptr;</span><br></pre></td></tr></table></figure><p>int_ptr就可以作为int*类型的别名来使用。</p><ol start="2"><li>&#x3D;&#x3D;<strong>函数指针</strong>&#x3D;&#x3D;</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*func_ptr)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>func_ptr就可以作为指向返回类型为int，参数类型为int和int的函数指针类型的别名来使用。</p><ol start="3"><li>typedef关键字还可以用来定义结构体类型的别名，例如：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125; Point;</span><br></pre></td></tr></table></figure><p>这样，Point就可以作为该结构体类型的别名来使用。</p></blockquote></li><li><p>嵌套使用</p></li></ol><p>typedef关键字还可以嵌套使用，例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span>* int_ptr;</span><br><span class="line"><span class="keyword">typedef</span> int_ptr* int_ptr_ptr;</span><br></pre></td></tr></table></figure><p>这样，int_ptr_ptr就可以作为int**类型的别名来使用。</p><ol start="6"><li>与模板一起使用</li></ol><p>typedef关键字还可以与模板一起使用，例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typedef</span> std::vector&lt;T&gt; Vector;</span><br></pre></td></tr></table></figure><p>这样，Vector就可以作为std::vector<T>类型的别名来使用。</p><p>typedef关键字可以用来定义类型别名，可以用来定义基本类型、指针类型、函数指针类型、结构体类型等等。在实际编程中，typedef关键字可以<strong>大大简化代码，提高代码的可读性和可维护性。</strong></p><h4 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">auo a=<span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="scanf-s"><a href="#scanf-s" class="headerlink" title="scanf_s()"></a>scanf_s()</h3><blockquote><p><code>scanf_s()</code> 是安全版本的输入函数，它可以防止缓冲区溢出等安全问题。该函数的使用方法与 <code>scanf()</code> 函数类似，但是需要指定缓冲区的大小。</p></blockquote><h3 id="冒泡排序和二分查找"><a href="#冒泡排序和二分查找" class="headerlink" title="冒泡排序和二分查找"></a><a name="二分查找">冒泡排序和二分查找</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span><span class="comment">//标准算法头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="type">int</span> line = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; line<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j&lt;line<span class="number">-1</span>-i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = a[j];</span><br><span class="line">a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> key;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i : a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入你要查找的数字&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">scanf_s</span>(<span class="string">&quot;%d&quot;</span>, &amp;key);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> start = <span class="number">0</span>, end = line - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (end &gt;= start)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (key &lt; a[middle])</span><br><span class="line">&#123;</span><br><span class="line">end = middle - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (key &gt; a[middle])</span><br><span class="line">&#123;</span><br><span class="line">start = middle + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到拉下标为&quot;</span> &lt;&lt; middle &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>升序排序对应一种二分</p><p>降序排序对应一种二分</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> c++提高 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建个人博客</title>
      <link href="/xu-runbo/post/64e2e0e2.html"/>
      <url>/xu-runbo/post/64e2e0e2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-入门并建立个人博客个人博客"><a href="#Hexo-入门并建立个人博客个人博客" class="headerlink" title="Hexo 入门并建立个人博客个人博客"></a>Hexo 入门并建立个人博客个人博客</h1><h3 id="步骤-1-安装-Node-js-和-Git"><a href="#步骤-1-安装-Node-js-和-Git" class="headerlink" title="步骤 1: 安装 Node.js 和 Git"></a>步骤 1: 安装 Node.js 和 Git</h3><p>Hexo 是基于 Node.js 的，因此首先需要安装 Node.js。此外，还需要安装 Git 作为版本控制工具。</p><ul><li><a href="https://nodejs.org/">Node.js</a></li><li><a href="https://git-scm.com/">Git </a></li></ul><p>安装完成后，通过以下命令验证它们是否成功安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/64e2e0e2/image-20231120201612567.png" class="" title="image-20231120201612567"> <h3 id="步骤-2-安装-Hexo"><a href="#步骤-2-安装-Hexo" class="headerlink" title="步骤 2: 安装 Hexo"></a>步骤 2: 安装 Hexo</h3><p>打开终端（命令行界面）并运行以下命令来安装 Hexo：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="步骤-3-创建-Hexo-项目"><a href="#步骤-3-创建-Hexo-项目" class="headerlink" title="步骤 3: 创建 Hexo 项目"></a>步骤 3: 创建 Hexo 项目</h3><p>选择一个文件夹作为你的博客目录，然后在终端中运行以下命令来初始化 Hexo 项目：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p><code>hexo init myblog</code></p><p>会从 Hexo 的模板库中克隆一个基本的博客结构到指定的目录（<code>myblog</code>）</p><p>。这个模板包含了一些默认的配置文件、示例文章以及其他必要的文件，提供了一个快速启动 Hexo 博客的起点。会创一个文件夹myblog里面有依赖项</p><blockquote><p><code>hexo init</code>这个命令是自动生成hexo目录时使用的命令，使用他有一个前提是&#x3D;&#x3D;必须是空文件夹&#x3D;&#x3D;</p></blockquote><p><code>npm install</code></p><p>会根据项目根目录下的 <code>package.json</code> 文件中列出的依赖信息，从 npm（Node.js 包管理器）中安装这些依赖项。这些依赖项包括 Hexo 本身以及其他一些插件和工具，它们是构建、生成和部署 Hexo 博客所必需的。</p></blockquote><p>这将在你选择的目录中创建一个 Hexo 项目，并安装所需的依赖项。</p><img src="/xu-runbo/post/64e2e0e2/image-20231120202559252.png" class="" title="image-20231120202559252"> <img src="/xu-runbo/post/64e2e0e2/image-20231120202009690.png" class="" title="image-20231120202009690"><blockquote><p>至此已经完成了很大一部分了</p></blockquote><h3 id="步骤-4-配置-Hexo"><a href="#步骤-4-配置-Hexo" class="headerlink" title="步骤 4: 配置 Hexo"></a>步骤 4: 配置 Hexo</h3><p>github创建一个仓库</p><img src="/xu-runbo/post/64e2e0e2/image-20231120203223928.png" class="" title="image-20231120203223928"> <p>打开 <code>_config.yml</code> 文件以配置 Hexo。需要配置 <code>url</code> 和 <code>deploy</code> 部分，以便在发布博客时正确设置链接。</p><img src="/xu-runbo/post/64e2e0e2/image-20231120205038448.png" class="" title="image-20231120205038448"> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://your-blog-url.com</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/yourusername/yourusername.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><strong><code>url: https://your-blog-url.com</code>：</strong><ul><li>这个是博客的基本网址，它用于生成你博客文章中的链接。在这里，<code>https://your-blog-url.com</code> 是一个占位符，你需要将它替换成你实际博客的域名或者自定义的网址。</li></ul></li><li><strong><code>deploy</code> 部分：</strong><ul><li>这个部分是用于配置 Hexo 如何部署生成的静态文件。在这个例子中，配置了使用 Git 进行部署。</li><li><strong><code>type: git</code>：</strong> 表示使用 Git 进行部署。</li><li><strong><code>repo: https://github.com/yourusername/yourusername.github.io.git</code>：</strong> 这是你的博客的 GitHub 仓库地址。一般来说，GitHub Pages 会将你的个人页面托管在 <code>https://yourusername.github.io</code>，所以仓库名要按照一定的规则来命名。具体规则是 <code>&lt;yourusername&gt;.github.io</code>，&#x3D;&#x3D;其中 <code>&lt;yourusername&gt;</code> 是你的 GitHub 用户名。这样的仓库名才能被 GitHub 自动识别为一个 GitHub Pages 仓库，从而用于托管你的博客。&#x3D;&#x3D;</li><li><strong><code>branch: master</code>：</strong> 这是你的 GitHub Pages 仓库的分支，一般是 <code>master</code> 分支。这表示 Hexo 会将生成的静态文件推送到这个分支上。</li></ul></li></ol><p>&#x3D;&#x3D;确保 <code>repo</code> 符合 GitHub Pages 的规范，即仓库名为 <code>&lt;yourusername&gt;.github.io</code>。&#x3D;&#x3D;</p></blockquote><h3 id="步骤-5-创建一篇新博文"><a href="#步骤-5-创建一篇新博文" class="headerlink" title="步骤 5: 创建一篇新博文"></a>步骤 5: 创建一篇新博文</h3><p>运行以下命令创建一篇新的博文：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My First Post&quot;</span></span><br></pre></td></tr></table></figure><p>这将在 <code>source/_posts</code> 目录中创建一个 Markdown 文件，其中包含你的新博文的初始内容。</p><h3 id="步骤-6-本地预览"><a href="#步骤-6-本地预览" class="headerlink" title="步骤 6: 本地预览"></a>步骤 6: 本地预览</h3><p>使用以下命令启动本地服务器并在浏览器中预览你的博客：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>然后在浏览器中访问 <code>http://localhost:4000</code>。</p><img src="/xu-runbo/post/64e2e0e2/image-20231120202902347.png" class="" title="image-20231120202902347"> <h3 id="步骤-7-发布到-GitHub-Pages"><a href="#步骤-7-发布到-GitHub-Pages" class="headerlink" title="步骤 7: 发布到 GitHub Pages"></a>步骤 7: 发布到 GitHub Pages</h3><p>安装hexo-deployer-git 自动部署发布工具</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="operator">-</span>deployer<span class="operator">-</span>git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/64e2e0e2/image-20231120204051983.png" class="" title="image-20231120204051983"> <p>如果你希望将你的博客部署到 GitHub Pages，运行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这将清理之前的部署并将新的博客版本发布到你在 <code>_config.yml</code> 中配置的 GitHub 仓库。</p><img src="/xu-runbo/post/64e2e0e2/image-20231120205130146.png" class="" title="image-20231120205130146"> <blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo c</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>三连！</p></blockquote><p><a href="https://666xrb.github.io/">666xrb.github.io)</a></p><h3 id="config-yml配置文件"><a href="#config-yml配置文件" class="headerlink" title="config.yml配置文件"></a>config.yml配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site #站点信息</span></span><br><span class="line"></span><br><span class="line">title:  <span class="comment">#标题</span></span><br><span class="line"></span><br><span class="line">subtitle:  <span class="comment">#副标题</span></span><br><span class="line"></span><br><span class="line">description:  <span class="comment">#站点描述，给搜索引擎看的</span></span><br><span class="line"></span><br><span class="line">author:  <span class="comment">#作者</span></span><br><span class="line"></span><br><span class="line">email:  <span class="comment">#电子邮箱</span></span><br><span class="line"></span><br><span class="line">language: zh-CN <span class="comment">#语言</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL #链接格式</span></span><br><span class="line"></span><br><span class="line">url:  <span class="comment">#网址</span></span><br><span class="line"></span><br><span class="line">root: / <span class="comment">#根目录</span></span><br><span class="line"></span><br><span class="line">permalink: :year/:month/:day/:title/ <span class="comment">#文章的链接格式</span></span><br><span class="line"></span><br><span class="line">tag_dir: tags <span class="comment">#标签目录</span></span><br><span class="line"></span><br><span class="line">archive_dir: archives <span class="comment">#存档目录</span></span><br><span class="line"></span><br><span class="line">category_dir: categories <span class="comment">#分类目录</span></span><br><span class="line"></span><br><span class="line">code_dir: downloads/code</span><br><span class="line"></span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory #目录</span></span><br><span class="line"></span><br><span class="line">source_dir: <span class="built_in">source</span> <span class="comment">#源文件目录</span></span><br><span class="line"></span><br><span class="line">public_dir: public <span class="comment">#生成的网页文件目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing #写作</span></span><br><span class="line"></span><br><span class="line">new_post_name: :title.md <span class="comment">#新文章标题</span></span><br><span class="line"></span><br><span class="line">default_layout: post <span class="comment">#默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）</span></span><br><span class="line"></span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment">#标题转换成大写</span></span><br><span class="line"></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment">#在新选项卡中打开连接</span></span><br><span class="line"></span><br><span class="line">filename_case: 0</span><br><span class="line"></span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">highlight: <span class="comment">#语法高亮</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment">#是否启用</span></span><br><span class="line"></span><br><span class="line">line_number: <span class="literal">true</span> <span class="comment">#显示行号</span></span><br><span class="line"></span><br><span class="line">tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag #分类和标签</span></span><br><span class="line"></span><br><span class="line">default_category: uncategorized <span class="comment">#默认分类</span></span><br><span class="line"></span><br><span class="line">category_map:</span><br><span class="line"></span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Archives</span></span><br><span class="line"></span><br><span class="line">2: 开启分页</span><br><span class="line"></span><br><span class="line">1: 禁用分页</span><br><span class="line"></span><br><span class="line">0: 全部禁用</span><br><span class="line"></span><br><span class="line">archive: 2</span><br><span class="line"></span><br><span class="line">category: 2</span><br><span class="line"></span><br><span class="line">tag: 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Server #本地服务器</span></span><br><span class="line"></span><br><span class="line">port: 4000 <span class="comment">#端口号</span></span><br><span class="line"></span><br><span class="line">server_ip: localhost <span class="comment">#IP 地址</span></span><br><span class="line"></span><br><span class="line">logger: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">logger_format: dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format #日期时间格式</span></span><br><span class="line"></span><br><span class="line">date_format: YYYY-MM-DD <span class="comment">#参考http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"></span><br><span class="line">time_format: H:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination #分页</span></span><br><span class="line"></span><br><span class="line">per_page: 10 <span class="comment">#每页文章数，设置成 0 禁用分页</span></span><br><span class="line"></span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus #Disqus评论，替换为多说</span></span><br><span class="line"></span><br><span class="line">disqus_shortname:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions #拓展插件</span></span><br><span class="line"></span><br><span class="line">theme: landscape-plus <span class="comment">#主题</span></span><br><span class="line"></span><br><span class="line">exclude_generator:</span><br><span class="line"></span><br><span class="line">plugins: <span class="comment">#插件，例如生成 RSS 和站点地图的</span></span><br><span class="line"></span><br><span class="line">- hexo-generator-feed</span><br><span class="line"></span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment #部署，将 lmintlcx 改成用户名</span></span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>: git</span><br><span class="line"></span><br><span class="line">repo: 创建仓库成功后的http地址</span><br><span class="line"></span><br><span class="line">branch: master</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="常见的问题"><a href="#常见的问题" class="headerlink" title="常见的问题"></a>常见的问题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo  d</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/64e2e0e2/image-20231120204239832.png" class="" title="image-20231120204239832"> <p>source的文章要用命令生成啊</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;sadsda&quot;</span></span><br></pre></td></tr></table></figure><h3 id="博客美化"><a href="#博客美化" class="headerlink" title="博客美化"></a>博客美化</h3><p><a href="https://blog.csdn.net/qq_38157825/article/details/112783083?ops_request_misc=%7B%22request_id%22:%22169548330616800186546490%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=169548330616800186546490&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-112783083-null-null.142%5Ev94%5Econtrol&utm_term=_config.butterfly.yml&spm=1018.2226.3001.4187">【精选】Butterfly主题安装文档(三)之主题配置2_butterfly activate_power_mode-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell脚本</title>
      <link href="/xu-runbo/post/563a1179.html"/>
      <url>/xu-runbo/post/563a1179.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="Linux是如何操作计算机的硬件？"><a href="#Linux是如何操作计算机的硬件？" class="headerlink" title="Linux是如何操作计算机的硬件？"></a>Linux是如何操作计算机的硬件？</h2><blockquote><p>用linux的内核操作</p></blockquote><hr><h2 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h2><p>是一个文本文件，可以编写shell命令，或者变成，形成一个可以重复执行的脚本文件</p><h2 id="shell介绍"><a href="#shell介绍" class="headerlink" title="shell介绍"></a>shell介绍</h2><blockquote><p>编写shell命令发送给linux内核取执行，操作的是计算机硬件，是&#x3D;&#x3D;<strong>用户和操作计算机硬件的桥梁</strong>&#x3D;&#x3D;</p></blockquote><blockquote><p>shell是命令，也是程序设计语言。</p><p>我们编写shell命令程序，shell</p><img src="/xu-runbo/post/563a1179/image-20231031165019467.png" class="" title="image-20231031165019467"></blockquote><h2 id="shell脚本作用"><a href="#shell脚本作用" class="headerlink" title="shell脚本作用"></a>shell脚本作用</h2><p>提高Linux系统的管理工作效率</p><h2 id="shell的运行过程"><a href="#shell的运行过程" class="headerlink" title="shell的运行过程"></a>shell的运行过程</h2><img src="/xu-runbo/post/563a1179/image-20231031165244269.png" class="" title="image-20231031165244269"><h2 id="shell解析器"><a href="#shell解析器" class="headerlink" title="shell解析器"></a>shell解析器</h2><img src="/xu-runbo/post/563a1179/image-20231031165426731.png" class="" title="image-20231031165426731"> <img src="/xu-runbo/post/563a1179/image-20231031165444434.png" class="" title="image-20231031165444434"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure><p>打印当前系统环境使用的shell解析器类型</p><img src="/xu-runbo/post/563a1179/image-20231031165556517.png" class="" title="image-20231031165556517"> <h2 id="Shell脚本的编写格式和执行方式"><a href="#Shell脚本的编写格式和执行方式" class="headerlink" title="Shell脚本的编写格式和执行方式"></a>Shell脚本的编写格式和执行方式</h2><blockquote><p>Shell脚本的编写规范</p><p>如何执行Shell脚本呢？</p></blockquote><h3 id="后缀-sh"><a href="#后缀-sh" class="headerlink" title="后缀:   .sh"></a>后缀:   .sh</h3><p>首航格式规范 : 需要指出Shell解析器的类型</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br></pre></td></tr></table></figure><blockquote><p>当前shell脚本文件采用bash解析器运行脚本代码</p></blockquote><h3 id="注释格式"><a href="#注释格式" class="headerlink" title="注释格式"></a>注释格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注释内容</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;!</span><br><span class="line">注释</span><br><span class="line">注释</span><br><span class="line">!</span><br></pre></td></tr></table></figure><h3 id="Shell-hello-world"><a href="#Shell-hello-world" class="headerlink" title="Shell hello world"></a>Shell hello world</h3><p>》》》</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch hello.sh</span><br><span class="line">vim hello.sh</span><br><span class="line">------------------</span><br><span class="line">vim hello.sh</span><br><span class="line">创建加编辑</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231031170815701.png" class="" title="image-20231031170815701"> <h3 id="如何执行呢？三种方式"><a href="#如何执行呢？三种方式" class="headerlink" title="如何执行呢？三种方式"></a>如何执行呢？三种方式</h3><ol><li><p>sh解析器执行方式</p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh 脚本文件</span><br></pre></td></tr></table></figure><p>本质：用<strong>shell解析器运行脚本文件</strong></p><img src="/xu-runbo/post/563a1179/image-20231031170935039.png" class="" title="image-20231031170935039"> </blockquote></li><li><p>bash解析器执行方式</p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash 脚本文件</span><br></pre></td></tr></table></figure><p>本质：用bash命令执行脚本文件，使<strong>用shell解析器运行脚本文件</strong></p></blockquote></li><li><p>路径执行方式</p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./脚本文件</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231031171233560.png" class="" title="image-20231031171233560"> <p>&#x3D;&#x3D;前提需要脚本文件有执行的权限x&#x3D;&#x3D;</p><p>脚本文件添加执行权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x 脚本文件</span><br></pre></td></tr></table></figure><p>执行</p><img src="/xu-runbo/post/563a1179/image-20231031171250107.png" class="" title="image-20231031171250107"> <p><code>./</code>前缀是Linux&#x2F;Unix系统中用于运行当前目录下的可执行文件的一种方式，但前提是文件具有执行权限。</p></blockquote></li></ol><h2 id="多命令处理"><a href="#多命令处理" class="headerlink" title="多命令处理"></a>多命令处理</h2><p>Shell（外壳）是计算机操作系统的用户界面，用于与操作系统内核进行交互。</p><p>Shell 可以执行单个命令，也可以执行多个命令，通常使用分号、逻辑运算符和管道等方法来处理多个命令。</p><p>以下是一些关于在Shell中处理多个命令的知识：</p><ol><li><p>命令分隔符：</p><ul><li>分号 <code>;</code>：分号用于将多个命令分隔开，按顺序执行。例如：<code>command1 ; command2</code></li><li>换行符（换行）：通常，&#x3D;&#x3D;每行代表一个命令&#x3D;&#x3D;，可以按&#x3D;&#x3D;顺序&#x3D;&#x3D;执行。</li></ul></li><li><p>逻辑运算符：</p><ul><li>逻辑与 <code>&amp;&amp;</code>：只有在前一个命令成功执行（返回0）时，才执行下一个命令。例如：<code>command1 &amp;&amp; command2</code></li><li>逻辑或 <code>||</code>：只有在前一个命令执行失败（返回非0）时，才执行下一个命令。例如：<code>command1 || command2</code></li></ul></li><li><p>管道 <code>|</code>：</p><ul><li>管道允许将一个命令的输出传递给另一个命令的输入。例如：<code>command1 | command2</code>，其中 <code>command1</code> 的输出作为 <code>command2</code> 的输入。</li></ul></li><li><p>后台执行 <code>&amp;</code>：</p><ul><li>&#x3D;&#x3D;在命令末尾加上 <code>&amp;</code> 符号可以使命令在后台执行&#x3D;&#x3D;，而不会阻塞Shell。例如：<code>command &amp;</code></li></ul></li><li><p>子Shell <code>( )</code>：</p><ul><li>使用括号可以创建子Shell，其中的命令在一个独立的Shell环境中执行。这对于创建临时环境或限定变量范围很有用。例如：<code>(command1; command2)</code></li></ul></li><li><p>控制结构：</p><ul><li>Shell 脚本可以包含条件语句（if-else）、循环（for、while）等控制结构，以便根据条件执行多个命令。</li></ul></li><li><p>脚本文件：</p><ul><li>您可以将多个命令保存在脚本文件中，并通过执行脚本文件来依次运行这些命令。脚本文件通常以 <code>.sh</code> 扩展名。</li></ul></li></ol><h2 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h2><blockquote><p>什么是系统环境变量</p><p>撞我常用的系统环境变量有哪些。</p></blockquote><h3 id="系统环境变量"><a href="#系统环境变量" class="headerlink" title="系统环境变量"></a>系统环境变量</h3><ol><li><strong>PATH</strong>：<code>PATH</code> 环境变量指定了系统在哪些目录中查找可执行文件。当您在终端中输入命令时，系统会依次查找 <code>PATH</code> 中列出的目录，以找到要执行的命令。</li><li><strong>HOME</strong>：<code>HOME</code> 环境变量包含了当前用户的主目录的路径。通常，用户的个人文件和配置文件存储在该目录下。</li><li><strong>USER</strong>：<code>USER</code> 环境变量包含了当前登录用户的用户名。</li><li><strong>SHELL</strong>：<code>SHELL</code> 环境变量指定了当前用户所使用的默认Shell。</li><li><strong>PWD</strong>：<code>PWD</code> 环境变量表示当前工作目录（即，用户当前所在的目录）的路径。</li><li><strong>LANG</strong> 和 *<em>LC_</em> **：这些环境变量控制系统的语言和区域设置，包括日期格式、货币符号等。</li><li><strong>TERM</strong>：<code>TERM</code> 环境变量定义了终端类型，以便应用程序知道如何与终端进行交互。</li><li><strong>PS1</strong> 和 <strong>PS2</strong>：这些环境变量定义了Shell提示符的外观，<code>PS1</code> 用于主提示符，<code>PS2</code> 用于次级提示符（通常出现在多行命令中）。</li><li><strong>TMP</strong> 和 <strong>TEMP</strong>：这些环境变量指定了用于临时文件的目录路径。</li><li><strong>LD_LIBRARY_PATH</strong>：<code>LD_LIBRARY_PATH</code> 环境变量用于指定动态链接库的搜索路径，以便应用程序可以正确地加载共享库。</li><li><strong>EDITOR</strong>：<code>EDITOR</code> 环境变量定义了默认的文本编辑器，通常在编辑文件时使用。</li><li><strong>DISPLAY</strong>：<code>DISPLAY</code> 环境变量用于指定X Window系统的显示器（用于图形用户界面应用程序）。</li><li><strong>MAIL</strong>：<code>MAIL</code> 环境变量包含了用户的邮件存储路径。</li></ol><p>系统环境变量是一种全局性的变量，它们对整个操作系统以及用户环境起着重要的作用。这些变量包括了有关系统配置、用户信息、路径设置以及其他重要信息。</p><img src="/xu-runbo/post/563a1179/image-20231031193917693.png" class="" title="image-20231031193917693"><h3 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h3><p>&#x2F;etc&#x2F;profile</p><h3 id="个人用户配置文件"><a href="#个人用户配置文件" class="headerlink" title="个人用户配置文件"></a>个人用户配置文件</h3><p>&#x2F;.bashrc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo $HISTFILE</span><br></pre></td></tr></table></figure><p>得到历史命令</p><h3 id="set命令"><a href="#set命令" class="headerlink" title="set命令"></a>set命令</h3><p><code>set</code> 命令主要用于显示和设置Shell环境变量。具体来说，<code>set</code> 命令有以下几个用途：</p><ol><li><strong>显示环境变量和Shell参数</strong>：显示当前Shell会话中定义的所有环境变量和Shell参数。这包括系统环境变量、用户定义的环境变量以及命令行参数。</li><li><strong>设置局部变量</strong>：您可以使用 <code>set</code> 命令来设置局部变量，这些变量仅在当前Shell会话中可见。例如，<code>set myvar=value</code> 会创建一个名为 <code>myvar</code> 的局部变量，并将其值设置为 <code>value</code>。</li><li><strong>修改环境变量</strong>：通过 <code>set</code> 命令，您可以修改已存在的环境变量的值。例如，<code>set PATH=/new/path:$PATH</code> 可以将 <code>PATH</code> 环境变量的值更新为新的路径。</li><li><strong>取消变量</strong>：使用 <code>set</code> 命令，您可以取消已定义的环境变量或局部变量。例如，<code>set -e myvar</code> 可以删除名为 <code>myvar</code> 的变量。</li><li><strong>设置位置参数</strong>：<code>set</code> 命令还可用于设置位置参数，这些参数通常用在Shell脚本中。例如，<code>set arg1 arg2 arg3</code> 将设置位置参数为 <code>arg1</code>、<code>arg2</code> 和 <code>arg3</code>，这些参数可以在脚本中使用。</li></ol><h3 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h3><p>查看系统环境变量,没有set那么详细</p><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><h3 id="什么是自定义变量"><a href="#什么是自定义变量" class="headerlink" title="什么是自定义变量"></a>什么是自定义变量</h3><blockquote><p>自己定义的变量</p><blockquote><p>自定义全局变量</p><p>自定义局部变量</p><p>自定义常量</p></blockquote></blockquote><h3 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h3><p>定义在一个脚本文件中的变量，只能在脚本文件内使用。</p><h3 id="定义规则"><a href="#定义规则" class="headerlink" title="定义规则"></a>定义规则</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量名称(不可以数字开头)=value</span><br></pre></td></tr></table></figure><blockquote><p>等号两侧不能有空格</p><p>bash环境中，变量的默认类型是字符串</p><p>如果有空格等特殊符号要用双引号引起来</p><p>不能用关键字作为变量名 </p></blockquote><h3 id="变量的使用-增添"><a href="#变量的使用-增添" class="headerlink" title="变量的使用(增添)"></a>变量的使用(增添)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">var_name</span> </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;var_name&#125;拼接字符串</span></span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231031195854712.png" class="" title="image-20231031195854712"> <p>测试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $path</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;123$&#123;name&#125;333&quot;</span><br></pre></td></tr></table></figure><h3 id="修改变量"><a href="#修改变量" class="headerlink" title="修改变量"></a>修改变量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">新的复制就好了</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231031195940759.png" class="" title="image-20231031195940759"> <h3 id="删除变量unset"><a href="#删除变量unset" class="headerlink" title="删除变量unset"></a>删除变量unset</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset 变量</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231031200049226.png" class="" title="image-20231031200049226"> <blockquote><p>这样创建的是一个<strong>局部变量</strong>。</p><p>局部变量只在当前Shell会话中有效，不会在重新启动系统后保留。</p><p>它们通常在<strong>当前终端窗口或Shell会话中使用</strong>，并在会话结束时被销毁。</p><hr><p>要在全局范围内设置变量，以便在系统重启后仍然可用，您通常需要将这些变量添加到Shell的启动文件（如<code>~/.bashrc</code>或<code>~/.bash_profile</code>）或系统范围的配置文件中</p><hr><p><code>unset</code> 命令，它用于删除环境变量或局部变量。您可以使用 <code>unset</code> 命令来删除局部变量，但不能用它来删除全局变量</p></blockquote><p><code>unset myvar</code> 将删除局部变量 <code>myvar</code>，</p><p>&#x3D;&#x3D;该变量将不再在当前Shell会话中可用&#x3D;&#x3D;。</p><p>如果要删除全局变量:</p><p>需要编辑相关的Shell配置文件并将其删除或注释掉，然后重新加载配置文件或重新启动Shell才能生效。</p><h2 id="自定义常量"><a href="#自定义常量" class="headerlink" title="自定义常量"></a>自定义常量</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">readonly var_name=value</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231031200849092.png" class="" title="image-20231031200849092"> <blockquote><p><code>readonly</code> 命令将一个变量标记为只读（常量）后，</p><p><strong>该变量将不能被修改或恢复为可写变量，</strong></p><p>除非您启动一个<strong>新的Shell会话</strong>。</p><p>&#x3D;&#x3D;只读变量在当前Shell会话中是不可更改的。&#x3D;&#x3D;</p></blockquote><ol><li><p><strong>在新的Shell子进程中修改</strong>：您可以启动一个新的子Shell进程，在子Shell中修改变量。变化不会影响父Shell。</p></li><li><p><strong>使用<code>unset</code>命令删除只读变量</strong>：您可以使用<code>unset</code>命令来删除只读变量。这将从当前Shell中删除该变量，然后您可以重新定义它为一个可写变量。请注意，这仅适用于Bash Shell。</p></li></ol><h2 id="自定义全局变量"><a href="#自定义全局变量" class="headerlink" title="自定义全局变量"></a>自定义全局变量</h2><h3 id="父子shell"><a href="#父子shell" class="headerlink" title="父子shell"></a>父子shell</h3><img src="/xu-runbo/post/563a1179/image-20231031201550676.png" class="" title="image-20231031201550676"><p>&#x3D;&#x3D;父Shell是启动子Shell的Shell，而子Shell是由父Shell启动的新Shell会话。&#x3D;&#x3D;</p><h3 id="定义全局变量"><a href="#定义全局变量" class="headerlink" title="定义全局变量"></a>定义全局变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export var_name=value</span><br></pre></td></tr></table></figure><p>**全局环境变量会一直存在，直到系统重启或手动取消它们的导出。</p><p>&#x3D;&#x3D;如果要永久导出变量&#x3D;&#x3D;，</p><p>通常需要将相应的 <code>export</code> 命令添加到Shell配置文件中，以便在每次登录时自动加载。</p><blockquote><p>全局变量是在Shell脚本中声明的变量，可以在整个脚本中访问，包括在不同的脚本文件中。</p><p>全局变量可以在脚本中的任何地方<strong>访问和修改。</strong></p><hr><p>全局变量的生命周期从它们被声明开始，一直持续到Shell会话结束，或者在某个地方被显式删除。这意味着全局变量在脚本文件执行期间一直存在，并且可以在多个脚本文件中共享。</p><p>&#x3D;&#x3D;<strong>全局变量的生命周期仅限于Shell会话的持续时间</strong>。&#x3D;&#x3D;</p></blockquote><h3 id="案例测试"><a href="#案例测试" class="headerlink" title="案例测试"></a>案例测试</h3><p>测试全局变量在子shell中是否可以使用</p><img src="/xu-runbo/post/563a1179/image-20231031202148548.png" class="" title="image-20231031202148548"> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh demo1.sh</span><br></pre></td></tr></table></figure><p>无效</p><p>修改demo1.sh</p><p><code>apple=123</code>-&gt;<code>export apple=123</code></p><img src="/xu-runbo/post/563a1179/image-20231031203122052.png" class="" title="image-20231031203122052"> <blockquote><p>在父Shell中设置一个<code>export</code>全局变量，然后在启动的任何子Shell中访问相同的变量</p><p>但是不能在子shell里面试图修改父shell的全局变量,</p><p>在子Shell中尝试修改父Shell创建的全局变量，&#x3D;&#x3D;实际上是在子Shell的环境中创建了一个新的同名局部变量，&#x3D;&#x3D;而不是修改父Shell的全局变量。</p><p>每个Shell会话都有其自己的环境和变量空间，子Shell的环境是相对独立的。</p></blockquote><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><h3 id="shell脚本传入参数语法"><a href="#shell脚本传入参数语法" class="headerlink" title="shell脚本传入参数语法"></a>shell脚本传入参数语法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash 脚本文件 参数1 参数2 》。。。。。。。。。</span><br></pre></td></tr></table></figure><h3 id="n"><a href="#n" class="headerlink" title="$n"></a><code>$n</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">n</span></span><br></pre></td></tr></table></figure><blockquote><p>得到第n个输入参数</p><p>$1-$9得到的是第1—-9输入参数</p><p>10以后用${10,11…….}</p><p>&#x3D;&#x3D;特殊的$0代表shell脚本的名称&#x3D;&#x3D;</p></blockquote><p>测试</p><img src="/xu-runbo/post/563a1179/image-20231101134438932.png" class="" title="image-20231101134438932"> <img src="/xu-runbo/post/563a1179/image-20231101134500296.png" class="" title="image-20231101134500296"> <p><strong>最好加上{}，也方便拼接字符串</strong></p><p>默认只识别$后一个数字$10相当于${1}0</p><p>​</p><h3 id=""><a href="#" class="headerlink" title="$#"></a><code>$#</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="comment">#</span></span></span><br></pre></td></tr></table></figure><blockquote><p>显示我们传入参数的个数</p></blockquote><p>测试<br>    <img src="/xu-runbo/post/563a1179/image-20231101134740357.png" class="" title="image-20231101134740357"> </p><img src="/xu-runbo/post/563a1179/image-20231101134801261.png" class="" title="image-20231101134801261"> <h3 id="和"><a href="#和" class="headerlink" title="$*和$@"></a><code>$*和$@</code></h3><p>&#x3D;&#x3D;<code>$*</code>和<code>$@</code>都表示所有<strong>命令行参数的列表</strong>。它们的区别在于<strong>对待参数中的空格和引号的方式。</strong>&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">*</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">@</span></span><br></pre></td></tr></table></figure><blockquote><p>以列表的形式组织我们的输入的参数</p><p>$*和$@都是$1 $2…………………….$n</p><p>用双引号括起来$*是”$1 $2 $3……….$n”</p><p>$@是”$1” “$2”  “$3”,…………”$n”</p></blockquote><img src="/xu-runbo/post/563a1179/image-20231101134950315.png" class="" title="image-20231101134950315"><p>测试</p><img src="/xu-runbo/post/563a1179/image-20231101135217376.png" class="" title="image-20231101135217376"> <img src="/xu-runbo/post/563a1179/image-20231101135330765.png" class="" title="image-20231101135330765"> <img src="/xu-runbo/post/563a1179/image-20231101135240437.png" class="" title="image-20231101135240437"> <p>加入循环</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for 循环变量 in 可循环对象</span><br><span class="line">do</span><br><span class="line">循环体</span><br><span class="line">done</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231101135756044.png" class="" title="image-20231101135756044">  <img src="/xu-runbo/post/563a1179/image-20231101135813284.png" class="" title="image-20231101135813284"> <h4 id="加入””的区别"><a href="#加入””的区别" class="headerlink" title="加入””的区别"></a>加入””的区别</h4><img src="/xu-runbo/post/563a1179/image-20231101135904981.png" class="" title="image-20231101135904981"> <img src="/xu-runbo/post/563a1179/image-20231101135926490.png" class="" title="image-20231101135926490"> <blockquote><ul><li><code>$*</code>将<strong>所有的命令行参数当作一个单词</strong>（字符串）处理，参数之间由IFS分隔，会忽略参数中的引号。</li><li><code>$@</code>将<strong>每个命令行参数当作独立的单词</strong>（字符串）处理，参数之间不会被拆分，会保留参数中的引号。</li></ul></blockquote><h3 id="-1"><a href="#-1" class="headerlink" title="$?"></a><code>$?</code></h3><p>查看上一次命令的返回值。返回0代表成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">?</span></span><br></pre></td></tr></table></figure><p>测试</p><img src="/xu-runbo/post/563a1179/image-20231101140536918.png" class="" title="image-20231101140536918"> <h3 id="-2"><a href="#-2" class="headerlink" title="$$"></a><code>$$</code></h3><p>得到当前shell的进程ID</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$</span></span><br></pre></td></tr></table></figure><p>测试</p><img src="/xu-runbo/post/563a1179/image-20231101141353020.png" class="" title="image-20231101141353020"> <h2 id="自定义系统环境变量"><a href="#自定义系统环境变量" class="headerlink" title="自定义系统环境变量"></a>自定义系统环境变量</h2><p>​编辑配置文件<br>&#x2F;etc&#x2F;profile</p><img src="/xu-runbo/post/563a1179/image-20231101170324099.png" class="" title="image-20231101170324099"> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231101170413135.png" class="" title="image-20231101170413135"> <p>加载一下新的配置文件</p><p>就实现啦一个自定义的系统变量</p><h3 id="ABC-abcdef和export-ABC-abcdef的区别"><a href="#ABC-abcdef和export-ABC-abcdef的区别" class="headerlink" title="ABC=abcdef和export ABC=abcdef的区别"></a><code>ABC=abcdef和export ABC=abcdef的区别</code></h3><blockquote><p><code>ABC=abcdef</code>这将创建一个名为<code>ABC</code>的自定义系统变量并将其值设置为<code>abcdef</code>。</p><p>&#x3D;&#x3D;这个变量只在当前shell环境中可见，对于其他的子进程或新开的shell是不可见的。&#x3D;&#x3D;</p><hr><p>新的shell会话会&#x3D;&#x3D;继承之前设置的系统环境变量&#x3D;&#x3D;。所以即使你在重启后的新shell会话中，你仍然可以使用之前设置的自定义系统变量<code>ABC</code>。</p><hr><p><code>export ABC=abcddef</code>导出系统变量之后</p><p>&#x3D;&#x3D;使得该变量在当前shell环境中可见，并且对于子进程和新开的shell也是可见的。&#x3D;&#x3D;</p></blockquote><p>新开一个shell也能访问的到。</p><img src="/xu-runbo/post/563a1179/image-20231101171256144.png" class="" title="image-20231101171256144"> <h2 id="加载流程原理介绍"><a href="#加载流程原理介绍" class="headerlink" title="加载流程原理介绍"></a>加载流程原理介绍</h2><h3 id="交互shell和非交互shell环境的区别"><a href="#交互shell和非交互shell环境的区别" class="headerlink" title="交互shell和非交互shell环境的区别"></a>交互shell和非交互shell环境的区别</h3><blockquote><p>交互shell和非交互shell环境的区别主要体现在以下几个方面：</p><ol><li><p>输入输出：&#x3D;&#x3D;交互shell环境是指用户可以直接与shell进行交互&#x3D;&#x3D;，<strong>通过键盘输入命令并实时查看命令的输出结果</strong>。</p><p>而非交互shell环境是&#x3D;&#x3D;指命令在后台运行&#x3D;&#x3D;，&#x3D;&#x3D;没有实时的输入输出交互。&#x3D;&#x3D;</p></li><li><p>环境变量：&#x3D;&#x3D;交互shell环境通常会加载用户的环境变量，包括用户的个人配置文件、别名和函数等，以便用户可以方便地使用和管理。&#x3D;&#x3D;而非交互shell环境通常不加载这些环境变量，因为&#x3D;&#x3D;<strong>它们通常是在脚本中使用</strong>&#x3D;&#x3D;，不需要用户的交互和配置。</p></li><li><p>执行方式：交互shell环境》》》是通过终端或命令行界面<strong>直接</strong>执行命令</p><p>而非交互shell环境》》》是通过执行脚本文件或者其他程序来<strong>间接</strong>执行命令。</p></li><li><p>运行环境：交互shell环境》》》通常是在用户登录系统后启动的，用户可以通过shell界面来执行命令和操作系统。</p><p>而非交互shell环境》》在系<strong>统启动时自动执行脚本</strong>，或者由其他程序调用执行。</p></li></ol><hr><p>交互shell环境适合用户直接操作和交互，可以实时查看和调试命令的输出结果</p><p>而非交互shell环境适合在脚本或程序中执行命令，不需要用户的实时交互和输入输出。</p></blockquote><h3 id="登录Shell和非登录Shell"><a href="#登录Shell和非登录Shell" class="headerlink" title="登录Shell和非登录Shell"></a>登录Shell和非登录Shell</h3><p>登录Shell（login shell）和非登录Shell（non-login shell）是两种不同的运行环境，它们之间有以下区别：</p><ol><li><p>加载配置文件：&#x3D;&#x3D;登录Shell除了加载系统配置文件还会加载用户的个性化配置文件&#x3D;&#x3D;，例如&#x2F;etc&#x2F;profile,&#x2F;.bash_login和<del>&#x2F;.profile。</del></p><p>而&#x3D;&#x3D;非登录Shell只会加载~&#x2F;.bashrc文件。&#x3D;&#x3D;</p></li><li><p>执行顺序：登录Shell会按照特定的顺序执行配置文件。一般来说，先加载&#x2F;etc&#x2F;profile，然后根据用户的身份和登录方式加载适当的个人配置文件。而非登录Shell只会加载~&#x2F;.bashrc文件。</p></li><li><p>环境变量的可用性：&#x3D;&#x3D;登录Shell中定义的环境变量在整个登录会话中都是可用的，包括子Shell和子进程。&#x3D;&#x3D;</p><p>非登录Shell中定义的环境变量只在当前Shell会话中可用，不会传递给子Shell和子进程。</p></li></ol><p>&#x3D;&#x3D;登录Shell加载更多的配置文件，可以设置全局的环境变量&#x3D;&#x3D;，而非登录Shell只加载少量的配置文件，主要用于用户自定义的个人设置。</p><blockquote><p>可以运行Shell脚本</p><p>使用Shell内置命令</p><p>导入环境变量</p><p>执行命令：可以在非登录Shell中执行各种Shell命令，如<code>ls</code>、<code>cd</code>、<code>mkdir</code>等。这些命令将在当前Shell环境中执行，并且不会影响到父Shell或其他子Shell。</p></blockquote><p>&#x3D;&#x3D;在某些系统中，非登录Shell也可以读取系统配置文件。&#x3D;&#x3D;</p><p>登录环境和非登录环境的区别在于是否读取用户级别的登录环境变量文件。登录环境会读取这些文件，而非登录环境不会。</p><img src="/xu-runbo/post/563a1179/image-20231101172959353.png" class="" title="image-20231101172959353"> <h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>&#x2F;etc&#x2F;profile</p><p><code>export V1=123</code></p><p>~&#x2F;.bashrc</p><p><code>export V2=345</code></p><p>demo.sh</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $V1</span><br><span class="line">echo $V2</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231101214910099.png" class="" title="image-20231101214910099"> <blockquote><p>当执行<code>sh -l demo.sh</code>时，在登录状态下执行脚本。</p><p>在登录状态下，shell会加载.bashrc和&#x2F;etc&#x2F;profile文件。两个环境变量V1和V2都会在脚本中可用，所以你会看到输出123和345。</p><p>在非登录状态下，shell只会加载~&#x2F;.bashrc文件，而不会加载系统的…..&#x2F;etc&#x2F;profile文件。</p></blockquote><img src="/xu-runbo/post/563a1179/image-20231101175235682.png" class="" title="image-20231101175235682"><h3 id="删除环境变量"><a href="#删除环境变量" class="headerlink" title="删除环境变量"></a>删除环境变量</h3><img src="/xu-runbo/post/563a1179/image-20231101174550704.png" class="" title="image-20231101174550704"> <p>直接删掉<code>VAR!=VAR1</code>是不可以的</p><img src="/xu-runbo/post/563a1179/image-20231101175105835.png" class="" title="image-20231101175105835"> 简单的删除还能使用这个变量<img src="/xu-runbo/post/563a1179/image-20231101175132566.png" class="" title="image-20231101175132566"> <p><code>unset 变量</code></p><p>+重新加载我们的配置文件</p><p>才能真正删掉这个变量</p><h3 id="判断当前是登录shell还是非登录shell"><a href="#判断当前是登录shell还是非登录shell" class="headerlink" title="判断当前是登录shell还是非登录shell"></a>判断当前是登录shell还是非登录shell</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $0</span><br></pre></td></tr></table></figure><p>如果是-bash是登录shell环境</p><p>bash就是非登录shell</p><p>但是</p><blockquote><p>在脚本文件里使用就是脚本文件的名字。</p></blockquote><h3 id="切换shell环境命令"><a href="#切换shell环境命令" class="headerlink" title="切换shell环境命令"></a>切换shell环境命令</h3><img src="/xu-runbo/post/563a1179/image-20231102134237376.png" class="" title="image-20231102134237376"> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su - 用户</span><br><span class="line">默认是非登录shell</span><br><span class="line">sudo su - 用户 -l</span><br><span class="line">登录shell</span><br></pre></td></tr></table></figure><p>但是<code>-</code></p><blockquote><p><strong>切换后的shell会加载目标用户的配置文件（如<code>.bashrc</code>或<code>.profile</code>），并使用目标用户的环境变量。</strong></p></blockquote><img src="/xu-runbo/post/563a1179/image-20231102134641372.png" class="" title="image-20231102134641372"> <p><code>sudo su - 用户</code>命令可以确保切换到目标用户的登录shell，并使用目标用户的环境配置。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line">。。。。</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash -l 脚本文件</span><br><span class="line">sh -l 脚本文件</span><br><span class="line">使用bash/sh -l命令来执行脚本文件相当于在一个新的bash登录shell中执行脚本，然后在脚本执行完毕后退出登录shell</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">temp=123</span><br></pre></td></tr></table></figure><h3 id="字符串的表达方式3种"><a href="#字符串的表达方式3种" class="headerlink" title="字符串的表达方式3种"></a>字符串的表达方式3种</h3><ol><li><p>用<code>&#39;&#39;</code>包起来的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#x27;abc&#x27;</span><br><span class="line">var1=&#x27;hello world&#x27;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231102140159807.png" class="" title="image-20231102140159807"> <p>&#x3D;&#x3D;不会解析${}，什么都原样输出&#x3D;&#x3D;</p><img src="/xu-runbo/post/563a1179/image-20231102140249725.png" class="" title="image-20231102140249725"> <p>甚至连转义符号都不管用</p></li><li><p>用<code>&quot;&quot;</code>包起来的</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;ewdasdas&quot;</span><br><span class="line">var2=&quot;hello world&quot; </span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231102140451381.png" class="" title="image-20231102140451381"> <p>&#x3D;&#x3D;会解析变量，转义字符。。。。&#x3D;&#x3D;</p></li><li><p>裸的字符串</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var3=dasdad234</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231102140918459.png" class="" title="image-20231102140918459"> <p>&#x3D;&#x3D;也会像””一样会解析变量&#x3D;&#x3D;但是不能遇到空格，遇到空格就断了&#x2F;&#x2F;&#x2F;&#x2F;</p><p>空格后面的当作参数。&#x2F;命令；了。。。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var3=hello world</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231102141051088.png" class="" title="image-20231102141051088"></li></ol><blockquote><p>使用””是最好的。。。</p></blockquote><h3 id="得到字符串的长度"><a href="#得到字符串的长度" class="headerlink" title="得到字符串的长度"></a>得到字符串的长度</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $&#123;#字符串的变量名&#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231102141414595.png" class="" title="image-20231102141414595"> <h3 id="字符串的拼接3种"><a href="#字符串的拼接3种" class="headerlink" title="字符串的拼接3种"></a>字符串的拼接3种</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var1=&#x27;abc&#x27;</span><br><span class="line">var2=&quot;hello world&quot;</span><br></pre></td></tr></table></figure><ol><li><p>无符号拼接</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var3=$&#123;var1&#125;$&#123;var2&#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231102141953159.png" class="" title="image-20231102141953159"> <p>&#x3D;&#x3D;但是注意中间不能有空格&#x3D;&#x3D;，可以有符号</p><p>因为无符号的字符串就是不可以有空格</p></li><li><p><code>&quot;&quot;</code>拼接</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var3=&quot;$&#123;var1&#125;   $ &#123;var2&#125;&quot;</span><br></pre></td></tr></table></figure><p>很好拼接，很推荐使用。</p></li><li><p>混合拼接</p><img src="/xu-runbo/post/563a1179/image-20231102142217715.png" class="" title="image-20231102142217715"> <p>字符串加字符串。。</p></li></ol><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><img src="/xu-runbo/post/563a1179/image-20231102142318436.png" class="" title="image-20231102142318436"><blockquote><p>常用的有</p><p><code>$&#123;变量名:start:length&#125;</code></p><p><code>$&#123;变量名:start&#125;</code></p><p><code>$&#123;变量名#*char&#125;</code></p><p><code>$&#123;变量名##*char&#125;</code></p><p><code>$&#123;变量名%char*&#125;</code></p><p><code>$&#123;变量名%%char*&#125;</code></p></blockquote><img src="/xu-runbo/post/563a1179/image-20231102143101396.png" class="" title="image-20231102143101396"> <img src="/xu-runbo/post/563a1179/image-20231102143850834.png" class="" title="image-20231102143850834"> 0-5取不到5<h2 id="shell数组"><a href="#shell数组" class="headerlink" title="shell数组"></a>shell数组</h2><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><p>之间用的是<code>    </code>来间隔的，不是<code>,</code></p><blockquote><p>第一种方式创建的数组是一个连续的索引数组，下标从0开始递增。</p><p>第二种方式创建的数组是一个关联数组或者称为哈希数组。&#x3D;&#x3D;数组arry1的<strong>下标不再是连续的</strong>，而是显式指定了某些元素的下标。&#x3D;&#x3D;</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arry=(1 2 3 4 5 6)</span><br><span class="line">arry1=([0]=1 [1]=2 [9]=3)</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231102144848081.png" class="" title="image-20231102144848081"> <h3 id="数组的语法"><a href="#数组的语法" class="headerlink" title="数组的语法"></a>数组的语法</h3><img src="/xu-runbo/post/563a1179/image-20231102144903248.png" class="" title="image-20231102144903248"> <p>测试</p><img src="/xu-runbo/post/563a1179/image-20231102145127651.png" class="" title="image-20231102145127651"> <blockquote><p>第一种方式创建的数组是一个连续的索引数组，下标从0开始递增；</p><p>而第二种方式创建的数组是一个关联数组，可以显式指定元素的下标，下标不一定连续。</p></blockquote><h3 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">newarrt=($&#123;arry1[*]&#125; $&#123;arry2[*]&#125;)</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231102145748408.png" class="" title="image-20231102145748408"> <h3 id="数组的删除"><a href="#数组的删除" class="headerlink" title="数组的删除"></a>数组的删除</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unset 数组名[index]</span><br><span class="line">unset 数组名</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/563a1179/image-20231102145939178.png" class="" title="image-20231102145939178"> ]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习</title>
      <link href="/xu-runbo/post/deb5175a.html"/>
      <url>/xu-runbo/post/deb5175a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p><a href="http://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/">Centos</a></p><hr><p><a href="https://blog.csdn.net/m0_50519965/article/details/116175873?ops_request_misc=%7B%22request_id%22:%22169465038316800188541621%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=169465038316800188541621&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-116175873-null-null.142%5Ev93%5Econtrol&utm_term=vmware16%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B&spm=1018.2226.3001.4187">VMware16的安装及VMware配置Linux虚拟机(详解版)_vmware16安装-CSDN博客</a></p><h2 id="Linux导言"><a href="#Linux导言" class="headerlink" title="Linux导言"></a>Linux导言</h2><p>Linux 是一种自由和开放源码的类 UNIX 操作系统。</p><p>Linux 英文解释为 <strong>Linux is not Unix</strong>。</p><p>Linux 是在 1991 由林纳斯·托瓦兹在赫尔辛基大学上学时创立的，主要受到 Minix 和 Unix 思想的启发。</p><p>本教程，我们将为大家介绍如何使用 Linux。</p><p>Linux 其实很容易学，相信你们能很快学会。</p><h2 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h2><p> Linux 的发行版本 Centos 为例来为大家介绍 Linux 系统的应用。</p><h2 id="开源-的linux"><a href="#开源-的linux" class="headerlink" title="开源 的linux"></a>开源 的linux</h2><p>Linux 遵循 GNU 通用公共许可证（GPL），任何个人和机构都可以自由地使用 Linux 的所有底层源代码，也可以自由地修改和再发布。</p><p>由于 Linux 是自由软件，任何人都可以创建一个符合自己需求的 Linux 发行版。</p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><img src="/xu-runbo/post/deb5175a/image-20231007082555838.png" class="" title="image-20231007082555838"><h2 id="Linux发行版"><a href="#Linux发行版" class="headerlink" title="Linux发行版"></a>Linux发行版</h2><blockquote><p>以下是五个常用的Linux发行版以及它们的特点和简要介绍：</p><ol><li><p>Ubuntu：</p><ul><li>特点：用户友好、稳定、易用。</li><li>简要介绍：Ubuntu是基于Debian的一款流行的Linux发行版，以其简单易用和广泛的社区支持而受到欢迎。它提供了用户友好的桌面环境（如GNOME），并且有大量的软件包可供选择。</li></ul></li><li><p>CentOS：</p><ul><li>特点：稳定、安全、面向企业。</li><li>简要介绍：CentOS是一款由Red Hat Enterprise Linux（RHEL）源代码重新编译而成的免费、开源的Linux发行版。它以其出色的稳定性和安全性而闻名，并广泛应用于企业服务器环境。</li></ul></li><li><p>Fedora：</p><ul><li>特点：先进、新颖、面向开发者。</li><li>简要介绍：Fedora是由社区推动的创新型Linux发行版，旨在为用户提供最新的软件和技术。它在桌面和服务器上都具有出色的性能，并且对开发者友好，提供了很多开发工具和库。</li></ul></li><li><p>Debian：</p><ul><li>特点：稳定、自由、广泛支持。</li><li>简要介绍：Debian是一款非常稳定的Linux发行版，强调自由软件和广泛的硬件支持。它采用了一种包管理系统（APT），提供了庞大的软件仓库，并有强大的社区支持。</li></ul></li><li><p>openSUSE：</p><ul><li>特点：灵活、易用、面向桌面和服务器。</li><li>简要介绍：openSUSE是一款多功能的Linux发行版，适用于桌面和服务器环境。它注重用户友好性和用户体验，并提供了多种桌面环境选择（如KDE和GNOME）。此外，它还以其易用的包管理器（YaST）而闻名。</li></ul></li></ol><p>这些Linux发行版都有各自的特点和适用场景，选择哪个发行版主要取决于您的需求和熟悉程度。无论选择哪个发行版，都能获得强大的开源操作系统和丰富的软件生态系统。</p></blockquote><h2 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h2><p>Linux 内核最初只是由芬兰人&#x3D;&#x3D;林纳斯·托瓦兹&#x3D;&#x3D;（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><ol><li>Linux内核（最核心的功能）</li><li>系统级应用程序（出厂自带的程序）</li><li><img src="/xu-runbo/post/deb5175a/image-20231012081139215.png" class="" title="image-20231012081139215"></li></ol><p><a href="http://www.kernel.org内核/">www.kernel.org内核</a></p><h2 id="Linux应用领域"><a href="#Linux应用领域" class="headerlink" title="Linux应用领域"></a>Linux应用领域</h2><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p><p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul><h2 id="Linux-Windows"><a href="#Linux-Windows" class="headerlink" title="Linux&amp;Windows"></a>Linux&amp;Windows</h2><p>目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下</p><img src="/xu-runbo/post/deb5175a/image-20231007082725236.png" class="" title="image-20231007082725236"><h2 id="Linux-系统启动过程"><a href="#Linux-系统启动过程" class="headerlink" title="Linux 系统启动过程"></a>Linux 系统启动过程</h2><p>linux启动时我们会看到许多启动信息。</p><p>Linux系统的启动过程并不是大家想象中的那么复杂，其过程可以分为5个阶段：</p><ul><li>内核的引导。</li><li>运行 init。</li><li>系统初始化。</li><li>建立终端 。</li><li>用户登录系统。</li></ul><blockquote><p>init程序的类型：</p></blockquote><blockquote><ul><li><strong>SysV:</strong> init, CentOS 5之前, 配置文件： &#x2F;etc&#x2F;inittab。</li><li><strong>Upstart:</strong> init,CentOS 6, 配置文件： &#x2F;etc&#x2F;inittab, &#x2F;etc&#x2F;init&#x2F;*.conf。</li><li><strong>Systemd：</strong> systemd, CentOS 7,配置文件： &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system、 &#x2F;etc&#x2F;systemd&#x2F;system。</li></ul></blockquote><h3 id="内核引导"><a href="#内核引导" class="headerlink" title="内核引导"></a>内核引导</h3><p>当计算机打开电源后，首先是&#x3D;&#x3D;BIOS开机自检，&#x3D;&#x3D;按照BIOS中设置的启动设备（通常是硬盘）来启动。</p><p>操作系统接管硬件以后，&#x3D;&#x3D;首先读入 &#x2F;boot 目录下的内核文件。&#x3D;&#x3D;</p><h3 id="运行Init"><a href="#运行Init" class="headerlink" title="运行Init"></a>运行Init</h3><p>&#x3D;&#x3D;init 进程是系统所有进程的起点&#x3D;&#x3D;，你可以把它比拟成&#x3D;&#x3D;系统所有进程的老祖宗&#x3D;&#x3D;，&#x3D;&#x3D;没有这个进程，系统中任何进程都不会启动。&#x3D;&#x3D;</p><p>init 程序首先是需要读取配置文件 &#x2F;etc&#x2F;inittab。</p><p>&#x3D;&#x3D;真正的rc启动脚本实际上都是放在&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;目录下。&#x3D;&#x3D;</p><h4 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h4><blockquote><ol><li>运行级别0（halt）：系统关机，无法执行任何任务。</li><li>运行级别1（single user）：单用户模式，系统进入最小化的运行环境，只有root用户可以登录。用于系统维护和故障排除。</li><li>运行级别2（multi-user）：多用户模式，没有图形界面（GUI），支持网络服务。这是命令行模式下的标准运行级别。</li><li>运行级别3（multi-user with networking）：和运行级别2类似，但同时启动网络服务，适用于服务器环境。</li><li>运行级别4（unused）：保留给用户自定义的运行级别。</li><li>运行级别5（graphical）：图形界面（GUI）模式，通常基于X Window系统。适用于桌面系统。</li><li>运行级别6（reboot）：系统重启。</li></ol></blockquote><p>许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p><p>&#x3D;&#x3D;init进程的一大任务，就是去运行这些开机启动的程序。&#x3D;&#x3D;</p><p>但是，&#x3D;&#x3D;不同的场合需要启动不同的程序&#x3D;&#x3D;，比如用作服务器时，需要启动Apache，用作桌面就不需要。</p><p>Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。</p><h3 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h3><p>在init的配置文件中有这么一行： si::sysinit:&#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit　它调用执行了&#x2F;etc&#x2F;rc.d&#x2F;rc.sysinit，而rc.sysinit是一个bash shell的脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本。</p><p>&#x3D;&#x3D;它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l5:5:wait:/etc/rc.d/rc 5</span><br></pre></td></tr></table></figure><h3 id="建立终端"><a href="#建立终端" class="headerlink" title="建立终端"></a>建立终端</h3><p>rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。</p><p>init接下来会打开6个终端，以便用户登录系统。在inittab中的以下6行就是定义了6个终端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1:2345:respawn:/sbin/mingetty tty1</span><br><span class="line">2:2345:respawn:/sbin/mingetty tty2</span><br><span class="line">3:2345:respawn:/sbin/mingetty tty3</span><br><span class="line">4:2345:respawn:/sbin/mingetty tty4</span><br><span class="line">5:2345:respawn:/sbin/mingetty tty5</span><br><span class="line">6:2345:respawn:/sbin/mingetty tty6</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。</p><h3 id="用户登录系统"><a href="#用户登录系统" class="headerlink" title="用户登录系统"></a>用户登录系统</h3><p>一般来说，用户的登录方式有三种：</p><ul><li>（1）命令行登录</li><li>（2）ssh登录</li><li>（3）图形界面登录</li></ul><p>对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入 KDE、Gnome 等窗口管理器。</p><p>而本文主要讲的还是文本方式登录的情况：当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。</p><p>Linux 的账号验证程序是 login，login 会接收 mingetty 传来的用户名作为用户名参数。</p><p>然后 login 会对用户名进行分析：如果用户名不是 root，且存在 &#x2F;etc&#x2F;nologin 文件，login 将输出 nologin 文件的内容，然后退出。</p><p>这通常用来系统维护时防止非root用户登录。只有&#x2F;etc&#x2F;securetty中登记了的终端才允许 root 用户登录，如果不存在这个文件，则 root 用户可以在任何终端上登录。</p><p>&#x2F;etc&#x2F;usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。</p><h4 id="图形模式与文字模式的切换方式"><a href="#图形模式与文字模式的切换方式" class="headerlink" title="图形模式与文字模式的切换方式"></a>图形模式与文字模式的切换方式</h4><p>Linux预设提供了六个命令窗口终端机让我们来登录。</p><p>默认我们登录的就是第一个窗口，也就是tty1，这个六个窗口分别为tty1,tty2 … tty6，你可以按下Ctrl + Alt + F1 ~ F6 来切换它们。</p><p>如果你安装了图形界面，默认情况下是进入图形界面的，此时你就可以按Ctrl + Alt + F1 ~ F6来进入其中一个命令窗口界面。</p><p>当你进入命令窗口界面后再返回图形界面只要按下Ctrl + Alt + F7 就回来了。</p><p>&#x3D;&#x3D;如果你用的vmware 虚拟机，命令窗口切换的快捷键为 Alt + Space + F1<del>F6. 如果你在图形界面下请按Alt + Shift + Ctrl + F1</del>F6 切换至命令窗口。&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231007085428743.png" class="" title="image-20231007085428743"><h3 id="Linux-关机"><a href="#Linux-关机" class="headerlink" title="Linux 关机"></a>Linux 关机</h3><p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>正确的关机流程为：sync &gt; shutdown &gt; reboot &gt; halt</p><p>关机指令为：shutdown ，<code>你可以man shutdown 来看一下帮助文档。</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sync 将数据由内存同步到硬盘中。</span><br><span class="line"></span><br><span class="line">shutdown 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><br><span class="line"></span><br><span class="line">shutdown –h 10 ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。</span><br><span class="line"></span><br><span class="line">shutdown –h now 立马关机</span><br><span class="line"></span><br><span class="line">shutdown –h 20:25 系统会在今天20:25关机</span><br><span class="line"></span><br><span class="line">shutdown –h +10 十分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown –r now 系统立马重启</span><br><span class="line"></span><br><span class="line">shutdown –r +10 系统十分钟后重启</span><br><span class="line"></span><br><span class="line">reboot 就是重启，等同于 shutdown –r now</span><br><span class="line"></span><br><span class="line">halt 关闭系统，等同于shutdown –h now 和 poweroff</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中&#x3D;&#x3D;</p><h2 id="Linux系统目录结构"><a href="#Linux系统目录结构" class="headerlink" title="Linux系统目录结构"></a>Linux系统目录结构</h2><p>登录系统后，在当前命令窗口下输入命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231007090522196.png" class="" title="image-20231007090522196"><img src="/xu-runbo/post/deb5175a/image-20231007090438747.png" class="" title="image-20231007090438747"><p>以下是对这些目录的解释：</p><ul><li><p><strong>&#x2F;bin</strong>：<br>bin 是 &#x3D;&#x3D;Binaries (二进制文件) 的缩写&#x3D;&#x3D;, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>&#x2F;boot：</strong><br>这里存放的是&#x3D;&#x3D;启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件&#x3D;&#x3D;。</p></li><li><p><strong>&#x2F;dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>&#x2F;etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的&#x3D;&#x3D;系统管理所需要的配置文件和子目录&#x3D;&#x3D;。</p></li><li><p><strong>&#x2F;home</strong>：<br>用户的主目录，在 Linux 中，&#x3D;&#x3D;每个用户都有一个自己的目录&#x3D;&#x3D;，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><strong>&#x2F;lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>&#x2F;lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>&#x2F;media</strong>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><strong>&#x2F;mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>&#x2F;opt</strong>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>&#x2F;proc</strong>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></li><li><p><strong>&#x2F;root</strong>：<br>&#x3D;&#x3D;该目录为系统管理员，也称作超级权限者的用户主目录。&#x3D;&#x3D;</p></li><li><p><strong>&#x2F;sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>&#x2F;selinux</strong>：<br>这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>&#x2F;srv</strong>：<br>该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>&#x2F;sys</strong>：</p><p>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。</p><p>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。</p><p>该文件系统是内核设备树的一个直观反映。</p><p>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><strong>&#x2F;tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><strong>&#x2F;usr</strong>：<br>usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>&#x2F;usr&#x2F;bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>&#x2F;usr&#x2F;sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>&#x2F;usr&#x2F;src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>&#x2F;var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>&#x2F;run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>&#x2F;etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>&#x2F;bin, &#x2F;sbin, &#x2F;usr&#x2F;bin, &#x2F;usr&#x2F;sbin</strong>: 这是系统预设的执行文件的放置目录，比如 <strong>ls</strong> 就是在 <strong>&#x2F;bin&#x2F;ls</strong> 目录下的。</p><p>值得提出的是 <strong>&#x2F;bin</strong>、**&#x2F;usr&#x2F;bin** 是给系统用户使用的指令（除 root 外的通用用户），而&#x2F;sbin, &#x2F;usr&#x2F;sbin 则是给 root 使用的指令。</p><p><strong>&#x2F;var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 &#x2F;var&#x2F;log 目录下，另外 mail 的预设放置也是在这里。</p><h2 id="学会使用帮助"><a href="#学会使用帮助" class="headerlink" title="&#x3D;&#x3D;学会使用帮助&#x3D;&#x3D;"></a>&#x3D;&#x3D;学会使用帮助&#x3D;&#x3D;</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不会的 --help</span><br><span class="line">man 不会的</span><br></pre></td></tr></table></figure><h2 id="Linux忘记密码解决办法"><a href="#Linux忘记密码解决办法" class="headerlink" title="Linux忘记密码解决办法"></a>Linux忘记密码解决办法</h2><ol><li><p>&#x3D;&#x3D;在开机时按下Shift键&#x3D;&#x3D;，进入grub菜单。</p></li><li><p>在grub菜单中选择要启动的CentOS内核版本，&#x3D;&#x3D;并按下”e”键进入编辑模式。edit&#x3D;&#x3D;</p></li><li><p>在编辑模式中，找到以”linux16”开头的行，然后在该行的末尾添加以下内容：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rd.break enforcing=0</span><br></pre></td></tr></table></figure><p>添加完毕后，按下Ctrl+X或F10来启动系统。</p><ol start="4"><li><p>系统启动后，进入emergency mode，并且会挂载根文件系统为只读模式。</p></li><li><p>输入以下命令来重新挂载根文件系统为可写模式：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -o remount,rw /sysroot</span><br></pre></td></tr></table></figure><ol start="6"><li>输入以下命令来切换到chroot环境：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chroot /sysroot</span><br></pre></td></tr></table></figure><ol start="7"><li>输入以下命令来重置密码：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></table></figure><p>其中，”username”为您忘记密码的账户名。</p><ol start="8"><li>输入以下命令来重新生成SELinux策略：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /.autorelabel</span><br></pre></td></tr></table></figure><ol start="9"><li>输入以下命令来退出chroot环境：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><ol start="10"><li>输入以下命令来重新挂载根文件系统为只读模式：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -o remount,ro /sysroot</span><br></pre></td></tr></table></figure><ol start="11"><li>输入以下命令来重启系统：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>系统将会重新启动，并且您可以使用新密码登录您的CentOS Linux系统。请注意，这种方法只适用于您有root权限的情况。如果您没有root权限，您需要联系系统管理员或使用其他方法来重置密码。</p><h2 id="使用命令行学习Linux"><a href="#使用命令行学习Linux" class="headerlink" title="使用命令行学习Linux"></a>使用命令行学习Linux</h2><p>Linux大多使用命令行而不使用图形界面</p><p>&#x3D;&#x3D;命令：本质上就是执行的二进制可执行程序&#x3D;&#x3D;</p><p>优点:快，资源占用少</p><h3 id="FInalShell"><a href="#FInalShell" class="headerlink" title="FInalShell"></a>FInalShell</h3><p><a href="http://www.hostbuf.com/?install_fs">FinalShell官网 (hostbuf.com)</a></p><p>第三方软件操控Linux</p><p>SSH</p><ol><li>在Vmware里输入ifconfig看到我们虚拟机的<a href="#ip">IP</a></li><li><img src="/xu-runbo/post/deb5175a/image-20231012082721816.png" class="" title="image-20231012082721816"></li><li><img src="/xu-runbo/post/deb5175a/image-20231012082956881.png" class="" title="image-20231012082956881"></li><li><img src="/xu-runbo/post/deb5175a/image-20231012083019511.png" class="" title="image-20231012083019511"></li><li><img src="/xu-runbo/post/deb5175a/image-20231012083238491.png" class="" title="image-20231012083238491"></li></ol><p>验证是否连接，二者都输入ls，结果一样！</p><img src="/xu-runbo/post/deb5175a/image-20231012083517172.png" class="" title="image-20231012083517172"><h3 id="虚拟机快照（后悔药）"><a href="#虚拟机快照（后悔药）" class="headerlink" title="&#x3D;&#x3D;虚拟机快照（后悔药）&#x3D;&#x3D;"></a>&#x3D;&#x3D;虚拟机快照（后悔药）&#x3D;&#x3D;</h3><p>通过将当前的虚拟机的状态保存下来，在以后开源通过快照回复虚拟机到保存的状态。</p><p>&#x3D;&#x3D;推荐在关机状态下进行快照&#x3D;&#x3D;</p><p>make: </p><ol><li>在Vmware里右键我们的虚拟机，快照管理器，然后</li><li><img src="/xu-runbo/post/deb5175a/image-20231012083830514.png" class="" title="image-20231012083830514"></li><li>转到拍照，然后转到想去的状态。</li></ol><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><ol><li><p>没有盘符，&#x3D;&#x3D;只有一个跟目录 &#x2F; 所有的文件都在它下面&#x3D;&#x3D;，windows可以由多个顶级目录CDE<img src="/xu-runbo/post/deb5175a/image-20231012084249798.png" class="" title="image-20231012084249798"></p></li><li><p>&#x3D;&#x3D;在Linux里路径的层级关系用   &#x2F;  表示&#x3D;&#x3D;，在window里用   \   表示</p><blockquote><p>形象记忆：windows的w的第一笔画</p><p>Linux右边重变成了&#x2F;-</p></blockquote><p>&#x2F;home&#x2F;xurunbo</p></li><li><p>永远以&#x2F;开始，&#x2F;有两种含义</p><ol><li>根目录</li><li>层次关系</li></ol></li></ol><img src="/xu-runbo/post/deb5175a/image-20231012084523777.png" class="" title="image-20231012084523777"><blockquote><ol><li>&#x2F;test&#x2F;hello.txt</li><li>&#x2F;itheima.txt</li><li>&#x2F;itcast&#x2F;itheima&#x2F;hello.txt</li></ol></blockquote><h2 id="★★★Linux命令入门"><a href="#★★★Linux命令入门" class="headerlink" title="★★★Linux命令入门"></a>★★★Linux命令入门</h2><h3 id="Linux命令基础"><a href="#Linux命令基础" class="headerlink" title="Linux命令基础"></a>Linux命令基础</h3><blockquote><ol><li>什么是命令？</li><li>命令的基本格式？</li></ol></blockquote><p>命令行：Linux的终端，用纯字符的形式操作系统，用各种命令去操作操作系统</p><p>给命令，它给我们字符化反馈</p><p>基础格式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command [-options] [parametet]</span><br></pre></td></tr></table></figure><p><strong>command: 命令本身</strong></p><p><strong>-options：可选的一些选项，控制命令的行为细节</strong></p><p><strong>parameter：命令的参数，多数用于命令的指向目标等</strong></p><p>&#x3D;&#x3D;命令，选项，参数&#x3D;&#x3D;</p><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><h4 id="ls命令简介"><a href="#ls命令简介" class="headerlink" title="ls命令简介"></a>ls命令简介</h4><blockquote><p>ls作用？</p><p>当前工作目录？</p><p>HOME目录？</p><p>如何形象记忆？</p></blockquote><p>function：列出目录下的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls [-a -l -h] [linux路径]</span><br></pre></td></tr></table></figure><p>默认情况下ls得到使当前&#x3D;&#x3D;工作目录&#x3D;&#x3D;下的内容（当前路径）</p><img src="/xu-runbo/post/deb5175a/image-20231012085808165.png" class="" title="image-20231012085808165"><p>&#x3D;&#x3D;当前登录用户的HOME目录作为工作目录，每一个用后都有这个HOME&#x3D;&#x3D;</p><p>ls和ls &#x2F;home&#x2F;xurunbo是等价的</p><img src="/xu-runbo/post/deb5175a/image-20231012085639894.png" class="" title="image-20231012085639894"><p>HOME目录：每一个用户在Linux系统的专属目录&#x2F;home&#x2F;用户</p><h4 id="ls的参数和选项"><a href="#ls的参数和选项" class="headerlink" title="ls的参数和选项"></a>ls的参数和选项</h4><blockquote><p>-a？</p><p>-l？</p><p>-h？</p></blockquote><ol><li><p>-a是all的意思,[&#x3D;&#x3D;可以看到隐藏的文件&#x2F;文件夹&#x3D;&#x3D;]</p><img src="/xu-runbo/post/deb5175a/image-20231012090306999.png" class="" title="image-20231012090306999"></li><li><p><strong>-l是list的意思，&#x3D;&#x3D;以列表的形式表示&#x3D;&#x3D;，并展示更多的信息，创建时间</strong></p><img src="/xu-runbo/post/deb5175a/image-20231012090514715.png" class="" title="image-20231012090514715"><blockquote><p>二者的混合使用，既可以看到隐藏的东西，又以list的形式看、</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -a -l /</span><br><span class="line">ls -al /</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231012090706425.png" class="" title="image-20231012090706425"></blockquote></li><li><p>&#x3D;&#x3D;-h和-l一般一起出现，显示文件的大小信息&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231012090943537.png" class="" title="image-20231012090943537"></li></ol><p>总结ls -alh一气呵成</p><p>list:动词，列出</p><h3 id="cd-pwd命令"><a href="#cd-pwd命令" class="headerlink" title="cd-pwd命令"></a>cd-pwd命令</h3><h4 id="cd切换工作目录"><a href="#cd切换工作目录" class="headerlink" title="cd切换工作目录"></a>cd切换工作目录</h4><blockquote><p>cd如何切换工作目录？</p><p>cd命令格式？有选项吗？</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd [Linux路径]</span><br></pre></td></tr></table></figure><p>默认我们是在当前用户的工作目录如果想切换该怎么办呢?</p><img src="/xu-runbo/post/deb5175a/image-20231012091917969.png" class="" title="image-20231012091917969"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 空格</span><br></pre></td></tr></table></figure><p>回到我们当前用户的工作目录也就是&#x2F;home&#x2F;xurunbo</p><h4 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h4><blockquote><p>pwd命令的作用？</p><p>pwd命令格式？有选项和参数吗？</p><p>pwd如何记忆？</p></blockquote><p>function：&#x3D;&#x3D;查看当前的目录&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;没有选项和参数&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231012092525570.png" class="" title="image-20231012092525570"><p>pwd：”Print Working Directory”打印工作中(当前)的目录</p><h3 id="相对-绝对路径，和特殊路径符"><a href="#相对-绝对路径，和特殊路径符" class="headerlink" title="相对&#x2F;绝对路径，和特殊路径符"></a>相对&#x2F;绝对路径，和特殊路径符</h3><blockquote><p>相对和绝对路径的概念和写法？</p><p>掌握几种特殊的路径写法？</p><p>当前，上一级如何写？</p></blockquote><p>绝对目录：&#x3D;&#x3D;以 根目录&#x2F; 为起点找到目标文件&#x3D;&#x3D;，路径以&#x2F;开头</p><p>相对路径：&#x3D;&#x3D;从当前目录为起点&#x3D;&#x3D;，找目标文件</p><img src="/xu-runbo/post/deb5175a/image-20231012093317268.png" class="" title="image-20231012093317268"><p>前面的 ~代表当前的工作目录&#x2F;home&#x2F;xurunbo</p><p>&#x2F; 代表根目录</p><p>文件夹名字 代表在这个文件夹下</p><p>特殊路径符</p><blockquote><ol><li>.      表示当前目录</li><li>..           上一级 cd ..</li><li>~       Home目录   &#x3D;&#x3D;&#x2F;home&#x2F;xurunbo  cd</li></ol></blockquote><img src="/xu-runbo/post/deb5175a/image-20231012143222052.png" class="" title="image-20231012143222052"><p>&#x3D;&#x3D;相对路径方便&#x3D;&#x3D;</p><p>例题<img src="/xu-runbo/post/deb5175a/image-20231012143648199.png" class="" title="image-20231012143648199"></p><h3 id="mkdir命令-p"><a href="#mkdir命令-p" class="headerlink" title="mkdir命令 -p"></a>mkdir命令 -p</h3><blockquote><ol><li>mkdir是干什么的？</li><li>如何使用？</li><li>如何记忆-p mkdir？</li><li>什么是权限问题？</li></ol></blockquote><p>function：创建新的目录（文件夹）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir [-p] Linux路径</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;-p表示自动创建不存在的父目录，用于创建连续多层级的目录&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231012145501451.png" class="" title="image-20231012145501451"><img src="/xu-runbo/post/deb5175a/image-20231012145634285.png" class="" title="image-20231012145634285"><p>问题引入；</p><ol><li>创建连续的文件，或者说嵌套的。就无法成功</li><li>需要加-p来完成</li></ol><img src="/xu-runbo/post/deb5175a/image-20231012145949680.png" class="" title="image-20231012145949680"><p>将其理解为 “parents”（父级目录）的缩写。通过使用 <code>-p</code> 参数，<code>mkdir</code> 命令会&#x3D;&#x3D;自动创建指定路径上的所有父级目录，而不需要手动逐级创建。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;注意权限问题，当我们出了home去操作就无法成功了&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231012150451823.png" class="" title="image-20231012150451823"><h3 id="touch-cat-more命令"><a href="#touch-cat-more命令" class="headerlink" title="touch-cat-more命令"></a>touch-cat-more命令</h3><blockquote><ol><li>touch是干嘛的？有选项吗？</li><li>cat是干嘛的？有选项吗？</li><li>more是干嘛的？有选项吗？</li></ol></blockquote><h4 id="touch命令-创文件"><a href="#touch命令-创文件" class="headerlink" title="touch命令(创文件)"></a>touch命令(创文件)</h4><blockquote><ol><li>如何使用touch创建文件？</li><li>语法格式？</li><li>如何记忆？</li><li>有选项吗？</li></ol></blockquote><p>function：创建文件.txt………….</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch Linux路径</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231012151027144.png" class="" title="image-20231012151027144"><p>ls -h前缀是d的是文件夹，是-的代表文件</p><img src="/xu-runbo/post/deb5175a/image-20231012151135053.png" class="" title="image-20231012151135053"><p>理解为 “touch”（触摸）文件的意思。通过使用 <code>touch</code> 命令，你可以 “触摸” 文件，即创建一个新的空文件或者更新文件的时间戳，而不改变文件的内容。</p><h4 id="cat命令-查看文件"><a href="#cat命令-查看文件" class="headerlink" title="&#x3D;&#x3D;cat命令(查看文件)&#x3D;&#x3D;"></a>&#x3D;&#x3D;cat命令(查看文件)&#x3D;&#x3D;</h4><blockquote><p>如何使用cat查看文件内容？</p><p>如何记忆？</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat Linux路径</span><br></pre></td></tr></table></figure><p><code>cat</code> 命令是用来查看文件内容的命令。它的名字 “cat” 是 “concatenate”（连接）的缩写。通过使用 <code>cat</code> 命令，你可以将一个或多个文件的内容连接起来，并将结果输出到标准输出（通常是终端）。</p><img src="/xu-runbo/post/deb5175a/image-20231012151618958.png" class="" title="image-20231012151618958"><h4 id="more命令-翻页查看文件"><a href="#more命令-翻页查看文件" class="headerlink" title="&#x3D;&#x3D;more命令(翻页查看文件)&#x3D;&#x3D;"></a>&#x3D;&#x3D;more命令(翻页查看文件)&#x3D;&#x3D;</h4><blockquote><ol><li>和cat的区别？</li><li>语法使用？</li><li>如何往下加载？如何退出？</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more Linux路径</span><br></pre></td></tr></table></figure><p>cat是显示全部内容</p><p>more可以像电子书一样看一页一页，空格或者回车往下翻</p><p>q退出</p><img src="/xu-runbo/post/deb5175a/image-20231012152539129.png" class="" title="image-20231012152539129"><h3 id="cp-mv-rm命令"><a href="#cp-mv-rm命令" class="headerlink" title="cp-mv-rm命令"></a>cp-mv-rm命令</h3><blockquote><ol><li>cp是干嘛的？</li></ol></blockquote><h4 id="cp命令-复制-r"><a href="#cp命令-复制-r" class="headerlink" title="cp命令(复制)  -r"></a>cp命令(复制)  -r</h4><blockquote><ol><li>语法格式？</li><li>作用？</li><li>如何记忆-r参数？</li></ol></blockquote><p>function：复制文件夹使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp [-r] 参数1 参数2</span><br><span class="line">参数以是别人的作业，参数2是抄到哪里？target</span><br></pre></td></tr></table></figure><p>如果目标不存在就创建并copy</p><img src="/xu-runbo/post/deb5175a/image-20231012154116623.png" class="" title="image-20231012154116623"><p>&#x3D;&#x3D;-r：代表当复制文件夹的时候递归！&#x3D;&#x3D;recursively（递归地）</p><img src="/xu-runbo/post/deb5175a/image-20231012155229635.png" class="" title="image-20231012155229635"><h4 id="mv命令-移动文件"><a href="#mv命令-移动文件" class="headerlink" title="mv命令(移动文件)"></a>mv命令(移动文件)</h4><blockquote><ol><li>语法格式？</li><li>有选项吗？</li><li>改名效果是什么？》</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv 参数1 参数2</span><br></pre></td></tr></table></figure><p>参数一是原来的位置，参数二是新的位置</p><p>&#x3D;&#x3D;参数二是否存在的影响&#x3D;&#x3D;</p><p>移动文件</p><img src="/xu-runbo/post/deb5175a/image-20231012160135950.png" class="" title="image-20231012160135950"><p>改名效果</p><img src="/xu-runbo/post/deb5175a/image-20231012160217768.png" class="" title="image-20231012160217768"><p>移动文件夹</p><img src="/xu-runbo/post/deb5175a/image-20231012155848997.png" class="" title="image-20231012155848997"><p>改名效果“当在同一个路径下移动且    目标不存在，也就是参数二不存在的时候就是改名效果</p><img src="/xu-runbo/post/deb5175a/image-20231012155810579.png" class="" title="image-20231012155810579"><h4 id="rm命令-删除文件-r-f"><a href="#rm命令-删除文件-r-f" class="headerlink" title="&#x3D;&#x3D;rm命令(删除文件)&#x3D;&#x3D; -r -f"></a>&#x3D;&#x3D;rm命令(删除文件)&#x3D;&#x3D; -r -f</h4><blockquote><ol><li>语法格式？</li><li>参数 -r -f作用？记忆方式？</li><li>r是recursively</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm [-r -f] 参数1 参数2 参数3 参数4。。。。。。。。。。。。。。。参数n</span><br></pre></td></tr></table></figure><p>参数是被删除的文件</p><p>-r用于删除文件夹</p><p>-f是force是强制删除 而且一般用户的强力删除是没有确认信息的，root跟用户的删除有提示。</p><p>删除文件：</p><img src="/xu-runbo/post/deb5175a/image-20231012160707983.png" class="" title="image-20231012160707983"><p>删除文件夹&#x3D;&#x3D;-r也相当于递归recursively&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231012160747453.png" class="" title="image-20231012160747453"><p>删除多个&#x3D;&#x3D;追加多个参数就好了&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231012161125487.png" class="" title="image-20231012161125487"><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p>rm命令支持通配符*用来模糊匹配</p><p>*可以匹配任意内容包括空</p><p>test*表示匹配任何以test结尾的内容</p><p>*test表示匹配任何以test开头的内容</p><p>*test表示匹配任何包含test的内容</p><img src="/xu-runbo/post/deb5175a/image-20231012162335928.png" class="" title="image-20231012162335928"><p>-f（提示给超级用户看的，当你不强力删除的时候）</p><img src="/xu-runbo/post/deb5175a/image-20231012163555047.png" class="" title="image-20231012163555047"><p>超级用户的登录 </p><blockquote><ol><li><pre><code>su - rootsu -输入密码进入了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 想退出了直接exit</span><br><span class="line"></span><br><span class="line">3. 删库跑路牢饭管饱</span><br><span class="line"></span><br><span class="line">   rm -rf /*</span><br><span class="line"></span><br><span class="line">   强制删除根目录下的所有文件</span><br><span class="line"></span><br><span class="line">### which-find命令</span><br><span class="line"></span><br><span class="line">1. which如何使用</span><br><span class="line">2. find如何使用？</span><br><span class="line"></span><br><span class="line">#### which(查找命令)</span><br><span class="line"></span><br><span class="line">==命令cd，ls[其实本质就是二进制的可执行程序](#环境变量)==</span><br><span class="line"></span><br><span class="line">1. 语法格式？</span><br><span class="line">2. 查找什么的？</span><br><span class="line"></span><br><span class="line">function找命令的位置</span><br><span class="line"></span><br></pre></td></tr></table></figure>which 要查找的命令</code></pre></li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### find(查找文件)</span><br><span class="line"></span><br><span class="line">==按照文件名==查找</span><br><span class="line"></span><br><span class="line">1. ==(-name)按照文件名查找==</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   find 起始路径 -name 所查找的文件名<br>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   在使用 `find` 命令时， `-name` 选项用于指定要查找的文件名。</span><br><span class="line"></span><br><span class="line">   ==如果文件名中不含有空格或其他特殊字符==，则不加双引号和加双引号的效果是相同的。</span><br><span class="line"></span><br><span class="line">   所以最好还是带上</span><br><span class="line"></span><br><span class="line">2. 全盘搜索(/)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>   find &#x2F; -name “test”<br>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 配合通配符查找</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>    find &#x2F; -name “test*”<br>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">==按照文件大小查找==</span><br><span class="line"></span><br><span class="line">1. (-size)按照问年间大小查找</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>   find 起始路径 -size +|-n[kMG]<br>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   -size通过文件大小查找，+|-代表大于和小于，n代表大小数字，kMG分别代表kB，MB，GB</span><br><span class="line"></span><br><span class="line">2. ```</span><br><span class="line">   find / -size +10k</span><br><span class="line">   find / -size 10k找的是size=10kb的</span><br><span class="line">   小写k</span><br><span class="line">   find / -size +10M</span><br><span class="line">   find / -size +10G</span><br></pre></td></tr></table></figure></p><h3 id="grep-wc-管道符"><a href="#grep-wc-管道符" class="headerlink" title="grep-wc-管道符"></a>grep-wc-管道符</h3><blockquote><ol><li>如何用grep命令过滤文件内容？</li><li>如何用wc命令统计内容数量?</li><li>管道符是什么？如何使用？</li></ol></blockquote><h4 id="grep命令-过滤文件行-n"><a href="#grep命令-过滤文件行-n" class="headerlink" title="grep命令(过滤文件行)-n"></a>grep命令(过滤文件行)-n</h4><blockquote><p>如何使用和记忆？</p><p>&#x3D;&#x3D;可以作为输入端口?&#x3D;&#x3D;</p></blockquote><p>function:从文件中通过指定关键字过滤文件行，哪一行包含关键字就被过滤出来了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep [-n] &quot;关键字&quot; Linux文件路径(可以作为内容的输入端口)</span><br></pre></td></tr></table></figure><p>关键字中不带空格和特殊符号的时候加不加“”都是ok的</p><p>&#x3D;&#x3D;推荐加””这个习惯&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231013100905987.png" class="" title="image-20231013100905987"><p>只要行中包含这个关键字就被过滤出来了</p><img src="/xu-runbo/post/deb5175a/image-20231013103729927.png" class="" title="image-20231013103729927"><p>“g”、“r”、“e”、“p”，然后为每个字母找到一个关键词。例如，“g”可以代表“global”（全局），“r”可以代表“regular”（正则表达式），“e”可以代表“expression”（表达式），“p”可以代表“pattern”（模式）。这样，你可以将grep命令记忆为“全局正则表达式模式”。</p><p>&#x3D;&#x3D;可以作为内容的输入端口)&#x3D;&#x3D;</p><p>和管道符配合使用</p><img src="/xu-runbo/post/deb5175a/image-20231013103014377.png" class="" title="image-20231013103014377"><h4 id="wc命令-文件内容统计-★★★★★"><a href="#wc命令-文件内容统计-★★★★★" class="headerlink" title="wc命令(文件内容统计)★★★★★"></a>wc命令(文件内容统计)★★★★★</h4><blockquote><p>如何使用和记忆？</p><p>也可以</p></blockquote><p>function：统计文件内容的信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wc [-c|-w|-l-m] Linux文件路径</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;字节数是代表的大小，字符数代表的是字母个数，&#x3D;&#x3D;</p><p> -c, –bytes            print the byte counts<br>  -m, –chars            print the character counts<br>  -l, –lines            print the newline counts</p><p> -L, –max-line-length 显示最长行的长度</p><p> -w, –words                   显示单词计数</p><img src="/xu-runbo/post/deb5175a/image-20231013102459475.png" class="" title="image-20231013102459475"><p>&#x3D;&#x3D;默认是得到，行数，单词数，字节数.&#x3D;&#x3D;</p><p>w是word    c是character，统计单词字符的</p><h4 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h4><p>&#x3D;&#x3D;|&#x3D;&#x3D;</p><p>左边|右边</p><p>左边 | 右边</p><p>都是ok的</p><p>&#x3D;&#x3D;将左边命令得到的结果作为右边命令的输入&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231013103022475.png" class="" title="image-20231013103022475"><img src="/xu-runbo/post/deb5175a/image-20231013103156900.png" class="" title="image-20231013103156900"><p>只要能产生内容输入的命令都可以和管道符配合使用</p><p>&#x3D;&#x3D;Linux文件路径(可以作为内容的输入端口)&#x3D;&#x3D;</p><p>嵌套使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat test.txt | grep -n &quot;ok&quot; | wc -l</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231013104048797.png" class="" title="image-20231013104048797"><img src="/xu-runbo/post/deb5175a/image-20231013104341314.png" class="" title="image-20231013104341314"><img src="/xu-runbo/post/deb5175a/image-20231013104659495.png" class="" title="image-20231013104659495"><h3 id="echo-tali命令-重定向符号"><a href="#echo-tali命令-重定向符号" class="headerlink" title="echo-tali命令-重定向符号"></a>echo-tali命令-重定向符号</h3><blockquote><ol><li>echo如何使用？</li><li>tail如何使用？</li><li>什么是重定向符号?</li><li>加不加”” 有区别吗？</li></ol></blockquote><h4 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h4><blockquote><p>echo是干什么的如何使用？</p></blockquote><p>function:打印语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;要输出的内容&quot;</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;内容比较复制的时候加上””更好&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;hello world&quot;</span><br><span class="line">echo hello world</span><br><span class="line">虽然二者都一样但是后者容易误解为参数</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231013133029898.png" class="" title="image-20231013133029898"><h4 id="反引号-模板字符"><a href="#反引号-模板字符" class="headerlink" title="反引号&#96;&#96;(模板字符)"></a>反引号&#96;&#96;(模板字符)</h4><blockquote><p>类似python的模板字符串</p></blockquote><p>function :当我们想echo输出命令的内容的时候而不是输出命令的文本</p><img src="/xu-runbo/post/deb5175a/image-20231013133447412.png" class="" title="image-20231013133447412"><h4 id="重定向-和-写入"><a href="#重定向-和-写入" class="headerlink" title="重定向&gt;和&gt;&gt;(写入)"></a>重定向&gt;和&gt;&gt;(写入)</h4><blockquote><p>如何使用？区分&gt; 和 &gt;&gt;</p></blockquote><p>function:向文件写入内容，修改内容</p><p>&gt; 的时候会覆盖掉原来的内容</p><img src="/xu-runbo/post/deb5175a/image-20231013134014901.png" class="" title="image-20231013134014901"><p>&gt;&gt;的时候会追加在原来的内容的后面</p><img src="/xu-runbo/post/deb5175a/image-20231013134054540.png" class="" title="image-20231013134054540"><p>&#x3D;&#x3D;只要是能产生输出的命令都可以作为&gt;和&gt;&gt;的左值&#x3D;&#x3D;</p><h4 id="tail命令-查看尾-f-num"><a href="#tail命令-查看尾-f-num" class="headerlink" title="tail命令(查看尾) -f -num"></a>tail命令(查看尾) -f -num</h4><blockquote><p>如何使用？</p><p>两个参数都代表什么意思？</p><p>num是简单的-num吗还是-一个确实的参数？</p></blockquote><p>&#x3D;&#x3D;(持续)function:查看一个文件的尾巴的倒数num行数据&#x3D;&#x3D;</p><p><code>tail -num text.txt</code></p><p>num要写一个实际的数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -20 text.txt</span><br><span class="line">而不是</span><br><span class="line">tail -num text.txt</span><br></pre></td></tr></table></figure><p>默认是看倒数10条数据</p><img src="/xu-runbo/post/deb5175a/image-20231013134921569.png" class="" title="image-20231013134921569"><p>&#x3D;&#x3D;-f监听开始&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231013135204101.png" class="" title="image-20231013135204101"><p>就可以实时看新的信息了</p><p>&#x3D;&#x3D;开始监听和指定倒数多少行已经没意义了&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -f Linux路径</span><br></pre></td></tr></table></figure><p>想要退出就CTRL+C</p><h3 id="VI编辑器"><a href="#VI编辑器" class="headerlink" title="VI编辑器"></a>VI编辑器</h3><img src="/xu-runbo/post/deb5175a/image-20231014094248596.png" class="" title="image-20231014094248596"><blockquote><ol><li><p>&#x3D;&#x3D;命令模式&#x3D;&#x3D;</p><p>所敲的案件编译器都理解为命令，驱动执行不同的功能，不能自由的编辑文本</p></li><li><p>&#x3D;&#x3D;输入模式&#x3D;&#x3D;</p><p>也就是所谓的编辑模式，可以自由的文本便辑</p></li><li><p>&#x3D;&#x3D;底线命令模式&#x3D;&#x3D;</p><p>以：开始，通常用于文件的保存，退出</p></li></ol></blockquote><p>vim&#x3D;vi++</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi Linux文件路径</span><br><span class="line">vim Linux文件路径</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;如果文件路径表示文件就用于编辑已有文件&#x3D;&#x3D;</p><p>&#x3D;&#x3D;如果文件路径的文件不存在吗就用于编辑新文件&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231014094922363.png" class="" title="image-20231014094922363"><blockquote><ol><li><p>默认进入的是命令模式</p><ol><li>i，进入输入模式。ESC回到命令模式</li><li>在命令模式下，输入dd删除一行的内容，u是撤销CTRL是反向撤销</li></ol></li><li><p>输入:进入底线命令模式</p><p>wq：保存并退出</p><p>w是写入并保存，但是不退出</p><p>q单独退出，不保存</p><p>输入wq再按下enter</p></li><li><p>默认情况下修改了内容但是不保存想直接退出，是会提示的</p><img src="/xu-runbo/post/deb5175a/image-20231014095737998.png" class="" title="image-20231014095737998"><p>&#x3D;&#x3D;强制退出!q&#x3D;&#x3D;</p><p>命令模式下的快捷键</p><img src="/xu-runbo/post/deb5175a/image-20231014095912732.png" class="" title="image-20231014095912732"><img src="/xu-runbo/post/deb5175a/image-20231014100056356.png" class="" title="image-20231014100056356"><img src="/xu-runbo/post/deb5175a/image-20231014100419393.png" class="" title="image-20231014100419393"><p>gg,G</p><p>dgg,dG</p><p>删除的包含当前行</p><p>底线命令模式下:</p><img src="/xu-runbo/post/deb5175a/image-20231014101814961.png" class="" title="image-20231014101814961"><p>set paste用于保证i输入的时候粘贴的内容不会错乱</p></li></ol></blockquote><h3 id="Linux的root用户"><a href="#Linux的root用户" class="headerlink" title="Linux的root用户"></a>Linux的root用户</h3><p>windows和mac，Linux都是采用多用户的管理模式进行权限管理</p><p>root用户有最大的系统从操作权限</p><p>也就是有的手机root是干嘛的了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su - root</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;su————-S(switch)—-W(which)&#x3D;&#x3D;</p><h3 id="选择用户"><a href="#选择用户" class="headerlink" title="&#x3D;&#x3D;选择用户&#x3D;&#x3D;"></a>&#x3D;&#x3D;选择用户&#x3D;&#x3D;</h3><p>进入root用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su [-] 用户名</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;-可选，表示是否在切换环境后是否加载环境变量&#x3D;&#x3D;</p><p>&#x3D;&#x3D;想要退出当前用户，就用exit或者CTRL+D&#x3D;&#x3D;</p><p>》》》》</p><blockquote><p>一般情况下，普通用户在home内权限是不受限制的</p><p>但是出来home大多数都只有制度和执行权限，没有修改权限</p></blockquote><img src="/xu-runbo/post/deb5175a/image-20231014103123239.png" class="" title="image-20231014103123239"><h3 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h3><blockquote><p>是干什么的？</p><p>每个用户都可以随便使用sudo吗？</p><p>如何给用户添加认证?</p><p>有了sudo认证的普通用户可以方便的进入root吗？如何输？</p></blockquote><p>普通用户出了home就很弱鸡了</p><img src="/xu-runbo/post/deb5175a/image-20231014103753012.png" class="" title="image-20231014103753012"><p>因为sudo是给普通用户的当前命令添加临时的root权限</p><p>但是也不是随便每个用户都可以随便使用sudo的，得有root的认证</p><p>如何认证呢？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入root里面</span><br><span class="line">visudo</span><br><span class="line">命令模式下输入G到最下面</span><br><span class="line">用户名 ALL=(ALL)NOPASSWD: ALL</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><p>就实现了给用户名添加了sudu认证</p><p>&#x3D;&#x3D;当一个用户有了sudu认证之后，也就是说有了root的钥匙 了，也可以进入root的家&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo su -</span><br><span class="line">就进入了root的家</span><br></pre></td></tr></table></figure><h3 id="用户-用户组"><a href="#用户-用户组" class="headerlink" title="用户&amp;用户组"></a>用户&amp;用户组</h3><blockquote><ol><li>用户和用户组和root的关系</li><li>如何创建和删除组？</li><li>普通用户可以创建组吗？</li><li>&#x3D;&#x3D;Linux权限管控的单元式用户级别和用户组级别&#x3D;&#x3D;</li></ol></blockquote><p>Linux：可以配置多个用户</p><p>​可以配置多个用户组</p><p>用户可以加入到多个用户组中</p><img src="/xu-runbo/post/deb5175a/image-20231014170328423.png" class="" title="image-20231014170328423"><blockquote><p>创建用户组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd 用户组名</span><br></pre></td></tr></table></figure><p>删除用户组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupdel 用户组名</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;二者必须在root用户执行&#x3D;&#x3D;</p></blockquote><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><blockquote><p>有了用户组后，如何创建用户？</p><p>如何删除用户呢？</p><p>如何查看用户是哪一个组的呢？</p><p>如何修改用户的组呢？</p><p>如何形象记忆-g和-d和-r呢</p></blockquote><p>&#x3D;&#x3D;都得在root下或者sudo执行&#x3D;&#x3D;</p><ol><li><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd [-g -d] 用户名</span><br></pre></td></tr></table></figure><p>-g是用来指定用户的组的，如果没有那就是默认创建一个用户名的组并且加入一个用户。</p><p>-d是用来指定用户home路径，默认是在&#x2F;home&#x2F;用户的</p><blockquote><p>默认创建</p><img src="/xu-runbo/post/deb5175a/image-20231014171615773.png" class="" title="image-20231014171615773"><p>使用-g指定用户的组和使用-d指定用户的home路径</p><img src="/xu-runbo/post/deb5175a/image-20231014171913140.png" class="" title="image-20231014171913140"><p>&#x3D;&#x3D;-g（group组指定用户的组的）&#x3D;&#x3D;</p><p>&#x3D;&#x3D;-d（directory目录指定用户的home路径）&#x3D;&#x3D;</p></blockquote></li><li><p>删除用户</p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userdel 用户名</span><br></pre></td></tr></table></figure><p>这样是删除了这个用户，但是没有删除用户在home目录</p><img src="/xu-runbo/post/deb5175a/image-20231014173230467.png" class="" title="image-20231014173230467"><p>删除彻底</p><img src="/xu-runbo/post/deb5175a/image-20231014173344580.png" class="" title="image-20231014173344580">==-r就是recursively删除一个目录（文件夹)就得迭代！==</blockquote></li><li><p>查看用户所属的组</p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id 用户名</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231014173729362.png" class="" title="image-20231014173729362"><p>得到用户名，用户的所属组</p></blockquote></li><li><p>修改用户所属的组</p><p>-a 是add添加到G的组下面</p><p>&#x3D;&#x3D;原来的还在那个组里面，一个用户可以在多个组&#x3D;&#x3D;<a href="https://blog.csdn.net/wushibo123/article/details/124619123">【2023最新版】Hexo+github搭建个人博客并绑定个人域名_hexo部署github绑定自定义域名-CSDN博客</a></p><p>-G也就是group咯</p><p>这个顺序没必要记忆用-h查看帮助文档</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod -aG 新的组 要被修改的用户名</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231014180447738.png" class="" title="image-20231014180447738"></li><li><p>查看所有用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231014175019972.png" class="" title="image-20231014175019972"></li><li><p>查看所有的组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /etc/group</span><br></pre></td></tr></table></figure></li></ol><img src="/xu-runbo/post/deb5175a/image-20231014180647822.png" class="" title="image-20231014180647822"><p><strong>查看组和用户的另一种方法</strong></p><blockquote><p>查看组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getent group</span><br><span class="line">等价于</span><br><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure><p>查看用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getent passwd</span><br><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure></blockquote><h3 id="查看Linux权限管控信息"><a href="#查看Linux权限管控信息" class="headerlink" title="查看Linux权限管控信息"></a>查看Linux权限管控信息</h3><blockquote><p>如何查看权限？</p><p>认知权限信息?</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -al</span><br></pre></td></tr></table></figure><ol><li>第一列代表文件&#x2F;目录的权限。</li><li>&#x3D;&#x3D;第二列代表文件&#x2F;目录的硬链接数&#x3D;&#x3D;。</li><li>第三列代表文件&#x2F;目录的所有者。   <strong>&#x3D;&#x3D;所属用户&#x3D;&#x3D;</strong></li><li>第四列代表文件&#x2F;目录的所属组。</li><li>第五列代表文件&#x2F;目录的大小（以字节为单位）。</li><li>第六列代表文件&#x2F;目录的修改日期和时间。</li><li>第七列代表文件&#x2F;目录的名称。</li></ol><blockquote><p>硬链接数是一个重要的属性，它表示有多少个文件名指向同一个文件或目录。</p><p><a href="#%E7%A1%AC%E8%BF%9E%E6%8E%A5&%E5%88%A0%E9%99%A4">当硬链接数为0时，文件或目录被认为是删除的，占用的磁盘空间会被释放。</a></p><p>只有当所有硬链接都被删除时，文件或目录才会真正被删除。</p></blockquote><img src="/xu-runbo/post/deb5175a/image-20231014234949177.png" class="" title="image-20231014234949177"><p>&#x3D;&#x3D;认知权限信息&#x3D;&#x3D;</p><p>分为10个槽位</p><p>x   xyz  xyz xyz</p><p>&#x3D;&#x3D;从左到右，由近到远&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231014235055002.png" class="" title="image-20231014235055002"><p>l:表示是<a href="#%E6%9D%83%E9%99%90l">软连接</a>&#x2F;硬连接</p><p><strong>d:directory表示是一个文件夹</strong></p><p><strong>-:表示是一个文件</strong></p><p>&#x3D;&#x3D;r：读，w：写，x：执行&#x3D;&#x3D;</p><p>x——excute</p><blockquote> <img src="/xu-runbo/post/deb5175a/image-20231014235553291.png" class="" title="image-20231014235553291"></blockquote><h3 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h3><blockquote><p>需要iroot权限吗</p><p>-R是干嘛的</p><p>chmod如何形象记忆？（change）（mode）</p><p>谁都可以修改吗？</p></blockquote><p>&#x3D;&#x3D;需要是root或者文件&#x2F;文件夹的所属用户&#x3D;&#x3D;</p><p>》》》《《《</p><h4 id="所属用户"><a href="#所属用户" class="headerlink" title="所属用户"></a>所属用户</h4><p>所属用户是指创建该文件或文件夹的用户，也就是该文件或文件夹的所有者。每个用户都有一个唯一的用户ID（UID）来标识自己。</p><p>所属用户对文件或文件夹有特定的权限，可以控制对其的访问、修改和执行操作。只有所属用户或具有特定权限的用户才能对文件或文件夹进行操作。</p><p>》》》《《《</p><p>function：修改文件，文件夹的权限信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [-R] 权限 文件或文件夹</span><br></pre></td></tr></table></figure><p><code>权限:u(user)=       ,g(group)=        ,o(other)=   </code></p><p>&#x3D;&#x3D;用，号隔开&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231015120120566.png" class="" title="image-20231015120120566"> <img src="/xu-runbo/post/deb5175a/image-20231015120131004.png" class="" title="image-20231015120131004"> <img src="/xu-runbo/post/deb5175a/image-20231015120158642.png" class="" title="image-20231015120158642"> <img src="/xu-runbo/post/deb5175a/image-20231015120208266.png" class="" title="image-20231015120208266"> <img src="/xu-runbo/post/deb5175a/image-20231015120223520.png" class="" title="image-20231015120223520"> <p>rwx</p><p>-必须出现在最后面</p><p>例如你想要rx</p><p>不能写r-x</p><p>遇到-就停止了</p><img src="/xu-runbo/post/deb5175a/image-20231015120404566.png" class="" title="image-20231015120404566"> <img src="/xu-runbo/post/deb5175a/image-20231015120411744.png" class="" title="image-20231015120411744"> <hr><p>&#x3D;&#x3D;加了-R就可以迭代的修改文件夹里的所有文件&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231015120609960.png" class="" title="image-20231015120609960"> <h3 id="chmodPlus"><a href="#chmodPlus" class="headerlink" title="chmodPlus"></a>chmodPlus</h3><p>&#x3D;&#x3D;RWX:4 2 1&#x3D;&#x3D;</p><p>ugo:x y z</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod xyz [-R] 文件或者文件夹</span><br></pre></td></tr></table></figure><table><thead><tr><th>0</th><th>没有任何权限</th><th>—</th></tr></thead><tbody><tr><td>1</td><td>只有x权限</td><td>–x</td></tr><tr><td>2</td><td>只有w权限</td><td>-w-</td></tr><tr><td>3</td><td>有wx权限</td><td>-wx</td></tr><tr><td>4</td><td>只有r权限</td><td>r–</td></tr><tr><td>5</td><td>有r和x权限</td><td>r-x</td></tr><tr><td>6</td><td>有r和w权限</td><td>rw-</td></tr><tr><td>7</td><td>全都有！</td><td>rwx</td></tr></tbody></table><img src="/xu-runbo/post/deb5175a/image-20231015122645831.png" class="" title="image-20231015122645831"> <p>chmod——-Change Mode</p><h3 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h3><blockquote><p>是干什么的？</p><p>如何使用？</p><p>如何形象记忆？[]:[] 类比ls -l得到的每一列的信息</p><p>谁都可以修改吗？</p></blockquote><p>&#x3D;&#x3D;普通用户是没有办法使用chown的&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231015125500572.png" class="" title="image-20231015125500572"> <p>人家要不要呢？是没有办法强加的。</p><p>function：修改文件或者文件夹的所属用户或者用户组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown [-R] [用户名]:[用户组] 文件或者文件夹的Linux路径</span><br></pre></td></tr></table></figure><p>修改所属用户</p><img src="/xu-runbo/post/deb5175a/image-20231015124306613.png" class="" title="image-20231015124306613"> <img src="/xu-runbo/post/deb5175a/image-20231015124317369.png" class="" title="image-20231015124317369"> <img src="/xu-runbo/post/deb5175a/image-20231015124325153.png" class="" title="image-20231015124325153"> <p>修改用户组</p><img src="/xu-runbo/post/deb5175a/image-20231015124702807.png" class="" title="image-20231015124702807"> <p><strong>&#x3D;&#x3D;-R的修改其子文件都同步修改&#x3D;&#x3D;</strong></p><img src="/xu-runbo/post/deb5175a/image-20231015125105195.png" class="" title="image-20231015125105195"> <h2 id="各类小技巧快捷键CTRL-cdae"><a href="#各类小技巧快捷键CTRL-cdae" class="headerlink" title="各类小技巧快捷键CTRL+cd&lt;–&gt;ae"></a>各类小技巧快捷键CTRL+cd&lt;–&gt;ae</h2><blockquote><p>如何看历史命令？</p><p>强制停止？ CTRL+C</p><p>退出，登出？ CTRL+D</p><p>历史命令搜索的两种方法？!+命令和CTRL+R</p><p>光标移动？</p><p>如何形象记忆CTRL+a和e呢</p></blockquote><ol><li><p>CTRL+C强制停止（程序运行）</p><p>命令写错了直接CTRL+C就是取消掉改行命令了</p></li><li><p>CTRL+D退出，登出，退出账户的登录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python就直接进入python的罕井中了</span><br></pre></td></tr></table></figure><p>CTRL+D可以&#x3D;&#x3D;退出某些特定程序的专属页面&#x3D;&#x3D;</p><p><code>但是不能用于退出VI/VIM</code></p></li><li><p>history 查看我们输入过的</p><img src="/xu-runbo/post/deb5175a/image-20231015215042584.png" class="" title="image-20231015215042584"> <p>序号越大的是最新的</p><p>配合grep和管道符查筛选</p><img src="/xu-runbo/post/deb5175a/image-20231015215114208.png" class="" title="image-20231015215114208"> <blockquote><ol><li><p>!+命令前缀</p><p>!p</p><pre><code>   他会从history的结果从下往上开始找到第一个开始匹配就执行了</code></pre></li></ol><p>&#x3D;&#x3D;历史命令搜索&#x3D;&#x3D;</p><ol start="2"><li><p>CTRL+R</p><img src="/xu-runbo/post/deb5175a/image-20231015215705653.png" class="" title="image-20231015215705653"> <ol><li>按下&lt;-或者-&gt;就可以得到所显示的命令了</li><li>回车直接执行所显示的命令</li></ol></li></ol></blockquote></li><li><p>光标移动CTRL+-&gt;&#x2F;&lt;-</p><blockquote><p>CTRL+&gt;光标向右跳过一个单词</p><p>CTRL+&lt;光标向左跳过一个单词</p><p>上面二者也适用于md文档</p><p>CTRL+a光标跳到开头</p><p>CTRL+e光标跳到结尾</p><p><code>a==（ahead向前）,e==(end末尾)</code></p></blockquote></li><li><p>清屏</p><p><code>clear</code></p><p>或者</p><p>CTRL+L</p><p><strong>&#x3D;&#x3D;l&#x3D;（clean）&#x3D;&#x3D;</strong></p></li></ol><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><blockquote><p>如何使用yum为centos系统安装软件？</p><p>如何使用apt为ubuntu安装软件？</p></blockquote><p>操作系统安装软件的方式</p><ol><li><p>下载安装包自行安装</p><blockquote><p>windows用.exe文件.msi等</p><p>mac用dmg.pkg等</p></blockquote></li><li><p>系统的应用商店内安装</p><blockquote><p>windows的Microsoft Store商店</p><p>Mac的appstore</p></blockquote></li><li><p>&#x3D;&#x3D;Linux系统也同样支持这两种方式&#x3D;&#x3D;</p><blockquote><p><strong><code>centos用yum管理器,ubuntu用apk管理器==</code></strong></p><ol><li><p>用Linux命令行内的&#x3D;&#x3D;“应用商店”&#x3D;&#x3D;—-<strong>yum命令安装软件</strong></p><p><a href="#yum%E5%91%BD%E4%BB%A4">yum命令安装软件</a></p><p><a href="#apt%E4%B8%BAubuntu%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6">apt为ubuntu安装软件</a></p></li><li><p>在Linux中，常见的安装包格式有以下几种：</p><ol><li>DEB包：DEB（Debian）是Debian及其衍生发行版（如Ubuntu、Linux Mint等）使用的安装包格式。DEB包以.deb为扩展名，可以使用dpkg命令进行安装、升级和移除。</li><li>&#x3D;&#x3D;RPM包&#x3D;&#x3D;：RPM（Red Hat Package Manager）是Red Hat及其衍生发行版（如Fedora、CentOS等）使用的安装包格式。RPM包以.rpm为扩展名，可以使用yum或dnf命令进行安装、升级和移除。</li><li>&#x3D;&#x3D;TAR包&#x3D;&#x3D;：TAR（Tape Archive）是一种常见的归档文件格式，在Linux中经常用于打包和压缩文件。TAR包通常以.tar为扩展名，可以使用tar命令进行解压和提取。</li><li>压缩包：常见的压缩包格式如GZ、BZ2、XZ等，通常用于将多个文件或目录进行压缩和归档。这些压缩包可以使用相应的解压命令（如gzip、bzip2、xz等）进行解压缩。</li></ol><p><strong>&#x3D;&#x3D;Linux上的软件包管理系统（如yum、apt等）通常会自动处理软件包的依赖关系，因此安装软件时不需要手动下载和安装依赖的软件包。&#x3D;&#x3D;</strong></p></li></ol></blockquote></li></ol><p>&#x3D;&#x3D;简单总结&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231015224600897.png" class="" title="image-20231015224600897"><hr><h3 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a><a name="yum命令">yum命令</a></h3><blockquote><p>干嘛的？</p><p>如何用？</p><p>yum如何形象记忆》？</p><p>和<a href="#curl-O">curl -O</a>的区别？</p></blockquote><h4 id="yum命令语法和作用"><a href="#yum命令语法和作用" class="headerlink" title="yum命令语法和作用"></a>yum命令语法和作用</h4><p>funtion：RPM<strong>包软件管理器</strong>，用于<strong>自动化安装配置LInux的软件，并可以自动解决依赖问题</strong></p><p><code>yum下载的会默认写入环境变量，并且通常可以用systemctl去操作服务状态</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y [install |remove | search] 软件名称</span><br></pre></td></tr></table></figure><ol><li>install ：安装</li><li>remove :卸载</li><li>search：搜索</li><li>&#x3D;&#x3D;update: 更新&#x3D;&#x3D;</li></ol><hr><ul><li><p>&#x3D;&#x3D;安装软件需要切换到root或者有sudo权限才能正常安装Linux的软件&#x3D;&#x3D;</p></li><li><p>&#x3D;&#x3D;yum需要先联网&#x3D;&#x3D;</p></li></ul><hr><p>（（（（（（（（（（（yum&#x3D;yummy（美味的）<code>操作系统饮用软件</code>））））））））</p><h4 id="install安装一个拓展"><a href="#install安装一个拓展" class="headerlink" title="install安装一个拓展"></a>install安装一个拓展</h4><p>（如果这个过程包含的依赖项也会帮我们安装上）</p><img src="/xu-runbo/post/deb5175a/image-20231015222807876.png" class="" title="image-20231015222807876"> <h4 id="serach查找-“应用商店”-里面是否有这个软件？"><a href="#serach查找-“应用商店”-里面是否有这个软件？" class="headerlink" title="serach查找&#x3D;&#x3D;“应用商店”&#x3D;&#x3D;里面是否有这个软件？"></a>serach查找&#x3D;&#x3D;“应用商店”&#x3D;&#x3D;里面是否有这个软件？</h4><img src="/xu-runbo/post/deb5175a/image-20231015222903089.png" class="" title="image-20231015222903089"><h4 id="remove卸载掉刚刚安装的wget程序"><a href="#remove卸载掉刚刚安装的wget程序" class="headerlink" title="remove卸载掉刚刚安装的wget程序"></a>remove卸载掉刚刚安装的wget程序</h4><img src="/xu-runbo/post/deb5175a/image-20231015223249637.png" class="" title="image-20231015223249637"><img src="/xu-runbo/post/deb5175a/image-20231015223304969.png" class="" title="image-20231015223304969"> <p>验证删除掉了</p><h4 id="update更新我们的软件"><a href="#update更新我们的软件" class="headerlink" title="update更新我们的软件"></a>update更新我们的软件</h4><img src="/xu-runbo/post/deb5175a/image-20231015223413084.png" class="" title="image-20231015223413084"> <h3 id="ubuntu的apt命令（拓展）"><a href="#ubuntu的apt命令（拓展）" class="headerlink" title="ubuntu的apt命令（拓展）"></a><a name="apt为ubuntu安装软件">ubuntu的apt命令（拓展）</a></h3><p>和centos差不多</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk [-y] [install | search | update| remove] 软件名字</span><br></pre></td></tr></table></figure><h2 id="systmctl命令"><a href="#systmctl命令" class="headerlink" title="systmctl命令"></a>systmctl命令</h2><blockquote><p>如何使用systemctl命令控制软件的启动和关闭</p><p>如何形象记忆Systmctl呢</p></blockquote><h4 id="systmctl命令-1"><a href="#systmctl命令-1" class="headerlink" title="systmctl命令"></a><a name="systemctl">systmctl命令</a></h4><p>&#x3D;&#x3D;能够被systemctl管理的软件，一般也称之为<code>服务</code>&#x3D;&#x3D;</p><p>&#x3D;&#x3D;<em><strong>systemctl：：system（系统）ctl（control控制）</strong></em>&#x3D;&#x3D;</p><p>function:管理软件的启动停止，开机自启</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start|stop|restart|status|enable|disable 服务名</span><br></pre></td></tr></table></figure><ul><li>系统内置的服务很多</li><li><ul><li>Networkmanagers</li><li>network</li><li>firewalld</li><li>sshd，ssh服务</li></ul></li></ul><hr><h4 id="statues查看服务"><a href="#statues查看服务" class="headerlink" title="statues查看服务"></a>statues查看服务</h4><img src="/xu-runbo/post/deb5175a/image-20231016134002273.png" class="" title="image-20231016134002273"> <h4 id="stop关闭服务-需要sudo权限"><a href="#stop关闭服务-需要sudo权限" class="headerlink" title="stop关闭服务&#x3D;&#x3D;需要sudo权限&#x3D;&#x3D;"></a>stop关闭服务&#x3D;&#x3D;需要sudo权限&#x3D;&#x3D;</h4><img src="/xu-runbo/post/deb5175a/image-20231016134921469.png" class="" title="image-20231016134921469"> <h4 id="再次启动-需要sudo权限"><a href="#再次启动-需要sudo权限" class="headerlink" title="再次启动&#x3D;&#x3D;需要sudo权限&#x3D;&#x3D;"></a>再次启动&#x3D;&#x3D;需要sudo权限&#x3D;&#x3D;</h4><img src="/xu-runbo/post/deb5175a/image-20231016135053481.png" class="" title="image-20231016135053481"> <h4 id="启动自启动-需要sudo权限"><a href="#启动自启动-需要sudo权限" class="headerlink" title="启动自启动&#x3D;&#x3D;需要sudo权限&#x3D;&#x3D;"></a>启动自启动&#x3D;&#x3D;需要sudo权限&#x3D;&#x3D;</h4><img src="/xu-runbo/post/deb5175a/image-20231016135530338.png" class="" title="image-20231016135530338"><h4 id="关闭自启动-需要sudo权限"><a href="#关闭自启动-需要sudo权限" class="headerlink" title="关闭自启动&#x3D;&#x3D;需要sudo权限&#x3D;&#x3D;"></a>关闭自启动&#x3D;&#x3D;需要sudo权限&#x3D;&#x3D;</h4><img src="/xu-runbo/post/deb5175a/image-20231016135553077.png" class="" title="image-20231016135553077"> <hr><p>很多软件安装完后都会自动集成到systmctl中</p><p>对于哪些不自动集成到systemctl的软件呢？</p><p>&#x3D;&#x3D;软件!&#x3D;服务&#x3D;&#x3D;</p><p>当然我们也可以<a href="#%E6%89%8B%E5%8A%A8%E6%B7%BB%E5%8A%A0">手动（注册）添加</a></p><img src="/xu-runbo/post/deb5175a/image-20231016140008397.png" class="" title="image-20231016140008397"><h2 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h2><blockquote><p>什么是软连接？</p><p>如何使用&#x3D;&#x3D;ln命令&#x3D;&#x3D;创建软连接？</p><p>如何形象记忆ln呢？</p></blockquote><h4 id="软连接ln-s"><a href="#软连接ln-s" class="headerlink" title="软连接ln -s"></a>软连接ln -s</h4><p><strong>function：类似Windows的快捷方式，可以将文件，文件夹链接到其他位置</strong></p><p>软链接，它实际上是一个指向原始文件的符号链接，也就是一个<strong>指针</strong></p><p>&#x3D;&#x3D;<strong>ln：（link）（new）</strong>&#x3D;&#x3D;\</p><p>&#x3D;&#x3D;-s:：：（source）&#x2F;set&#x3D;&#x3D;</p><p><strong><code>指定源文件或目录。软链接是指向源文件或目录的特殊文件</code></strong></p><p>用于更新链接的命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s 参数1 参数2</span><br></pre></td></tr></table></figure><ul><li>-s选项，创建软连接</li><li>参数1是被链接的文件&#x2F;文件夹</li><li>参数2是要链接到哪?</li></ul><hr><h4 id="s为文件-文件夹添加new-link"><a href="#s为文件-文件夹添加new-link" class="headerlink" title="-s为文件&#x2F;文件夹添加new link"></a>-s为文件&#x2F;文件夹添加new link<a name="权限l"></a></h4><img src="/xu-runbo/post/deb5175a/image-20231016142159544.png" class="" title="image-20231016142159544"> <hr>  <img src="/xu-runbo/post/deb5175a/image-20231016143852224.png" class="" title="image-20231016143852224"><img src="/xu-runbo/post/deb5175a/image-20231016143834145.png" class="" title="image-20231016143834145"> <p>&#x3D;&#x3D;不要忘记加-s&#x3D;&#x3D;</p><p>创建一个硬链接。硬链接是指向同一个文件的多个文件名，它们共享同样的数据块。在这个命令中，<code>/etc/yum.conf</code>是源文件，<code>~/yum.conf</code>是目标文件，通过执行这条命令，会在当前用户的主目录下创建一个名为<code>yum.conf</code>的硬链接，指向<code>/etc/yum.conf</code>文件。</p><p>硬链接只能在同一个文件系统中创建，而软链接（使用<code>-s</code>选项）可以跨越不同的文件系统。</p><h4 id="软连接和硬连接的区别"><a href="#软连接和硬连接的区别" class="headerlink" title="软连接和硬连接的区别"></a>软连接和硬连接的区别</h4><blockquote><p>软链接和硬链接都是&#x3D;&#x3D;用于创建文件链接的方式&#x3D;&#x3D;它们有以下区别：</p><ol><li><p>软链接是一个特殊的文件，它指向另一个文件或目录，类似于快捷方式。而&#x3D;&#x3D;硬链接是多个文件名指向同一个文件的不同入口，它们共享同样的数据块。&#x3D;&#x3D;</p></li><li><p><strong>软链接可以跨越不同的文件系统，而硬链接只能在同一个文件系统中创建。</strong></p></li><li><p>软链接可以指向目录，而硬链接只能指向文件。&#x3D;&#x3D;软的更灵活&#x3D;&#x3D;</p></li><li><p>当原始文件被删除时，软链接会失效，而硬链接不会受到影响，因为它们共享同样的数据块。</p><blockquote><p><a name="硬连接&删除">硬连接&amp;删除</a>:</p><p>当一个文件被删除时，实际上是删除了该文件在文件系统中的目录项，也就是该文件的文件名和它的数据块之间的映射关系。</p><p><strong>当原始文件被删除时，物理数据块并没有立即被删除。</strong>实际上，文件系统会在<strong>文件的所有硬链接都被删除后，才会释放该文件占用的物理空间</strong>。这是因为文件系统会维护一个引用计数，记录每个文件的硬链接数量。只有当引用计数为0时，文件系统才会释放对应的数据块。</p><img src="/xu-runbo/post/deb5175a/image-20231016143325664.png" class="" title="image-20231016143325664"> <p>&#x3D;&#x3D;此列就是硬链接数&#x3D;&#x3D;</p><p>即使删除了原始文件，只要还有其他硬链接指向相同的数据块，该数据块就不会被释放。只有当所有硬链接都被删除后，文件系统才会回收相应的物理空间。</p></blockquote></li><li><p>软链接可以使用相对路径或绝对路径创建，而硬链接只能使用相对路径创建。-&gt;&#x3D;&#x3D;相对赢&#x3D;&#x3D;</p></li></ol><p>软链接是一种更加灵活的文件链接方式，而硬链接则更加节省空间，因为多个链接共享同样的数据块。</p></blockquote><h2 id="日期和时区"><a href="#日期和时区" class="headerlink" title="日期和时区"></a>日期和时区</h2><blockquote><p>掌握date命令查看和修改日期时间</p><p>掌握修改Linux系统的时区</p><p>掌握使用ntp进行时间同步和校准</p></blockquote><h4 id="date命令"><a href="#date命令" class="headerlink" title="date命令"></a>date命令</h4><p>function:查看系统的时间</p><p>&#x3D;&#x3D;-d：-d选项用于指定要显示或设置的日期和时间&#x3D;&#x3D;</p><p>&#x3D;&#x3D;-s设置当前系统的时期&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231016222116358.png" class="" title="image-20231016222116358"> <h4 id="d-格式化字符串简单的日期计算"><a href="#d-格式化字符串简单的日期计算" class="headerlink" title="-d+格式化字符串简单的日期计算"></a>-d+格式化字符串简单的日期计算</h4><img src="/xu-runbo/post/deb5175a/image-20231016224521198.png" class="" title="image-20231016224521198"> <blockquote><p>date -d “+x year|month|date|month|hour|second”  +%……………………………..</p><p>&#x3D;&#x3D;显示标志的时间</p></blockquote><h4 id="s-set-设置当前系统的时期和时间"><a href="#s-set-设置当前系统的时期和时间" class="headerlink" title="-s(set)设置当前系统的时期和时间"></a>-s(set)设置当前系统的时期和时间</h4><ul><li>设置系统的日期和时间为指定日期和时间：<code>date -s &quot;2022-01-01 12:00:00&quot;</code></li><li>显示指定日期和时间的格式化输出<code>date -d &quot;2022-01-01 12:00:00&quot; +&quot;%Y-%m-%d %H:%M:%S&quot;</code></li></ul><hr><p>&#x3D;&#x3D;<strong>格式化字符串含有空格等特殊符号的话加上“”</strong>&#x3D;&#x3D;</p><hr><h4 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h4><p>默认是中国UTC东八区</p><p>》》》</p><p>PDT和CST是时区的缩写，分别代表太平洋夏令时（Pacific Daylight Time）和中部标准时间（Central Standard Time）。</p><img src="/xu-runbo/post/deb5175a/image-20231016225115839.png" class="" title="image-20231016225115839"> <h4 id="Network-Time-Protocol-ntp-ntpd自动校准时间"><a href="#Network-Time-Protocol-ntp-ntpd自动校准时间" class="headerlink" title="Network Time Protocol::ntp|ntpd自动校准时间"></a>Network Time Protocol::ntp|ntpd自动校准时间</h4><ol><li><p>用<a href="#yum%E5%91%BD%E4%BB%A4">yum</a>安装npt</p><img src="/xu-runbo/post/deb5175a/image-20231016225657720.png" class="" title="image-20231016225657720"></li><li><p>启动yumd服务</p><img src="/xu-runbo/post/deb5175a/image-20231016230324917.png" class="" title="image-20231016230324917"> </li><li><p>启动yumd的自启动服务</p><p>&#x3D;&#x3D;<strong>当ntpd启动后会定期的帮助我们联网校准系统的时间</strong>&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231016230705240.png" class="" title="image-20231016230705240"></li><li><p>手动校准</p><blockquote><p>ntpdate -u ntp.aliyun.com</p><p>等待5，6S</p><p>就校准好了！还有偏差</p><img src="/xu-runbo/post/deb5175a/image-20231016230957113.png" class="" title="image-20231016230957113"></blockquote></li></ol><h2 id="IP地址主机名"><a href="#IP地址主机名" class="headerlink" title="IP地址主机名"></a><a name="ip">IP</a>地址主机名</h2><h3 id="IP和主机名"><a href="#IP和主机名" class="headerlink" title="IP和主机名"></a>IP和主机名</h3><blockquote><ol><li>什么是IP地址</li><li>什么是主机名</li><li>什么是 &#x3D;&#x3D;域名解析&#x3D;&#x3D;</li></ol></blockquote><h4 id="IPV4和IPV的区别"><a href="#IPV4和IPV的区别" class="headerlink" title="IPV4和IPV的区别"></a>IPV4和IPV的区别</h4><p>IPv4和IPv6是互联网协议（Internet Protocol）的两个版本。</p><ol><li><p>地址空间：&#x3D;&#x3D;IPv4使用32位地址，最多可分配40亿个地址，&#x3D;&#x3D;而I&#x3D;&#x3D;Pv6使用128位地址，可分配的地址数量极其巨大，足以满足未来互联网的需求。&#x3D;&#x3D;</p></li><li><p>地址表示：&#x3D;&#x3D;IPv4地址使用点分十进制表示&#x3D;&#x3D;，如192.168.0.1，而&#x3D;&#x3D;IPv6地址使用冒号分隔的十六进制&#x3D;&#x3D;表示，如2001:0db8:85a3:0000:0000:8a2e:0370:7334。</p><blockquote><p>ipv4:</p><p>a.b.c.d——–192.168.0.1</p><p>a,b,c,d是0-255的数字</p></blockquote></li><li><p>地址配置：IPv4地址通常由网络管理员&#x3D;&#x3D;手动配置或通过动态主机配置协议（DHCP）自动分配&#x3D;&#x3D;，而IPv6地址通常通过无状态地址自动配置（SLAAC）或动态主机配置协议（DHCPv6）自动分配。</p></li><li><p>安全性：IPv6在设计时考虑了安全性，支持IPsec（Internet Protocol Security）协议，可以提供端到端的加密和认证功能。而&#x3D;&#x3D;IPv4需要额外的协议来实现类似的安全性。&#x3D;&#x3D;</p></li><li><p>支持的协议：IPv4支持的协议有限，而IPv6支持更多的协议，如移动IP（Mobile IP）、多播（Multicast）等。</p></li><li><p>网络性能：由于IPv6地址空间更大，IPv6可以减少网络地址转换（NAT）的使用，提高网络性能和连接质量。</p></li></ol><p>总的来说，IPv6相对于IPv4具有更大的地址空间、更好的安全性、更多的协议支持和更好的网络性能，是未来互联网的发展方向。然而，&#x3D;&#x3D;<strong>由于IPv4的广泛应用和设备的兼容性问题，目前IPv4仍然是主要的互联网协议。</strong>&#x3D;&#x3D;</p><h4 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h4><p>&#x3D;&#x3D;因为每一台联网的电脑都会有一个地址，相当于电脑的身份证？&#x3D;&#x3D;</p><blockquote><p>IP地址是互联网中<strong>用于标识设备的一串数字</strong>。可以将其类比为房子的地址</p><p>用来确定设备在网络中的位置和通信的目标。</p></blockquote><p>ipv4:</p><p>a.b.c.d——–192.168.0.1</p><p>a,b,c,d是0-255的数字</p><h4 id="查看虚拟机的IP地址"><a href="#查看虚拟机的IP地址" class="headerlink" title="查看虚拟机的IP地址"></a>查看虚拟机的IP地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231017200700611.png" class="" title="image-20231017200700611"> ens33：主网卡<h4 id="特殊的IP地址"><a href="#特殊的IP地址" class="headerlink" title="特殊的IP地址"></a>特殊的IP地址</h4><p><strong><code>127.0.0.1==本机</code></strong>&#x3D;&#x3D;回环IP&#x3D;&#x3D;</p><p>0.0.0.0</p><ul><li><strong>可以指代本机</strong>，</li><li>确定绑定关系,</li><li>表示所有IP的意思（放行规则设置位0.0.0.表示允许任意IP访问）</li></ul><hr><h4 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h4><p>function：标识一个计算机</p><img src="/xu-runbo/post/deb5175a/image-20231017201035156.png" class="" title="image-20231017201035156"> <h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h4><p>查看主机</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure><p>就显示了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname 新的主机名</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231017201242951.png" class="" title="image-20231017201242951"> <p>重新登录后就可以了</p><img src="/xu-runbo/post/deb5175a/image-20231017201536111.png" class="" title="image-20231017201536111"> <h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p><strong>ip地址记不住，记住域名就ok了</strong></p><p>baidu</p><p><code>IP地址和域名的映射关系</code></p><h4 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h4><img src="/xu-runbo/post/deb5175a/image-20231017202010816.png" class="" title="image-20231017202010816"><blockquote><ol><li><p>先看自己本机是否记录有对应网站的IP地址&#x3D;&#x3D;<strong>首先</strong>&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231017202135278.png" class="" title="image-20231017202135278"></li><li><p>如果没有再联网去DNS服务器找到<a href="http://www.baidu.com的ip地址/">www.baidu.com的IP地址</a></p></li></ol></blockquote><h4 id="自己添加域名映射"><a href="#自己添加域名映射" class="headerlink" title="自己添加域名映射"></a>自己添加域名映射</h4><p>&#x3D;&#x3D;不用IP地址而是用主机名&#x3D;&#x3D;</p><p>因为finalshell是通过Windows访问Linux</p><blockquote><ol><li><p>管理员身份运行记事本</p></li><li><p>打开hosts文件</p><img src="/xu-runbo/post/deb5175a/image-20231017204304997.png" class="" title="image-20231017204304997"> </li><li><p>加上虚拟机的IP地址加上空格和域名</p></li><li><img src="/xu-runbo/post/deb5175a/image-20231017204239375.png" class="" title="image-20231017204239375"> </li><li><p>就可以实现域名到IP地址的映射啦</p></li></ol><p>WIN+R输入 ping 和网页地址就可以得到网页的IP地址啦</p></blockquote><h4 id="DHCP自动分配IP地址和其他网络配置信息"><a href="#DHCP自动分配IP地址和其他网络配置信息" class="headerlink" title="DHCP自动分配IP地址和其他网络配置信息"></a>DHCP自动分配IP地址和其他网络配置信息</h4><p>DHCP（Dynamic Host Configuration Protocol）是一种网络协议，用于&#x3D;&#x3D;自动分配IP地址和其他网络配置信息给计算机和其他设备。&#x3D;&#x3D;</p><p>作用类似于租房中介，&#x3D;&#x3D;帮助设备在网络中找到可用的IP地址，并提供其他必要的网络配置&#x3D;&#x3D;。</p><p>》》》</p><p>在DHCP中，你的计算机就是租房的需求方，DHCP服务器就是租房中介。当你的计算机连接到网络时，它会向DHCP服务器发送一个请求，请求一个可用的IP地址和其他网络配置信息。DHCP服务器会检查可用的IP地址池，并为你的计算机分配一个IP地址，并提供其他必要的网络配置，比如子网掩码、默认网关、DNS服务器等。</p><p>此后，你的计算机就能够在网络中正常通信了。</p><h3 id="虚拟机配置固定IP地址"><a href="#虚拟机配置固定IP地址" class="headerlink" title="虚拟机配置固定IP地址"></a>虚拟机配置固定IP地址</h3><blockquote><p>windows如何在VMware中配置Linux的固定IP地址</p></blockquote><ol><li><p>为什么需要固定的IP呢？</p><p>因为我们的虚拟机是通过DHCP服务获取的，会频繁变更</p><p>个人，办公电脑的IP变化与否无所谓，但是我们要远程链接我们的虚拟机，IP地址经常变换就不方便</p></li><li><p>还有我们自己添加的&#x3D;&#x3D;虚拟机的IP地址和主机名的映射&#x3D;&#x3D;如果IP地址频繁更改就需要频繁的在hosts 中修改</p></li></ol><hr><h4 id="Vmware-Workstation配置固定IP"><a href="#Vmware-Workstation配置固定IP" class="headerlink" title="Vmware Workstation配置固定IP"></a>Vmware Workstation配置固定IP</h4><ol><li><p>在VMware中设置</p><img src="/xu-runbo/post/deb5175a/image-20231017214638066.png" class="" title="image-20231017214638066"> <blockquote><p>子网IP为192.168.88.0，这表示该局域网中的设备可以使用从192.168.88.1到192.168.88.254的IP地址。</p><hr><p>网关的IP地址可以是该局域网中的任何设备的IP地址，通常是路由器的IP地址。将网关设置为192.168.88.1意味着你将局域网中的路由器指定为网关。</p></blockquote></li><li><p>NAT设置</p><img src="/xu-runbo/post/deb5175a/image-20231017215011422.png" class="" title="image-20231017215011422"> <hr></li><li><p>在LInux的配置文件里配置</p><p>&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</p><img src="/xu-runbo/post/deb5175a/image-20231017215442839.png" class="" title="image-20231017215442839"> <p>&#x3D;&#x3D;目标：把ip修改为192.168.88.86&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231017215645493.png" class="" title="image-20231017215645493"> <p>网关是GATEWAY不是NETWAY。。。。。可以设置多个DNS服务器，以备份或提高解析速度。在设置DNS时，你可以指定多个DNS服务器的IP地址，设备将按顺序尝试连接这些服务器，直到成功解析域名或达到超时。</p><p>然后用到<a href="#systmctl%E5%91%BD%E4%BB%A4">systemctl</a>的重启network服务就可以啦</p><img src="/xu-runbo/post/deb5175a/image-20231017220109323.png" class="" title="image-20231017220109323"></li></ol><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><blockquote><p>DNS（Domain Name System）是用于&#x3D;&#x3D;<strong>将域名转换为相应IP地址的系统</strong>&#x3D;&#x3D;。它充当了互联网上的电话簿，将用户输入的&#x3D;&#x3D;域名翻译成计算机可以理解的IP地址&#x3D;&#x3D;，以便正确地连接到目标服务器。</p><p>网关是192.168.88.2。&#x3D;&#x3D;<strong>通常可以将该网关设置为你的设备的默认DNS服务器</strong>&#x3D;&#x3D;。这样，当你的设备需要解析域名时，它将向网关发出DNS查询请求。</p><p>2.&#x3D;&#x3D;<strong>还可以使用其他可用的公共DNS服务器，如114.114.114.114</strong>&#x3D;&#x3D;。你可以将该IP地址设置为你的设备的DNS服务器，以便使用该服务器来解析域名。</p><p>可以&#x3D;&#x3D;<strong>设置多个DNS服务器，以备份或提高解析速度</strong>。&#x3D;&#x3D;在设置DNS时，你可以指定多个DNS服务器的IP地址，设备将按顺序尝试连接这些服务器，直到成功解析域名或达到超时。</p></blockquote><p>就得到啦固定的IP地址</p><img src="/xu-runbo/post/deb5175a/image-20231017220304627.png" class="" title="image-20231017220304627"> <p>再利用域名解析，就可以实现自己添加域名映射啦</p><img src="/xu-runbo/post/deb5175a/image-20231017220341282.png" class="" title="image-20231017220341282"> <h2 id="网络请求和下载"><a href="#网络请求和下载" class="headerlink" title="网络请求和下载"></a>网络请求和下载</h2><blockquote><p>使用ping测试网络连接的延迟和稳定性。</p><p>使用</p><p>使用</p></blockquote><h3 id="ping命令-c"><a href="#ping命令-c" class="headerlink" title="ping命令 -c"></a>ping命令 -c</h3><p>function ：用于测试网络连接的延迟和稳定性。</p><p>测试一个网站或者IP服务器的状态是否正常</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping [-c num] 网址(ip或者主机名)</span><br><span class="line">网址可以是一个IP地址或一个域名。</span><br></pre></td></tr></table></figure><blockquote><p><strong>ping命令比喻为发送一个小信使去询问目标主机是否能够回答，并测量信使返回的时间。</strong></p><p>如果目标主机能够回答，那么ping命令会显示往返时间，这表示网络连接正常。</p><p>如果目标主机无法回答，或者往返时间非常长，那么ping命令会显示超时或延迟较高的信息，这表示网络连接存在问题。</p></blockquote><p>&#x3D;&#x3D;-c：：：count———指定测试次数&#x3D;&#x3D;</p><h3 id="wget命令-b"><a href="#wget命令-b" class="headerlink" title="wget命令 -b"></a>wget命令 -b</h3><p>funtion：非交互式的下载文件&#x3D;&#x3D;用于从指定的URL下载文件。&#x3D;&#x3D;</p><p> <a href="http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz">http://archive.apache.org/dist/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz</a></p><p>阿帕奇hadoop的安装包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget [-b] url</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>-b：是在后台下载</strong>&#x3D;&#x3D;并且下载日志保存在wget-log文件下面</p><hr><p>常用选项：</p><ul><li><code>-O</code>：指定下载文件的保存路径和文件名。</li><li><code>-P</code>：指定下载文件的保存路径。</li><li><code>-c</code>：断点续传，如果下载中断，可以从中断的地方继续下载。</li><li><code>-r</code>：递归下载，下载指定URL中的所有文件。</li><li><code>-np</code>：不下载上级目录。</li><li><code>-nH</code>：不创建主机目录。</li><li><code>-nd</code>：不创建目录。</li><li><code>-A</code>：只下载指定后缀名的文件。</li><li><code>-U</code>：设置User-Agent标头，模拟浏览器请求。</li><li><code>-q</code>：静默模式，不显示下载进度。</li><li><code>-h</code>：显示wget命令的帮助信息。</li></ul><img src="/xu-runbo/post/deb5175a/image-20231018161110552.png" class="" title="image-20231018161110552"> <h3 id="curl命令-O"><a href="#curl命令-O" class="headerlink" title="curl命令 -O"></a>curl命令 -O</h3><p>function：用于&#x3D;&#x3D;从指定的URL获取数据并输出到终端或保存到文件中。&#x3D;&#x3D;</p><p>可以发起网络请求</p><p>可以下载文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl [-O] url</span><br></pre></td></tr></table></figure><p><code>curl url</code>获取的是url页面的源代码</p><p><code>cur -O url</code>下载文件，也有对应的进度条</p><p>&#x3D;&#x3D;其中O代表Output（输出）。这是因为使用curl -O命令时，curl会将从URL下载的文件保存到当前目录下，&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231018162603235.png" class="" title="image-20231018162603235"> <p>&#x3D;&#x3D;<strong>默认是放在当前工作目录下面的</strong>&#x3D;&#x3D;</p><p>&#x3D;&#x3D;获取主机的公网IP地址&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231018161623614.png" class="" title="image-20231018161623614"> <h3 id="curl和yum的区别"><a href="#curl和yum的区别" class="headerlink" title="curl和yum的区别"></a><a name="curl-O">curl和yum的区别</a></h3><blockquote><p>在Linux中，yum和curl -O&#x3D;&#x3D;都可以用于下载文件，但它们的使用场景和功能略有不同。&#x3D;&#x3D;</p><ol><li>yum下载文件：<br>yum是Linux系统中的&#x3D;&#x3D;包管理器&#x3D;&#x3D;，&#x3D;&#x3D;主要用于安装、更新和删除软件包&#x3D;&#x3D;。它可以从软件源中下载软件包及其依赖项，&#x3D;&#x3D;并自动解决依赖关系&#x3D;&#x3D;。yum下载文件的主要目的是为了安装软件包，&#x3D;&#x3D;下载的文件通常是软件包的<strong>二进制文件或安装脚本</strong>&#x3D;&#x3D;。使用yum下载文件时，可以使用以下命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install package_name</span><br></pre></td></tr></table></figure><p>yum会根据软件源中的配置文件，从指定的软件源中下载软件包及其依赖项，并自动进行安装。</p><ol start="2"><li>curl -O下载文件：<br>curl是一个强大的命令行工具，&#x3D;&#x3D;<strong>用于与网络服务进行数据交互</strong>&#x3D;&#x3D;。它支持各种协议，包括HTTP、HTTPS、FTP等。&#x3D;&#x3D;<strong>curl -O命令用于从指定的URL下载文件，并将文件保存在当前目录下，文件名与URL中的文件名相同</strong>&#x3D;&#x3D;。使用curl -O下载文件时，可以使用以下命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -O http://example.com/file.txt</span><br></pre></td></tr></table></figure><p>curl -O命令适用于从任何支持的协议下载文件，无论是软件包、文本文件还是其他类型的文件。&#x3D;&#x3D;<strong>它不会自动解决依赖关系，只是简单地下载文件并保存到本地。</strong>&#x3D;&#x3D;</p><p>总结：</p><ul><li>yum下载文件主要用于安装软件包，下载的文件通常是软件包的二进制文件或安装脚本。</li><li>curl -O下载文件适用于从任何支持的协议下载文件，无论是软件包、文本文件还是其他类型的文件。它&#x3D;&#x3D;不会自动解决依赖关系，只是简单地下载文件并保存到本地。&#x3D;&#x3D;</li></ul></blockquote><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><blockquote><p>什么是端口</p><p>netstat命令如何使用</p></blockquote><p>&#x3D;&#x3D;IP&#x3D;&#x3D;是用来在互联网上找到这个计算机</p><p>&#x3D;&#x3D;端口&#x3D;&#x3D;就是这台电脑上面的住户（程序）</p><p>Linux支持六万个端口</p><ul><li>公认端口 用于：&#x3D;&#x3D;系统内置和知名程序使用&#x3D;&#x3D;</li><li><strong>注册端口</strong> 1024-五万 随意使用，用于松散的绑定一些程序&#x2F;服务</li><li>动态端口 ：5w-6w 通常不会固定绑定程序，而是当程序对外网络连接的时候使用</li></ul><img src="/xu-runbo/post/deb5175a/image-20231019124053175.png" class="" title="image-20231019124053175"><h3 id="nmap程序"><a href="#nmap程序" class="headerlink" title="nmap程序"></a>nmap程序</h3><p><strong>扫描指定IP对外暴露的端口</strong></p><ol><li><pre><code>sudo yum -y install nmap<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. ```</span><br><span class="line">   nmap 127.0.0.1(IP)</span><br></pre></td></tr></table></figure></code></pre></li></ol><p>nmap查看系统的端口使用情况</p><img src="/xu-runbo/post/deb5175a/image-20231019125045570.png" class="" title="image-20231019125045570"><h3 id="netstat程序"><a href="#netstat程序" class="headerlink" title="netstat程序"></a>netstat程序</h3><blockquote><p>netstat查看<strong>本机端口</strong>的占用情况</p></blockquote><ol><li><pre><code>sudo yum -y install netstat<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. ```</span><br><span class="line">   netstat -anp 端口</span><br></pre></td></tr></table></figure></code></pre></li><li><p>可以配合管道符和grep</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 22</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;anp&#x3D;&#x3D;</p><blockquote><p>a:all 所有链接TCP，UDP。。</p><p>n：numeric数字格式的IP</p><p>p：process进程信息</p></blockquote></li></ol><img src="/xu-runbo/post/deb5175a/image-20231019163541554.png" class="" title="image-20231019163541554"> <img src="/xu-runbo/post/deb5175a/image-20231019131045120.png" class="" title="image-20231019131045120"> <p>具体来说，”netstat -anp”会显示以下内容：</p><ul><li>“Proto”列显示网络连接所使用的&#x3D;&#x3D;协议&#x3D;&#x3D;，如TCP或UDP。</li><li>“Recv-Q”和”Send-Q”列显示&#x3D;&#x3D;接收队列和发送队列中的数据量。&#x3D;&#x3D;</li><li>“Local Address”列显示&#x3D;&#x3D;本地计算机的IP地址和端口号。&#x3D;&#x3D;</li><li>“Foreign Address”列显示&#x3D;&#x3D;远程计算机的IP地址和端口号。&#x3D;&#x3D;</li><li>“State”列显示连接的状态，&#x3D;&#x3D;如ESTABLISHED（已建立）、LISTEN（监听）等。&#x3D;&#x3D;</li><li>“PID&#x2F;Program name”列显示<strong>与连接相关的进程ID和进程名称</strong>。</li></ul><p>查看当前系统上所有的网络连接，并了解与这些连接相关的进程和端口信息。</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><blockquote><p>进程是什么？</p><p>如何查看进程？关闭进程？</p></blockquote><p>程序运行在操作系统中，是呗操作系统所管理的。</p><p>每个程序在运行的时候，操作系统注册为系统中的一个进程</p><p><strong>并位每个进程都分配一个独有的&#x3D;&#x3D;进程ID&#x3D;&#x3D;</strong></p><h3 id="Linux查看系统的进程信息"><a href="#Linux查看系统的进程信息" class="headerlink" title="Linux查看系统的进程信息"></a>Linux查看系统的进程信息</h3><p>function:查看Linux系统的进程信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps [-f -e]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef |grep 进程名</span><br></pre></td></tr></table></figure><blockquote><p>p : process  进程</p><p>s :snapshot   快照</p><p>进程快照</p></blockquote><blockquote><p>-f ：full，-e：everything</p><p>-f &#x3D;&#x3D;full&#x3D;&#x3D; format 显示全部的进程</p><p>-e &#x3D;&#x3D;everythiing &#x3D;&#x3D;processes   以完全格式化的形式展示信息</p></blockquote><img src="/xu-runbo/post/deb5175a/image-20231019131809628.png" class="" title="image-20231019131809628"><p>依次为</p><ol><li><p>UID是进程所属的用户ID</p></li><li><p>PID是进程号</p></li><li><p>PPID进程的父PID</p><p>程序不一定是由&#x3D;&#x3D;用户启动的&#x3D;&#x3D;也可能是&#x3D;&#x3D;程序启动程序&#x3D;&#x3D;</p></li><li><p>C是CPU占用率</p></li><li><p>STIME是进程的启动时间  start time</p></li><li><p>TIME是进程占用CPU时间<strong>，累计</strong></p></li><li><p>CMD表示&#x3D;&#x3D;启动路径&#x3D;&#x3D;</p></li></ol><h3 id="查看进程-ps-ef"><a href="#查看进程-ps-ef" class="headerlink" title="查看进程 ps -ef"></a>查看进程 ps -ef</h3><p>先输入”tail”命令会启动一个进程，等待用户输入要查看的文件名或路径。由于没有输入文件名或路径，该进程会一直等待用户输入，因此会阻塞住。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail</span><br></pre></td></tr></table></figure><p>再复制一个标签输入</p><img src="/xu-runbo/post/deb5175a/image-20231019132609126.png" class="" title="image-20231019132609126"> <p>&#x3D;&#x3D;<strong>我们输入的命令本身也是一个程序，所以一般不看过滤出来的最后一条结果</strong>&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231019133211697.png" class="" title="image-20231019133211697"> <h3 id="关闭进程-kill-9"><a href="#关闭进程-kill-9" class="headerlink" title="关闭进程  kill [-9]"></a>关闭进程  kill [-9]</h3><p>function：关闭进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill [-9] 进程ID</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>-9强制关闭掉</strong>&#x3D;&#x3D;</p><p>没有-9就是自我了断，发送信号。</p><img src="/xu-runbo/post/deb5175a/image-20231019140045952.png" class="" title="image-20231019140045952"> <p>复制一个窗口</p><img src="/xu-runbo/post/deb5175a/image-20231019140111107.png" class="" title="image-20231019140111107"> <p>查看到该进程的进程ID</p><img src="/xu-runbo/post/deb5175a/image-20231019140127988.png" class="" title="image-20231019140127988"> <p>文明催关</p><img src="/xu-runbo/post/deb5175a/image-20231019140305308.png" class="" title="image-20231019140305308"> <p>一般都是关闭的，收到要关闭的信号了，就关闭。</p><p>但有一些流氓</p><img src="/xu-runbo/post/deb5175a/image-20231019140428488.png" class="" title="image-20231019140428488"> <p>暴力关闭</p><img src="/xu-runbo/post/deb5175a/image-20231019140246411.png" class="" title="image-20231019140246411"> <h2 id="主机状态监控"><a href="#主机状态监控" class="headerlink" title="主机状态监控"></a>主机状态监控</h2><h3 id="系统资源状态监控"><a href="#系统资源状态监控" class="headerlink" title="系统资源状态监控"></a>系统资源状态监控</h3><h4 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231020132424008.png" class="" title="image-20231020132424008"><blockquote><p>-p:  person指定进程好好看</p><p>-d  delay：时间间隔</p><p>-c：command：摄像头仔细的观察完整的命令</p><p>-n ：number设置固定的刷新次数</p><p>-b：”background”，即在后台非交互式地运行。一般配合重定向到指定文件</p><p>-i : inspect 检查，正在运行的进程</p><p>-u：查看指定用户的进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top -b &gt;1.txt</span><br></pre></td></tr></table></figure><p>就可以看到整张，然后more一页一页观看</p></blockquote><h4 id="top的交互式选项"><a href="#top的交互式选项" class="headerlink" title="top的交互式选项"></a>top的交互式选项</h4><blockquote><p>h : help 能看到一些帮助文档</p><p>c :等价于-c  command能让我们看更全面的 启动路径</p><p>i 等价于 inspect 查看正在运行的进程信息</p><hr><p>l :load  ：切换显示平均负载和启动时间信息</p><p>m: mem内存  ：切换显示内存信息</p><p>t : toggle (切换)切换显示CPu的使用情（控制1，2行的显示）</p><hr><p>P : ppercentage根据CPU使用&#x3D;&#x3D;率&#x3D;&#x3D;进行排序</p><p>M:Mem，根据内存大小RES排序</p><p>T:根据时间使用来排序</p><hr><p>E ：切换顶部内存显示单位&#x2F;&#x2F;</p><p>e:切换进程内存显示单位&#x2F;&#x2F;</p><p>f :fields selection 选择要展示的项目&#x3D;&#x3D;<strong>用空格来选择</strong>&#x3D;&#x3D;</p></blockquote><p>&#x3D;&#x3D;PMT,lmt,f,hic&#x3D;&#x3D;</p><p>当然仅仅top就很好用了</p><h4 id="top的实例解释"><a href="#top的实例解释" class="headerlink" title="top的实例解释"></a>top的实例解释</h4><p>&#x3D;&#x3D;默认每5minute刷新一次&#x3D;&#x3D;</p><hr><img src="/xu-runbo/post/deb5175a/image-20231020123315381.png" class="" title="image-20231020123315381"> <p>top：命令名称</p><p>12：33：06：系统时间</p><p>up 6minuts：启动了6分钟</p><p>2users：有两个用户登录</p><p>Load average：&#x3D;&#x3D;系统平均负载：分<strong>别代表1，5，15分钟的平均负载</strong>&#x3D;&#x3D;</p><hr><img src="/xu-runbo/post/deb5175a/image-20231020123445297.png" class="" title="image-20231020123445297"> ==<p>task：185total：总计有185个子进程</p><p>1 running：有一个进程正在进行</p><p>184sleeping：184个正在睡觉</p><p>stoppped：0个停止了</p><p>0 zomibe：0个是<a href="#%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B">僵尸进程</a></p><hr><img src="/xu-runbo/post/deb5175a/image-20231020125142369.png" class="" title="image-20231020125142369"> ==t==<p>CPU占用率</p><p>13.7us:代表用户cpu占用率</p><p>15.6sy:系统占用cpu占用率</p><hr><img src="/xu-runbo/post/deb5175a/image-20231020125905624.png" class="" title="image-20231020125905624"> <p>&#x3D;&#x3D;物理内存&#x3D;&#x3D;</p><p>free：剩多少</p><p>used：用了多少</p><p>buff&#x2F;cache：系统缓存</p><img src="/xu-runbo/post/deb5175a/image-20231020130128610.png" class="" title="image-20231020130128610"> <p>&#x3D;&#x3D;虚拟内存&#x3D;&#x3D;</p><p>总量</p><p>剩余</p><p>用了</p><p>可用</p><p>不太关心</p><hr><img src="/xu-runbo/post/deb5175a/image-20231020130758496.png" class="" title="image-20231020130758496"> <p>PID:（process ID）：进程ID</p><p>USER：所属用户</p><p>PR：进程优先级</p><p>NI：进程负优先级</p><p>VIRT：所占用的&#x3D;&#x3D;虚拟内存&#x3D;&#x3D;</p><p>RES: 所占用的物理内存</p><p>SHR：所占用的共享内存</p><p>%CPU：所占用的&#x3D;&#x3D;CPU率&#x3D;&#x3D;</p><p>%MEM：进程占用&#x3D;&#x3D;内存率&#x3D;&#x3D;</p><p>TIME+：进程的启动时间</p><p>COMMAND：是进程的&#x3D;&#x3D;启动路径&#x3D;&#x3D;或者&#x3D;&#x3D;文件路径&#x3D;&#x3D;</p><h4 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a><a name="僵尸进程">僵尸进程</a></h4><p>》》》</p><blockquote><p>僵尸进程是指在操作系统中:</p><p>一个子进程在<strong>完成任务后</strong>，但是其父进程<strong>没有及时回收其资源</strong>，导致子进程的进程描述符仍然存在于进程表中，<strong>但是已经没有运行的实体进程与之对应。这样的进程称为僵尸进程。</strong>&#x3D;&#x3D;僵尸进程不占用系统资源，但是会占用进程表中的一个条目&#x3D;&#x3D;，如果大量的僵尸进程存在，可能会&#x3D;&#x3D;<strong>导致进程表耗尽</strong>，&#x3D;&#x3D;<strong>从而影响系统的正常运行</strong>。</p></blockquote><h3 id="磁盘的信息监控"><a href="#磁盘的信息监控" class="headerlink" title="磁盘的信息监控"></a>磁盘的信息监控</h3><blockquote><p>df如何形象化记忆？</p><p>iostat命令</p></blockquote><h4 id="df命令-h"><a href="#df命令-h" class="headerlink" title="df命令-h"></a>df命令-h</h4><p>function：查看硬盘的使用情况：磁盘空间查看命令，用于显示文件系统的磁盘使用情况，包括磁盘总大小、已用空间、可用空间和文件系统的挂载点等信息。</p><ul><li>d disk</li><li>f free</li><li>&#x3D;&#x3D;查看磁盘的剩余情况&#x3D;&#x3D;&#x3D;</li><li>-h参数则是用来以人类可读的方式显示磁盘空间信息</li><li>h:human人类</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df [-h]</span><br></pre></td></tr></table></figure><blockquote><ul><li>-h：以易读的方式显示磁盘空间大小；</li><li>-T：显示文件系统类型；</li><li>-i：显示inode的使用情况。</li></ul></blockquote><img src="/xu-runbo/post/deb5175a/image-20231020143802455.png" class="" title="image-20231020143802455"> <h4 id="iostat命令-x-num1-num2"><a href="#iostat命令-x-num1-num2" class="headerlink" title="iostat命令 -x num1 num2"></a>iostat命令 -x num1 num2</h4><blockquote><p>查看系统</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iostat [-x] [num1 nun2]</span><br><span class="line">num1是delay刷新间隔</span><br><span class="line">num2是刷新次数</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231020144615032.png" class="" title="image-20231020144615032"> <ul><li>sda:虚拟机的硬盘</li><li>tps:每秒传输次数</li><li>每秒读</li><li>每秒写</li><li>总读取</li><li>总写出</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iostat -x</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231020145053322.png" class="" title="image-20231020145053322"><img src="/xu-runbo/post/deb5175a/image-20231020144540410.png" class="" title="image-20231020144540410"><p>主要看这三个</p><h3 id="网络状态监控"><a href="#网络状态监控" class="headerlink" title="网络状态监控"></a>网络状态监控</h3><h4 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h4><blockquote><p>如何形象化记忆？</p></blockquote><p>function：查看网络状态的相关信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sar -n 设备 [num1 num2]</span><br></pre></td></tr></table></figure><blockquote><p>-n :查看网络</p><p>DEV：表示查看网络接口</p><p>nmu1；是刷新间隔</p><p>num2：是查看次数</p></blockquote><img src="/xu-runbo/post/deb5175a/image-20231020145946359.png" class="" title="image-20231020145946359"><img src="/xu-runbo/post/deb5175a/image-20231020150156998.png" class="" title="image-20231020150156998"> <blockquote><p>rxKB&#x2F;s：是我们下载的时候接受的数据包大小</p><p>txKB&#x2F;s 是我们上传的时候发送的数据包的大小</p></blockquote><p>还有最后一次的统计数据</p><h4 id="》》》"><a href="#》》》" class="headerlink" title="》》》"></a>》》》</h4><p>Linux中的sar -n 设备 [num1 num2]命令：</p><ol><li>将sar视为<strong>“系统活动报告</strong>”（System Activity Report）<strong>，而-n代表“网络”（Network）。</strong></li><li><strong>设备可以被视为网络接口（例如eth0，eth1等）。</strong></li><li>[num1 num2]表示可选的两个数字参数，可以将其视为&#x3D;&#x3D;时间间隔&#x3D;&#x3D;和&#x3D;&#x3D;刷新次数&#x3D;&#x3D;。</li></ol><blockquote><p>系统活动报告中的网络接口活动情况（System Activity Report）+-n(network)</p></blockquote><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a><a name="环境变量">环境变量</a></h2><blockquote><p>环境变量是干嘛的？</p><p>如何表示的？</p><p>为什么我们在任何目录下都可以使用cd命令呢?</p></blockquote><h3 id="环境变量-1"><a href="#环境变量-1" class="headerlink" title="环境变量"></a>环境变量</h3><p>Linux环境变量是一种&#x3D;&#x3D;<strong>存储在操作系统中的字符串，用于指定操作系统运行程序时所需的各种信息。</strong>&#x3D;&#x3D;</p><p>操作系统在运行的时候，记录的一些关键性信息，<strong>用于辅助系统运行。</strong></p><p>》》</p><p>常见的环境变量包括</p><p>PATH（指定可执行文件的搜索路径）</p><p>HOME（指定当前用户的主目录）</p><p>LANG（指定默认的语言设置）</p><hr><p>当在Linux中运行一个程序时，它会自动读取指定的环境变量</p><h3 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h3><p>function：查看Linux&#x3D;&#x3D;<strong>系统中的系统变量</strong>&#x3D;&#x3D;</p><p><code>env命令只能查看当前环境中的全局环境变量，而不会显示用户级别的环境变量。</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env</span><br></pre></td></tr></table></figure><blockquote><p>env命令用于显示当前系统的环境变量。</p><p>语法：<br>env [选项] [键值对]… [命令]</p><p>选项：<br>-i，&#x3D;&#x3D;清除现有的环境变量，只使用指定的键值对&#x3D;&#x3D;<br>-u，&#x3D;&#x3D;移除指定的环境变量&#x3D;&#x3D;<br>-h，显示帮助信息</p><p>示例：</p><ol><li><p>显示所有环境变量：<br>env</p></li><li><p>显示指定环境变量的值：<br>env 变量名</p></li><li><p>设置新的环境变量：<br>env 变量名&#x3D;值 命令</p></li><li><p>清除现有的环境变量，只使用指定的键值对：<br>env -i 变量名&#x3D;值 命令</p></li><li><p>移除指定的环境变量：<br>env -u 变量名 命令</p></li></ol></blockquote><img src="/xu-runbo/post/deb5175a/image-20231020153930700.png" class="" title="image-20231020153930700"> <p>得到的是键值对的数据</p><h3 id="PATH"><a href="#PATH" class="headerlink" title="PATH"></a><a name="PATH">PATH</a></h3><p>为什么我们在任何目录下都可以使用cd命令呢？这就是借助环境变量PAth这个项目的值做到的</p><blockquote><p>PATH环境变量是一个用冒号分隔的目录列表，用于指示系统在哪些路径中查找可执行程序。</p><p>当在命令行上输入一个命令时，系统会按照PATH环境变量所列出的路径顺序&#x3D;&#x3D;<strong>去查找对应的可执行文件</strong>&#x3D;&#x3D;，并执行找到的第一个匹配项。</p><hr><p>这意味着，如果一个可执行文件的路径没有包含在PATH环境变量中，就需要使用完整路径或切换到包含该文件的目录来执行它。</p><p>通过将常用的可执行文件所在的目录添加到PATH环境变量中，可以方便地在任何位置执行这些命令，而不必每次都输入完整的路径</p></blockquote><img src="/xu-runbo/post/deb5175a/image-20231020153739977.png" class="" title="image-20231020153739977"> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>PATH指定了默认搜索路径</strong>&#x3D;&#x3D;</p><p>当我们执行cd命令到时候，他就会从PATH里的一个个搜索路径下去找对应的可执行文件</p><h3 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h3><blockquote><p>$符号呗用于&#x3D;&#x3D;<strong>取”变量“</strong>&#x3D;&#x3D;</p><p>环境变量记录的信息，除了给操作系统自己使用外，如果我们想取用，就用到了$符号</p><p>取得环境变量的值就可以</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ 环境变量名</span><br></pre></td></tr></table></figure><p>进阶</p><img src="/xu-runbo/post/deb5175a/image-20231020155149829.png" class="" title="image-20231020155149829"></blockquote><h3 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h3><img src="/xu-runbo/post/deb5175a/image-20231020160630278.png" class="" title="image-20231020160630278"> <h4 id="创建临时变量"><a href="#创建临时变量" class="headerlink" title="&#x3D;&#x3D;创建临时变量&#x3D;&#x3D;"></a>&#x3D;&#x3D;<strong>创建临时变量</strong>&#x3D;&#x3D;</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export 变量名=变量值</span><br></pre></td></tr></table></figure><blockquote><p>重启虚拟机，或者切换用户，都看不到这个变量</p></blockquote><h4 id="创建长久环境变量"><a href="#创建长久环境变量" class="headerlink" title="创建长久环境变量"></a>创建长久环境变量</h4><p>&#x3D;&#x3D;重启不影响&#x3D;&#x3D;</p><p>souce 配置文件</p><p>重新读取</p><ol><li><p>在当前用户下创建</p><img src="/xu-runbo/post/deb5175a/image-20231020160926269.png" class="" title="image-20231020160926269"> <p>编辑.bashrc</p><img src="/xu-runbo/post/deb5175a/image-20231020160953331.png" class="" title="image-20231020160953331"> <p>&#x3D;&#x3D;<strong>source ~&#x2F;.bashr</strong>c&#x3D;&#x3D;</p><p>就创建了一个长久的变量</p></li><li><p>在全局用户下创建一个&#x3D;&#x3D;<strong>全局环境变量</strong>&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231020161508885.png" class="" title="image-20231020161508885"> <p>编辑&#x2F;etc&#x2F;profile</p><img src="/xu-runbo/post/deb5175a/image-20231020161904749.png" class="" title="image-20231020161904749"> <p>&#x3D;&#x3D;<strong>source &#x2F;etc&#x2F;profile</strong>&#x3D;&#x3D;</p><img src="/xu-runbo/post/deb5175a/image-20231020162110015.png" class="" title="image-20231020162110015"></li></ol><p>全局环境变量可以在env中筛选到</p><p>全局环境变量是在系统范围内定义的，对所有用户都可见。</p><p>source 配置文件</p><p>让自定义的变量生效</p><h3 id="自定义环境变量PATH"><a href="#自定义环境变量PATH" class="headerlink" title="自定义环境变量PATH"></a><a href="#PATH">自定义环境变量PATH</a></h3><ol><li><p>创建一个文件</p><p>并且写入简单的命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim mv</span><br></pre></td></tr></table></figure><blockquote><p>echo “哈哈哈”</p></blockquote><p>然后修改其权限</p><p>因为默认是不可以执行的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod 777 mv</span><br></pre></td></tr></table></figure></li><li><p>开始执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./mv</span><br></pre></td></tr></table></figure></li><li><p><code>./</code>在Linux中表示当前目录。当您在命令行上运行某个可执行文件时，如果该文件位于当前目录下，那么您需要在命令前&#x3D;&#x3D;<strong>加上<code>./</code>来告诉系统去当前目录中查找该文件并且执行它。</strong>&#x3D;&#x3D;</p><p>.&#x2F;文件 表示使用路径的方式执行文件，需要文件有‘x’执行权限</p><img src="/xu-runbo/post/deb5175a/image-20231020164352326.png" class="" title="image-20231020164352326"></li></ol><p>&#x3D;&#x3D;这样知识简单的执行这个文件&#x3D;&#x3D;</p><p>我们输入mv是不可以执行的</p><hr><hr><p>真正是要添加到文件夹下面</p><ol><li><p>我们进入root用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir myenv</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim myenv/myenv</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure></li><li><p>修改可执行权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 myenv</span><br></pre></td></tr></table></figure></li><li><p>使用上面的.&#x2F;可以执行</p></li><li><p>添加到临时环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/root/myenv</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>添加到文件夹下就好了，他是在这个目录下找我们写的可执行文件</strong>&#x3D;&#x3D;</p></li><li><p>测试</p><img src="/xu-runbo/post/deb5175a/image-20231020170204411.png" class="" title="image-20231020170204411"> </li><li><hr><p>现在重启后(临时环境变量没有啦)</p><img src="/xu-runbo/post/deb5175a/image-20231020170704414.png" class="" title="image-20231020170704414"> <hr><p>创建全局环境变量PATH</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231020170848487.png" class="" title="image-20231020170848487"> <p>就可以在root，任意位置输入myenv就可以输出helloworld</p></li></ol><h2 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h2><blockquote><p>rz,sz命令？</p><p>如何上传和下载文件？</p><p>如何形象化记忆lrzsz</p></blockquote><h3 id="文件的下载"><a href="#文件的下载" class="headerlink" title="文件的下载"></a>文件的下载</h3><img src="/xu-runbo/post/deb5175a/image-20231020231404408.png" class="" title="image-20231020231404408"> <p>下面的目录是根据finalshell登录的信息xurunbo</p><p>那就是普通用户</p><p>如果想得到root用户的文件夹</p><p>就root登录</p><p>而不是再shell中简单的切换到root里面</p><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>就从我们主机拖拽文件拖进去就好了</p><h3 id="rz-sz命令"><a href="#rz-sz命令" class="headerlink" title="rz,sz命令"></a>rz,sz命令</h3><blockquote><p>如何形象化记忆？rz和sz</p><p>如何使用呢？</p></blockquote><hr><hr><blockquote><p>不用finalshell的进行传输文件</p><p>而是用命令</p><ol><li><p>安装 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install lrzsz</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>R</strong>eceive <strong>Z</strong>ipped（rz）：rz命令是将文件从远程计算机发送到本地计算机，可以将字母R理解为“接收”或“接受”。另外，“Zipped”表示传输的文件通常都是经过压缩处理的，因此将字母Z与rz相关联也有助于记忆。</li><li><strong>S</strong>end <strong>Z</strong>ipped（sz）：sz命令是将文件从本地计算机发送到远程计算机，可以将字母S理解为“发送”或“发出”。同样，“Zipped”表示传输的文件通常都是经过压缩处理的，因此将字母Z与sz相关联也有助于记忆</li></ul></blockquote></li><li><p>rz.sz都需要再findshell里面进行</p><ol><li><p>rz的使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/deb5175a/image-20231020232416582.png" class="" title="image-20231020232416582"><p>&#x3D;&#x3D;<strong>会默认的下载到当前工作目录下也就是~&#x2F;</strong>&#x3D;&#x3D; </p></li><li><p>sz的使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sz Linux文件</span><br></pre></td></tr></table></figure><p>默认会在我们主机的桌面创建一个fsdownload的文件夹，放在里面</p></li></ol><p>&#x3D;&#x3D;<strong>拖拽的形式会更快一些</strong>&#x3D;&#x3D;</p></li></ol></blockquote><h2 id="压缩和解压"><a href="#压缩和解压" class="headerlink" title="压缩和解压"></a>压缩和解压</h2><blockquote><p>如何tar命令&#x3D;&#x3D;压缩或者解压&#x3D;&#x3D;tar&#x2F;gzip文件？</p><p>如何用zip，unzip命令&#x3D;&#x3D;压缩或解压&#x3D;&#x3D;zip文件？</p></blockquote><p>Linux常用:tar，和gzip 和zip</p><p>windows常常用：zip，7zip，rar</p><hr><ul><li>.tar是归档文件，简单的组装到.tar的文件夹内，没有减少太多体积，简单的封装</li><li>.gz常见额外i.tar.gz,gzip使用gzip压缩算法，将文件压缩到一个文件内，可以极大的减少压缩后的体积</li></ul><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><p>function：压缩文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar [-c -v -z -x -f ]</span><br></pre></td></tr></table></figure><blockquote><p>-c :（creat创建）创建压缩文件  —压缩模式</p><p>-x  ：(extract提取)创建解压文件—–解压模式</p><p>-z 用gzip的压缩方式,&#x3D;&#x3D;<strong>后缀是.gz或者.tar.gz</strong>&#x3D;&#x3D;</p><p>-v （visual）可视化</p><p>-f 指定&#x3D;&#x3D;压缩的目的地&#x3D;&#x3D;，或者&#x3D;&#x3D;要解压的文件&#x3D;&#x3D;</p><p>-C：指定解压的位置，因为此时f指定的是要解压的文件,所以-C是和解压配合使用的</p></blockquote><h3 id="tar压缩文件"><a href="#tar压缩文件" class="headerlink" title="tar压缩文件"></a>tar压缩文件</h3><ol><li><img src="/xu-runbo/post/deb5175a/image-20231021093928848.png" class="" title="image-20231021093928848"> </li><li><pre><code>tar -cvf cvf.tar 1.txt 2.txt 3.txt<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   &#123;% asset_img image-20231021094039705.png image-20231021094039705 %&#125; </span><br><span class="line"></span><br><span class="line">3. &#123;% asset_img image-20231021094102442.png image-20231021094102442 %&#125; </span><br><span class="line"></span><br><span class="line">   &gt; 就得到了一个tar的简单压缩文件，默认是在当前工作目录下</span><br><span class="line">   &gt;</span><br><span class="line">   &gt; f的参数就是指定压缩到哪里</span><br><span class="line">   &gt;</span><br><span class="line">   &gt; ==**f一定在最后,且第一个参数对应的是f的参数**==</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">gzip的压缩方式</span><br><span class="line"></span><br><span class="line">1. ```</span><br><span class="line">   tar -zcvf zcvf.gz 1.txt 2.txt 3.txt</span><br></pre></td></tr></table></figure></code></pre></li><li><img src="/xu-runbo/post/deb5175a/image-20231021094426024.png" class="" title="image-20231021094426024"> </li><li><img src="/xu-runbo/post/deb5175a/image-20231021094438157.png" class="" title="image-20231021094438157"> <p>解压效果非常显著</p></li></ol><h3 id="tar解压文件"><a href="#tar解压文件" class="headerlink" title="tar解压文件"></a>tar解压文件</h3><ol><li><p>解压简单.tar 文件</p></li><li><pre><code>tar -xvf cvf.tar<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   默认是在当前目录下</span><br><span class="line"></span><br><span class="line">3. ```</span><br><span class="line">   tar -xvf cvf.tar -C /test/xvf</span><br></pre></td></tr></table></figure>指定解压到哪里</code></pre></li><li><p>如何解压的是gzip问格式的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf cvf.tar</span><br><span class="line">tar -zxvf cvf.gz -C /test/xvf</span><br></pre></td></tr></table></figure><blockquote><p>z一定要在前面，告诉他我是解压gzip文件的</p><p>f一定在后面，用来指定**&#x3D;&#x3D;被解压的文件&#x3D;&#x3D;<strong>，和</strong>&#x3D;&#x3D;压缩到哪的文件&#x3D;&#x3D;**</p><p>-C必须单独使用，指定我解压的目的地，和其他参数分开，但是不能帮助创建文件夹</p></blockquote></li></ol><h3 id="zip命令"><a href="#zip命令" class="headerlink" title="zip命令"></a>zip命令</h3><p>&#x3D;&#x3D;好用&#x3D;&#x3D;</p><p>用来zip</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip [-r] 参数1，2，3，4，</span><br><span class="line">参数一就是要解压的位置</span><br><span class="line">默认是在当前工作目录下</span><br></pre></td></tr></table></figure><p>-r就是recursive迭代</p><p>被压缩的目标内有文件夹的时候使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip test.zip 1.txt 2.txt 3.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip -r test.zip abc 1.txt</span><br></pre></td></tr></table></figure><h3 id="unzip命令"><a href="#unzip命令" class="headerlink" title="unzip命令"></a>unzip命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip 文件.zip [-d]</span><br></pre></td></tr></table></figure><p>默认解压到当前工作目录下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip 文件.zip -d 指定目录</span><br></pre></td></tr></table></figure><blockquote><p>比tar好用</p><p>没有zip严格</p><p>可以帮忙创建文件夹</p><p>-C用法和tar一样(单独指出)</p><p>&#x3D;&#x3D;<strong>解压的时候同名的文件会被覆盖！</strong>&#x3D;&#x3D;</p></blockquote><p>seeyouagain</p><img src="/xu-runbo/post/deb5175a/image-20231021102513209.png" class="" title="image-20231021102513209"> ]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好听的歌</title>
      <link href="/xu-runbo/post/2feff901.html"/>
      <url>/xu-runbo/post/2feff901.html</url>
      
        <content type="html"><![CDATA[<img src="/xu-runbo/post/2feff901/xiawanzhechangyu.png" class="" title="xiawanzhechangyu"><p>&#x3D;&#x3D;下完这场雨&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> 歌曲 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学</title>
      <link href="/xu-runbo/post/3fb56f9d.html"/>
      <url>/xu-runbo/post/3fb56f9d.html</url>
      
        <content type="html"><![CDATA[<h1 id="离散数学"><a href="#离散数学" class="headerlink" title="离散数学"></a>离散数学</h1><h2 id="S1–数理逻辑"><a href="#S1–数理逻辑" class="headerlink" title="S1–数理逻辑"></a>S1–数理逻辑</h2><h3 id="Z1命题逻辑的基本概念"><a href="#Z1命题逻辑的基本概念" class="headerlink" title="Z1命题逻辑的基本概念"></a>Z1命题逻辑的基本概念</h3><h4 id="J1命题与联结词"><a href="#J1命题与联结词" class="headerlink" title="J1命题与联结词"></a>J1命题与联结词</h4><h5 id="命题：能判断-真假-的-陈述句-成为命题"><a href="#命题：能判断-真假-的-陈述句-成为命题" class="headerlink" title="命题：能判断&#x3D;&#x3D;真假&#x3D;&#x3D;的&#x3D;&#x3D;陈述句&#x3D;&#x3D;成为命题"></a>命题：能判断&#x3D;&#x3D;真假&#x3D;&#x3D;的&#x3D;&#x3D;陈述句&#x3D;&#x3D;成为命题</h5><blockquote><ol><li><h3 id="陈述句"><a href="#陈述句" class="headerlink" title="陈述句"></a>陈述句</h3></li><li><h3 id="能判断真假"><a href="#能判断真假" class="headerlink" title="能判断真假"></a>能判断真假</h3></li></ol></blockquote><p>&#x3D;&#x3D;真值&#x3D;&#x3D;命题判断真假的结果</p><p>True或者False</p><p>&#x3D;&#x3D;任何命题的真值都是唯一的&#x3D;&#x3D;</p><p>例子：</p><blockquote><img src="/xu-runbo/post/3fb56f9d/image-20231006133043982.png" class="" title="image-20231006133043982"><p>1,2,7</p><p>3的值是不确定的</p><p>7–&#x3D;&#x3D;未知不代表他真值不唯一&#x3D;&#x3D;</p></blockquote><img src="/xu-runbo/post/3fb56f9d/image-20231006132756425.png" class="" title="image-20231006132756425"><p>素数：大衣与的自然数，除了1和它自身外不能被其他自然数整除的数</p><p>其他的就是&#x3D;&#x3D;合数&#x3D;&#x3D;</p><p><code>我正在说假话</code></p><p>假设是真的，我在说假话</p><p>如果是假的，我再说真话</p><p>真假都有对应的方法，真值不唯一</p><hr><p>如果说话者实际上正在说谎，那么这个陈述句的真值为真。</p><p>但如果说话者实际上没有说谎，那么这个陈述句的真值为假。</p><p>因此，它的真值取决于说话者的实际情况。是&#x3D;&#x3D;悖论&#x3D;&#x3D;</p><p>&#x3D;&#x3D;悖论不是命题&#x3D;&#x3D;</p><p>&#x3D;&#x3D;悖论&#x3D;&#x3D;是指一个陈述或推理过程，包含自相矛盾或导致无限循环的情况。</p><blockquote><p>我正在救火”这个陈述，而事实上你并没有在救火，那么这个陈述就是一个悖论，因为它包含了自相矛盾的信息。这是一个自我矛盾的陈述，因为你声称正在做某事，但实际上并没有在做。</p></blockquote><h5 id="联结词"><a href="#联结词" class="headerlink" title="联结词"></a>联结词</h5><ol><li>且（and）&#x3D;&#x3D;合取&#x3D;&#x3D;：表示两个条件同时满足。</li><li>或（or）：&#x3D;&#x3D;析取&#x3D;&#x3D;表示两个条件中至少有一个满足。</li><li>非（not）：&#x3D;&#x3D;非&#x3D;&#x3D;表示取反或否定一个条件。</li><li>若…则…（if…then…）&#x3D;&#x3D;蕴含联结词&#x3D;&#x3D;：表示条件语句，如果前面的条件成立，则后面的条件也成立。</li><li>&#x3D;&#x3D;等价式&lt;-&gt;当且仅当二者都为真或者都为假的时候才为真&#x3D;&#x3D;</li></ol><p>&#x3D;&#x3D;<strong>蕴含连接词仅当p真q假的时候整体为假，其余全真</strong>&#x3D;&#x3D;</p><blockquote><p>自然语言里</p><p>&#x3D;&#x3D;p-&gt;q&#x3D;&#x3D;</p><p>等价于</p><p>只要p就q</p><p>如果p就q</p><p>若p就q</p><p>p仅当q</p><h3 id="只有q才p"><a href="#只有q才p" class="headerlink" title="&#x3D;&#x3D;只有q才p&#x3D;&#x3D;"></a>&#x3D;&#x3D;只有q才p&#x3D;&#x3D;</h3><h3 id="除非q才p"><a href="#除非q才p" class="headerlink" title="&#x3D;&#x3D;除非q才p&#x3D;&#x3D;"></a>&#x3D;&#x3D;除非q才p&#x3D;&#x3D;</h3><h3 id="除非q否则非p"><a href="#除非q否则非p" class="headerlink" title="&#x3D;&#x3D;除非q否则非p&#x3D;&#x3D;"></a>&#x3D;&#x3D;除非q否则非p&#x3D;&#x3D;</h3><hr><hr><ol><li><p>相容或（inclusive or）：也称为&#x3D;&#x3D;逻辑或&#x3D;（logical or），&#x3D;&#x3D;表示两个条件中至少有一个成立，或者两个条件都成立&#x3D;&#x3D;。例如，如果A为真或者B为真，或者A和B都为真，则相容或成立。</p><p>&#x3D;&#x3D;pVq&#x3D;&#x3D;</p></li><li><p>排斥或（exclusive or）：也称为&#x3D;&#x3D;异或&#x3D;&#x3D;（xor），表示&#x3D;&#x3D;两个条件中只有一个成立，而不能同时成立&#x3D;&#x3D;。换句话说，如果A为真，B为假，或者A为假，B为真，则排斥或成立。如果A和B都为真，或者都为假，则排斥或不成立</p><p>&#x3D;&#x3D;（pA非q）V（非pAq）&#x3D;&#x3D;</p></li><li><table><thead><tr><th>p,q</th><th>pVq逻辑或</th><th>(pA非q）V（非pAq)异或</th></tr></thead><tbody><tr><td>0 0</td><td>0</td><td>0</td></tr><tr><td>0 1</td><td>1</td><td>1</td></tr><tr><td>1 0</td><td>1</td><td>1</td></tr><tr><td>1 1</td><td>1</td><td>0</td></tr></tbody></table><p>&#x3D;&#x3D;p,q在p与q<strong>不同时为真的条件</strong>下，p与q的<strong>相容或</strong>可以写成p与q的<strong>排斥或</strong>&#x3D;&#x3D;</p></li></ol></blockquote><h5 id="用于"><a href="#用于" class="headerlink" title="&#x3D;&#x3D;用于&#x3D;&#x3D;"></a>&#x3D;&#x3D;用于&#x3D;&#x3D;</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006144956602.png" class="" title="image-20231006144956602"><h4 id="J2命题公式及其赋值"><a href="#J2命题公式及其赋值" class="headerlink" title="J2命题公式及其赋值"></a>J2命题公式及其赋值</h4><img src="/xu-runbo/post/3fb56f9d/image-20231006134529570.png" class="" title="image-20231006134529570"><img src="/xu-runbo/post/3fb56f9d/image-20231006134707736.png" class="" title="image-20231006134707736"><h5 id="合式公式"><a href="#合式公式" class="headerlink" title="合式公式"></a>合式公式</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006134817928.png" class="" title="image-20231006134817928"><img src="/xu-runbo/post/3fb56f9d/image-20231006135000240.png" class="" title="image-20231006135000240"><h5 id="公式的层次"><a href="#公式的层次" class="headerlink" title="公式的层次"></a>公式的层次</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006141001130.png" class="" title="image-20231006141001130"><h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006141330344.png" class="" title="image-20231006141330344"><p>单个是0层</p><p>p,q</p><p>非qVp</p><p>相当于1 和 0 取最大然后加上中间联结词造成的1等于两层</p><p>&#x3D;&#x3D;不能简单的数联结词&#x3D;&#x3D;</p><h5 id="公式的赋值"><a href="#公式的赋值" class="headerlink" title="公式的赋值"></a>公式的赋值</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006141540826.png" class="" title="image-20231006141540826"><img src="/xu-runbo/post/3fb56f9d/image-20231006141642336.png" class="" title="image-20231006141642336"><p>&#x3D;&#x3D;含有n个命题变变项的公式共有2<sup>n</sup>个不同的赋值&#x3D;&#x3D;</p><p>例如A:pVq</p><table><thead><tr><th>p</th><th>q</th><th>pVq</th><th>~~</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>成真赋值</td></tr><tr><td>0</td><td>0</td><td>0</td><td>成假赋值</td></tr><tr><td>1</td><td>0</td><td>1</td><td>成真赋值</td></tr><tr><td>0</td><td>1</td><td>1</td><td>成真赋值</td></tr></tbody></table><p>四种不同的赋值</p><p>也叫</p><h5 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h5><p>列出2<sup>n</sup>个赋值</p><img src="/xu-runbo/post/3fb56f9d/image-20231006142223309.png" class="" title="image-20231006142223309"><p>0 0</p><p>0 1</p><p>1 0</p><p>1 1</p><p>这才是(二进制)标准</p><img src="/xu-runbo/post/3fb56f9d/image-20231006142407034.png" class="" title="image-20231006142407034"><h5 id="公式的分类"><a href="#公式的分类" class="headerlink" title="公式的分类"></a>公式的分类</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006142536683.png" class="" title="image-20231006142536683"><p>分成三类</p><blockquote><ol><li>永真式</li><li>矛盾式</li><li>非永真式的可满足式</li></ol></blockquote><p>永真式一定式可满足式</p><p>反之不成立</p><img src="/xu-runbo/post/3fb56f9d/image-20231006142846827.png" class="" title="image-20231006142846827"><h5 id="哑元"><a href="#哑元" class="headerlink" title="哑元"></a>哑元</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006143030416.png" class="" title="image-20231006143030416"><h3 id="Z2命题逻辑与等值演算"><a href="#Z2命题逻辑与等值演算" class="headerlink" title="Z2命题逻辑与等值演算"></a>Z2命题逻辑与等值演算</h3><h4 id="J1等值式"><a href="#J1等值式" class="headerlink" title="J1等值式"></a>J1等值式</h4><h5 id="等值式的概念"><a href="#等值式的概念" class="headerlink" title="等值式的概念"></a>等值式的概念</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006154136085.png" class="" title="image-20231006154136085"><img src="/xu-runbo/post/3fb56f9d/image-20231006152801748.png" class="" title="image-20231006152801748"><h5 id="判断等值式的方法"><a href="#判断等值式的方法" class="headerlink" title="判断等值式的方法"></a>判断等值式的方法</h5><ol><li><p>真值表</p><img src="/xu-runbo/post/3fb56f9d/image-20231006153009577.png" class="" title="image-20231006153009577"><p>&#x3D;&#x3D;真值表的最后一列可以省略&#x3D;&#x3D;</p></li><li><p>等值演算</p><p>引入：当命题变相太多的时候就麻烦了</p><blockquote><img src="/xu-runbo/post/3fb56f9d/image-20231006153341382.png" class="" title="image-20231006153341382"><img src="/xu-runbo/post/3fb56f9d/image-20231006153352543.png" class="" title="image-20231006153352543"><p>&#x3D;&#x3D;用等值式及等值规则进行推算的过程称为等值演算&#x3D;&#x3D;</p></blockquote></li><li><p>范式</p></li></ol><h5 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006154429418.png" class="" title="image-20231006154429418"><img src="/xu-runbo/post/3fb56f9d/image-20231006154503965.png" class="" title="image-20231006154503965"><hr><hr><img src="/xu-runbo/post/3fb56f9d/image-20231006155231983.png" class="" title="image-20231006155231983"><h5 id="等值演算运算规则"><a href="#等值演算运算规则" class="headerlink" title="等值演算运算规则"></a>等值演算运算规则</h5><blockquote><p>在等值演算中，析取（disjunction）、合取（conjunction）和蕴含（implication）的运算顺序是从左到右进行的。</p><p>具体来说，如果有一个等值演算表达式如下： A ∨ B ∧ C → D</p><p>首先进行析取运算 A ∨ B，然后进行合取运算 (A ∨ B) ∧ C，最后进行蕴含运算 ((A ∨ B) ∧ C) → D。</p><p>需要注意的是，&#x3D;&#x3D;等值演算中的运算顺序并不会改变运算结果，因为等值演算中的运算符是满足结合律和交换律的。&#x3D;&#x3D;</p><p>关于计算方向，等值演算中的运算符是没有固定的计算方向的。换句话说，无论是析取、合取还是蕴含，都是&#x3D;&#x3D;&#x3D;从左到右进&#x3D;&#x3D;行计算的。</p><img src="/xu-runbo/post/3fb56f9d/image-20231006155005201.png" class="" title="image-20231006155005201"></blockquote><h5 id="判断公式类型原理"><a href="#判断公式类型原理" class="headerlink" title="判断公式类型原理"></a>判断公式类型原理</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006155337977.png" class="" title="image-20231006155337977"><h4 id="J2析取范式，合取范式"><a href="#J2析取范式，合取范式" class="headerlink" title="J2析取范式，合取范式"></a>J2析取范式，合取范式</h4><h5 id="文字，简单合区式，简单析取式定义"><a href="#文字，简单合区式，简单析取式定义" class="headerlink" title="文字，简单合区式，简单析取式定义"></a>文字，简单合区式，简单析取式定义</h5><p>&#x3D;&#x3D;<strong>单个文字既是简单合取式又是简单析取式</strong>&#x3D;&#x3D;</p><img src="/xu-runbo/post/3fb56f9d/image-20231006155549491.png" class="" title="image-20231006155549491"><img src="/xu-runbo/post/3fb56f9d/image-20231006155640521.png" class="" title="image-20231006155640521"><h5 id="定理"><a href="#定理" class="headerlink" title="&#x3D;&#x3D;定理&#x3D;&#x3D;"></a>&#x3D;&#x3D;定理&#x3D;&#x3D;</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006155821346.png" class="" title="image-20231006155821346"><img src="/xu-runbo/post/3fb56f9d/image-20231006160336127.png" class="" title="image-20231006160336127"><p>&#x3D;&#x3D;析取对应的是重言式&#x3D;&#x3D;</p><p>&#x3D;&#x3D;合区对应的是矛盾式&#x3D;&#x3D;</p><h5 id="范式定义"><a href="#范式定义" class="headerlink" title="范式定义"></a>范式定义</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006160526696.png" class="" title="image-20231006160526696"><p>&#x3D;&#x3D;一个文字既可以式析取式也可以是合取式&#x3D;&#x3D;</p><img src="/xu-runbo/post/3fb56f9d/image-20231006160538153.png" class="" title="image-20231006160538153"><h5 id="经典案例》》》"><a href="#经典案例》》》" class="headerlink" title="经典案例》》》"></a>经典案例》》》</h5><blockquote><p>非q合取r</p><p>既可以看作合取范式也可以看作析取范式</p><ol><li>当看作整体的时候，两个文字的合取，得到的是简单合取式，也就是析取范式</li><li>当看成两部分的时候，一个文字既可以式析取式也可以是合取式，这时候这两边都看成式简单析取式，最终就是合取范式咯</li></ol></blockquote><h5 id="范式的性质"><a href="#范式的性质" class="headerlink" title="范式的性质"></a>范式的性质</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006161556261.png" class="" title="image-20231006161556261"><img src="/xu-runbo/post/3fb56f9d/image-20231006161610724.png" class="" title="image-20231006161610724"> <hr><img src="/xu-runbo/post/3fb56f9d/image-20231006161745602.png" class="" title="image-20231006161745602"><img src="/xu-runbo/post/3fb56f9d/image-20231006161759179.png" class="" title="image-20231006161759179"><h5 id="求范式的步骤"><a href="#求范式的步骤" class="headerlink" title="求范式的步骤"></a>求范式的步骤</h5><p><a name="求范式"></a></p><img src="/xu-runbo/post/3fb56f9d/image-20231006162007573.png" class="" title="image-20231006162007573"><p>&#x3D;&#x3D;字典顺序通常是按照英文字母的顺序进行排列，从小写字母 a 到 z。&#x3D;&#x3D;</p><h5 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h5><img src="/xu-runbo/post/3fb56f9d/image-20231006164331993.png" class="" title="image-20231006164331993"><img src="/xu-runbo/post/3fb56f9d/image-20231006164441937.png" class="" title="image-20231006164441937"><p>&#x3D;&#x3D;析取范式和合取范式是不唯一的&#x3D;&#x3D;</p><h4 id="J3范式的唯一性—–主范式"><a href="#J3范式的唯一性—–主范式" class="headerlink" title="J3范式的唯一性—–主范式"></a>J3范式的唯一性—–主范式</h4><p><a name="极项"></a></p><img src="/xu-runbo/post/3fb56f9d/image-20231007205632246.png" class="" title="image-20231007205632246"><p><strong>非x和x只能痴线一个且必须出现</strong></p><h5 id="极小项与极大项的性质"><a href="#极小项与极大项的性质" class="headerlink" title="极小项与极大项的性质"></a>极小项与极大项的性质<img src="/xu-runbo/post/3fb56f9d/image-20231007205913760.png" class="" title="image-20231007205913760"></h5><p><strong>类似，因为每个命题变相只能以自身或者非自身出现，那么组成的极小（大）项可以有2<sup>n</sup>个</strong></p><p><em><em>之后二进制对应的十进制数叫做极小（大）项的角标记作mi</em>(Mi)</em>*</p><p><strong>极大项的成假赋值只有一个也就是全部都是0的时候V</strong></p><p>析取范式里面的是极小项</p><p>合取范式里面的是极大项</p><h5 id="p，q形成的极小项与极大项"><a href="#p，q形成的极小项与极大项" class="headerlink" title="p，q形成的极小项与极大项"></a>p，q形成的极小项与极大项</h5><p>&#x3D;&#x3D;根据对应的成真&#x2F;假赋值结果得到二进制&#x3D;&#x3D;</p><img src="/xu-runbo/post/3fb56f9d/image-20231007214345387.png" class="" title="image-20231007214345387"><hr><hr><img src="/xu-runbo/post/3fb56f9d/image-20231007210311896.png" class="" title="image-20231007210311896"><h5 id="p，q，r形成的极小项与极大项"><a href="#p，q，r形成的极小项与极大项" class="headerlink" title="p，q，r形成的极小项与极大项"></a>p，q，r形成的极小项与极大项</h5><img src="/xu-runbo/post/3fb56f9d/image-20231007210443216.png" class="" title="image-20231007210443216"><h5 id="极小项与极大项的关系"><a href="#极小项与极大项的关系" class="headerlink" title="极小项与极大项的关系"></a>极小项与极大项的关系</h5><p>设mi与Mi是命题变相P1P2P3P4。。。形成的极小项和极大项则</p><p>&#x3D;&#x3D;观察可以得到非mi等于Mi&#x3D;&#x3D;</p><p><code>非Mi=mi</code></p><p><code>非mi=Mi</code></p><h5 id="主范式的定义"><a href="#主范式的定义" class="headerlink" title="主范式的定义"></a>主范式的定义</h5><img src="/xu-runbo/post/3fb56f9d/image-20231007210824016.png" class="" title="image-20231007210824016"><p>这样就唯一了！</p><h5 id="主范式的存在性和唯一性定理"><a href="#主范式的存在性和唯一性定理" class="headerlink" title="&#x3D;&#x3D;主范式的存在性和唯一性定理&#x3D;&#x3D;"></a>&#x3D;&#x3D;主范式的存在性和唯一性定理&#x3D;&#x3D;</h5><p><strong>任何命题公式都存在与之等值的&#x3D;&#x3D;主析取范式&#x3D;&#x3D;和&#x3D;&#x3D;主合取范式&#x3D;&#x3D;，并且是唯一的</strong></p><h6 id="存在性"><a href="#存在性" class="headerlink" title="存在性"></a>存在性</h6><img src="/xu-runbo/post/3fb56f9d/image-20231007211521765.png" class="" title="image-20231007211521765"><img src="/xu-runbo/post/3fb56f9d/image-20231007211610430.png" class="" title="image-20231007211610430"><h6 id="唯一性"><a href="#唯一性" class="headerlink" title="唯一性"></a>唯一性</h6><img src="/xu-runbo/post/3fb56f9d/image-20231007211818242.png" class="" title="image-20231007211818242"><p>&#x3D;&#x3D;要做到都是主析取范式，bc都要保证每一项都含所有命题或者其否定。&#x3D;&#x3D;</p><p>&#x3D;&#x3D;但是，bc不等值。所以一个含p,另一个只能含非p&#x3D;&#x3D;</p><h5 id="★求主析取范式-主合取范式★"><a href="#★求主析取范式-主合取范式★" class="headerlink" title="★求主析取范式&#x2F;主合取范式★"></a>★求主析取范式&#x2F;主合取范式★</h5><blockquote><ol><li><p><a href="#%E6%B1%82%E8%8C%83%E5%BC%8F">求析取范式&#x2F;合取范式</a></p></li><li><p>&#x3D;&#x3D;把析取（合取）范式的每一项都换成极小（大）项&#x3D;&#x3D;——-<a href="#%E6%9E%81%E9%A1%B9">极小&#x2F;大项</a></p></li><li><p>根据极小项的成真赋值只有一种得到p,q,r。。。。 现在的取值得到二进制</p></li><li><p>根据极大项的成假赋值只有一种得到p,q,r。。。。 现在的取值得到二进制</p><p>》主析取式里面的（）项是（合取式）极小项—成真赋值唯一</p><p>》主合取式里面的（）项是（析取式）极大项 —成假赋值唯一</p></li></ol></blockquote><h5 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h5><h6 id="求主析取饭式"><a href="#求主析取饭式" class="headerlink" title="&#x3D;&#x3D;求主析取饭式&#x3D;&#x3D;"></a>&#x3D;&#x3D;求主析取饭式&#x3D;&#x3D;</h6><img src="/xu-runbo/post/3fb56f9d/image-20231007215059903.png" class="" title="image-20231007215059903"><h6 id="求主合取范式"><a href="#求主合取范式" class="headerlink" title="求主合取范式"></a>求主合取范式</h6><img src="/xu-runbo/post/3fb56f9d/image-20231007220022671.png" class="" title="image-20231007220022671"><p>&#x3D;&#x3D;重复就保留一个就好了&#x3D;&#x3D;</p><h5 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h5><img src="/xu-runbo/post/3fb56f9d/image-20231007220119397.png" class="" title="image-20231007220119397"><img src="/xu-runbo/post/3fb56f9d/image-20231007220422033.png" class="" title="image-20231007220422033"><img src="/xu-runbo/post/3fb56f9d/image-20231007220605988.png" class="" title="image-20231007220605988"><p>&#x3D;&#x3D;总结：根据公式中的命题变相的个数决定极小&#x2F;大项中文字的个数而且还是字典排序&#x3D;&#x3D;</p><p>p14</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/xu-runbo/post/a378bd8e.html"/>
      <url>/xu-runbo/post/a378bd8e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python程序设计"><a href="#Python程序设计" class="headerlink" title="Python程序设计"></a>Python程序设计</h1><h3 id="2-1语法特点"><a href="#2-1语法特点" class="headerlink" title="2.1语法特点"></a>2.1语法特点</h3><h6 id="python没有花括号，需要严格的缩进格式。就是空格数是相同的"><a href="#python没有花括号，需要严格的缩进格式。就是空格数是相同的" class="headerlink" title="python没有花括号，需要严格的缩进格式。就是空格数是相同的"></a>python没有花括号，需要严格的缩进格式。就是空格数是相同的</h6><h6 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释#"></a>单行注释#</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">0</span></span><br><span class="line">b=<span class="number">0</span></span><br><span class="line">c=<span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="comment"># 允许同时为多个变量赋值</span></span><br><span class="line">p=l=k=<span class="number">5</span></span><br><span class="line"><span class="comment"># 可以变量之间相互赋值</span></span><br><span class="line"><span class="comment"># 同一个变量可以反复赋值</span></span><br><span class="line">d=<span class="string">&quot;12.3&quot;</span></span><br><span class="line"><span class="comment"># 弱语言类型，根据赋予的值来决定具体的数据类型</span></span><br><span class="line">a=<span class="built_in">input</span>(<span class="string">&quot;请输入a&quot;</span>)</span><br><span class="line">b=<span class="built_in">input</span>(<span class="string">&quot;请输入b&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> a&gt;b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好吗&quot;</span>)</span><br></pre></td></tr></table></figure><h6 id="多行注释用”””或’’’抱起来"><a href="#多行注释用”””或’’’抱起来" class="headerlink" title="多行注释用”””或’’’抱起来"></a>多行注释用”””或’’’抱起来</h6><h6 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h6><blockquote><p>在代码中固定不变的值</p></blockquote><h6 id="语句换行-书写换行，实际一行"><a href="#语句换行-书写换行，实际一行" class="headerlink" title="语句换行 书写换行，实际一行"></a>语句换行 书写换行，实际一行</h6><p><em><strong>反斜杠后面没有跟任何字符，因此它被视为一个续行符</strong></em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="string">&quot; 窗前明月光\</span></span><br><span class="line"><span class="string">  dsadasdas\</span></span><br><span class="line"><span class="string"> dsadasdas&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment">#结果是</span></span><br><span class="line"><span class="comment">#  窗前明月光  dsadasdas dsadasdas</span></span><br></pre></td></tr></table></figure><h6 id="同一行写多个语句用分号隔开"><a href="#同一行写多个语句用分号隔开" class="headerlink" title="同一行写多个语句用分号隔开"></a>同一行写多个语句用分号隔开</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m=<span class="number">10</span>;n=<span class="number">11</span></span><br><span class="line"><span class="comment"># 但可读性大大降低</span></span><br></pre></td></tr></table></figure><h6 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h6><h6 id="import-模块名"><a href="#import-模块名" class="headerlink" title="import 模块名"></a>import 模块名</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.PI)</span><br></pre></td></tr></table></figure><h3 id="2-2标准输入-输出"><a href="#2-2标准输入-输出" class="headerlink" title="2.2标准输入&#x2F;输出"></a><strong>2.2标准输入&#x2F;输出</strong></h3><h6 id="标准输入函数"><a href="#标准输入函数" class="headerlink" title="标准输入函数"></a>标准输入函数</h6><p>返回的是字符出类型</p><p>注意类型转换</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span>([prompt])</span><br><span class="line"><span class="comment">#prompt可选参数</span></span><br><span class="line"><span class="comment">#返回一个字符串对象</span></span><br><span class="line">name=<span class="built_in">input</span>(<span class="string">&quot;请输入你的大名&quot;</span>)</span><br><span class="line"><span class="comment">#如果需要其他类型的数据就需要强制转换</span></span><br></pre></td></tr></table></figure><h6 id="标准输出函数"><a href="#标准输出函数" class="headerlink" title="标准输出函数"></a>标准输出函数</h6><p>&#x3D;&#x3D;默认自动换行&#x3D;&#x3D;</p><p>&#x3D;&#x3D;print(“%dx%d&#x3D;%d”%(i,j,sum),end&#x3D;’\t’)&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print(value,……,sep=;&#x27;&#x27;,end=&#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># value代表输出对象，可以有多个，用逗号隔开</span></span><br><span class="line"><span class="comment"># sep用于设置输出信息的分隔符 默认为一个空格</span></span><br><span class="line"><span class="comment"># end表示print语句的结束负号，默认为换行符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你&quot;</span>,<span class="string">&quot;好&quot;</span>,<span class="string">&quot;啊&quot;</span>,sep=<span class="string">&quot;-&quot;</span>,end=<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment"># 你-好-啊a</span></span><br></pre></td></tr></table></figure><h5 id="如何格式化表达式"><a href="#如何格式化表达式" class="headerlink" title="如何格式化表达式?"></a><em><strong>如何格式化表达式?</strong></em></h5><p><em><strong>●f”{表达式}”</strong></em><br><em><strong>●”%s%d%f” % (表达式、表达式、表达式)</strong></em></p><h3 id="2-3变量和常量"><a href="#2-3变量和常量" class="headerlink" title="2.3变量和常量"></a><strong>2.3变量和常量</strong></h3><h6 id="在python中可以直接声明变量，不必声明变量的类型，也就是弱语言类型"><a href="#在python中可以直接声明变量，不必声明变量的类型，也就是弱语言类型" class="headerlink" title="在python中可以直接声明变量，不必声明变量的类型，也就是弱语言类型."></a>在python中可以直接声明变量，不必声明变量的类型，也就是弱语言类型.</h6><h6 id="虽然不需要声明但是在使用前一定要赋值"><a href="#虽然不需要声明但是在使用前一定要赋值" class="headerlink" title="虽然不需要声明但是在使用前一定要赋值"></a>虽然不需要声明但是在使用前一定要赋值</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b=<span class="number">0</span></span><br><span class="line">c=<span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="comment"># 允许同时为多个变量赋值</span></span><br><span class="line">p=l=k=<span class="number">5</span></span><br><span class="line"><span class="comment"># 可以变量之间相互赋值</span></span><br><span class="line"><span class="comment"># 同一个变量可以反复赋值</span></span><br><span class="line">d=<span class="string">&quot;12.3&quot;</span></span><br><span class="line"><span class="comment"># 弱语言类型，根据赋予的值来决定具体的数据类型</span></span><br></pre></td></tr></table></figure><h6 id="常量就是值不改变的，通常用全部大写的变量名表示常量"><a href="#常量就是值不改变的，通常用全部大写的变量名表示常量" class="headerlink" title="常量就是值不改变的，通常用全部大写的变量名表示常量"></a>常量就是值不改变的，通常用全部大写的变量名表示常量</h6><p>python<em>没有机制保护产量不会被改变</em></p><h3 id="2-4标识符和关键字"><a href="#2-4标识符和关键字" class="headerlink" title="2.4标识符和关键字"></a><strong>2.4标识符和关键字</strong></h3><ol><li>可以有&#x3D;&#x3D;大小写字母，数字，下划线&#x3D;&#x3D;</li><li>要求第一个字符不能是数字</li><li>区分大小写就是joke和JOKE不一样</li><li>在python3中汉字也可以出现在标识符里</li></ol><h3 id="2-5简单数据类型"><a href="#2-5简单数据类型" class="headerlink" title="2.5简单数据类型"></a><strong>2.5简单数据类型</strong></h3><h4 id="type-查数据类型"><a href="#type-查数据类型" class="headerlink" title="&#x3D;&#x3D;type()查数据类型&#x3D;&#x3D;"></a>&#x3D;&#x3D;type()查数据类型&#x3D;&#x3D;</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line">b=<span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><p>整形int特点</p><ol><li><p>不带小数点，分正负</p></li><li><p>在python中没有大小限制，只要内存许可就可以无限大</p></li><li><p>二进制0B开头，八进制0O开头，十六进制0X开头</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0b1010</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">0x81</span>)</span><br><span class="line"><span class="comment"># 结果是10</span></span><br><span class="line"><span class="comment"># 结果是129</span></span><br></pre></td></tr></table></figure></li><li><p>进制之间的转十进制转为二进制bin(十进制数)</p></li><li><p>十进制转为八进制oct(十进制数)</p></li><li><p>十进制转为十六进制hex(十进制数)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">21</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">21</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">21</span>))</span><br><span class="line"><span class="comment"># 0b10101</span></span><br><span class="line"><span class="comment"># 0o25</span></span><br><span class="line"><span class="comment"># 0x15</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="浮点类型特点"><a href="#浮点类型特点" class="headerlink" title="浮点类型特点"></a>浮点类型特点</h4><ol><li>整形转为float用float（整数150）&#x3D;&gt;150.0</li><li>1.2e2&#x3D;&gt;1.2*10^2^</li></ol><h4 id="布尔类型特点"><a href="#布尔类型特点" class="headerlink" title="布尔类型特点"></a>布尔类型特点</h4><ol><li>True和False</li><li>为0的数字0 0.0</li><li>空字符串’’ “”</li><li>空集合(){}[]</li><li>false</li><li>None</li><li>以上全为false</li></ol><h4 id="复数类型特点"><a href="#复数类型特点" class="headerlink" title="复数类型特点"></a>复数类型特点</h4><ol><li>数学上是a+bi</li><li>这里是real+imag</li><li>对应a&#x3D;1.5+2j&#x2F;J</li><li>获取实部和虚部，a.real，a.imag</li><li>把两个数转换为一个复数complex(a,b)&#x3D;&gt;a+bj</li></ol><h4 id="字符串类型特点"><a href="#字符串类型特点" class="headerlink" title="字符串类型特点"></a>字符串类型特点</h4><h6 id="标识字符串"><a href="#标识字符串" class="headerlink" title="标识字符串"></a>标识字符串</h6><ol><li>标识字符串用 单引号’’ 双引号”” 三单引号’’’ ‘’’三双””” “””</li><li>‘你好啊’ , ”你好啊“,     “””你好啊””” ,   ‘’’你好啊’’’</li><li>&#x3D;&#x3D;特殊的三引号抱起来，能原封不动的表示字符串，保留换行和缩进。。&#x3D;&#x3D;</li></ol><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><ol><li><p>用\开头</p></li><li><p>‘let’s go’&#x3D;&gt;’let\‘s go’</p></li><li><p>\n换行</p></li><li><p>\t横向制表符</p></li><li><p>\r是回车符，&#x3D;&#x3D;它的作用是将光标移到当前行的开头&#x3D;&#x3D;，覆盖之前的内容。</p></li><li><p>\b是退格符，&#x3D;&#x3D;它的作用是将光标向左移动一格&#x3D;&#x3D;，可以用来删除之前输入的字符。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dsadasdadsadasd\r我在这&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dasdasdsav\b我&quot;</span>)</span><br><span class="line"><span class="comment"># 我在这</span></span><br><span class="line"><span class="comment"># dasdasdsa我</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="字符串基本操作"><a href="#字符串基本操作" class="headerlink" title="&#x3D;&#x3D;字符串基本操作&#x3D;&#x3D;"></a>&#x3D;&#x3D;字符串基本操作&#x3D;&#x3D;</h4><ol><li><h5 id="正索引-负索引-但不可修改"><a href="#正索引-负索引-但不可修改" class="headerlink" title="正索引&#x2F;负索引(但不可修改)"></a>正索引&#x2F;负索引(但不可修改)</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="comment"># a[1]=9???不可以</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)!</span><br><span class="line"><span class="comment"># p 0 -6</span></span><br><span class="line"><span class="comment"># y 1 -5</span></span><br><span class="line"><span class="comment"># t 2 -4</span></span><br><span class="line"><span class="comment"># h 3 -3</span></span><br><span class="line"><span class="comment"># o 4 -2</span></span><br><span class="line"><span class="comment"># n 5 -1</span></span><br></pre></td></tr></table></figure></li><li><p><strong>&#x3D;&#x3D;python不允许以任何方式改变字符串对象的值，否则会出错&#x3D;&#x3D;</strong></p></li><li><p>&#x3D;&#x3D;可以用+号连接两个字符串，可以用*生成重复的字符串&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;比你好&quot;</span></span><br><span class="line">b=<span class="string">&quot;比是的&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a*<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="comment"># 比你好比你好比你好比你好比你好比你好</span></span><br><span class="line"><span class="comment"># 比你好比是的</span></span><br></pre></td></tr></table></figure></li><li><h5 id="字符串切片操作"><a href="#字符串切片操作" class="headerlink" title="字符串切片操作"></a>字符串切片操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;python&quot;</span></span><br><span class="line"><span class="comment"># [b,c]</span></span><br><span class="line"><span class="comment"># b代表起点，c代表下标加1，左闭右开 [start，end)</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># py</span></span><br><span class="line"><span class="comment"># 左边不写的话默认为0</span></span><br><span class="line"><span class="comment"># 右边不写的话默认为字符串长度</span></span><br></pre></td></tr></table></figure></li><li><p>字符串逆转</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;你好啊&quot;</span></span><br><span class="line">a=a[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li></ol><h5 id="字符串的常用方法："><a href="#字符串的常用方法：" class="headerlink" title="字符串的常用方法："></a>字符串的常用方法：</h5><p>&#x3D;&#x3D;这些操作都没有真正改变原来的字符串，而是返回了一个新的字符串。原来的字符串仍然保持不变。如果要改变原来的字符串，可以将新的字符串赋值给原来的变量。例如：&#x3D;&#x3D;</p><blockquote><ol><li><p>str.capitalize()  把字符串的首字母变成大写</p></li><li><p>str.find(x)   找到字符串中x的下标</p></li><li><p>str.index(x)   找到字符串中x的下标</p></li><li><p>str.lower()   把字符串中的大写变成小写</p></li><li><p>str.upper()  把字符串中的小写变成大写</p></li><li><p>str.split(x),用x把字符串给分割开，&#x3D;&#x3D;得到一个list 列表&#x3D;&#x3D;，<strong>默认是以空格分开。</strong></p></li><li><h5 id="在Python中，字符串对象有一个-strip-方法，用于去除字符串两端的空白字符（包括空格、制表符和换行符）。"><a href="#在Python中，字符串对象有一个-strip-方法，用于去除字符串两端的空白字符（包括空格、制表符和换行符）。" class="headerlink" title="在Python中，字符串对象有一个 strip() 方法，用于去除字符串两端的空白字符（包括空格、制表符和换行符）。"></a>在Python中，字符串对象有一个 <code>strip()</code> 方法，用于去除字符串两端的空白字符（包括空格、制表符和换行符）。</h5><h5 id="strip-方法不会修改原始字符串，而是返回一个新的字符串。如果指定参数-就清除字符串两端的指定字符"><a href="#strip-方法不会修改原始字符串，而是返回一个新的字符串。如果指定参数-就清除字符串两端的指定字符" class="headerlink" title="strip() 方法不会修改原始字符串，而是返回一个新的字符串。如果指定参数,就清除字符串两端的指定字符"></a><code>strip()</code> 方法不会修改原始字符串，而是返回一个新的字符串。如果指定参数,就清除字符串两端的指定字符</h5></li></ol></blockquote><p>a &#x3D; a.replace(“python”,”蟒蛇”)&#x3D;&#x3D;</p><ol><li><pre><code class="python">a=&quot;python&quot;# capitalize(a)print(a.capitalize())print(a.find(&#39;o&#39;))print(a.lower())print(a.upper())print(a.count(&#39;p&#39;))print(a.split(&#39;p&#39;))#得到一个列表对象# 默认是[&#39;python&#39;]# [&#39;&#39;, &#39;ython&#39;]print(a)print(a.replace(&quot;python&quot;,&quot;蟒蛇&quot;))print(a)# Python# 4# python# PYTHON# 1# [&#39;&#39;, &#39;ython&#39;]# python# 蟒蛇# python<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### 字符串拼接</span><br><span class="line"></span><br><span class="line">&gt; 1==printf(&quot;%d+%d=%d&quot;%(a,b,c))==</span><br><span class="line">&gt;</span><br><span class="line">&gt; ----------------------------------------------------------------</span><br><span class="line">&gt;</span><br><span class="line">&gt; 2 ***==f&quot;内容&#123;变量&#125;&quot;==***</span><br><span class="line">&gt;</span><br><span class="line">&gt; 注意里面只能是变量，表达式不可以sum-=1000</span><br><span class="line">&gt;</span><br><span class="line">&gt; ---</span><br><span class="line">&gt;</span><br><span class="line">&gt; Traceback (most recent call last):</span><br><span class="line">&gt; File &quot;e:\Bluecode\python\learn\learn\review.py&quot;, line 7, in &lt;module&gt;</span><br><span class="line">&gt;  print(f&quot;&#123;aa1&#125;+&#123;bb1+1&#125;=&#123;aa1+bb1&#125;&quot;)</span><br><span class="line">&gt;                 ~~~^~</span><br><span class="line">&gt; TypeError: can only concatenate str (not &quot;int&quot;) to str</span><br><span class="line">&gt;                 ~~~</span><br><span class="line">&gt;</span><br><span class="line">&gt; ```python</span><br><span class="line">&gt; aa=int(input(&quot;请输入aa&quot;))</span><br><span class="line">&gt; bb=int(input(&quot;请输入bb&quot;))</span><br><span class="line">&gt; print(f&quot;&#123;aa&#125;+&#123;bb&#125;=&#123;aa+bb&#125;&quot;)</span><br><span class="line">&gt; aa1=(input(&quot;请输入aa1&quot;))</span><br><span class="line">&gt; bb1=(input(&quot;请输入bb1&quot;))</span><br><span class="line">&gt; print(f&quot;&#123;aa1&#125;+&#123;bb1&#125;=&#123;aa1+bb1&#125;&quot;)</span><br><span class="line">&gt; # 请输入aa7</span><br><span class="line">&gt; # 请输入bb8</span><br><span class="line">&gt; # 7+8=15</span><br><span class="line">&gt; # 请输入aa17</span><br><span class="line">&gt; # 请输入bb18</span><br><span class="line">&gt; # 7+8=78</span><br></pre></td></tr></table></figure>&gt;&gt; `input默认得到的是字符串对象`</code></pre></li></ol><h5 id="格式化的精度控制"><a href="#格式化的精度控制" class="headerlink" title="格式化的精度控制"></a><strong>格式化的精度控制</strong></h5><p>特殊在设置宽度后&#x3D;&#x3D;，是补空格&#x3D;&#x3D;，&#x3D;&#x3D;而且还是四舍五入&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=<span class="number">11.39</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%d&quot;</span>%c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.2f&quot;</span>%c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%5.1f&quot;</span>%c)</span><br><span class="line"><span class="comment"># 11</span></span><br><span class="line"><span class="comment"># 11.39</span></span><br><span class="line"><span class="comment">#  11.4</span></span><br></pre></td></tr></table></figure><h6 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;it it dsasdasd it&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.count(<span class="string">&#x27;it&#x27;</span>))</span><br><span class="line">a=a.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a=a.split(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># it|it|dsasdasd|it</span></span><br><span class="line"><span class="comment"># [&#x27;it&#x27;, &#x27;it&#x27;, &#x27;dsasdasd&#x27;, &#x27;it&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="2-6-类型转换"><a href="#2-6-类型转换" class="headerlink" title="2.6&#x3D;&#x3D;类型转换&#x3D;&#x3D;"></a>2.6&#x3D;&#x3D;类型转换&#x3D;&#x3D;</h3><h5 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h5><ol><li><h5 id="int-x-得到整肃"><a href="#int-x-得到整肃" class="headerlink" title="int(x) 得到整肃"></a>int(x) 得到整肃</h5></li><li><h5 id="float-x-得到浮点数"><a href="#float-x-得到浮点数" class="headerlink" title="float(x) 得到浮点数"></a>float(x) 得到浮点数</h5></li><li><h5 id="complex-a-b-得到对应的复数"><a href="#complex-a-b-得到对应的复数" class="headerlink" title="complex(a,b) 得到对应的复数"></a>complex(a,b) 得到对应的复数</h5></li><li><h5 id="str-x-将对象转化为人容读取的字符串"><a href="#str-x-将对象转化为人容读取的字符串" class="headerlink" title="&#x3D;&#x3D;str(x) 将对象转化为人容读取的字符串&#x3D;&#x3D;"></a>&#x3D;&#x3D;str(x) 将对象转化为人容读取的字符串&#x3D;&#x3D;</h5></li><li><h5 id="repr-x-将对象转化为编辑器容读取的字符串"><a href="#repr-x-将对象转化为编辑器容读取的字符串" class="headerlink" title="repr(x) 将对象转化为编辑器容读取的字符串"></a>repr(x) 将对象转化为编辑器容读取的字符串</h5></li><li><h5 id="eval-str"><a href="#eval-str" class="headerlink" title="eval(str)"></a>eval(str)</h5></li><li><h5 id="chr-x-得到ancil对应的字符"><a href="#chr-x-得到ancil对应的字符" class="headerlink" title="chr(x) 得到ancil对应的字符"></a>chr(x) 得到ancil对应的字符</h5></li><li><h5 id="ord-x-得到l对应的ancil马"><a href="#ord-x-得到l对应的ancil马" class="headerlink" title="ord(x) 得到l对应的ancil马"></a>ord(x) 得到l对应的ancil马</h5></li><li><h5 id="bin-oct-hex"><a href="#bin-oct-hex" class="headerlink" title="bin(),oct(),hex()"></a>bin(),oct(),hex()</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">1.2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">complex</span>(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># str,repr</span></span><br><span class="line"><span class="comment"># print(eval(&quot;sdasd&quot;+&quot;xrb&quot;))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">77</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">18</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">18</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">18</span>))</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 1.0</span></span><br><span class="line"><span class="comment"># (1+2j)</span></span><br><span class="line"><span class="comment"># M</span></span><br><span class="line"><span class="comment"># 0b10010</span></span><br><span class="line"><span class="comment"># 0o22</span></span><br><span class="line"><span class="comment"># 0x12</span></span><br></pre></td></tr></table></figure></li><li><p>各种进制转换为10进制</p></li></ol><p>   使用int的强制转换的第二个参数</p>   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num_two=<span class="built_in">int</span>(<span class="built_in">bin</span>(<span class="number">16</span>),<span class="number">2</span>)</span><br><span class="line">num_eight=<span class="built_in">int</span>(<span class="built_in">oct</span>(<span class="number">16</span>),<span class="number">8</span>)</span><br><span class="line">num_16=<span class="built_in">int</span>(<span class="string">&quot;aB234&quot;</span>,<span class="number">16</span>);</span><br><span class="line"><span class="comment">#int 的第二个参数代表前面字符串的进制数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;num_two&#125;</span>+++++++<span class="subst">&#123;num_eight&#125;</span>++++<span class="subst">&#123;num_16&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">#16+++++++16++++700980</span></span><br></pre></td></tr></table></figure><h5 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="&#x3D;&#x3D;运算符和表达式&#x3D;&#x3D;"></a>&#x3D;&#x3D;运算符和表达式&#x3D;&#x3D;</h5><p>对数据进行加工处理的过程叫运算</p><p>表示运算的符号成为运算符</p><p>参加运算的数据叫做操作数</p><h6 id="2-71算数运算符"><a href="#2-71算数运算符" class="headerlink" title="2.71算数运算符"></a>2.71算数运算符</h6><ol><li><ul><li></li></ul></li><li><ul><li></li></ul></li><li><ul><li></li></ul></li><li>&#x2F;</li><li>%</li><li>**</li><li>&#x2F;&#x2F;</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">5</span>;b=<span class="number">2</span>;c=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br><span class="line"><span class="built_in">print</span>(a**b)</span><br><span class="line"><span class="comment">#a的b次方</span></span><br><span class="line"><span class="built_in">print</span>(c//b)</span><br><span class="line"><span class="comment">#c整除b，商的整数部分</span></span><br></pre></td></tr></table></figure><h6 id="2-72比较运算符"><a href="#2-72比较运算符" class="headerlink" title="2.72比较运算符"></a>2.72比较运算符</h6><ol><li>&#x3D;&#x3D;</li><li>!&#x3D;</li><li>&lt;&gt;类似!&#x3D; &#x3D;&#x3D;在Python中，<code>&lt;&gt;</code> 运算符已经被弃用，因此不再被支持。&#x3D;&#x3D;</li><li>&gt;</li><li>&lt;</li><li>&gt;&#x3D;</li><li>&lt;&#x3D;</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">2</span>;b=<span class="number">2</span>;c=<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(a&gt;b)</span><br><span class="line"><span class="built_in">print</span>(a==b)</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><h6 id="2-73逻辑运算符-与或非"><a href="#2-73逻辑运算符-与或非" class="headerlink" title="2.73逻辑运算符-与或非-"></a>2.73逻辑运算符-与或非-</h6><p>&#x3D;&#x3D;默认从左到右&#x3D;&#x3D;</p><ol><li><p>与and   <strong>&#x3D;&#x3D;第一个为0就返回0，第一个为1就返回第二个操作数&#x3D;&#x3D;</strong></p></li><li><h6 id="或or-第一个为1就返回1，第一个为0就返回第二个操作数"><a href="#或or-第一个为1就返回1，第一个为0就返回第二个操作数" class="headerlink" title="或or   &#x3D;&#x3D;第一个为1就返回1，第一个为0就返回第二个操作数&#x3D;&#x3D;"></a>或or   &#x3D;&#x3D;第一个为1就返回1，第一个为0就返回第二个操作数&#x3D;&#x3D;</h6></li><li><p>根据第一个操作数的真假来确定是否返回第二个操作数</p></li><li><p>非not</p></li><li><p>&#x3D;&#x3D;注意逻辑运算符左右不能直接与操作数直接接触&#x3D;&#x3D;</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">1</span></span><br><span class="line">c=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> a==b <span class="keyword">and</span> b==c:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;asddassd&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2-74赋值运算符"><a href="#2-74赋值运算符" class="headerlink" title="2.74赋值运算符"></a>2.74赋值运算符</h6><p>&#x3D;</p><p>x&#x3D;x+1</p><blockquote><ol><li>+&#x3D;</li><li>-&#x3D;</li><li>&#x2F;&#x3D;</li><li>*&#x3D;</li><li>%&#x3D;</li><li>**&#x3D;</li><li>&#x2F;&#x2F;&#x3D;</li></ol></blockquote><p>&#x3D;&#x3D;计算后并且赋值&#x3D;&#x3D;</p><h6 id="2-75位运算符（5）"><a href="#2-75位运算符（5）" class="headerlink" title="2.75位运算符（5）"></a>2.75位运算符（5）</h6><p>Python里面没有&amp;&amp;&#x2F;&#x2F;||</p><p>对八位二进制数进行运算，&amp;有假就0，|有真就1,异或&#x3D;&#x3D;同1异0&#x3D;&#x3D;</p><p>~1变-，0变1</p><p>左移整体左移，超出去的保留符号（1代表负，0代表正）右边补0</p><p>​</p><blockquote><ol><li>按位与&amp;</li><li>按位或|</li><li>按位异位~</li><li>左移&lt;&lt;</li><li>右移&gt;&gt;</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a=3</span></span><br><span class="line"><span class="comment"># 0 0 0 0 0 0 1 1</span></span><br><span class="line"><span class="comment"># a&lt;&lt;2</span></span><br><span class="line"><span class="comment"># 0 0 0 0 1 1 0 0</span></span><br><span class="line"><span class="comment"># 12=3*2的2次方</span></span><br></pre></td></tr></table></figure><h6 id="2-76成员运算符"><a href="#2-76成员运算符" class="headerlink" title="2.76成员运算符"></a>2.76成员运算符</h6><p>&#x3D;&#x3D;用来判断序列中是否存在某个成员&#x3D;&#x3D;</p><blockquote><ol><li>in</li><li>not in</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arry=[<span class="string">&quot;电视&quot;</span>,<span class="string">&quot;冰箱&quot;</span>,<span class="string">&quot;电脑&quot;</span>,<span class="string">&quot;女盆友&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;电视&quot;</span><span class="keyword">in</span> arry)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;电视&#x27;</span><span class="keyword">in</span> arry)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;男朋友&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> arry)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h6 id="2-77标识运算符"><a href="#2-77标识运算符" class="headerlink" title="2.77标识运算符"></a>2.77标识运算符</h6><p>&#x3D;&#x3D;判断两个变量是否引用同一个对象&#x3D;&#x3D;</p><blockquote><ol><li>is</li><li>is not</li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;电视&quot;</span></span><br><span class="line">b=<span class="string">&quot;冰箱&quot;</span></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a和b引用同一个对象&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a和b引用不同的对象&quot;</span>)</span><br><span class="line">    a=b</span><br><span class="line">    <span class="keyword">if</span> a <span class="keyword">is</span> b:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;a和b引用同一个对象&quot;</span>)</span><br><span class="line"><span class="comment"># a和b引用不同的对象</span></span><br><span class="line"><span class="comment"># a和b引用同一个对象</span></span><br></pre></td></tr></table></figure><h5 id="2-8运算符优先级"><a href="#2-8运算符优先级" class="headerlink" title="2.8运算符优先级"></a>2.8运算符优先级</h5><blockquote><ol><li>括号：()</li><li>幂运算：**</li><li>正负号：+x, -x</li><li>乘除取模运算：*, &#x2F;, %</li><li>加减运算：+, -</li><li>比较运算：&lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;, &#x3D;&#x3D;, !&#x3D;</li><li>逻辑运算：not, and, or</li><li>赋值运算：&#x3D;, +&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D;, **&#x3D;, &#x2F;&#x2F;&#x3D;</li></ol></blockquote><p>&#x3D;&#x3D;使用括号：如果有任何疑问，可以使用括号明确指定运算的顺序。&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">3</span></span><br><span class="line">b=<span class="number">0</span></span><br><span class="line">d=a <span class="keyword">and</span> b</span><br><span class="line">e=a <span class="keyword">or</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">and</span> b)</span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">or</span> b)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment">#0</span></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line"><span class="comment">#0</span></span><br><span class="line"><span class="comment">#3</span></span><br></pre></td></tr></table></figure><h3 id="3-1python控制语句"><a href="#3-1python控制语句" class="headerlink" title="3.1python控制语句"></a>3.1python控制语句</h3><p>&#x3D;&#x3D;不成文结论 ：相当于()&#x3D;&#x3D;</p><h5 id="3-123选择语句"><a href="#3-123选择语句" class="headerlink" title="3.123选择语句"></a>3.123选择语句</h5><ol><li>简单if语句</li><li>if-else语句</li><li>if-elif-else语句</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aa=<span class="number">10</span>;bb=<span class="number">7</span></span><br><span class="line"><span class="keyword">if</span> aa&lt;bb:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我好啊&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span>&lt;=aa&lt;=<span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">5</span>&lt;=aa&lt;=<span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello3&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意形式</strong></p><p>python中是这样写的不同于C&#x2F;C++</p><p>&#x3D;&#x3D;5&lt;&#x3D;aa&lt;&#x3D;7:&#x3D;&#x3D;</p><h5 id="3-14if嵌套语句"><a href="#3-14if嵌套语句" class="headerlink" title="3.14if嵌套语句"></a>3.14if嵌套语句</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> aa&gt;bb:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;helo&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> aa&gt;<span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;heloowos&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;阿三大苏打&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;十大大苏打实打实&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-2循环语句"><a href="#3-2循环语句" class="headerlink" title="3.2循环语句"></a>3.2循环语句</h3><h5 id="For循环语句"><a href="#For循环语句" class="headerlink" title="For循环语句"></a>For循环语句</h5><blockquote><p>for 循环变量 in 循环对象（可迭代对象）</p><p>循环体</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"><span class="comment"># b</span></span><br><span class="line"><span class="comment"># c</span></span><br></pre></td></tr></table></figure><h6 id="整数序列range"><a href="#整数序列range" class="headerlink" title="&#x3D;&#x3D;整数序列range&#x3D;&#x3D;"></a>&#x3D;&#x3D;整数序列range&#x3D;&#x3D;</h6><p>range（start，end）</p><p>[start,end-1]</p><h6 id="for循环嵌套"><a href="#for循环嵌套" class="headerlink" title="for循环嵌套"></a>for循环嵌套</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>=<span class="number">0</span></span><br><span class="line">a1=<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">b1=<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> b1:</span><br><span class="line">        <span class="keyword">if</span> i&gt;=j:</span><br><span class="line">            <span class="built_in">sum</span>=i*j</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%dx%d=%d&quot;</span>%(i,j,<span class="built_in">sum</span>),end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>1x1&#x3D;1</p><p>2x1&#x3D;22x2&#x3D;4</p><p>3x1&#x3D;33x2&#x3D;63x3&#x3D;9</p><p>4x1&#x3D;44x2&#x3D;84x3&#x3D;124x4&#x3D;16</p><p>5x1&#x3D;55x2&#x3D;105x3&#x3D;155x4&#x3D;205x5&#x3D;25</p><p>6x1&#x3D;66x2&#x3D;126x3&#x3D;186x4&#x3D;246x5&#x3D;306x6&#x3D;36</p><p>7x1&#x3D;77x2&#x3D;147x3&#x3D;217x4&#x3D;287x5&#x3D;357x6&#x3D;427x7&#x3D;49</p><p>8x1&#x3D;88x2&#x3D;168x3&#x3D;248x4&#x3D;328x5&#x3D;408x6&#x3D;488x7&#x3D;568x8&#x3D;64</p><p>9x1&#x3D;99x2&#x3D;189x3&#x3D;279x4&#x3D;369x5&#x3D;459x6&#x3D;549x7&#x3D;639x8&#x3D;729x9&#x3D;81</p></blockquote><p>&#x3D;&#x3D;print(“%dx%d&#x3D;%d”%(i,j,sum),end&#x3D;’\t’)&#x3D;&#x3D;</p><h5 id="while循环语句"><a href="#while循环语句" class="headerlink" title="while循环语句"></a>while循环语句</h5><blockquote><h6 id="while-条件表达式："><a href="#while-条件表达式：" class="headerlink" title="while 条件表达式："></a>while 条件表达式：</h6><p>循环体</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> k&lt;=<span class="number">10</span>:</span><br><span class="line">    sum1+=k</span><br><span class="line">    k+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(sum1)</span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 15</span></span><br><span class="line"><span class="comment"># 21</span></span><br><span class="line"><span class="comment"># 28</span></span><br><span class="line"><span class="comment"># 36</span></span><br><span class="line"><span class="comment"># 45</span></span><br><span class="line"><span class="comment"># 55</span></span><br></pre></td></tr></table></figure><h6 id="while-for混合嵌套-while-while-互相嵌套"><a href="#while-for混合嵌套-while-while-互相嵌套" class="headerlink" title="while for混合嵌套 while while 互相嵌套"></a>while for混合嵌套 while while 互相嵌套</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pp=<span class="number">0</span></span><br><span class="line">sum2=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> pp&lt;=<span class="number">10</span>:</span><br><span class="line">    pp+=<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(pp)</span><br><span class="line">    <span class="keyword">for</span> o <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">        sum2=pp+o</span><br><span class="line">        <span class="comment"># print(o)</span></span><br><span class="line">        <span class="keyword">if</span> pp&gt;=o:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;%d+%d=%d&quot;</span>%(pp,o,sum2),end=<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>运行结果:</p><p>1<br>1+1&#x3D;2\2<br>2+1&#x3D;3\2+2&#x3D;4\3<br>3+1&#x3D;4\3+2&#x3D;5\3+3&#x3D;6\4<br>4+1&#x3D;5\4+2&#x3D;6\4+3&#x3D;7\4+4&#x3D;8\5<br>5+1&#x3D;6\5+2&#x3D;7\5+3&#x3D;8\5+4&#x3D;9\5+5&#x3D;10\6<br>6+1&#x3D;7\6+2&#x3D;8\6+3&#x3D;9\6+4&#x3D;10\6+5&#x3D;11\6+6&#x3D;12\7<br>7+1&#x3D;8\7+2&#x3D;9\7+3&#x3D;10\7+4&#x3D;11\7+5&#x3D;12\7+6&#x3D;13\7+7&#x3D;14\8<br>8+1&#x3D;9\8+2&#x3D;10\8+3&#x3D;11\8+4&#x3D;12\8+5&#x3D;13\8+6&#x3D;14\8+7&#x3D;15\8+8&#x3D;16\9<br>9+1&#x3D;10\9+2&#x3D;11\9+3&#x3D;12\9+4&#x3D;13\9+5&#x3D;14\9+6&#x3D;15\9+7&#x3D;16\9+8&#x3D;17\9+9&#x3D;18\10<br>10+1&#x3D;11\10+2&#x3D;12\10+3&#x3D;13\10+4&#x3D;14\10+5&#x3D;15\10+6&#x3D;16\10+7&#x3D;17\10+8&#x3D;18\10+9&#x3D;19\10+10&#x3D;20\11<br>11+1&#x3D;12\11+2&#x3D;13\11+3&#x3D;14\11+4&#x3D;15\11+5&#x3D;16\11+6&#x3D;17\11+7&#x3D;18\11+8&#x3D;19\11+9&#x3D;20\11+10&#x3D;21\</p></blockquote><h5 id="while循环和for循环的对比"><a href="#while循环和for循环的对比" class="headerlink" title="while循环和for循环的对比"></a>while循环和for循环的对比</h5><p>while循环和for循环，都是循环语句，但细节不同:<br>在循环控制上:<br>while循环可以<strong>自定循环条件，并自行控制</strong><br>for循环不可以自定循环条件,只可以一个个从容器内取出数据<br>●<br>在无限循环上:<br>while循环可以通过条件控制做到无限循环<br>●<br>for循环理论上不可以,因为被遍历的容器容量不是无限的<br>在使用场景上:<br>while循环适用于任何想要循环的场景<br>for循环适用于，遍历数据容器的场景或简单的固定次数循环场景</p><h3 id="3-3跳转语句"><a href="#3-3跳转语句" class="headerlink" title="3.3跳转语句"></a>3.3跳转语句</h3><h5 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h5><blockquote><p>跳出当前层的循环。****</p></blockquote><h5 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h5><blockquote><p>这次循环到这里结束下面的不要执行了，然后进入下一次循环</p></blockquote><h5 id="pass语句"><a href="#pass语句" class="headerlink" title="&#x3D;&#x3D;pass语句&#x3D;&#x3D;"></a>&#x3D;&#x3D;pass语句&#x3D;&#x3D;</h5><blockquote><p>空代码块，占位符作用。</p></blockquote><h5 id="else但配合循环使用"><a href="#else但配合循环使用" class="headerlink" title="&#x3D;&#x3D;else但配合循环使用&#x3D;&#x3D;"></a>&#x3D;&#x3D;else但配合循环使用&#x3D;&#x3D;</h5><blockquote><p>&#x3D;&#x3D;循环正常结束或者while条件判断为False执行else后面的语句&#x3D;&#x3D;</p><p>如果循环break提前结束了，那么不执行else后面的语句</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(l)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环正常结束捏&quot;</span>)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 7</span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 循环正常结束捏</span></span><br></pre></td></tr></table></figure><h4 id="循环综合案例"><a href="#循环综合案例" class="headerlink" title="循环综合案例"></a>循环综合案例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>=<span class="number">10000</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>!=<span class="number">0</span>:</span><br><span class="line">        num = random.randint(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> num &lt; <span class="number">5</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;员工<span class="subst">&#123;i&#125;</span>,绩效分<span class="subst">&#123;num&#125;</span>,不发工资，下一位&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">sum</span>=<span class="built_in">sum</span>-<span class="number">1000</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;向员工<span class="subst">&#123;i&#125;</span>发放工资1000元，账户余额还剩<span class="subst">&#123;<span class="built_in">sum</span>&#125;</span>元&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;工资发完了醉了&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 向员工1发放工资1000元，账户余额还剩9000元</span></span><br><span class="line"><span class="comment"># 向员工2发放工资1000元，账户余额还剩8000元</span></span><br><span class="line"><span class="comment"># 员工3,绩效分4,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 向员工4发放工资1000元，账户余额还剩7000元</span></span><br><span class="line"><span class="comment"># 向员工5发放工资1000元，账户余额还剩6000元</span></span><br><span class="line"><span class="comment"># 员工6,绩效分2,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 员工7,绩效分4,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 员工8,绩效分1,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 向员工9发放工资1000元，账户余额还剩5000元</span></span><br><span class="line"><span class="comment"># 向员工10发放工资1000元，账户余额还剩4000元</span></span><br><span class="line"><span class="comment"># 向员工11发放工资1000元，账户余额还剩3000元</span></span><br><span class="line"><span class="comment"># 向员工12发放工资1000元，账户余额还剩2000元</span></span><br><span class="line"><span class="comment"># 向员工13发放工资1000元，账户余额还剩1000元</span></span><br><span class="line"><span class="comment"># 员工14,绩效分3,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 员工15,绩效分4,不发工资，下一位</span></span><br><span class="line"><span class="comment"># 向员工16发放工资1000元，账户余额还剩0元</span></span><br><span class="line"><span class="comment"># 工资发完了醉了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="4-0数据结构"><a href="#4-0数据结构" class="headerlink" title="4.0数据结构"></a>4.0数据结构</h3><h4 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h4><table><thead><tr><th align="center">类型</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td align="center">整数</td><td>整数(int)，如: 10、-10</td><td>整数(int)，如: 10、-10</td></tr><tr><td align="center">浮点数(float)</td><td>浮点数(float)</td><td>,如: 13.14、 -13.14</td></tr><tr><td align="center">复数(complex)</td><td>复数(complex)，</td><td>如: 4+3j,以j结尾表示复数</td></tr><tr><td align="center">布尔(bool)</td><td>布尔(bool) 表达现实生活中的逻辑，即真和假，True表示真,False表示假</td><td>True本质上是一个数字记作1,  False记作0</td></tr><tr><td align="center">字符串(String)</td><td>描述文本的一种数据类型</td><td>字符串(string) 由任意数量的字符组成</td></tr><tr><td align="center">列表(List)</td><td><strong>有序的可变序列</strong></td><td>Python中使用最频繁的数据类型，可有序记录一堆数据</td></tr><tr><td align="center">元组(Tuple)</td><td><strong>有序的不可变序列.</strong></td><td>可有序记录一堆不可变的Python数据集合</td></tr><tr><td align="center">集合(Set)</td><td><strong>无序不重复集合</strong></td><td>可无序记录一堆不重复的Python数据集合</td></tr><tr><td align="center">字典(Dictionary)</td><td>无序Key-Value集合</td><td>可无序记录-堆Key-Value型的Python数据集合</td></tr></tbody></table><h4 id="4-1列表-有序可变序列"><a href="#4-1列表-有序可变序列" class="headerlink" title="4.1列表(有序可变序列)"></a>4.1列表(有序可变序列)</h4><h5 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h5><blockquote><p>列表用来存储任意大小的数据集合，可以有任意个数据，可以是不同的数据类型，也可以是列表（嵌套）</p></blockquote><ol><li><p>使用方括号创建列表</p></li><li><p>使用构造函数创建列表</p></li><li><p>使用列表推导式创建</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>=<span class="built_in">list</span>(<span class="string">&quot;我喜欢你&quot;</span>)</span><br><span class="line">list1=[<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="string">&quot;我&quot;</span>,<span class="string">&quot;喜欢&quot;</span>,<span class="literal">True</span>]</span><br><span class="line">list2=[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x&gt;<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"><span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>在Python中，可以使用构造函数来创建列表。构造函数是一种特殊的方法，用于在创建对象时进行初始化操作。</p><p>使用构造函数创建列表的方式是通过调用list()函数，并将一个可迭代对象作为参数传递给它。可迭代对象可以是一个字符串、元组、集合、字典等。</p><p>下面是一些使用构造函数创建列表的示例：</p><ol><li>使用字符串创建列表：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;my_list = <span class="built_in">list</span>(<span class="string">&quot;abc&quot;</span>) </span><br><span class="line">&gt;<span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用元组创建列表：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;my_list = <span class="built_in">list</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) </span><br><span class="line">&gt;<span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用集合创建列表：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;my_list = <span class="built_in">list</span>(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;) </span><br><span class="line">&gt;<span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ol start="4"><li>使用字典创建列表（只包含键）：</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;my_list = <span class="built_in">list</span>(&#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>, <span class="string">&quot;c&quot;</span>: <span class="number">3</span>&#125;)  </span><br><span class="line">&gt;<span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><p>需要注意的是，&#x3D;&#x3D;构造函数创建的列表是一个新的对象，与原始的可迭代对象是独立的。修改原始的可迭代对象不会影响到使用构造函数创建的列表。&#x3D;&#x3D;</p><p>此外，还可以使用列表推导式来创建列表，它提供了一种更简洁的语法。例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;my_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]  </span><br><span class="line">&gt;<span class="comment"># [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></blockquote><p><em><strong>还可以加一些判断条件</strong></em></p><blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ddd=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span>(x&gt;<span class="number">5</span>))</span><br><span class="line"><span class="comment"># [6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="列表的访问"><a href="#列表的访问" class="headerlink" title="列表的访问"></a><strong>列表的访问</strong></h5><p><strong>下标[0，len-1]</strong></p><h5 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># [1, 2, 4]</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h5 id="列表的操作和常见的方法"><a href="#列表的操作和常见的方法" class="headerlink" title="列表的操作和常见的方法"></a>列表的操作和常见的方法</h5><table><thead><tr><th align="center">编号</th><th align="left">使用方式</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">列表.append(元素)</td><td align="center">向列表中追加一个元素</td></tr><tr><td align="center">2</td><td align="left">列表.extend(容器)</td><td align="center">将数据容器的内容依次取出，追加到列表尾部</td></tr><tr><td align="center">3</td><td align="left">列表.insert(下标，元素)</td><td align="center">在指定下标处，插入指定的元素</td></tr><tr><td align="center"><strong>4</strong></td><td align="left"><strong>del列表[下标]</strong></td><td align="center"><strong>删除列表指定下标元素</strong></td></tr><tr><td align="center">5</td><td align="left">列表.pop(下标)</td><td align="center">删除列表指定下标元素并且返回,如果指定了index就把他给删除了默认是-1下标</td></tr><tr><td align="center">6</td><td align="left">列表.remove(元素)</td><td align="center">从前向后，删除此元素第一个匹配项</td></tr><tr><td align="center"><strong>7</strong></td><td align="left"><strong>列表.clear()</strong></td><td align="center"><strong>清空列表</strong></td></tr><tr><td align="center">8</td><td align="left">列表.count(元素)</td><td align="center">统计此元素在列表中出现的次数</td></tr><tr><td align="center">9</td><td align="left">列表.index(元素)</td><td align="center">查找指定元素在列表的下标  找不到报错ValueError</td></tr><tr><td align="center">10</td><td align="left">len(列表)</td><td align="center">统计容器内有多少元素</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ddd=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span>(x&gt;<span class="number">5</span>))</span><br><span class="line"><span class="comment"># [6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="built_in">print</span>(ddd)</span><br><span class="line"><span class="keyword">for</span> ppp <span class="keyword">in</span> ddd:</span><br><span class="line">    <span class="built_in">print</span>(ppp)</span><br><span class="line">    <span class="comment"># 6</span></span><br><span class="line">    <span class="comment"># 7</span></span><br><span class="line">    <span class="comment"># 8</span></span><br><span class="line">    <span class="comment"># 9</span></span><br><span class="line">    <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>列表名.append在列表的&#x3D;&#x3D;屁股&#x3D;&#x3D;加新成员</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.append(<span class="number">11</span>)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.<strong>inset(i,x)在下标为i的地方加入一个新的x,也就是说新来的在a[i]，其他的往后去</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.insert(<span class="number">1</span>,<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, &#x27;x&#x27;, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.<strong>extend（新的 列表）把新的列表&#x3D;&#x3D;续&#x3D;&#x3D;在操作对象的后面</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.extend(b)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>列表名.remove(x)移除列表里的x</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.remove(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>列表名.pop（obj）&#x3D;&#x3D;删除obj指定的下标&#x3D;&#x3D;</strong>***&#x3D;&#x3D;并返回删除的对象&#x3D;&#x3D;**</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line">c=a.pop(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 9</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 10]</span></span><br></pre></td></tr></table></figure></li><li><p>del 列表名[下标]</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"># [1, 2, 4]</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.clear() 清空列表</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.clear()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, 2, 4]</span></span><br><span class="line"><span class="comment"># []</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.index(x)方法，查x在列表中的下标</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="number">8</span>))</span><br><span class="line"><span class="comment">#7</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.count(x)，查x在列表中出现的次数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.append(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6]</span></span><br><span class="line"><span class="built_in">print</span>(a.count(<span class="number">6</span>))</span><br><span class="line"><span class="comment">#2</span></span><br></pre></td></tr></table></figure></li><li><p>列表名.reverse()将列表顺序反转———————&#x3D;&#x3D;不需要传入任何参数&#x3D;&#x3D;而且也没有返回值相当于返回none</p></li></ol>   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">b=<span class="built_in">list</span>(t <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>,<span class="number">15</span>))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">a.reverse()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><ol start="11"><li><p>len(列表名)得到列表的元素个数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"><span class="comment"># [1, 2, 4]</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>列表名.sort（key,reverse）三个参数，key比较时的关键字，reverse比较完是否逆序</strong> </p><blockquote><ol><li><h6 id="在Python-3中，cmp参数已被移除，所以无法直接使用cmp函数进行排序。-取而代之的是使用key参数来指定一个函数"><a href="#在Python-3中，cmp参数已被移除，所以无法直接使用cmp函数进行排序。-取而代之的是使用key参数来指定一个函数" class="headerlink" title="在Python 3中，cmp参数已被移除，所以无法直接使用cmp函数进行排序。&#x3D;&#x3D;取而代之的是使用key参数来指定一个函数&#x3D;&#x3D;"></a>在Python 3中，cmp参数已被移除，所以无法直接使用cmp函数进行排序。&#x3D;&#x3D;取而代之的是使用key参数来指定一个函数&#x3D;&#x3D;</h6></li><li><h6 id="默认是排序后不进行逆序的，默认升序》"><a href="#默认是排序后不进行逆序的，默认升序》" class="headerlink" title="&#x3D;&#x3D;默认是排序后不进行逆序的，默认升序》&#x3D;&#x3D;"></a>&#x3D;&#x3D;默认是排序后不进行逆序的，默认升序》&#x3D;&#x3D;</h6></li><li><h6 id="可以单独使用并排序真身，返回值是个none，可以自定义key，默认升序》"><a href="#可以单独使用并排序真身，返回值是个none，可以自定义key，默认升序》" class="headerlink" title="可以单独使用并排序真身，返回值是个none，可以自定义key，默认升序》"></a>可以单独使用并排序真身，返回值是个none，可以自定义key，默认升序》</h6><p>k.sort(<em>key</em><strong>&#x3D;lambda</strong> <em>a</em>:a[1])有三个参数，不能默认指定，要指定对应的参数&#x3D;&#x3D;k.sort(<em>key</em><strong>&#x3D;lambda</strong> <em>a</em>:a[1])&#x3D;&#x3D;注意使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(l))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(l,reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">sorted</span>(l)))</span><br><span class="line">   <span class="comment"># [1, 2, 2, 3, 4, 5, 9]</span></span><br><span class="line"><span class="comment"># [9, 5, 4, 3, 2, 2, 1]</span></span><br><span class="line">      </span><br><span class="line">l.sort()</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line">l.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="built_in">print</span>(l.sort())</span><br><span class="line"><span class="comment"># None</span></span><br><span class="line">   <span class="comment"># [1, 2, 2, 3, 4, 5, 9]</span></span><br><span class="line"><span class="comment"># [9, 5, 4, 3, 2, 2, 1]</span></span><br><span class="line">      </span><br><span class="line">k=[[<span class="string">&quot;a&quot;</span>,<span class="number">15</span>],[<span class="string">&quot;b&quot;</span>,<span class="number">12</span>],[<span class="string">&quot;c&quot;</span>,<span class="number">13</span>]]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br><span class="line">k.sort(key=cmp)</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line"><span class="comment"># [[&#x27;b&#x27;, 12], [&#x27;c&#x27;, 13], [&#x27;a&#x27;, 15]]</span></span><br><span class="line">   k=[[<span class="string">&quot;a&quot;</span>,<span class="number">15</span>],[<span class="string">&quot;b&quot;</span>,<span class="number">12</span>],[<span class="string">&quot;c&quot;</span>,<span class="number">13</span>]]</span><br><span class="line">      </span><br><span class="line">      k.sort(key=<span class="keyword">lambda</span> y :y[<span class="number">1</span>])</span><br><span class="line">   <span class="built_in">print</span>(k)</span><br><span class="line">      </span><br><span class="line">      <span class="comment"># [[&#x27;b&#x27;, 12], [&#x27;c&#x27;, 13], [&#x27;a&#x27;, 15]]</span></span><br></pre></td></tr></table></figure></li></ol></blockquote></li></ol><p><strong>python内置的len作为关键字（函数）使用</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b=[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;dasdasdas&#x27;</span>,<span class="string">&#x27;h1&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># [1, 4, 9, 3, 6, 7, 2]</span></span><br><span class="line">b.sort(key=<span class="built_in">len</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># [&#x27;h1&#x27;, &#x27;apple&#x27;, &#x27;dasdasdas&#x27;]</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;在Python中，默认的排序函数<code>sort()</code>需要接受一个返回值为布尔类型的比较函数作为参数，而不是返回值为整数类型的比较函数。&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">k=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line">k.sort(key=<span class="keyword">lambda</span> x:x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;默认升序的排序<span class="subst">&#123;k&#125;</span>&quot;</span>)</span><br><span class="line">k.sort(key=<span class="keyword">lambda</span> x:-x)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;稍微修改降序的排序<span class="subst">&#123;k&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 默认升序的排序[1, 2, 2, 3, 4, 5]</span></span><br><span class="line"><span class="comment"># 稍微修改降序的排序[5, 4, 3, 2, 2, 1]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最简单的降序排列—–因为默认是升序，&#x3D;&#x3D;排序再逆转&#x3D;&#x3D;一下就🆗了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原状态&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">a.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;默认升序&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;逆转后的降序&quot;</span>)</span><br><span class="line">a.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 原状态</span></span><br><span class="line"><span class="comment"># [1, 4, 9, 3, 6, 7, 2]</span></span><br><span class="line"><span class="comment"># 默认升序</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 6, 7, 9]</span></span><br><span class="line"><span class="comment"># 逆转后的降序</span></span><br><span class="line"><span class="comment"># [9, 7, 6, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><hr><h4 id="4-2元组（有序的不可变序列）"><a href="#4-2元组（有序的不可变序列）" class="headerlink" title="4.2元组（有序的不可变序列）"></a>4.2元组（有序的不可变序列）</h4><h5 id="元组的创建-有两个带turple的"><a href="#元组的创建-有两个带turple的" class="headerlink" title="元组的创建(有两个带turple的)"></a>元组的创建(有两个带turple的)</h5><p><strong>&#x3D;&#x3D;元组用来存储任意大小的数据集合，可以有任意个数据，可以是不同的数据类型，也可以是元组（嵌套）&#x3D;&#x3D;</strong></p><blockquote><ol><li><p>括号创建—-注意区别&#x3D;&#x3D;-创建只含有一个元素的元组要在元素的后面加上,&#x3D;&#x3D;            不加逗号的时候会被理解为优先级的（）而不是元组的括号,就被理解为字符串而非元组</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=(<span class="number">1</span>)</span><br><span class="line">b=(<span class="number">1</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用构造函数 和列表非常的相似</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;元组的三种创建&quot;</span>)</span><br><span class="line">t1=(<span class="string">&quot;dsadsa&quot;</span>,)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))</span><br><span class="line">/////////</span><br><span class="line"> t1=<span class="built_in">tuple</span>(<span class="string">&quot;dsadsad&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"> <span class="built_in">print</span>(<span class="built_in">type</span>(t1))</span><br><span class="line">//////////</span><br><span class="line">t1=(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line">//默认是生成器对象</span><br><span class="line">t1=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>) <span class="keyword">if</span> x&gt;<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t1))</span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="元组的访问和遍历"><a href="#元组的访问和遍历" class="headerlink" title="元组的访问和遍历"></a>元组的访问和遍历</h5><blockquote><ol><li><p><strong>下标[0，len-1]</strong></p></li><li><p>&#x3D;&#x3D;可以像列表一样访问但是不可以修改，别说什么删除 了&#x3D;&#x3D;</p></li><li><pre><code class="python">d=tuple(x*2 for x in range(1,6) if x&gt;=3)print(d)(6, 8, 10)for i in d:    print(i)    # 6    # 8    # 10<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 元组与列表的区别</span><br><span class="line"></span><br><span class="line">==唯一就是可修改与不可修改的区别，元组是不可以通过元素的下标修改的，列表是可以的。==</span><br><span class="line"></span><br><span class="line">##### 元组的相关操作</span><br><span class="line"></span><br><span class="line">1. 由于元组的数据不可以被修改</span><br><span class="line"></span><br><span class="line">2. ###### 元组名.count(x),查询x出现的次数</span><br><span class="line"></span><br><span class="line">3. ###### 元组名.index(x)查询x的下标</span><br><span class="line"></span><br><span class="line">4. len(元素名)查询元组的元素个数</span><br><span class="line"></span><br><span class="line">   ```python</span><br><span class="line">   p=tuple(f)</span><br><span class="line">   print(p)</span><br><span class="line">   # (&#x27;张&#x27;, &#x27;三&#x27;, &#x27;李四&#x27;, &#x27;王五&#x27;, &#x27;李六&#x27;)</span><br><span class="line">   print(p.index(&quot;李四&quot;))</span><br><span class="line">   print(p.count(&quot;王五&quot;))</span><br><span class="line">   # 2</span><br><span class="line">   # 1</span><br></pre></td></tr></table></figure></code></pre></li></ol></blockquote><hr><h5 id="元组的注意事项-总结"><a href="#元组的注意事项-总结" class="headerlink" title="元组的注意事项&#x2F;总结"></a>元组的注意事项&#x2F;总结</h5><p>虽然元组的元素不能修改</p><p>&#x3D;&#x3D;但是如果元组里面放了一个list的时候，可以修改&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># (1, 2, 3, [4, 5, 6])</span></span><br><span class="line">m[<span class="number">3</span>][<span class="number">0</span>]=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(m[<span class="number">3</span>])</span><br><span class="line"><span class="comment"># [5, 5, 6]</span></span><br></pre></td></tr></table></figure><blockquote><p>经过.上述对元组的学习，可以总结出列表有如下特点:</p><ol><li>可以容纳多个数据</li><li>可以容纳不同类型的数据(混装)</li><li>数据是有序存储的(下标索引)</li><li>允许重复数据存在</li><li>不可以修改( 增加或删除元素等)</li><li>支持for循环</li><li>&#x3D;&#x3D;多数特性和list-致，不同点在于不可修改的特性。&#x3D;&#x3D;</li></ol></blockquote><h4 id="4-3序列"><a href="#4-3序列" class="headerlink" title="4.3序列"></a>4.3序列</h4><p><strong>序列是最基本的数据结构，序列中的每一个元素都分配一个下标，[0,n-1],[-n,-1],n是元素个数&#x3D;len(序列)</strong></p><p><em><strong>常见的序列，字符串，元组，列表</strong></em></p><h5 id="序列和通用操作（切片操作）"><a href="#序列和通用操作（切片操作）" class="headerlink" title="序列和通用操作（切片操作）"></a>序列和通用操作（切片操作）</h5><h6 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h6><blockquote><p>序列名[i:j:k]</p><p><code>根据ij索引切除片，并返回对应类型的对象</code></p><p>&#x3D;&#x3D;i表示起始位置，j代表索引结束位置，k代表步长，默认是1。[i,j-1]&#x3D;&#x3D;</p><p>&#x3D;&#x3D;这些操作都没有真正改变原来的序列，而是返回了一个新的序列。原来的序列仍然保持不变。如果要改变原来的字符串，可以将新的字符串赋值给原来的变量。例如：&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;0123456789&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">3</span>]))</span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>切片的注意事项</p><ol><li><p>如果切片的索引i&#x3D;0，那么从第一个到j-1的元素</p></li><li><p>如果切片的索引j&#x3D;0，那么会从i切到以后的元素</p></li><li><p>如果开始和结束都为空，那么得到整个序列</p></li><li><p>&#x3D;&#x3D;如果i&gt;j且步长&gt;0，得到一个空的序列&#x3D;&#x3D;’’’’;;如果步长为&lt;0且就理解为反向走</p></li><li><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">d=d[<span class="number">2</span>:<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># (6, 8, 10)</span></span><br><span class="line"><span class="comment"># ()</span></span><br></pre></td></tr></table></figure></li><li><p>如果步长为负数，就逆序获取元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># ///////</span></span><br><span class="line">d=d[<span class="number">0</span>:<span class="built_in">len</span>(d)]</span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">d=d[::]</span><br><span class="line"><span class="comment"># ///////</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">      </span><br><span class="line">d=d[<span class="number">4</span>:<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="comment">#理解为从4到0反向走一次走1</span></span><br><span class="line"><span class="comment"># 而且最终的个数等于绝对值这两个差</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><hr><p>&#x3D;&#x3D;综合案例，[::-1]常用来倒把序列给倒序&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=<span class="string">&quot;万过薪月，员序程马牛来，nohtyP学&quot;</span></span><br><span class="line">c=c[::-<span class="number">1</span>][<span class="number">9</span>:<span class="number">14</span>]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">c=<span class="string">&quot;万过薪月，员序程马牛来，nohtyP学&quot;</span></span><br><span class="line">c=c[<span class="number">5</span>:<span class="number">10</span>][::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">c=<span class="string">&quot;万过薪月，员序程马牛来，nohtyP学&quot;</span></span><br><span class="line">c=c.split(<span class="string">&#x27;，&#x27;</span>)[<span class="number">1</span>][:<span class="number">5</span>][::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># 牛马程序员</span></span><br><span class="line"><span class="comment"># 牛马程序员</span></span><br><span class="line"><span class="comment"># 牛马程序员</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h6 id="连接和复制"><a href="#连接和复制" class="headerlink" title="连接和复制"></a>连接和复制</h6><p><a href="#%E5%AD%97%E5%85%B8">去字典</a></p><blockquote><ol><li><p>连接</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line">e=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line">f=d+e</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5)</span></span><br><span class="line"><span class="comment"># (6, 7, 8, 9, 10)</span></span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span></span><br></pre></td></tr></table></figure></li><li><p>复制</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(d*<span class="number">3</span>)</span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5)</span></span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h6 id="成员检查（成员运算符in-not-in）"><a href="#成员检查（成员运算符in-not-in）" class="headerlink" title="成员检查（成员运算符in not in）"></a>成员检查（成员运算符in not in）</h6><blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> d)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">11</span> <span class="keyword">in</span> d)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure></blockquote><h6 id="内置函数max-min-len"><a href="#内置函数max-min-len" class="headerlink" title="内置函数max,min,len"></a>内置函数max,min,len</h6><blockquote><ol><li><p>len()计算序列的长度，也就是元素&#x2F;字符的个数</p></li><li><p>max()寻找序列中的最大值</p></li><li><p>min()寻找序列中的最小值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(d))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(d))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(d))</span><br><span class="line"><span class="comment"># (1, 2, 3, 4, 5, 6)</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 1</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="序列的相互转换-（字符串，列表，元组之间的转换）"><a href="#序列的相互转换-（字符串，列表，元组之间的转换）" class="headerlink" title="&#x3D;&#x3D;序列的相互转换&#x3D;&#x3D;（字符串，列表，元组之间的转换）"></a>&#x3D;&#x3D;序列的相互转换&#x3D;&#x3D;（字符串，列表，元组之间的转换）</h5><p><strong>并没有改变真身，但可以赋值给真身</strong></p><blockquote><ol><li><p>字符串转为列表和元组—–list(),tuple()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=<span class="string">&#x27;你好啊小盆友&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(d))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(d))</span><br><span class="line"><span class="comment"># 你好啊小盆友</span></span><br><span class="line"><span class="comment"># [&#x27;你&#x27;, &#x27;好&#x27;, &#x27;啊&#x27;, &#x27;小&#x27;, &#x27;盆&#x27;, &#x27;友&#x27;]</span></span><br><span class="line"><span class="comment"># (&#x27;你&#x27;, &#x27;好&#x27;, &#x27;啊&#x27;, &#x27;小&#x27;, &#x27;盆&#x27;, &#x27;友&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><p>列表与元组的相互转换—————–list(),tuple()，只不过里面放的不是字符串了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=[<span class="number">1</span>,<span class="string">&quot;我&quot;</span>,<span class="number">2</span>,<span class="string">&#x27;取&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(d))</span><br><span class="line"><span class="comment"># [1, &#x27;我&#x27;, 2, &#x27;取&#x27;]</span></span><br><span class="line"><span class="comment"># (1, &#x27;我&#x27;, 2, &#x27;取&#x27;)</span></span><br><span class="line"></span><br><span class="line">e=(<span class="number">3</span>,<span class="string">&quot;你&quot;</span>,<span class="number">5</span>,<span class="string">&#x27;曲&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(e))</span><br><span class="line"><span class="comment"># (3, &#x27;你&#x27;, 5, &#x27;曲&#x27;)</span></span><br><span class="line"><span class="comment"># [3, &#x27;你&#x27;, 5, &#x27;曲&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;列表和元组转换为字符串&#x3D;&#x3D;——–用到了字符串的join方法。需要一个字符串来把新的序列转换为字符串并连接到已有的字符串上面。 ————&#x3D;&#x3D;前提是列表里面都是字符串类型或者字符类型&#x3D;&#x3D;，“ ” ‘ ’，纯数字不可以</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=[<span class="string">&#x27;张&#x27;</span>,<span class="string">&#x27;三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;李六&#x27;</span>]</span><br><span class="line">e=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))</span><br><span class="line"><span class="built_in">print</span>(e.join(f))</span><br><span class="line"><span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 张三李四王五李六</span></span><br><span class="line"><span class="built_in">str</span>()只是把对象转化为人容易看懂的字符串</span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="Str-函数"><a href="#Str-函数" class="headerlink" title="Str()函数"></a>Str()函数</h4><blockquote><p><code>str()</code>函数是Python内置的一个函数，用于将对象转换为字符串形式。</p><p><code>str()</code>函数的语法如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(<span class="built_in">object</span>)</span><br></pre></td></tr></table></figure><p>其中，<code>object</code>是要转换为字符串的对象。<code>object</code>可以是数字、字符串、列表、元组、字典、集合等等。</p><p><code>str()</code>函数的工作原理如下：</p><ul><li><p>如果<code>object</code>是字符串类型，则返回该字符串本身。</p></li><li><p>如果<code>object</code>是数字类型（整数、浮点数等），则返回对应的字符串表示。</p></li><li><p>如果<code>object</code>是列表、元组、字典、集合等可迭代对象，则返回一个包含各个元素的字符串表示。</p></li><li><p>如果<code>object</code>是自定义的对象，则根据对象的<code>__str__()</code>方法返回字符串表示。</p></li><li><p>以下是一些示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">10</span>))  <span class="comment"># 将整数转换为字符串 &#x27;10&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(<span class="number">3.14</span>) ) <span class="comment"># 将浮点数转换为字符串 &#x27;3.14&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))  <span class="comment"># 将列表转换为字符串 &#x27;[1, 2, 3]&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)))  <span class="comment"># 将元组转换为字符串 &quot;(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;))  <span class="comment"># 将字典转换为字符串 &quot;&#123;&#x27;name&#x27;: &#x27;John&#x27;, &#x27;age&#x27;: 25&#125;&quot;</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><hr><p><a name="字典"></a></p><h4 id="4-4字典（无序Key-Value集合）"><a href="#4-4字典（无序Key-Value集合）" class="headerlink" title="4.4字典（无序Key-Value集合）"></a>4.4字典（无序Key-Value集合）</h4><h5 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a>字典的创建</h5><blockquote><ol><li><h4 id="使用花括号-创建字典"><a href="#使用花括号-创建字典" class="headerlink" title="使用花括号{}创建字典"></a>使用花括号{}创建字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=&#123;<span class="string">&quot;key1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># &#123;&#x27;key1&#x27;: 1, &#x27;key2&#x27;: 2&#125;</span></span><br><span class="line">      </span><br><span class="line">a[<span class="string">&quot;key1&quot;</span>]=<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a</span><br><span class="line"><span class="comment"># &#123;&#x27;key1&#x27;: 2, &#x27;key2&#x27;: 2&#125;</span></span><br><span class="line">      </span><br><span class="line">b=&#123;&#125;</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="使用函数创建字典"><a href="#使用函数创建字典" class="headerlink" title="使用函数创建字典"></a>使用函数创建字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=<span class="built_in">dict</span>()</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br><span class="line">c=<span class="built_in">dict</span>(red=<span class="number">1</span>,blue=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># &#123;&#x27;red&#x27;: 1, &#x27;blue&#x27;: 2&#125;</span></span><br><span class="line">l=[(<span class="string">&quot;red&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;green&quot;</span>,<span class="number">3</span>)]</span><br><span class="line">c=<span class="built_in">dict</span>(l)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># &#123;&#x27;red&#x27;: 1, &#x27;green&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="使用推导式创建字典—–-p-x-x-for-x-in-range-1-6-严格按照格式，不带dict（）"><a href="#使用推导式创建字典—–-p-x-x-for-x-in-range-1-6-严格按照格式，不带dict（）" class="headerlink" title="使用推导式创建字典—–&#x3D;&#x3D;p&#x3D;{x: x for x in range(1,6)} 严格按照格式，不带dict（）&#x3D;&#x3D;"></a>使用推导式创建字典—–&#x3D;&#x3D;p&#x3D;{x: x for x in range(1,6)} 严格按照格式，不带dict（）&#x3D;&#x3D;</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p=&#123;x: x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment"># &#123;1: 2, 2: 4, 3: 6, 4: 8, 5: 10&#125;</span></span><br><span class="line">p=&#123;x: x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment"># &#123;2: 4, 3: 6, 4: 8, 5: 10&#125;</span></span><br><span class="line"><span class="comment">#=----------------</span></span><br><span class="line">l=[(<span class="string">&quot;red&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;green&quot;</span>,<span class="number">3</span>)]</span><br><span class="line">ll=&#123;x:j <span class="keyword">for</span> x,j <span class="keyword">in</span> l&#125;</span><br><span class="line"><span class="built_in">print</span>(ll)</span><br><span class="line"><span class="comment"># &#123;&#x27;red&#x27;: 1, &#x27;green&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="字典的使用场景"><a href="#字典的使用场景" class="headerlink" title="字典的使用场景"></a>字典的使用场景</h5><blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zd=&#123;<span class="string">&quot;王力宏&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">60</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">22</span>,<span class="string">&quot;英语&quot;</span>:<span class="number">50</span>&#125;,<span class="string">&quot;周杰伦&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">20</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">42</span>,<span class="string">&quot;英语&quot;</span>:<span class="number">60</span>&#125;&#125;</span><br><span class="line"><span class="built_in">print</span>(zd)</span><br><span class="line"><span class="built_in">print</span>(zd[<span class="string">&quot;王力宏&quot;</span>][<span class="string">&quot;语文&quot;</span>])</span><br><span class="line"><span class="comment"># &#123;&#x27;王力宏&#x27;: &#123;&#x27;语文&#x27;: 60, &#x27;数学&#x27;: 22, &#x27;英语&#x27;: 50&#125;, &#x27;周杰伦&#x27;: &#123;&#x27;语文&#x27;: 20, &#x27;数学&#x27;: 42, &#x27;英语&#x27;: 60&#125;&#125;</span></span><br><span class="line"><span class="comment"># 60</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="字典的访问-更新"><a href="#字典的访问-更新" class="headerlink" title="字典的访问&#x2F;更新"></a>字典的访问&#x2F;更新</h5><blockquote><p>字典名[键]&#x3D;新的值</p><ol><li><p>如果新增的key原来字典不存在，那么就新增一个键值对,&#x3D;&#x3D;加在字典的后面&#x3D;&#x3D;</p></li><li><p>如果新增的key原来存在，那么就会覆盖原来的键值对（更新）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zd=&#123;<span class="string">&quot;王力宏&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">60</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">22</span>,<span class="string">&quot;英语&quot;</span>:<span class="number">50</span>&#125;,<span class="string">&quot;周杰伦&quot;</span>:&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">20</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">42</span>,<span class="string">&quot;英语&quot;</span>:<span class="number">60</span>&#125;&#125;</span><br><span class="line">zd[<span class="string">&quot;许闰博&quot;</span>]=&#123;<span class="string">&quot;语文&quot;</span>:<span class="number">100</span>,<span class="string">&quot;数学&quot;</span>:<span class="number">98</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(zd)</span><br><span class="line"><span class="comment"># &#123;&#x27;王力宏&#x27;: &#123;&#x27;语文&#x27;: 60, &#x27;数学&#x27;: 22, &#x27;英语&#x27;: 50&#125;, &#x27;周杰伦&#x27;: &#123;&#x27;语文&#x27;: 20, &#x27;数学&#x27;: 42, &#x27;英语&#x27;: 60&#125;, &#x27;许闰博&#x27;: &#123;&#x27;语文&#x27;: 100, &#x27;数学&#x27;: 98&#125;&#125;</span></span><br><span class="line">zd[<span class="string">&quot;王力宏&quot;</span>][<span class="string">&quot;语文&quot;</span>]=<span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(zd[<span class="string">&quot;王力宏&quot;</span>][<span class="string">&quot;语文&quot;</span>])</span><br><span class="line"><span class="comment"># 0</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="字典的遍历"><a href="#字典的遍历" class="headerlink" title="字典的遍历"></a>字典的遍历</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zd=&#123;<span class="string">&#x27;王力宏&#x27;</span>: &#123;<span class="string">&#x27;语文&#x27;</span>: <span class="number">60</span>, <span class="string">&#x27;数学&#x27;</span>: <span class="number">22</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">50</span>&#125;, <span class="string">&#x27;周杰伦&#x27;</span>: &#123;<span class="string">&#x27;语文&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;数学&#x27;</span>: <span class="number">42</span>, <span class="string">&#x27;英语&#x27;</span>: <span class="number">60</span>&#125;, <span class="string">&#x27;许闰博&#x27;</span>: &#123;<span class="string">&#x27;语文&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;数学&#x27;</span>: <span class="number">98</span>&#125;&#125;</span><br><span class="line">key=zd.keys()</span><br><span class="line">value=zd.values()</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"><span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> key:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;键是<span class="subst">&#123;k&#125;</span>,对应的值是<span class="subst">&#123;zd[k]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># dict_keys([&#x27;王力宏&#x27;, &#x27;周杰伦&#x27;, &#x27;许闰博&#x27;])</span></span><br><span class="line"><span class="comment"># dict_values([&#123;&#x27;语文&#x27;: 60, &#x27;数学&#x27;: 22, &#x27;英语&#x27;: 50&#125;, &#123;&#x27;语文&#x27;: 20, &#x27;数学&#x27;: 42, &#x27;英语&#x27;: 60&#125;, &#123;&#x27;语文&#x27;: 100, &#x27;数学&#x27;: 98&#125;])</span></span><br><span class="line"><span class="comment"># 键是王力宏, 对应的值是</span></span><br><span class="line"><span class="comment"># &#123;&#x27;语文&#x27;: 60, &#x27;数学&#x27;: 22, &#x27;英语&#x27;: 50&#125;</span></span><br><span class="line"><span class="comment"># 键是周杰伦, 对应的值是</span></span><br><span class="line"><span class="comment"># &#123;&#x27;语文&#x27;: 20, &#x27;数学&#x27;: 42, &#x27;英语&#x27;: 60&#125;</span></span><br><span class="line"><span class="comment"># 键是许闰博, 对应的值是</span></span><br><span class="line"><span class="comment"># &#123;&#x27;语文&#x27;: 100, &#x27;数学&#x27;: 98&#125;</span></span><br></pre></td></tr></table></figure><hr><blockquote><h5 id="其实是等价的"><a href="#其实是等价的" class="headerlink" title="其实是等价的"></a>其实是等价的</h5></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">j=&#123;x:x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;2: 4, 3: 6, 4: 8, 5: 10&#125;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> j:</span><br><span class="line">    <span class="built_in">print</span>(i,j[i])</span><br><span class="line"><span class="comment"># 2 4</span></span><br><span class="line"><span class="comment"># 3 6</span></span><br><span class="line"><span class="comment"># 4 8</span></span><br><span class="line"><span class="comment"># 5 10</span></span><br></pre></td></tr></table></figure><h5 id="删除字典元素和删除字典和清空字典"><a href="#删除字典元素和删除字典和清空字典" class="headerlink" title="删除字典元素和删除字典和清空字典"></a>删除字典元素和删除字典和清空字典</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pop(key[, default])</span></span><br><span class="line">d=&#123;<span class="string">&quot;key1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">d.pop(<span class="string">&quot;key1&quot;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line">d.pop(<span class="string">&quot;key3&quot;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> d[<span class="string">&quot;key2&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure><h5 id="字典的常用方法"><a href="#字典的常用方法" class="headerlink" title="字典的常用方法"></a>字典的常用方法</h5><table><thead><tr><th>编号</th><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>字典[Key]</td><td>获取指定Key对应的Value值</td></tr><tr><td>2</td><td>字典[Key]&#x3D; Value</td><td>添加或更新键值对  ，原来有的就覆盖，原来没有就添加</td></tr><tr><td>3</td><td>字典.pop(Key)</td><td># pop(key[, default])取出Key对应的Value并在字典内删除此Key的键值对</td></tr><tr><td>4</td><td>字典.clear()</td><td>清空字典,主要看第一个参数就算第二个喝第一个对应不住也是ok的</td></tr><tr><td>5</td><td>字典.keys()</td><td>获取字典的全部Key,可用于for循环遍历字典</td></tr><tr><td>6</td><td>len(字典)</td><td>计算字典内的元素数量</td></tr></tbody></table><blockquote><ol><li><h4 id="keys（）方法-以列表的形式-返回字典的所有键"><a href="#keys（）方法-以列表的形式-返回字典的所有键" class="headerlink" title="keys（）方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典的所有键"></a>keys（）方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典的所有键</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.keys())</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># dict_keys([&#x27;k1&#x27;, &#x27;k2&#x27;])</span></span><br></pre></td></tr></table></figure></li><li><h4 id="values-方法-以列表的形式-返回字典的所有值"><a href="#values-方法-以列表的形式-返回字典的所有值" class="headerlink" title="values()方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典的所有值"></a>values()方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典的所有值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.values())</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># dict_values([1, 9])</span></span><br></pre></td></tr></table></figure></li><li><h4 id="items-方法-以列表的形式-返回字典键值对-对应的元组的可视对象"><a href="#items-方法-以列表的形式-返回字典键值对-对应的元组的可视对象" class="headerlink" title="items()方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典键值对&#x3D;&#x3D;对应的元组的可视对象&#x3D;&#x3D;"></a>items()方法||&#x3D;&#x3D;以列表的形式&#x3D;&#x3D;返回字典键值对&#x3D;&#x3D;对应的元组的可视对象&#x3D;&#x3D;</h4><p>使用下标运算符<code>[]</code>来访问一个<code>dict_items</code>对象。<code>dict_items</code>对象是由字典的<code>items()</code>方法返回的一个视图对象，&#x3D;&#x3D;它不支持下标运算符。&#x3D;&#x3D;</p><p>要访问<code>dict_items</code>对象中的元素，您可以使用&#x3D;&#x3D;迭代器&#x3D;&#x3D;或将其&#x3D;&#x3D;转换为列表&#x3D;&#x3D;后再进行访问。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.items())</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># dict_items([(&#x27;k1&#x27;, 1), (&#x27;k2&#x27;, 9)])</span></span><br><span class="line">一般强制转换为<span class="built_in">list</span>使用</span><br></pre></td></tr></table></figure></li><li><h4 id="get-键-default-方法-返回指定键对应的值，如果没有就返回default，默认是none"><a href="#get-键-default-方法-返回指定键对应的值，如果没有就返回default，默认是none" class="headerlink" title="&#x3D;&#x3D;get(键,default)方法&#x3D;&#x3D;||返回指定键对应的值，如果没有就返回default，默认是none"></a>&#x3D;&#x3D;get(键,default)方法&#x3D;&#x3D;||返回指定键对应的值，如果没有就返回default，默认是none</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.get(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;该键不存在啊&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(aaa.get(<span class="string">&quot;k3&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(aaa.get(<span class="string">&quot;k3&quot;</span>,<span class="string">&quot;该键不存在啊&quot;</span>))</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># 该键不存在啊</span></span><br></pre></td></tr></table></figure></li><li><h4 id="copy-方法-返回一个新的字典，新开辟的"><a href="#copy-方法-返回一个新的字典，新开辟的" class="headerlink" title="copy()方法||返回一个新的字典，新开辟的"></a>copy()方法||返回一个新的字典，新开辟的</h4><ol><li><h6 id="copy与直接赋值一份字典的区别-–二者公用同一份。也就是后者指向前者。"><a href="#copy与直接赋值一份字典的区别-–二者公用同一份。也就是后者指向前者。" class="headerlink" title="copy与直接赋值一份字典的区别  –二者公用同一份。也就是后者指向前者。"></a>copy与直接赋值一份字典的区别  –二者公用同一份。也就是后者指向前者。</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line">bbb=aaa</span><br><span class="line"><span class="built_in">print</span>(bbb)</span><br><span class="line">aaa[<span class="string">&quot;k1&quot;</span>]=<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(bbb)</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 2, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 2, &#x27;k2&#x27;: 9&#125;</span></span><br></pre></td></tr></table></figure></li><li><h6 id="copy就不一样了，直接开辟一个新的字典"><a href="#copy就不一样了，直接开辟一个新的字典" class="headerlink" title="copy就不一样了，直接开辟一个新的字典"></a>copy就不一样了，直接开辟一个新的字典</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line">bbb=aaa.copy();</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(bbb)</span><br><span class="line">aaa[<span class="string">&quot;k1&quot;</span>]=<span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(bbb)</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 100, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><h4 id="clear-方-清空字典，删除字典的全部元素，得到空字典-与del-字典名不同，区别在于是否完全删除字典"><a href="#clear-方-清空字典，删除字典的全部元素，得到空字典-与del-字典名不同，区别在于是否完全删除字典" class="headerlink" title="clear()方||清空字典，删除字典的全部元素，得到空字典 与del 字典名不同，区别在于是否完全删除字典"></a>clear()方||清空字典，删除字典的全部元素，得到空字典 与del 字典名不同，区别在于是否完全删除字典</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line">aaa.clear()</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="pop（键，default）-方法-返回指定的-键对应的值，并在字典中将其移除-如果没有就直接报错或者default对应的值"><a href="#pop（键，default）-方法-返回指定的-键对应的值，并在字典中将其移除-如果没有就直接报错或者default对应的值" class="headerlink" title="&#x3D;&#x3D;pop（键，default）&#x3D;&#x3D;方法||返回指定的 键对应的值，并在字典中将其移除. 如果没有就直接报错或者default对应的值"></a>&#x3D;&#x3D;pop（键，default）&#x3D;&#x3D;方法||返回指定的 键对应的值，并在字典中将其移除. 如果没有就直接报错或者default对应的值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aaa=&#123;<span class="string">&quot;k1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;k2&quot;</span>:<span class="number">9</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.pop(<span class="string">&quot;k1&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(aaa)</span><br><span class="line"><span class="built_in">print</span>(aaa.pop(<span class="string">&quot;k4&quot;</span>,<span class="number">101</span>))</span><br><span class="line"><span class="comment"># &#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># &#123;&#x27;k2&#x27;: 9&#125;</span></span><br><span class="line"><span class="comment"># 101</span></span><br></pre></td></tr></table></figure></li><li><h5 id="popitem-方法，随机删除字典中的一组键值对，默认是最后一对，-并且以元组的形式返回这一对"><a href="#popitem-方法，随机删除字典中的一组键值对，默认是最后一对，-并且以元组的形式返回这一对" class="headerlink" title="popitem()方法，随机删除字典中的一组键值对，默认是最后一对，&#x3D;&#x3D;并且以元组的形式返回这一对&#x3D;&#x3D;"></a>popitem()方法，随机删除字典中的一组键值对，默认是最后一对，&#x3D;&#x3D;并且以元组的形式返回这一对&#x3D;&#x3D;</h5></li></ol></blockquote><h5 id="字典的注意事项"><a href="#字典的注意事项" class="headerlink" title="字典的注意事项"></a>字典的注意事项</h5><blockquote><h5 id="key不可以重复，类比生活中的字典"><a href="#key不可以重复，类比生活中的字典" class="headerlink" title="&#x3D;&#x3D;key不可以重复，类比生活中的字典&#x3D;&#x3D;"></a>&#x3D;&#x3D;key不可以重复，类比生活中的字典&#x3D;&#x3D;</h5><h5 id="没有下标索引，但可以使用key来查找对应的value"><a href="#没有下标索引，但可以使用key来查找对应的value" class="headerlink" title="没有下标索引，但可以使用key来查找对应的value"></a>没有下标索引，但可以使用key来查找对应的value</h5></blockquote><h4 id="4-5-集合（无序不重复集合）"><a href="#4-5-集合（无序不重复集合）" class="headerlink" title="4.5&#x3D;&#x3D;集合（无序不重复集合）&#x3D;&#x3D;"></a>4.5&#x3D;&#x3D;集合（<strong>无序不重复集合</strong>）&#x3D;&#x3D;</h4><blockquote><p>集合与列表相似，可以放多个数据，并且元素的存放是无序的，—-&#x3D;&#x3D;集合元素不可以是列表，字典，集合等可变对象不能有重复数据&#x3D;&#x3D;，</p></blockquote><h5 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h5><p><em><strong>集合的创建与字典的创建类似，但是又有区别。无序，元素的位置跟集合创建的位置无关，每次打印的顺序也不同,不能出现重复的元素，可以用来消除重复元素</strong></em></p><ol><li><h5 id="使用花括号创建集合"><a href="#使用花括号创建集合" class="headerlink" title="使用花括号创建集合"></a>使用花括号创建集合</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-s---------------------------------------&quot;</span>)</span><br><span class="line">s1=&#123;<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&quot;白色&quot;</span>,<span class="string">&quot;蓝色&quot;</span>,<span class="string">&quot;蓝色&quot;</span>,<span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s1))</span><br><span class="line"><span class="comment"># &#123;&#x27;白色&#x27;, &#x27;蓝色&#x27;, &#x27;黑色&#x27;, &#x27;1&#x27;&#125;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="使用set（）函数创建"><a href="#使用set（）函数创建" class="headerlink" title="使用set（）函数创建"></a>使用set（）函数创建</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=<span class="built_in">set</span>(<span class="string">&quot;hellword&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">m1=[<span class="string">&#x27;1&#x27;</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">m2=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(m2))</span><br><span class="line">s1=<span class="built_in">set</span>(m1)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s1=<span class="built_in">set</span>(m2)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s1=<span class="built_in">set</span>()</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;&#x27;r&#x27;, &#x27;h&#x27;, &#x27;e&#x27;, &#x27;o&#x27;, &#x27;w&#x27;, &#x27;d&#x27;, &#x27;l&#x27;&#125;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;1&#x27;, 2, 3, 4&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#x27;2&#x27;, 1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># set()</span></span><br></pre></td></tr></table></figure></li><li><h5 id="使用推导式创建"><a href="#使用推导式创建" class="headerlink" title="使用推导式创建"></a>使用推导式创建</h5><blockquote><p>与列表的推导式相同只不过用的是{}</p><p>s1&#x3D;{x for x in 可迭代对象 判断语句}</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">s=<span class="built_in">set</span>(<span class="string">&quot;dasdsadddddd&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">s=&#123;i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure></blockquote></li></ol><h5 id="访问集合-的元素"><a href="#访问集合-的元素" class="headerlink" title="访问集合 的元素"></a>访问集合 的元素</h5><blockquote><h5 id="因为集合是无序的，所以无法使用下标来操作"><a href="#因为集合是无序的，所以无法使用下标来操作" class="headerlink" title="因为集合是无序的，所以无法使用下标来操作"></a>因为集合是无序的，所以无法使用下标来操作</h5><h5 id="但可以通过for循环来访问集合的元素"><a href="#但可以通过for循环来访问集合的元素" class="headerlink" title="但可以通过for循环来访问集合的元素"></a>但可以通过for循环来访问集合的元素</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s1:</span><br><span class="line"> <span class="built_in">print</span>(x)</span><br><span class="line"> <span class="comment"># </span></span><br><span class="line"> <span class="comment"># 3</span></span><br><span class="line"> <span class="comment"># 4</span></span><br><span class="line"> <span class="comment"># 5</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="集合添加元素"><a href="#集合添加元素" class="headerlink" title="集合添加元素"></a>集合添加元素</h5><blockquote><h5 id="使用add（）方法，因为集合是无序的，只把新的元素添加进去。不考虑位置，"><a href="#使用add（）方法，因为集合是无序的，只把新的元素添加进去。不考虑位置，" class="headerlink" title="使用add（）方法，因为集合是无序的，只把新的元素添加进去。不考虑位置，"></a>使用add（）方法，因为集合是无序的，只把新的元素添加进去。不考虑位置，</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line">s1.add(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># &#123;8, 3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="集合中常用的方法"><a href="#集合中常用的方法" class="headerlink" title="集合中常用的方法"></a>集合中常用的方法</h5><table><thead><tr><th align="center">编号</th><th>操作</th><th>说明</th></tr></thead><tbody><tr><td align="center">1</td><td>集合.add(元素)</td><td>集合内添加一个元素  不管位置，只管添加进去</td></tr><tr><td align="center">2</td><td>集合.remove(元素)</td><td>移除集合内指定的元素  没有的话就报错</td></tr><tr><td align="center">3</td><td>集合.pop()</td><td>&#x3D;&#x3D;从集合中随机取出一个元素,并且返回她&#x3D;&#x3D;</td></tr><tr><td align="center">4</td><td>集合.clear()</td><td>将集合清空</td></tr><tr><td align="center">5</td><td>集合1.difference(集合2)   集合1&gt;集合2</td><td>&#x3D;&#x3D;得到一个新集合&#x3D;&#x3D;，集合的差集   原有的2个集合内容不变,,,1-2</td></tr><tr><td align="center">6</td><td>集合1.difference_update(集合2)  对称</td><td>在集合1中，求差集 不反悔新的集合而是把结果保存再集合1中,,,1-2</td></tr><tr><td align="center">7</td><td>集合1.union(集合2)   并集</td><td>&#x3D;&#x3D;得到1个新集合，内含2个集合的全部元素&#x3D;&#x3D;   原有的2个集合内容不变,,,1+2</td></tr><tr><td align="center">8</td><td>len(集合)</td><td>得到一个整数，记录了集合的元素数量</td></tr></tbody></table><blockquote><ol><li><h5 id="remove-x-删除集合中的x元素，2-如果不存在就报错"><a href="#remove-x-删除集合中的x元素，2-如果不存在就报错" class="headerlink" title="remove(x),删除集合中的x元素，2.如果不存在就报错"></a>remove(x),删除集合中的x元素，2.如果不存在就报错</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line">      </span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line">s1.remove(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># &#123;3, 5&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line">      </span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line">s1.remove(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;E:\PYTHON\字典.py&quot;, line 247, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     s1.remove(6)</span></span><br><span class="line"><span class="comment"># KeyError: 6</span></span><br></pre></td></tr></table></figure></li><li><h5 id="discard（x），删除集合中的x元素，如果不存在，程序不做任何操作-★★★★★★★★推荐且默认返回none"><a href="#discard（x），删除集合中的x元素，如果不存在，程序不做任何操作-★★★★★★★★推荐且默认返回none" class="headerlink" title="discard（x），删除集合中的x元素，如果不存在，程序不做任何操作-★★★★★★★★推荐且默认返回none"></a>discard（x），删除集合中的x元素，如果不存在，程序不做任何操作-★★★★★★★★推荐且默认返回none</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line">      </span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s1.discard(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># &#123;4, 5&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="pop（）方法，删除集合中的-任意一个元-素，并且返回该元素的值。因为集合没有下标操作，所以随机删"><a href="#pop（）方法，删除集合中的-任意一个元-素，并且返回该元素的值。因为集合没有下标操作，所以随机删" class="headerlink" title="pop（）方法，删除集合中的&#x3D;&#x3D;任意一个元&#x3D;&#x3D;素，并且返回该元素的值。因为集合没有下标操作，所以随机删"></a>pop（）方法，删除集合中的&#x3D;&#x3D;任意一个元&#x3D;&#x3D;素，并且返回该元素的值。因为集合没有下标操作，所以随机删</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line">      </span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s1.pop())</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># &#123;4, 5&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="clear（）方法，清空集合，删除集合中的所有元素。"><a href="#clear（）方法，清空集合，删除集合中的所有元素。" class="headerlink" title="clear（）方法，清空集合，删除集合中的所有元素。"></a>clear（）方法，清空集合，删除集合中的所有元素。</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s1.clear()</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># set()</span></span><br></pre></td></tr></table></figure></li><li><h5 id="union-方法-联合起来，相当于并集"><a href="#union-方法-联合起来，相当于并集" class="headerlink" title="union()方法  联合起来，相当于并集"></a>union()方法  联合起来，相当于并集</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.union((s2)))</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="difference-方法-得到差集，注意顺序"><a href="#difference-方法-得到差集，注意顺序" class="headerlink" title="difference()方法 得到差集，注意顺序"></a>difference()方法 得到差集，注意顺序</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2.difference(s1))</span><br><span class="line"><span class="built_in">print</span>(s1.difference(s2))</span><br><span class="line"><span class="comment"># &#123;4, 5, 6, 7&#125;</span></span><br><span class="line"><span class="comment"># set()</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="删除集合本身del"><a href="#删除集合本身del" class="headerlink" title="删除集合本身del"></a><strong>删除集合本身del</strong></h5><blockquote><h4 id="直接不存在整个数据结构了"><a href="#直接不存在整个数据结构了" class="headerlink" title="直接不存在整个数据结构了"></a>直接不存在整个数据结构了</h4></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="keyword">del</span> s1</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;E:\PYTHON\字典.py&quot;, line 272, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     print(s1)</span></span><br><span class="line"><span class="comment">#           ^^</span></span><br><span class="line"><span class="comment"># NameError: name &#x27;s1&#x27; is not defined. Did you mean: &#x27;m1&#x27;?</span></span><br></pre></td></tr></table></figure><h5 id="成员操作同于序列"><a href="#成员操作同于序列" class="headerlink" title="成员操作同于序列"></a>成员操作同于序列</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">if</span> x&gt;=<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">in</span> s1)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> s1)</span><br><span class="line"><span class="comment"># &#123;3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure><h5 id="集合比较运算"><a href="#集合比较运算" class="headerlink" title="集合比较运算"></a>集合比较运算</h5><table><thead><tr><th>比较运算符</th><th>相关描述</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>比较两个集合是否相等，相等返回True</td></tr><tr><td>！&#x3D;</td><td>比较两个集合是否不相等，不相等返回True</td></tr><tr><td>&lt;</td><td>判断一个集合是否是另一个集合的严格子集</td></tr><tr><td>&lt;&#x3D;</td><td>判断一个集合是否是另一个集合的子集</td></tr><tr><td>&gt;</td><td>判断一个集合是否是另一个集合的严格超集</td></tr><tr><td>&gt;&#x3D;</td><td>判断一个集合是否是另一个集合的超集</td></tr></tbody></table><blockquote><ol><li><h5 id="a是b的子集-》a"><a href="#a是b的子集-》a" class="headerlink" title="a是b的子集&#x3D;》a&lt;&#x3D;b    意思就是a的元素b都有，且b的元素个数大于a的元素个数，但b没有a没有的"></a>a是b的子集&#x3D;》a&lt;&#x3D;b    意思就是a的元素b都有，且b的元素个数大于a的元素个数，但b没有a没有的</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1&lt;s2)</span><br><span class="line"><span class="built_in">print</span>(s1&lt;=s2)</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure></li><li><h5 id="a是b的严格子集，a"><a href="#a是b的严格子集，a" class="headerlink" title="a是b的严格子集，a&lt;b.意思就是a的元素b都有，且b的元素个数大于a的元素个数，但b有a没有的"></a>a是b的严格子集，a&lt;b.意思就是a的元素b都有，且b的元素个数大于a的元素个数，但b有a没有的</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1&lt;s2)</span><br><span class="line"><span class="built_in">print</span>(s1&lt;=s2)</span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h5 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h5><blockquote><ol><li><h5 id="交集运算-得到-两个集合共有的部分-，类型还是集合"><a href="#交集运算-得到-两个集合共有的部分-，类型还是集合" class="headerlink" title="交集运算 &amp; 得到&#x3D;&#x3D;两个集合共有的部分&#x3D;&#x3D;，类型还是集合"></a>交集运算 &amp; 得到&#x3D;&#x3D;两个集合共有的部分&#x3D;&#x3D;，类型还是集合</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">s3=s1 &amp; s2</span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># &#123;1, 2, 3&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="并集运算-得到两个集合并起来的整体，类型还是集合"><a href="#并集运算-得到两个集合并起来的整体，类型还是集合" class="headerlink" title="并集运算 | 得到两个集合并起来的整体，类型还是集合"></a>并集运算 | 得到两个集合并起来的整体，类型还是集合</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1 | s2)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="差集运算-得到两个集合元素的减法，类型还是集合"><a href="#差集运算-得到两个集合元素的减法，类型还是集合" class="headerlink" title="差集运算 - 得到两个集合元素的减法，类型还是集合"></a>差集运算 - 得到两个集合元素的减法，类型还是集合</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s2-s1)</span><br><span class="line"><span class="comment"># &#123;4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="对称差集运算-得到两个集合的并集挖去交集，类型还是集合"><a href="#对称差集运算-得到两个集合的并集挖去交集，类型还是集合" class="headerlink" title="&#x3D;&#x3D;对称差集运算&#x3D;&#x3D; ^ 得到两个集合的并集挖去交集，类型还是集合"></a>&#x3D;&#x3D;对称差集运算&#x3D;&#x3D; ^ 得到两个集合的并集挖去交集，类型还是集合</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1|s2)</span><br><span class="line"><span class="built_in">print</span>(s1&amp;s2)</span><br><span class="line"><span class="built_in">print</span>((s1|s2)-(s1&amp;s2))</span><br><span class="line"><span class="built_in">print</span>(s1^s2)</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"><span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"><span class="comment"># &#123;4, 5, 6&#125;</span></span><br><span class="line"><span class="comment"># &#123;4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="union运算，-相当于并集"><a href="#union运算，-相当于并集" class="headerlink" title="union运算，&#x3D;&#x3D;相当于并集&#x3D;&#x3D;"></a>union运算，&#x3D;&#x3D;相当于并集&#x3D;&#x3D;</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1.union((s2)))</span><br><span class="line"><span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><hr><p><strong>经过.上述对集合的学习，可以总结出集合有如下特点:</strong><br><strong>可以容纳多个数据</strong><br><strong>●</strong><br><strong>可以容纳不同类型的数据(混装)</strong><br><strong>●</strong><br><strong>数据是无序存储的(不支持下标索引)</strong><br><strong>不允许重复数据存在</strong><br><strong>●</strong><br><strong>可以修改(增加或删除元素等)</strong><br><strong>●</strong><br><strong>支持for循环</strong></p><p><strong>不可以用while循环，因为不支持下标索引</strong></p><hr><hr><hr><h4 id="综合回顾"><a href="#综合回顾" class="headerlink" title="综合回顾"></a>综合回顾</h4><h6 id="数据容器分类"><a href="#数据容器分类" class="headerlink" title="数据容器分类"></a>数据容器分类</h6><blockquote><h6 id="数据容器可以从以下视角进行简单的分类"><a href="#数据容器可以从以下视角进行简单的分类" class="headerlink" title="数据容器可以从以下视角进行简单的分类:"></a>数据容器可以从以下视角进行简单的分类:</h6><hr><h6 id="是否支持下标索引"><a href="#是否支持下标索引" class="headerlink" title="是否支持下标索引"></a>是否支持下标索引</h6><h6 id="支持-列表、元组、字符串一序列类型"><a href="#支持-列表、元组、字符串一序列类型" class="headerlink" title="支持:列表、元组、字符串一序列类型"></a>支持:列表、元组、字符串一序列类型</h6><h6 id="不支持-集合、字典-非序列类型"><a href="#不支持-集合、字典-非序列类型" class="headerlink" title="不支持:集合、字典-非序列类型"></a>不支持:集合、字典-非序列类型</h6><hr><h6 id="是否支持重复元素"><a href="#是否支持重复元素" class="headerlink" title="是否支持重复元素:"></a>是否支持重复元素:</h6><h6 id="支持-列表、元组、字符串-序列类型"><a href="#支持-列表、元组、字符串-序列类型" class="headerlink" title="支持:列表、元组、字符串-序列类型,"></a>支持:列表、元组、字符串-序列类型,</h6><h6 id="不支持-集合、字典-非序列类型-1"><a href="#不支持-集合、字典-非序列类型-1" class="headerlink" title="不支持:集合、字典-非序列类型"></a>不支持:集合、字典-非序列类型</h6><hr><h6 id="是否可以修改"><a href="#是否可以修改" class="headerlink" title="是否可以修改"></a>是否可以修改</h6><h6 id="支持-列表、集合、字典"><a href="#支持-列表、集合、字典" class="headerlink" title="支持:列表、集合、字典"></a>支持:列表、集合、字典</h6><h6 id="不支持-元组、字符串"><a href="#不支持-元组、字符串" class="headerlink" title="不支持:元组、字符串"></a>不支持:元组、字符串</h6></blockquote><h6 id="数据特点对比"><a href="#数据特点对比" class="headerlink" title="数据特点对比"></a>数据特点对比</h6><table><thead><tr><th></th><th>列表</th><th>元组</th><th>字符串</th><th>集合</th><th>字典</th></tr></thead><tbody><tr><td>元素数量</td><td>支持多个</td><td>支持多个</td><td>支持多个</td><td>支持多个</td><td>支持多个</td></tr><tr><td>元素类型</td><td>任意</td><td>任意</td><td>仅字符</td><td>任意</td><td>Key: Value  Key:除字典外任意类型  Value:任意类型</td></tr><tr><td>下标索引</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>重复元素</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>可修改性</td><td>支持</td><td>不支持</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>数据有序</td><td>是</td><td>是</td><td>是</td><td>否</td><td>否</td></tr><tr><td>使用场景</td><td>可修改、可重复的一批数据</td><td>不可修改、可重复的一批数据记</td><td>一串字符的记录</td><td>不可重复的数据</td><td>以Key检索Value</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">list</span>(<span class="string">&quot;dasdasd&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[&#x27;d&#x27;, &#x27;a&#x27;, &#x27;s&#x27;, &#x27;d&#x27;, &#x27;a&#x27;, &#x27;s&#x27;, &#x27;d&#x27;]</span></span><br><span class="line">a=[x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))<span class="comment">#&lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment">#[1, 2, 3, 4]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------&quot;</span>)</span><br><span class="line">b=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#(1, 2, 3, 5)</span></span><br><span class="line">b=<span class="built_in">tuple</span>(<span class="string">&quot;sdadasd&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#(&#x27;s&#x27;, &#x27;d&#x27;, &#x27;a&#x27;, &#x27;d&#x27;, &#x27;a&#x27;, &#x27;s&#x27;, &#x27;d&#x27;)</span></span><br><span class="line">b=(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))<span class="comment">#</span></span><br><span class="line"><span class="comment">#生成器对象默认是</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))<span class="comment">#&lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line">b=<span class="built_in">tuple</span>(x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment">#(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------------------&quot;</span>)</span><br><span class="line">c=<span class="built_in">dict</span>(a=<span class="number">1</span>,b=<span class="number">3</span>,c=<span class="number">2</span>)<span class="comment">#&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 3, &#x27;c&#x27;: 2&#125;</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">c=&#123;<span class="string">&quot;1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">l=[(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>)];</span><br><span class="line">c=&#123;x:j <span class="keyword">for</span> x,j <span class="keyword">in</span> l&#125;</span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&#123;&#x27;1&#x27;: 1, &#x27;key2&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line">c=&#123;x:y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="number">11</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(c)<span class="comment">#&#123;1: 10, 2: 10, 3: 10, 4: 10, 5: 10&#125;</span></span><br></pre></td></tr></table></figure><h4 id="数据结构的通用操作"><a href="#数据结构的通用操作" class="headerlink" title="数据结构的通用操作"></a>数据结构的通用操作</h4><table><thead><tr><th>功能</th><th>描述</th></tr></thead><tbody><tr><td>通用for循环</td><td>遍历容器( 字典是遍历key)</td></tr><tr><td>max</td><td>容器内最大元素</td></tr><tr><td>min()</td><td>容器内最小元素</td></tr><tr><td>len()</td><td>容器元素个数</td></tr><tr><td>list()</td><td>转换为列表</td></tr><tr><td>tuple()</td><td>转换为元组</td></tr><tr><td>str()</td><td>转换为字符串</td></tr><tr><td>set()</td><td>转换为集合</td></tr><tr><td>排序，reverse&#x3D;True表示降序</td><td>sorted(序列，[reverse&#x3D;True])  得到一个排好序的列表  默认是从小到大  没有改变真身</td></tr></tbody></table><hr><blockquote><ol><li><h6 id="都支持遍历操作"><a href="#都支持遍历操作" class="headerlink" title="都支持遍历操作"></a>都支持遍历操作</h6><blockquote><p>首先，在遍历上:<br>●<br>5类数据容器都支持for循环遍历<br>●<br>&#x3D;&#x3D;列表、元组、字符串支持while循环，集合、字典不支持(无法下标索引)&#x3D;&#x3D;<br>尽管遍历的形式各有不同，但是，它们都支持遍历操作。</p></blockquote></li><li><h6 id="通用内置函数"><a href="#通用内置函数" class="headerlink" title="通用内置函数"></a>通用内置函数</h6><blockquote><ol><li><p><strong>len()计算数据容器的长度，也就是元素&#x2F;字符的个数</strong></p></li><li><p><strong>max()寻找数据容器中的最大值</strong></p></li><li><p><strong>min()寻找数据容器中的最小值</strong></p></li><li><h5 id="特殊的字典-返回的是键而不是值"><a href="#特殊的字典-返回的是键而不是值" class="headerlink" title="特殊的字典,返回的是键而不是值"></a>特殊的字典,返回的是键而不是值</h5></li><li><pre><code>b=(1,2,4,6)l=[1,3,5,7,9]k=&#123;&quot;key1&quot;:1,&quot;key2&quot;:3&#125;e=&#123;1,23,4,5,6&#125;print(max(b),max(l),max(k),max(e))# 6 9 key2 23<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 通用转换</span><br><span class="line"></span><br><span class="line">##### list(容器)</span><br><span class="line"></span><br><span class="line">##### 将给定容器转换为列表</span><br><span class="line"></span><br><span class="line">##### str(容器)</span><br><span class="line"></span><br><span class="line">##### 将给定容器转换为字符串</span><br><span class="line"></span><br><span class="line">##### tuple(容器)</span><br><span class="line"></span><br><span class="line">##### 将给定容器转换为元组</span><br><span class="line"></span><br><span class="line">##### set(容器)</span><br><span class="line"></span><br><span class="line">##### 将给定容器转换为集合</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">字典转化为列表，元组，集合都会忽略掉他的value,转为字符串的时候不省略</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">p=&#123;&quot;k1&quot;:1,&quot;k2&quot;:2,&quot;k3&quot;:3&#125;</span><br><span class="line">print(list(p))</span><br><span class="line">print(tuple(p))</span><br><span class="line">print(set(p))</span><br><span class="line">print(f&quot;转为人容易读的字符串&#123;str(p)&#125;&quot;)</span><br><span class="line">print(&quot;转为真正的字符串&quot;,&quot;&quot;.join(p))</span><br><span class="line"># [&#x27;k1&#x27;, &#x27;k2&#x27;, &#x27;k3&#x27;]</span><br><span class="line"># (&#x27;k1&#x27;, &#x27;k2&#x27;, &#x27;k3&#x27;)</span><br><span class="line"># &#123;&#x27;k3&#x27;, &#x27;k1&#x27;, &#x27;k2&#x27;&#125;</span><br><span class="line"># 转为人容易读的字符串&#123;&#x27;k1&#x27;: 1, &#x27;k2&#x27;: 2, &#x27;k3&#x27;: 3&#125;</span><br><span class="line"># 转为真正的字符串 k1k2k3</span><br></pre></td></tr></table></figure></code></pre></li></ol><h5 id="但是将他们转换为真正的字符串的时候要用一个空串的join函数哦"><a href="#但是将他们转换为真正的字符串的时候要用一个空串的join函数哦" class="headerlink" title="但是将他们转换为真正的字符串的时候要用一个空串的join函数哦"></a>但是将他们转换为真正的字符串的时候要用一个空串的join函数哦</h5><h6 id="转化成集合的时候，1去重操作，2顺序打乱"><a href="#转化成集合的时候，1去重操作，2顺序打乱" class="headerlink" title="转化成集合的时候，1去重操作，2顺序打乱"></a>转化成集合的时候，1去重操作，2顺序打乱</h6></blockquote></li><li><h6 id="通用排序功能"><a href="#通用排序功能" class="headerlink" title="通用排序功能"></a>通用排序功能</h6><blockquote><p>sorted(容器，reverse&#x3D;false)</p><p>默认是从小到大,&#x3D;&#x3D;但没有真正改变原本的数据&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p=[<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(p))</span><br><span class="line"><span class="comment"># [1, 2, 5, 7]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(p,reverse=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1, 2, 5, 7]</span></span><br><span class="line"><span class="comment"># [7, 5, 2, 1]</span></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment"># [5, 2, 7, 1]</span></span><br></pre></td></tr></table></figure></blockquote></li></ol></blockquote><h5 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h5><hr><p>按位比较，一位一位的比较，例如ab&gt;aa,ab&gt;a,比较对应的ancii码</p><p>从头到尾一位一位的比较，其中一位大，后面就不用比较了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;abc&quot;</span>&gt;<span class="string">&quot;abd&quot;</span>)</span><br></pre></td></tr></table></figure><hr><hr><h3 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h3><h4 id="函数和方法的区别"><a href="#函数和方法的区别" class="headerlink" title="函数和方法的区别"></a>函数和方法的区别</h4><blockquote><p>函数直接传入参数就可以使用</p><p>方法需要用.来引用，例如num&#x3D;student.pop(1)</p></blockquote><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><p><strong>&#x3D;&#x3D;<code>random.randint(x, y)</code>函数返回一个在闭区间<code>[x, y]</code>内的随机整数，包括<code>x</code>和<code>y</code>在内。&#x3D;&#x3D;</strong></p><blockquote><ol><li><p>提前写好的</p></li><li><p>可以重复使用的</p></li><li><p>把重复性的工作给封装起来 了</p></li><li><p>针对特定功能</p></li><li><p><strong>len()计算数据容器的长度，也就是元素&#x2F;字符的个数</strong></p></li><li><p><strong>max()寻找数据容器中的最大值</strong></p></li><li><p><strong>min()寻找数据容器中的最小值</strong></p></li></ol></blockquote><p>自定义函数</p><h4 id="函数的基础定义语法"><a href="#函数的基础定义语法" class="headerlink" title="函数的基础定义语法"></a>函数的基础定义语法</h4><blockquote><p>def 函数名字(参数1，参数…..):</p><p>​函数体</p><p>return 返回值</p><p>函数定义里面的x，y是&#x3D;&#x3D;形参&#x3D;&#x3D;，函数调用时候传入的为&#x3D;&#x3D;实参&#x3D;&#x3D;</p><p>多个参数用，隔开</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myf1</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span>+y*<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(myf1(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 8</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myf</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是大帅逼&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    myf()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br><span class="line"><span class="comment"># 我是大帅逼</span></span><br></pre></td></tr></table></figure><blockquote><h6 id="注意事项"><a href="#注意事项" class="headerlink" title="&#x3D;&#x3D;注意事项&#x3D;&#x3D;"></a>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</h6><ol><li>如果没有参数就省略</li><li>返回值不需要也可以省略</li><li>函数必须先定义再使用</li></ol></blockquote><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><p><em><strong>没有返回值的函数实际上返回了NONE</strong></em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result=myf()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">result=myf1(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># 8</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><h6 id="函数可以返回一个值或多个值。在函数中使用return语句后，-函数将会立即停止执行-，并将指定的值返回给调用者。如果没有使用return语句，函数将默认返回None。"><a href="#函数可以返回一个值或多个值。在函数中使用return语句后，-函数将会立即停止执行-，并将指定的值返回给调用者。如果没有使用return语句，函数将默认返回None。" class="headerlink" title="函数可以返回一个值或多个值。在函数中使用return语句后，&#x3D;&#x3D;函数将会立即停止执行&#x3D;&#x3D;，并将指定的值返回给调用者。如果没有使用return语句，函数将默认返回None。"></a>函数可以返回一个值或多个值。在函数中使用<code>return</code>语句后，&#x3D;&#x3D;函数将会立即停止执行&#x3D;&#x3D;，并将指定的值返回给调用者。如果没有使用<code>return</code>语句，函数将默认返回<code>None</code>。</h6></li><li><p><strong>函数&#x3D;&#x3D;可以返回任意类型的值&#x3D;&#x3D;，包括整数、浮点数、字符串、列表、字典、元组等。</strong></p></li><li><p>如果函数返回多个值，可以使用元组、列表或字典等数据结构来存储这些值，并一起返回。</p></li><li><p>可以使用函数的返回值来赋值给一个变量，或者作为另一个函数的参数。</p></li><li><p>如果函数没有返回值，即没有使用<code>return</code>语句，或者<code>return</code>语句没有指定返回值，则函数默认返回<code>None</code>。</p></li><li><p>可以使用<code>return</code>语句提前结束函数的执行，并返回指定的值。</p></li><li><p>如果函数没有返回值，可以省略<code>return</code>语句。</p></li></ol></blockquote><h4 id="函数的说明文档（帮助理解自己的函数）"><a href="#函数的说明文档（帮助理解自己的函数）" class="headerlink" title="函数的说明文档（帮助理解自己的函数）"></a>函数的说明文档（帮助理解自己的函数）</h4><blockquote><ol><li><p>‘’‘回车自动弹出</p></li><li><p>用于解释函数</p></li><li><p>鼠标放在函数上的时候会现实相关的说明</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myf1</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    第一个参数*2+第二个参数*3 的和</span></span><br><span class="line"><span class="string">    :param x:第一额加的数</span></span><br><span class="line"><span class="string">    :param y:第二个加的数</span></span><br><span class="line"><span class="string">    :return:返回值是运算结果</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span>+y*<span class="number">3</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h4><p>一个函数里用另一个函数的方法</p><p>直接运用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;------1------&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------2-------&quot;</span>)</span><br><span class="line">    fun1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--------3---------&quot;</span>)</span><br><span class="line">fun2()</span><br><span class="line"><span class="comment"># --------2-------</span></span><br><span class="line"><span class="comment"># ------1------</span></span><br><span class="line"><span class="comment"># --------3---------</span></span><br></pre></td></tr></table></figure><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="&#x3D;&#x3D;变量的作用域&#x3D;&#x3D;"></a>&#x3D;&#x3D;变量的作用域&#x3D;&#x3D;</h4><blockquote><h6 id="python中并不是所有的语句块都会产生作用域，只有在函数，类中定义的语句块，才会产生作用域。"><a href="#python中并不是所有的语句块都会产生作用域，只有在函数，类中定义的语句块，才会产生作用域。" class="headerlink" title="&#x3D;&#x3D;python中并不是所有的语句块都会产生作用域，只有在函数，类中定义的语句块，才会产生作用域。&#x3D;&#x3D;"></a>&#x3D;&#x3D;python中并不是所有的语句块都会产生作用域，只有在函数，类中定义的语句块，才会产生作用域。&#x3D;&#x3D;</h6><h6 id="在if-else，for，while，等关键字里面定义的语句块并不会擦还是你哼作用域，仍然创建的是全局变量"><a href="#在if-else，for，while，等关键字里面定义的语句块并不会擦还是你哼作用域，仍然创建的是全局变量" class="headerlink" title="&#x3D;&#x3D;在if-else，for，while，等关键字里面定义的语句块并不会擦还是你哼作用域，仍然创建的是全局变量&#x3D;&#x3D;"></a>&#x3D;&#x3D;在if-else，for，while，等关键字里面定义的语句块并不会擦还是你哼作用域，仍然创建的是全局变量&#x3D;&#x3D;</h6></blockquote><h5 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h5><p>在函数内部定义的，只能在函数返回内使用</p><p>函数执行完毕后局部变量就被销毁了</p><p>全局变量，在函数体内体外都可以使用的变量</p><p>就算同名也不一样</p><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>***&#x3D;&#x3D;global关键字把在函数内部声明的变量变成全局变量&#x3D;&#x3D;***，外面没有的话就创建一个全局变量，外边有的话，二者就为同一个全局变量。</p><p>在Python中，&#x3D;&#x3D;函数内部默认情况下只能访问局部范围内的变量&#x3D;&#x3D;。要在函数内部使用外部变量，需要使用<code>global</code>关键字将其声明为全局变量。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=100</span><br><span class="line">def fun3():</span><br><span class="line">    a+=100</span><br><span class="line">    print(f&quot;我现在是&#123;a&#125;&quot;)</span><br><span class="line"></span><br><span class="line">fun3()</span><br><span class="line">#直接报错</span><br><span class="line"># Traceback (most recent call last):</span><br><span class="line">#   File &quot;E:\PYTHON\函数.py&quot;, line 62, in &lt;module&gt;</span><br><span class="line">#     fun3()</span><br><span class="line">#   File &quot;E:\PYTHON\函数.py&quot;, line 59, in fun3</span><br><span class="line">#     a+=100</span><br><span class="line">#     ^</span><br><span class="line"># UnboundLocalError: cannot access local variable &#x27;a&#x27; where it is not associated with a value</span><br></pre></td></tr></table></figure><p>用了global关键字后</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    <span class="comment">#==global使用的时候不能初始化，也就是说只能声明==</span></span><br><span class="line">    a+=<span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;我现在是<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">fun3()</span><br><span class="line"><span class="comment"># 我现在是200</span></span><br></pre></td></tr></table></figure><blockquote><p>注意事项</p><ol><li>&#x3D;&#x3D;global使用的时候不能初始化，也就是说只能声明&#x3D;&#x3D;</li><li>定义：定义是指在程序中为变量分配内存空间，并为其分配一个唯一的标识符（即变量名）。定义变量时，编译器会为其分配内存空间，以便在程序执行期间存储和操作数据。</li><li>声明：声明是指在程序中引入变量的标识符，以便在后续的代码中使用该变量。声明变量时，编译器会告诉程序变量的数据类型和名称，但不会为其分配内存空间。因此，在声明变量之后，变量是不可用的。</li><li>初始化：初始化是指在声明变量的同时为其赋予一个初始值。初始化变量时，编译器会为其分配内存空间，并将初始值存储在该内存空间中。初始化变量可以在声明时进行，也可以在稍后的代码中进行。</li></ol></blockquote><h4 id="综合案例-1"><a href="#综合案例-1" class="headerlink" title="综合案例"></a>综合案例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">money=<span class="number">120</span></span><br><span class="line">name=<span class="string">&quot;猫饼&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">menu</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1\t查询余额函数\n&quot;</span><span class="string">&quot;2\t存款函数\n&quot;</span><span class="string">&quot;3\t取款函数\n&quot;</span><span class="string">&quot;4\t主菜单函数&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcsearch</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;您现在的余额为<span class="subst">&#123;money&#125;</span>元&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funccunkuan</span>():</span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;你要存多少？&quot;</span>))</span><br><span class="line">    money+=a</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">funcqukuan</span>():</span><br><span class="line">    <span class="keyword">global</span> money</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;你要取多少？&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> a&lt;=money:</span><br><span class="line">        money-=a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>你特么有多少你没点b数？&quot;</span>)</span><br><span class="line">name=<span class="built_in">input</span>(<span class="string">&quot;请输入你姓名&quot;</span>)</span><br><span class="line"><span class="comment"># menu()</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    menu()</span><br><span class="line">    p=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;您要干神马？&quot;</span>))</span><br><span class="line">    <span class="comment"># print(p)</span></span><br><span class="line">    <span class="keyword">if</span> p==<span class="number">1</span>:</span><br><span class="line">        funcsearch()</span><br><span class="line">    <span class="keyword">elif</span> p==<span class="number">2</span>:</span><br><span class="line">        funccunkuan()</span><br><span class="line">        funcsearch()</span><br><span class="line">    <span class="keyword">elif</span> p==<span class="number">3</span>:</span><br><span class="line">        funcqukuan()</span><br><span class="line">        funcsearch()</span><br><span class="line">    <span class="keyword">elif</span> p==<span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; 1 查询余额函数\n&quot;</span>, <span class="string">&quot;2 存款函数\n&quot;</span>, <span class="string">&quot;3 取款函数\n&quot;</span>, <span class="string">&quot;4 主菜单函数&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> p==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;谢谢你使用牛马ATM自助存取一体机&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="python函数进阶"><a href="#python函数进阶" class="headerlink" title="python函数进阶"></a>python函数进阶</h3><h5 id="函数有多个返回值"><a href="#函数有多个返回值" class="headerlink" title="函数有多个返回值,"></a>函数有多个返回值,</h5><blockquote><h5 id="函数有多个返回值-—对应多个变量来接受它。变量之间用，隔开，而且可以是不同的数据类型-。如果直接返回的话，得到对应的元组"><a href="#函数有多个返回值-—对应多个变量来接受它。变量之间用，隔开，而且可以是不同的数据类型-。如果直接返回的话，得到对应的元组" class="headerlink" title="函数有多个返回值,—对应多个变量来接受它。变量之间用，隔开，而且可以是不同的数据类型.。如果直接返回的话，得到对应的元组"></a>函数有多个返回值,—对应多个变量来接受它。变量之间用，隔开，而且可以是不同的数据类型.。如果直接返回的话，得到对应的元组</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">x,y=func()</span><br><span class="line"><span class="built_in">print</span>(x,y)</span><br><span class="line"><span class="comment"># 1 2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">True</span></span><br><span class="line">a,b,c=func1()</span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"><span class="built_in">print</span>(func1())</span><br><span class="line"><span class="comment"># 1 hello True</span></span><br><span class="line"><span class="comment"># (1, &#x27;hello&#x27;, True)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(func1()))</span><br><span class="line"><span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="位置参数和关键字参数"><a href="#位置参数和关键字参数" class="headerlink" title="位置参数和关键字参数"></a>位置参数和关键字参数</h5><p><strong>位置参数就默认的，需要严格的对应。</strong></p><p><strong>关键字参数键值对的形式，更加清晰。原始的情况需要严格对应。混合使用的时候，位置参数必须在前面。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------位置参数----------------&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">x,y,z</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line"><span class="built_in">print</span>(func3(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------关键字参数----------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(func3(x=<span class="number">1</span>,y=<span class="number">2</span>,z=<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><blockquote><h5 id="在函数定义的时候就给形参一个默认的赋值，以后调用函数的时候，如果不给默认参数对应的实参，就用默认参数，如果给了就用实参。"><a href="#在函数定义的时候就给形参一个默认的赋值，以后调用函数的时候，如果不给默认参数对应的实参，就用默认参数，如果给了就用实参。" class="headerlink" title="在函数定义的时候就给形参一个默认的赋值，以后调用函数的时候，如果不给默认参数对应的实参，就用默认参数，如果给了就用实参。"></a>在函数定义的时候就给形参一个默认的赋值，以后调用函数的时候，如果不给默认参数对应的实参，就用默认参数，如果给了就用实参。</h5><hr><h5 id="默认参数需要写在形参的最后"><a href="#默认参数需要写在形参的最后" class="headerlink" title="默认参数需要写在形参的最后"></a>默认参数需要写在形参的最后</h5><h6 id="否则就会报错"><a href="#否则就会报错" class="headerlink" title="否则就会报错"></a>否则就会报错</h6><h5 id="SyntaxError-non-default-argument-follows-default-argument"><a href="#SyntaxError-non-default-argument-follows-default-argument" class="headerlink" title="SyntaxError: non-default argument follows default argument"></a>SyntaxError: non-default argument follows default argument</h5></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>(<span class="params">x,y,z=<span class="number">9</span></span>):</span><br><span class="line">    <span class="keyword">return</span> x+y+z</span><br><span class="line"><span class="built_in">print</span>(func3(x=<span class="number">1</span>,y=<span class="number">2</span>,z=<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(func3(x=<span class="number">1</span>,y=<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 12</span></span><br></pre></td></tr></table></figure><h5 id="位置不定长—元组"><a href="#位置不定长—元组" class="headerlink" title="位置不定长—元组"></a>位置不定长—元组</h5><p>传入时候的参数数量是不受限制的</p><p>*<strong>标记一个形参， 以元组的形式接受实参</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funcc</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;args的类型是<span class="subst">&#123;<span class="built_in">type</span>(args)&#125;</span>,值是<span class="subst">&#123;args&#125;</span>&quot;</span>)</span><br><span class="line">funcc(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;小明&#x27;</span>)</span><br><span class="line"><span class="comment"># args的类型是&lt;class &#x27;tuple&#x27;&gt;,值是(1, 2, 3, &#x27;小明&#x27;)</span></span><br></pre></td></tr></table></figure><h5 id="关键字不定长—字典"><a href="#关键字不定长—字典" class="headerlink" title="关键字不定长—字典"></a>关键字不定长—字典</h5><p>传入时候的参数数量是不受限制的</p><p><strong>标记一个形参，以字典的形式接受实参</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">funccc</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;kwargs的类型是<span class="subst">&#123;<span class="built_in">type</span>(kwargs)&#125;</span>,值是<span class="subst">&#123;kwargs&#125;</span>&quot;</span>)</span><br><span class="line">funccc(key1=<span class="number">1</span>,key2=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># kwargs的类型是&lt;class &#x27;dict&#x27;&gt;,值是&#123;&#x27;key1&#x27;: 1, &#x27;key2&#x27;: 2&#125;</span></span><br></pre></td></tr></table></figure><h5 id="函数作为参数传递（计算逻辑的传递）"><a href="#函数作为参数传递（计算逻辑的传递）" class="headerlink" title="函数作为参数传递（计算逻辑的传递）"></a>函数作为参数传递（计算逻辑的传递）</h5><p><strong>函数名作为传递的方式</strong></p><p><strong>形参和实参没有强制一致</strong></p><p><em>数据是确定的，计算逻辑是可变的。</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line">a=<span class="number">19</span>;b=<span class="number">20</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">computee</span>):</span><br><span class="line">    result=compute(a,b)+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="built_in">print</span>(compute(a,b))</span><br><span class="line"><span class="built_in">print</span>(text(compute(<span class="number">9</span>,<span class="number">3</span>)))</span><br><span class="line"><span class="comment"># 39</span></span><br><span class="line"><span class="comment"># 40</span></span><br></pre></td></tr></table></figure><p>二者的区别</p><blockquote><h5 id="普通的函数def-add-x-y"><a href="#普通的函数def-add-x-y" class="headerlink" title="普通的函数def add(x,y):"></a>普通的函数def add(x,y):</h5><h5 id="return-x-y"><a href="#return-x-y" class="headerlink" title="return x+y"></a>return x+y</h5><h5 id="传入的是数据，确定的是代码的执行逻辑，不确定的是数据"><a href="#传入的是数据，确定的是代码的执行逻辑，不确定的是数据" class="headerlink" title="传入的是数据，确定的是代码的执行逻辑，不确定的是数据"></a>传入的是数据，确定的是代码的执行逻辑，不确定的是数据</h5><h5 id="函数作为函数的参数-def-func-add"><a href="#函数作为函数的参数-def-func-add" class="headerlink" title="函数作为函数的参数  def func(add):"></a>函数作为函数的参数  def func(add):</h5><h5 id="result-add-1-2"><a href="#result-add-1-2" class="headerlink" title="result&#x3D;add(1,2)"></a>result&#x3D;add(1,2)</h5><h5 id="return-result"><a href="#return-result" class="headerlink" title="return result"></a>return result</h5><h5 id="传入的是函数的代码执行-逻辑，确定的是数据，不确定的是代码的执行逻辑"><a href="#传入的是函数的代码执行-逻辑，确定的是数据，不确定的是代码的执行逻辑" class="headerlink" title="传入的是函数的代码执行 逻辑，确定的是数据，不确定的是代码的执行逻辑"></a>传入的是函数的代码执行 逻辑，确定的是数据，不确定的是代码的执行逻辑</h5></blockquote><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><p>def定义带有名称的函数</p><p>lambda定义匿名函数</p><p><strong>lambda x,y:x+y</strong></p><p><strong>有名称的可以基于名称重复使用</strong></p><p><strong>匿名函数，只可以临时使用一次</strong></p><p>&#x3D;&#x3D;<strong>自带返回return功能</strong>&#x3D;&#x3D;</p><p><strong>匿名函数的函数体只能写一行，无法写多行代码，且参数不带括号</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line">a=<span class="number">19</span>;b=<span class="number">20</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text</span>(<span class="params">computee</span>):</span><br><span class="line">    result=compute(a,b)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="built_in">print</span>(text(<span class="keyword">lambda</span> x,y:x+y))</span><br><span class="line"><span class="comment"># 39</span></span><br></pre></td></tr></table></figure><h3 id="文件的操作"><a href="#文件的操作" class="headerlink" title="文件的操作"></a>文件的操作</h3><h5 id="文件的编码"><a href="#文件的编码" class="headerlink" title="文件的编码"></a>文件的编码</h5><blockquote><h5 id="翻译的规则，如何将内容翻译为二进制，然后电脑使用的时候再翻译为文本就ok了"><a href="#翻译的规则，如何将内容翻译为二进制，然后电脑使用的时候再翻译为文本就ok了" class="headerlink" title="翻译的规则，如何将内容翻译为二进制，然后电脑使用的时候再翻译为文本就ok了"></a>翻译的规则，如何将内容翻译为二进制，然后电脑使用的时候再翻译为文本就ok了</h5><h6 id="utf-8-逐渐通用"><a href="#utf-8-逐渐通用" class="headerlink" title="utf-8,逐渐通用"></a>utf-8,逐渐通用</h6><p>gbk</p><p>big5等等</p><p>不同的编码格式会翻译不同的结果</p><h5 id="我喜欢你-我讨厌你……"><a href="#我喜欢你-我讨厌你……" class="headerlink" title="我喜欢你-&gt;我讨厌你……."></a>我喜欢你-&gt;我讨厌你…….</h5></blockquote><hr><h5 id="文件的打开-读取操作"><a href="#文件的打开-读取操作" class="headerlink" title="文件的打开-读取操作"></a>文件的打开-读取操作</h5><p>默认都把\n也读进来了</p><p><strong>没有这个文件的时候就报错</strong></p><p>&#x3D;&#x3D;如果没有这个文件在异常捕获的时候会返回一个none，if语句会把none当作false看作&#x3D;&#x3D;★★★★★★★★</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_file_info</span>(<span class="params">file_name</span>):</span><br><span class="line">    f=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f=<span class="built_in">open</span>(file_name,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> reason:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;文件tm打不开啊&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(f.read())</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># print(f)</span></span><br><span class="line">        <span class="keyword">if</span> f:</span><br><span class="line">            f.close()</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打开文件&quot;</span>)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><h5 id="文件对象-read（num）方法-num代表的是要读取的长度单位是字节-没有传入就默认读取全部数据，-以字符串返回"><a href="#文件对象-read（num）方法-num代表的是要读取的长度单位是字节-没有传入就默认读取全部数据，-以字符串返回" class="headerlink" title="文件对象.read（num）方法,num代表的是要读取的长度单位是字节,没有传入就默认读取全部数据，&#x3D;&#x3D;以字符串返回&#x3D;&#x3D;"></a>文件对象.read（num）方法,num代表的是要读取的长度单位是字节,没有传入就默认读取全部数据，&#x3D;&#x3D;以字符串返回&#x3D;&#x3D;</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打开文件&quot;</span>)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span></span><br><span class="line"><span class="comment"># print(f.read())</span></span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 哈利大苏打阿达阿松大 |第一次读到这里，第二次继续读</span></span><br><span class="line"><span class="comment"># 啊啊</span></span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br></pre></td></tr></table></figure></li><li><h6 id="文件对象-readlines（）方法，读取全部行并且封装到列表中返回-以列表返回"><a href="#文件对象-readlines（）方法，读取全部行并且封装到列表中返回-以列表返回" class="headerlink" title="文件对象.readlines（）方法，读取全部行并且封装到列表中返回  &#x3D;&#x3D;以列表返回&#x3D;&#x3D;"></a>文件对象.readlines（）方法，读取全部行并且封装到列表中返回  &#x3D;&#x3D;以列表返回&#x3D;&#x3D;</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;打开文件&quot;)</span><br><span class="line">f=open(&quot;./1.txt&quot;,&quot;r&quot;,encoding=&quot;UTF-8&quot;)</span><br><span class="line">print(type(f))</span><br><span class="line"># 打开文件</span><br><span class="line"># &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span><br><span class="line">print(f.readlines())</span><br><span class="line"># [&#x27;哈利大苏打阿达阿松大啊啊\n&#x27;, &#x27;dadasdasdasdsad&#x27;]</span><br></pre></td></tr></table></figure></li><li><h6 id="文件对象-readline（num）方法，读取一行的内容，返回字符串-以字符串返回"><a href="#文件对象-readline（num）方法，读取一行的内容，返回字符串-以字符串返回" class="headerlink" title="文件对象.readline（num）方法，读取一行的内容，返回字符串   &#x3D;&#x3D;以字符串返回&#x3D;&#x3D;"></a>文件对象.readline（num）方法，读取一行的内容，返回字符串   &#x3D;&#x3D;以字符串返回&#x3D;&#x3D;</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打开文件&quot;</span>)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(f.readline())</span><br><span class="line"><span class="comment"># 哈利大苏打阿达阿松大啊啊</span></span><br></pre></td></tr></table></figure></li><li><h5 id="for循环方法读取-以字符串返回"><a href="#for循环方法读取-以字符串返回" class="headerlink" title="for循环方法读取   &#x3D;&#x3D;以字符串返回&#x3D;&#x3D;"></a>for循环方法读取   &#x3D;&#x3D;以字符串返回&#x3D;&#x3D;</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打开文件&quot;</span>)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f))</span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line"><span class="comment"># &lt;class &#x27;_io.TextIOWrapper&#x27;&gt;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># 哈利大苏打阿达阿松大啊啊</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># dadasdasdasdsad</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><hr><blockquote><h5 id="文件对象-close-关闭文件，取消对文件的占用。"><a href="#文件对象-close-关闭文件，取消对文件的占用。" class="headerlink" title="文件对象.close(),关闭文件，取消对文件的占用。"></a>文件对象.close(),关闭文件，取消对文件的占用。</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure></blockquote><h5 id="with-open语法★★★★★"><a href="#with-open语法★★★★★" class="headerlink" title="with-open语法★★★★★"></a>with-open语法★★★★★</h5><blockquote><h5 id="对文件的操作完成后，会自动的把文件给close掉"><a href="#对文件的操作完成后，会自动的把文件给close掉" class="headerlink" title="对文件的操作完成后，会自动的把文件给close掉"></a>对文件的操作完成后，会自动的把文件给close掉</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打开文件&quot;</span>)</span><br><span class="line"><span class="comment"># f=open(&quot;./1.txt&quot;,&quot;r&quot;,encoding=&quot;UTF-8&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf=8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> <span class="built_in">print</span>(f.readlines())</span><br><span class="line"><span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="comment">#关闭后的文件是不能再读取的</span></span><br><span class="line"><span class="comment"># [&#x27;哈利大苏打阿达阿松大啊啊\n&#x27;, &#x27;dadasdasdasdsad&#x27;]</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;e:\Bluecode\code\python\code\文件的操作.py&quot;, line 6, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     print(f.read())</span></span><br><span class="line"><span class="comment">#           ^^^^^^^^</span></span><br><span class="line"><span class="comment"># ValueError: I/O operation on closed file.</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="文件的写操作"><a href="#文件的写操作" class="headerlink" title="文件的写操作"></a>文件的写操作</h5><blockquote><p>write()方法，文件写入，并没有真正的写入硬盘上，仅写在内存的某一个区域中，也就是缓冲区。</p><h6 id="直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中"><a href="#直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中" class="headerlink" title="直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中"></a>直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中</h6><h6 id="避免频繁的操作硬盘"><a href="#避免频繁的操作硬盘" class="headerlink" title="避免频繁的操作硬盘"></a>避免频繁的操作硬盘</h6><p>flush（）方法，内容刷新，</p><hr><h6 id="使用w操作，如果这个文件存在，就覆盖原来的内容，如果文件不存在，就创建一个"><a href="#使用w操作，如果这个文件存在，就覆盖原来的内容，如果文件不存在，就创建一个" class="headerlink" title="使用w操作，如果这个文件存在，就覆盖原来的内容，如果文件不存在，就创建一个"></a>使用w操作，如果这个文件存在，就覆盖原来的内容，如果文件不存在，就创建一个</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;./2.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;我去&quot;</span>)</span><br><span class="line">f.flush()</span><br><span class="line"><span class="comment"># 我去</span></span><br></pre></td></tr></table></figure><h6 id="直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中-1"><a href="#直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中-1" class="headerlink" title="直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中"></a>直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./2.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> f.write(<span class="string">&quot;你好啊&quot;</span>)</span><br><span class="line"><span class="comment"># 你好啊</span></span><br></pre></td></tr></table></figure></blockquote><h5 id="文件的追加"><a href="#文件的追加" class="headerlink" title="文件的追加"></a>文件的追加</h5><p>和文件的w操作类似，&#x3D;&#x3D;只不过如果文件存在的话会在后面追加内容，不会覆盖。&#x3D;&#x3D;</p><p><strong>直到调用flush或者close方法文件，才会把缓冲区的内容真正写到硬盘中</strong></p><p>&#x3D;&#x3D;如果要换行加\n&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行三次后</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./3.txt&quot;</span>,<span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;这是追加模式&quot;</span>)</span><br><span class="line"><span class="comment"># 这是追加模式这是追加模式这是追加模式</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h5 id="文件操作综合案例"><a href="#文件操作综合案例" class="headerlink" title="文件操作综合案例"></a>文件操作综合案例</h5><blockquote><h5 id="1读取文件并查单词个数"><a href="#1读取文件并查单词个数" class="headerlink" title="1读取文件并查单词个数"></a>1读取文件并查单词个数</h5></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        k=line.strip()</span><br><span class="line">        w=k.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(w)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(k,end=&quot; &quot;)</span></span><br><span class="line">        <span class="comment"># print(w)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> w:</span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">&quot;the&quot;</span>:</span><br><span class="line">                count+=<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;the出现的次数是<span class="subst">&#123;count&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># print(f.readlines())</span></span><br><span class="line">    k=f.read()</span><br><span class="line"><span class="comment"># print(k)</span></span><br><span class="line">p=k.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment"># print(p)</span></span><br><span class="line"><span class="comment"># print(type(k))    </span></span><br><span class="line"><span class="built_in">print</span>(p.count(<span class="string">&quot;the&quot;</span>))</span><br></pre></td></tr></table></figure><blockquote><h5 id="2-读取文件，筛选部分写入文件"><a href="#2-读取文件，筛选部分写入文件" class="headerlink" title="2 读取文件，筛选部分写入文件"></a>2 读取文件，筛选部分写入文件</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./bill.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">  <span class="comment"># print(line)</span></span><br><span class="line">  line.strip()</span><br><span class="line">  <span class="comment"># print(line,end=&quot;&quot;)</span></span><br><span class="line">  <span class="keyword">if</span> <span class="string">&quot;测试&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> line:</span><br><span class="line">      g=<span class="built_in">open</span>(<span class="string">&quot;./bill副本.txt&quot;</span>,<span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">      g.write(<span class="string">f&quot;<span class="subst">&#123;line&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># name,date,money,type,remarks</span></span><br><span class="line"><span class="comment"># 周杰轮,2022-01-01,100000,消费,正式</span></span><br><span class="line"><span class="comment"># 周杰轮,2022-01-02,300000,收入,正式</span></span><br><span class="line"><span class="comment"># 林俊节,2022-01-01,300000,收入,正式</span></span><br><span class="line"><span class="comment"># 林俊节,2022-01-03,100000,消费,正式</span></span><br><span class="line"><span class="comment"># 林俊节,2022-01-05,500000,收入,正式</span></span><br><span class="line"><span class="comment"># 张学油,2022-01-01,100000,消费,正式</span></span><br><span class="line"><span class="comment"># 张学油,2022-01-02,500000,收入,正式</span></span><br><span class="line"><span class="comment"># 王力鸿,2022-01-01,500000,消费,正式</span></span><br><span class="line"><span class="comment"># 王力鸿,2022-01-03,950000,收入,正式</span></span><br><span class="line"><span class="comment"># 刘德滑,2022-01-02,100000,消费,正式</span></span><br><span class="line"><span class="comment"># 刘德滑,2022-01-03,300000,消费,正式</span></span><br></pre></td></tr></table></figure><h6 id="3删除目标数据，切片操作"><a href="#3删除目标数据，切片操作" class="headerlink" title="3删除目标数据，切片操作"></a>3删除目标数据，切片操作</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;E:\PYTHON\code\啊.tax&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">data=f.read()</span><br><span class="line">data=data.replace(<span class="string">&quot;删掉我，&quot;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">data=data[:-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># 删掉我，</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 大撒大撒</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># dsadasdasdasdasdasd)&#125;</span></span><br><span class="line"><span class="comment"># 大撒大撒</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># dsadasdasdasdasdasd</span></span><br></pre></td></tr></table></figure></blockquote><hr><h3 id="异常BUG"><a href="#异常BUG" class="headerlink" title="异常BUG"></a>异常BUG</h3><h4 id="了解异常"><a href="#了解异常" class="headerlink" title="了解异常"></a>了解异常</h4><blockquote><h6 id="python解释器遇到一个错误，就会停止程序的执行，并演示一些错误信息。通过了解常见的异常类型，方便检查错误。"><a href="#python解释器遇到一个错误，就会停止程序的执行，并演示一些错误信息。通过了解常见的异常类型，方便检查错误。" class="headerlink" title="python解释器遇到一个错误，就会停止程序的执行，并演示一些错误信息。通过了解常见的异常类型，方便检查错误。"></a>python解释器遇到一个错误，就会停止程序的执行，并演示一些错误信息。通过了解常见的异常类型，方便检查错误。</h6></blockquote><h4 id="为什么要捕获异常"><a href="#为什么要捕获异常" class="headerlink" title="为什么要捕获异常"></a>为什么要捕获异常</h4><p><strong>当程序遇到了bug，有两种选择</strong>，后者才是想要的 </p><blockquote><ol><li><h6 id="整个程序直接停止运行"><a href="#整个程序直接停止运行" class="headerlink" title="整个程序直接停止运行"></a>整个程序直接停止运行</h6></li><li><h6 id="对bug进行提醒，整个程序继续运行"><a href="#对bug进行提醒，整个程序继续运行" class="headerlink" title="&#x3D;&#x3D;对bug进行提醒，整个程序继续运行&#x3D;&#x3D;"></a>&#x3D;&#x3D;对bug进行提醒，整个程序继续运行&#x3D;&#x3D;</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数&quot;</span>))</span><br><span class="line">    result=<span class="number">8</span>/a</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出错了草&quot;</span>,<span class="built_in">str</span>(reason))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误%s&quot;</span>%<span class="built_in">str</span>(reason))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哎嘿&quot;</span>)</span><br><span class="line"><span class="comment"># 请输入一个数0</span></span><br><span class="line"><span class="comment"># 未知错误division by zero</span></span><br><span class="line"><span class="comment"># 哎嘿</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="常见的异常"><a href="#常见的异常" class="headerlink" title="常见的异常"></a>常见的异常</h4><blockquote><ol><li>assertionError assert后面的条件为假的时候就会抛出异常</li><li>attributeError 尝试访问未知的对象属性</li><li>indexError 索引超出序列范围</li><li>keyError 字典中找一个不存在的关键字</li><li>osError 操作系统产生的异常</li><li>nameError 尝试访问一个不存在的变量</li><li>syntaxError python语法错误</li><li>typeError 不同类型之间的无效操作</li><li>zerodivisionError 除数为0的时候</li></ol></blockquote><h4 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h4><h6 id="捕获指定的异常"><a href="#捕获指定的异常" class="headerlink" title="捕获指定的异常"></a><em><strong>捕获指定的异常</strong></em></h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">检测范围</span><br><span class="line">except Exception[as reason]</span><br><span class="line">出现异常后的处理代码</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./4.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出错了草&quot;</span>,<span class="built_in">str</span>(reason))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#出错了草 [Errno 2] No such file or directory: &#x27;./4.txt&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="捕获多种类型异常"><a href="#捕获多种类型异常" class="headerlink" title="捕获多种类型异常"></a>捕获多种类型异常</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">检测范围</span><br><span class="line">except Exception1[as reason]</span><br><span class="line">出现异常后的处理代码</span><br><span class="line">except Exception2[as reason]</span><br><span class="line">出现异常后的处理代码</span><br><span class="line">except Exception3[as reason]</span><br><span class="line">出现异常后的处理代码</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">except (NameError,zerodivisionerroe) as e:</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./4.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;出错了草&quot;</span>,<span class="built_in">str</span>(reason))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#顶级的捕获方式-----1</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数&quot;</span>))</span><br><span class="line">    result=<span class="number">8</span>/a</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;好像出错了啊&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哎嘿&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#等价于------捕获全部的异常------2  顶级异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> result:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未知错误%s&quot;</span>%result)</span><br><span class="line"><span class="comment"># 请输入一个数0</span></span><br><span class="line"><span class="comment"># 好像出错了啊</span></span><br><span class="line"><span class="comment"># 哎嘿</span></span><br></pre></td></tr></table></figure><h4 id="配合else使用–-可选"><a href="#配合else使用–-可选" class="headerlink" title="配合else使用–(可选)"></a>配合else使用–(可选)</h4><p><strong>也就是没有异常就执行else后面的语句</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数&quot;</span>))</span><br><span class="line">    result=<span class="number">8</span>/a</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;好像出错了啊&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有异常啊&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哎嘿&quot;</span>)</span><br><span class="line"><span class="comment"># 请输入一个数9</span></span><br><span class="line"><span class="comment"># 0.8888888888888888</span></span><br><span class="line"><span class="comment"># 没有异常啊</span></span><br><span class="line"><span class="comment"># 哎嘿</span></span><br></pre></td></tr></table></figure><h4 id="异常的finally–-可选"><a href="#异常的finally–-可选" class="headerlink" title="异常的finally–(可选)"></a>异常的finally–(可选)</h4><p><strong>就是有没有异常，都要执行这句话了。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数&quot;</span>))</span><br><span class="line">    result=<span class="number">8</span>/a</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;好像出错了啊&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有异常啊&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;无所谓，有没有异常我都要执行&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哎嘿&quot;</span>)</span><br><span class="line"><span class="comment"># 请输入一个数0</span></span><br><span class="line"><span class="comment"># 好像出错了啊</span></span><br><span class="line"><span class="comment"># 无所谓，有没有异常我都要执行</span></span><br><span class="line"><span class="comment"># 哎嘿</span></span><br></pre></td></tr></table></figure><h4 id="异常的传递"><a href="#异常的传递" class="headerlink" title="异常的传递"></a>异常的传递</h4><p>一层一层的向上传递，如果最高层级调用了异常就抛出。</p><blockquote><h5 id="没有捕获的时候，从出现异常的位置开始往外冒"><a href="#没有捕获的时候，从出现异常的位置开始往外冒" class="headerlink" title="没有捕获的时候，从出现异常的位置开始往外冒"></a>没有捕获的时候，从出现异常的位置开始往外冒</h5></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1开始&quot;</span>)</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1结束&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2开始&quot;</span>)</span><br><span class="line">    func1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2结束&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">     func2()</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># func2开始</span></span><br><span class="line"><span class="comment"># func1开始</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File &quot;e:\Bluecode\code\python\code\异常的传递.py&quot;, line 13, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     func2()</span></span><br><span class="line"><span class="comment">#   File &quot;e:\Bluecode\code\python\code\异常的传递.py&quot;, line 7, in func2</span></span><br><span class="line"><span class="comment">#     func1()</span></span><br><span class="line"><span class="comment">#   File &quot;e:\Bluecode\code\python\code\异常的传递.py&quot;, line 3, in func1</span></span><br><span class="line"><span class="comment">#     1/0</span></span><br><span class="line"><span class="comment">#     ~^~</span></span><br><span class="line"><span class="comment"># ZeroDivisionError: division by zero</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="当最高级有捕获的时候"><a href="#当最高级有捕获的时候" class="headerlink" title="当最高级有捕获的时候"></a>当最高级有捕获的时候</h5></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1开始&quot;</span>)</span><br><span class="line">    <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func1结束&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2开始&quot;</span>)</span><br><span class="line">    func1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;func2结束&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        func2()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> op:</span><br><span class="line">        <span class="built_in">print</span>(op)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"><span class="comment"># func2开始</span></span><br><span class="line"><span class="comment"># func1开始</span></span><br><span class="line"><span class="comment"># division by zero</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;在最顶级就可以捕获到低级出发生的异常&#x3D;&#x3D;</p><h3 id="Python模块和包"><a href="#Python模块和包" class="headerlink" title="Python模块和包"></a>Python模块和包</h3><h4 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块"></a>什么是模块</h4><blockquote><h6 id="python文件"><a href="#python文件" class="headerlink" title="python文件"></a>python文件</h6><h6 id="提供的现成的变量，函数，来使用"><a href="#提供的现成的变量，函数，来使用" class="headerlink" title="提供的现成的变量，函数，来使用"></a>提供的现成的变量，函数，来使用</h6></blockquote><h4 id="如何导入模块"><a href="#如何导入模块" class="headerlink" title="如何导入模块"></a>如何导入模块</h4><p><em><strong>写在开头</strong></em></p><blockquote><ol><li><h6 id="from-模块名-import-模块-类-变量-函数-as-别名"><a href="#from-模块名-import-模块-类-变量-函数-as-别名" class="headerlink" title="[from 模块名]  import [模块 |类|变量|函数|*] [as 别名]"></a>[from 模块名]  import [模块 |类|变量|函数|*] [as 别名]</h6><hr><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法:"></a>基本语法:</h5><p>import 模块名</p><p>import 模块1，模块2</p><h5 id="用法-通过-就可以使用模块的全部功能了。确定层级关系"><a href="#用法-通过-就可以使用模块的全部功能了。确定层级关系" class="headerlink" title="用法,&#x3D;&#x3D;通过.&#x3D;&#x3D;就可以使用模块的全部功能了。确定层级关系"></a>用法,&#x3D;&#x3D;通过.&#x3D;&#x3D;就可以使用模块的全部功能了。确定层级关系</h5><p>模块.功能名()</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line">10s后</span><br><span class="line"><span class="comment"># 结束</span></span><br></pre></td></tr></table></figure><h5 id="直接引入模块对应的功能-只需要模块的部分功能"><a href="#直接引入模块对应的功能-只需要模块的部分功能" class="headerlink" title="直接引入模块对应的功能,只需要模块的部分功能"></a>直接引入模块对应的功能,只需要模块的部分功能</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line"><span class="comment"># 3s后</span></span><br><span class="line"><span class="comment"># 结束</span></span><br></pre></td></tr></table></figure><h6 id="引入模块全部的功能，直接使用"><a href="#引入模块全部的功能，直接使用" class="headerlink" title="引入模块全部的功能，直接使用"></a>引入模块全部的功能，直接使用</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line"><span class="comment"># 3s后</span></span><br><span class="line"><span class="comment"># 结束</span></span><br></pre></td></tr></table></figure><h6 id="用别名来代替对应的功能-相当于改名，对于那些难听的，臭长臭长的功能"><a href="#用别名来代替对应的功能-相当于改名，对于那些难听的，臭长臭长的功能" class="headerlink" title="用别名来代替对应的功能,相当于改名，对于那些难听的，臭长臭长的功能"></a>用别名来代替对应的功能,相当于改名，对于那些难听的，臭长臭长的功能</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep <span class="keyword">as</span> op</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">op(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line"><span class="comment"># 3s后</span></span><br><span class="line"><span class="comment"># 结束</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;开始&quot;</span>)</span><br><span class="line">t.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;结束&quot;</span>)</span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line"><span class="comment"># 3s后</span></span><br><span class="line"><span class="comment"># 结束</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="自定义模块-main-all"><a href="#自定义模块-main-all" class="headerlink" title="自定义模块(__main__ __all__)"></a>自定义模块(__main__ __all__)</h4><blockquote><h5 id="import-自定义模块的python文件名字"><a href="#import-自定义模块的python文件名字" class="headerlink" title="import 自定义模块的python文件名字"></a>import 自定义模块的python文件名字</h5><hr><h5 id="自定义模块-mymodul"><a href="#自定义模块-mymodul" class="headerlink" title="自定义模块 mymodul"></a>自定义模块 mymodul</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure><h5 id="导入自定义模块"><a href="#导入自定义模块" class="headerlink" title="导入自定义模块"></a>导入自定义模块</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mymolul <span class="keyword">as</span> a</span><br><span class="line"><span class="built_in">print</span>(a.add(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">#4</span></span><br></pre></td></tr></table></figure><hr><h5 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h5><h5 id="自定义模块mymodul1"><a href="#自定义模块mymodul1" class="headerlink" title="自定义模块mymodul1"></a>自定义模块mymodul1</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="keyword">return</span> x-y</span><br></pre></td></tr></table></figure><h5 id="引用两个具有相同名字但不同功能的模块"><a href="#引用两个具有相同名字但不同功能的模块" class="headerlink" title="引用两个具有相同名字但不同功能的模块"></a>引用两个具有相同名字但不同功能的模块</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mymolul <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> mymolul1 <span class="keyword">import</span> add</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment"># -2</span></span><br></pre></td></tr></table></figure><h5 id="后者会覆盖前者"><a href="#后者会覆盖前者" class="headerlink" title="后者会覆盖前者"></a>后者会覆盖前者</h5><hr><h5 id="自定义模块-main"><a href="#自定义模块-main" class="headerlink" title="自定义模块(__main__)"></a>自定义模块(__main__)</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="built_in">print</span>(x-y)</span><br><span class="line"> <span class="keyword">return</span> x-y</span><br><span class="line">add(<span class="number">1</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h5 id="导入自定义模块-但没有任何操作"><a href="#导入自定义模块-但没有任何操作" class="headerlink" title="导入自定义模块 但没有任何操作"></a>导入自定义模块 但没有任何操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mymolul1 <span class="keyword">import</span> add</span><br><span class="line"><span class="comment">#-4</span></span><br></pre></td></tr></table></figure><p>from 模块的时候就直接把模块给执行了</p><h6 id="在模块中用-main-实现在模块中可以测试，import引入模块的时候不立刻执行测试的语句"><a href="#在模块中用-main-实现在模块中可以测试，import引入模块的时候不立刻执行测试的语句" class="headerlink" title="在模块中用__main__实现在模块中可以测试，import引入模块的时候不立刻执行测试的语句"></a>在模块中用__main__实现在模块中可以测试，import引入模块的时候不立刻执行测试的语句</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="built_in">print</span>(x-y)</span><br><span class="line"> <span class="keyword">return</span> x-y</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> add(<span class="number">1</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h6 id="就实现导入模块的时候不执行模块的测试语句"><a href="#就实现导入模块的时候不执行模块的测试语句" class="headerlink" title="就实现导入模块的时候不执行模块的测试语句"></a>就实现导入模块的时候不执行模块的测试语句</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mymolul1 <span class="keyword">import</span> add</span><br></pre></td></tr></table></figure><hr><p>自定义模块的__all__</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="built_in">print</span>(x-y)</span><br><span class="line"> <span class="keyword">return</span> x-y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add1</span>(<span class="params">x,y</span>):</span><br><span class="line"> <span class="built_in">print</span>(x+y)</span><br><span class="line"> <span class="keyword">return</span> x-y</span><br><span class="line">__all__=[<span class="string">&#x27;add&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mymolul1 <span class="keyword">import</span> *</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(add1(<span class="number">1</span>,<span class="number">2</span>)) add1为被定义。手动导入是可以的，仅限制导入*的时候</span><br></pre></td></tr></table></figure><h6 id="这样导入模块的时候尽管使用from-模块名-import-也只能限制all里面的可使用功能"><a href="#这样导入模块的时候尽管使用from-模块名-import-也只能限制all里面的可使用功能" class="headerlink" title="这样导入模块的时候尽管使用from 模块名 import *也只能限制all里面的可使用功能"></a>这样导入模块的时候尽管使用from 模块名 import *也只能限制all里面的可使用功能</h6></blockquote><hr><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><blockquote><h5 id="1-如何自定义模块并导入"><a href="#1-如何自定义模块并导入" class="headerlink" title="1.如何自定义模块并导入?"></a>1.如何自定义模块并导入?</h5><p>在Python代码文件中正常写代码即可,通过import、from关键字和导<br>入Python内置模块一样导入即可使用。</p><ol start="2"><li>main_ 变量的功能是?<br>if__ main__ &#x3D;&#x3D; “_ __main____“</li></ol><p> &#x3D;&#x3D;测试语句里面的相对路径是对包的文件夹而言的不是模块文件&#x3D;&#x3D;</p><h6 id="4-txt是在包的外面的文件"><a href="#4-txt是在包的外面的文件" class="headerlink" title="4.txt是在包的外面的文件"></a>4.txt是在包的外面的文件</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">append_to_file</span>(<span class="params">file_name,data</span>):</span><br><span class="line">    p=<span class="built_in">open</span>(file_name,<span class="string">&quot;a&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    p.write(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    append_to_file(<span class="string">&quot;./4.txt&quot;</span>,<span class="string">&quot;卧槽&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="表示，只有当程序是直接执行的才会进入"><a href="#表示，只有当程序是直接执行的才会进入" class="headerlink" title="表示，只有当程序是直接执行的才会进入"></a>表示，只有当程序是直接执行的才会进入</h6><h6 id="if内部，如果是被导入的，则if无法进入"><a href="#if内部，如果是被导入的，则if无法进入" class="headerlink" title="&#x3D;&#x3D;if内部，如果是被导入的，则if无法进入&#x3D;&#x3D;"></a>&#x3D;&#x3D;if内部，如果是被导入的，则if无法进入&#x3D;&#x3D;</h6><ol start="3"><li>注意事项<br>●<br>不同模块，同名的功能，如果都被导入，那么后导入的会覆盖先导<br>入的<br>●<br><em>all</em> 变量可以控制import *的时候哪些功能可以被导入</li></ol></blockquote><h4 id="自定义Python包"><a href="#自定义Python包" class="headerlink" title="自定义Python包"></a>自定义Python包</h4><blockquote><p>如果导入的模块太多，就需要一个包来管理大部分模块。相当于一个文件夹，文件夹里面一大堆模块.py</p><p>还有一个额外的 __init__.py</p><h5 id="和普通的文件夹区分主要是看有无-init-py文件"><a href="#和普通的文件夹区分主要是看有无-init-py文件" class="headerlink" title="&#x3D;&#x3D;和普通的文件夹区分主要是看有无 __init__.py文件&#x3D;&#x3D;"></a>&#x3D;&#x3D;和普通的文件夹区分主要是看有无 __init__.py文件&#x3D;&#x3D;</h5></blockquote><h5 id="自定义包"><a href="#自定义包" class="headerlink" title="自定义包"></a>自定义包</h5><h5 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h5><blockquote><p>import 包名.模块名字<br>使用相关的功能<br>包.模块.功能</p><p>导入包里的具体模块，导入具体模块的时候，用对应功能的时候，模块名字.功能</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mypython包.mk</span><br><span class="line"><span class="built_in">print</span>(mypython包.mk.add(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">#4</span></span><br></pre></td></tr></table></figure><p>导入包里的具体模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mypython包 <span class="keyword">import</span> mk</span><br><span class="line"><span class="built_in">print</span>(mk.add(<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment">#7</span></span><br></pre></td></tr></table></figure><p>导入具体包模块的功能</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mypython包.mk <span class="keyword">import</span> add <span class="keyword">as</span> a</span><br><span class="line"><span class="built_in">print</span>(a(<span class="number">1</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>__all__写在init文件里可以控制*导入的范围</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from mypython包 import *</span><br><span class="line">把包里所有模块都导入了，直接用模块的名和对应的功能</span><br><span class="line">mk1不存在</span><br></pre></td></tr></table></figure><hr><blockquote><p>1.什么是Python的包?<br>包就是一个文件夹，里面可以存放许多Python的模块(代码文件)，通<br>过包，在逻辑上将一批模块归为一类，方便使用。</p><ol start="2"><li>_ init_ .py文件的作用 ?<br>创建包会默认自动创建的文件，通过这个文件来表示一-个文件夹是;<br>Python的包，而非普通的文件夹。</li><li>__all__ 变量的作用?<br>同模块中学习到的是一个作用，控制import *能够导入的内容</li></ol></blockquote></blockquote><h4 id="第三方包"><a href="#第三方包" class="headerlink" title="第三方包"></a>第三方包</h4><p><strong>安装第三方python包</strong></p><p><strong>一个包就是一堆同类型功能的集合体</strong></p><h6 id="如何安装第三方包"><a href="#如何安装第三方包" class="headerlink" title="如何安装第三方包"></a>如何安装第三方包</h6><blockquote><h6 id="利用python内置的pipi程序"><a href="#利用python内置的pipi程序" class="headerlink" title="利用python内置的pipi程序"></a>利用python内置的pipi程序</h6><h6 id="win-r-cmd-输入命令"><a href="#win-r-cmd-输入命令" class="headerlink" title="win+r cmd 输入命令"></a>win+r cmd 输入命令</h6><h6 id="pip-install-第三方包名-国外"><a href="#pip-install-第三方包名-国外" class="headerlink" title="pip install 第三方包名 国外"></a>pip install 第三方包名 国外</h6><h6 id="pip-install-i-https-pypi-tuna-tsinghua-edu-cn-simple-包名-国内"><a href="#pip-install-i-https-pypi-tuna-tsinghua-edu-cn-simple-包名-国内" class="headerlink" title="pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名  国内"></a>pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> 包名  国内</h6><h5 id="在pychrm里去解释器的设置安装"><a href="#在pychrm里去解释器的设置安装" class="headerlink" title="在pychrm里去解释器的设置安装"></a>在pychrm里去解释器的设置安装</h5></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="json文件"><a href="#json文件" class="headerlink" title="json文件"></a>json<strong>文件</strong></h5><blockquote><h6 id="轻量级的数据交互格式"><a href="#轻量级的数据交互格式" class="headerlink" title="轻量级的数据交互格式"></a>轻量级的数据交互格式</h6><h6 id="相当于字符串"><a href="#相当于字符串" class="headerlink" title="&#x3D;&#x3D;相当于字符串&#x3D;&#x3D;"></a>&#x3D;&#x3D;相当于字符串&#x3D;&#x3D;</h6><h6 id="带有特定格式的字符串"><a href="#带有特定格式的字符串" class="headerlink" title="带有特定格式的字符串"></a>带有特定格式的字符串</h6><h6 id="按照json指定的格式去组织和封装数据"><a href="#按照json指定的格式去组织和封装数据" class="headerlink" title="按照json指定的格式去组织和封装数据"></a>按照json指定的格式去组织和封装数据</h6><h6 id="json相当于国际语言，在各个编程语言中流通的数据格式，负责不同编程语言中的数据传递和交互"><a href="#json相当于国际语言，在各个编程语言中流通的数据格式，负责不同编程语言中的数据传递和交互" class="headerlink" title="json相当于国际语言，在各个编程语言中流通的数据格式，负责不同编程语言中的数据传递和交互"></a>json相当于国际语言，在各个编程语言中流通的数据格式，负责不同编程语言中的数据传递和交互</h6><h6 id="普通话，英语"><a href="#普通话，英语" class="headerlink" title="普通话，英语"></a>普通话，英语</h6><hr><p>python格式数据——json格式数据—–C语言接受json格式数据并转换为python格式数据继续使用</p><ul><li><code>json.loads()</code>: 该方法用于将JSON格式的字符串转换为Python对象。它接受一个JSON字符串作为参数，并返回一个对应的Python对象。</li><li><code>json.dumps()</code>: 该方法用于将Python对象&#x3D;&#x3D;转换为JSON格式的字符串&#x3D;&#x3D;。它接受一个Python对象作为参数，并返回一个对应的JSON字符串。</li></ul><h6 id="json格式数据化-、、、字典"><a href="#json格式数据化-、、、字典" class="headerlink" title="json格式数据化 、、、字典"></a>json格式数据化 、、、字典</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">data = &#x27;<span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span> <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;New York&quot;</span><span class="punctuation">&#125;</span>&#x27;</span><br><span class="line">obj = json.loads(data)</span><br><span class="line"></span><br><span class="line">print(obj)  # 输出：<span class="punctuation">&#123;</span>&#x27;name&#x27;<span class="punctuation">:</span> &#x27;John&#x27;<span class="punctuation">,</span> &#x27;age&#x27;<span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span> &#x27;city&#x27;<span class="punctuation">:</span> &#x27;New York&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">print(type(obj))  # 输出：dict</span><br></pre></td></tr></table></figure><p>python-&gt;json</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">obj = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;John&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>&#125;</span><br><span class="line">data = json.dumps(obj)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># 输出：&#123;&quot;name&quot;: &quot;John&quot;, &quot;age&quot;: 30, &quot;city&quot;: &quot;New York&quot;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data))  <span class="comment"># 输出：str</span></span><br></pre></td></tr></table></figure><p><code>json.dumps()</code>方法默认使用ASCII编码来生成JSON字符串，如果需要使用其他编码，可以通过<code>ensure_ascii</code>参数进行设置。此外，还可以通过<code>indent</code>参数设置缩进空格数，以使生成的JSON字符串更易读。</p></blockquote><p><code>json.dump()</code>和<code>json.dumps()</code>都是Python中用于将数据对象转换为JSON格式的方法，但它们之间有一些区别。</p><ul><li><p><code>json.dump()</code>: 这个方法用于将数据对象转换为JSON格式，并将其写入文件对象中。它接受两个参数：第一个参数是要转换为JSON的数据对象，第二个参数是要写入的文件对象。示例代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.json&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json.dump(data, file)</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>data</code>是一个字典对象，我们使用<code>json.dump()</code>方法将其转换为JSON格式，并将结果写入名为”data.json”的文件中。</p></li><li><p><code>json.dumps()</code>: 这个方法用于将数据对象转换为JSON格式，并返回一个字符串。它只接受一个参数，即要转换为JSON的数据对象。示例代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line">json_str = json.dumps(data)</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>data</code>是一个字典对象，我们使用<code>json.dumps()</code>方法将其转换为JSON格式，并将结果赋值给<code>json_str</code>变量。</p></li></ul><p>总结来说，<code>json.dump()</code>用于将数据对象转换为JSON格式，并将其写入文件对象中，而<code>json.dumps()</code>用于将数据对象转换为JSON格式，并返回一个字符串。你可以根据具体的需求选择使用哪个方法。</p><hr><h5 id="python内置的json模块，数据相互转换"><a href="#python内置的json模块，数据相互转换" class="headerlink" title="python内置的json模块，数据相互转换"></a>python内置的json模块，数据相互转换</h5><h6 id="把json的数据转为python的形式，不一定是json文件"><a href="#把json的数据转为python的形式，不一定是json文件" class="headerlink" title="&#x3D;&#x3D;把json的数据转为python的形式，不一定是json文件&#x3D;&#x3D;"></a>&#x3D;&#x3D;把json的数据转为python的形式，不一定是json文件&#x3D;&#x3D;</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data=&#123;<span class="string">&quot;key1&quot;</span>:<span class="number">2</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;python数据转为json&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(json.dumps(data))</span><br><span class="line">data=json.dumps(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;json数据转为python&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(json.loads(data))</span><br><span class="line"><span class="comment"># python数据转为json</span></span><br><span class="line"><span class="comment"># &#123;&quot;key1&quot;: 2, &quot;key2&quot;: 2&#125;</span></span><br><span class="line"><span class="comment"># json数据转为python</span></span><br><span class="line"><span class="comment"># &#123;&#x27;key1&#x27;: 2, &#x27;key2&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line">data1=[&#123;<span class="string">&quot;key1&quot;</span>:<span class="number">2</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&quot;key11&quot;</span>:<span class="number">2</span>,<span class="string">&quot;key2&quot;</span>:<span class="number">2</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;王大锤&quot;</span>,<span class="string">&quot;key22&quot;</span>:<span class="number">2</span>&#125;]</span><br><span class="line">data1_json=json.dumps(data1,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data1_json))</span><br><span class="line"><span class="built_in">print</span>(data1_json)</span><br><span class="line"><span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="comment"># [&#123;&quot;key1&quot;: 2, &quot;key2&quot;: 2&#125;, &#123;&quot;key11&quot;: 2, &quot;key2&quot;: 2&#125;, &#123;&quot;name&quot;: &quot;\u738b\u5927\u9524&quot;, &quot;key22&quot;: 2&#125;]</span></span><br><span class="line"><span class="comment"># 不用ancii码转换，原样输出</span></span><br><span class="line"><span class="comment"># [&#123;&quot;key1&quot;: 2, &quot;key2&quot;: 2&#125;, &#123;&quot;key11&quot;: 2, &quot;key2&quot;: 2&#125;, &#123;&quot;name&quot;: &quot;王大锤&quot;, &quot;key22&quot;: 2&#125;]</span></span><br></pre></td></tr></table></figure><blockquote><p>1.json: 是一种轻量级的数据交互格式,采用完全独立于编程语言的文本<br>格式来存储和表示数据( 就是字符串)<br>Python语言使用JSON有很大优势，因为: JSON无非就是-个单独的字典或-个内部元素都<br>是字典的列表<br>所以JSON可以直接和Python的字典或列表进行无缝转换。</p><ol start="2"><li>json格式数据转化</li></ol><h5 id="通过json-dumps-data-方法把python数据转化为了json数-据data-json-dumps-data"><a href="#通过json-dumps-data-方法把python数据转化为了json数-据data-json-dumps-data" class="headerlink" title="通过json. dumps (data)方法把python数据转化为了json数 据data &#x3D; json. dumps (data)"></a>通过json. dumps (data)方法把python数据转化为了json数 据data &#x3D; json. dumps (data)</h5><p>  如果有中文可以带上: ensure_ _ascii&#x3D;Fal se参数来确保中<br>  文正常转换.</p><h5 id="通过json-loads-data-方法把josn数据转化为了python列表或字典"><a href="#通过json-loads-data-方法把josn数据转化为了python列表或字典" class="headerlink" title="通过json. loads (data)方法把josn数据转化为了python列表或字典."></a>通过json. loads (data)方法把josn数据转化为了python列表或字典.</h5><p>data &#x3D; json. loads (data) </p></blockquote><h5 id="pyecharts模块—-利用鼠标放上去的提示写"><a href="#pyecharts模块—-利用鼠标放上去的提示写" class="headerlink" title="pyecharts模块—-利用鼠标放上去的提示写"></a>pyecharts模块—-利用鼠标放上去的提示写</h5><p>&#x3D;&#x3D;<em><strong>bar.reversal_axis()</strong></em>&#x3D;&#x3D;</p><h5 id="1折线图2基础可视化地图map"><a href="#1折线图2基础可视化地图map" class="headerlink" title="1折线图2基础可视化地图map"></a>1折线图2基础可视化地图map</h5><blockquote><ol><li><h5 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./数据/日本.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data=file.read().replace(<span class="string">&quot;jsonp_1629350871167_29498(&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    data=data[:-<span class="number">2</span>]</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    data=json.loads(data)</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    data=data[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;trend&quot;</span>]</span><br><span class="line">    xdata=data[<span class="string">&quot;updateDate&quot;</span>][:<span class="number">315</span>]</span><br><span class="line">    ydata=data[<span class="string">&quot;list&quot;</span>][<span class="number">0</span>][<span class="string">&quot;data&quot;</span>][:<span class="number">315</span>]</span><br><span class="line">    <span class="comment"># print(xdata)</span></span><br><span class="line">    <span class="comment"># print(ydata)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./数据/美国.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data=f.read()</span><br><span class="line">    data=data.replace(<span class="string">&quot;jsonp_1629344292311_69436(&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">    data=data[:-<span class="number">2</span>]</span><br></pre></td></tr></table></figure><pre><code>pydata=json.loads(data)# x轴数据timedata=pydata[&quot;data&quot;][0][&quot;trend&quot;][&quot;updateDate&quot;][:314]# print(timedata)# y轴数据listdata=pydata[&quot;data&quot;][0][&quot;trend&quot;][&quot;list&quot;][0][&quot;data&quot;][:314]line=Line()     line.add_xaxis(xdata)     line.add_yaxis(&quot;日本疫情数据&quot;,ydata,label_opts=LabelOpts(is_show=False))line.add_yaxis(&quot;美国疫情数据&quot;,listdata,label_opts=LabelOpts(is_show=False))line.set_global_opts(    toolbox_opts=ToolboxOpts(is_show=True),    tooltip_opts=TooltipOpts(is_show=True),    legend_opts=LegendOpts(is_show=True),    visualmap_opts=VisualMapOpts(is_show=True),    title_opts=TitleOpts(title=&quot;疫情数据&quot;,pos_left=&quot;center&quot;,pos_top=&quot;5%&quot;),    datazoom_opts=DataZoomOpts(is_show=True)     )     line.render(&quot;./两国数据.html&quot;)</code></pre><ol start="2"><li><h5 id="基础可视化地图"><a href="#基础可视化地图" class="headerlink" title="基础可视化地图"></a><strong>基础可视化地图</strong></h5></li></ol></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./数据/疫情.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data=file.read()</span><br><span class="line">    data=json.loads(data)</span><br><span class="line"></span><br><span class="line">    fordata=data[<span class="string">&quot;areaTree&quot;</span>][<span class="number">0</span>][<span class="string">&quot;children&quot;</span>]</span><br><span class="line">    <span class="comment"># print(fordata)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    listdata=[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> fordata:</span><br><span class="line">        <span class="comment"># print(k)</span></span><br><span class="line">        address=k[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">        peoples=k[<span class="string">&quot;total&quot;</span>][<span class="string">&quot;confirm&quot;</span>]</span><br><span class="line">        <span class="comment"># print(address,peoples)</span></span><br><span class="line">        listdata.append((address,peoples))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(listdata),listdata)</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>=Map()</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.add(<span class="string">&quot;各省疫情总览&quot;</span>,listdata,<span class="string">&quot;china&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.set_global_opts(</span><br><span class="line">    visualmap_opts=VisualMapOpts(</span><br><span class="line">        is_show=<span class="literal">True</span>,</span><br><span class="line">        is_piecewise=<span class="literal">True</span>,</span><br><span class="line">        pieces=[</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>:<span class="number">1</span>,<span class="string">&quot;max&quot;</span>:<span class="number">1000</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;#87ceeb&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;1-1000人&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>:<span class="number">10</span>,<span class="string">&quot;max&quot;</span>:<span class="number">20</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;10-20人&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>:<span class="number">20</span>,<span class="string">&quot;max&quot;</span>:<span class="number">100</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;20-100人&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>:<span class="number">2000</span>,<span class="string">&quot;max&quot;</span>:<span class="number">3000</span>,<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;2000-3000人&quot;</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    ),</span><br><span class="line">    title_opts=TitleOpts(title=<span class="string">&quot;全国疫情&quot;</span>)</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.render(<span class="string">&quot;./疫情大地图.html&quot;</span>)</span><br></pre></td></tr></table></figure></blockquote><hr><h5 id="柱状图，时间柱状图-动态柱状图"><a href="#柱状图，时间柱状图-动态柱状图" class="headerlink" title="柱状图，时间柱状图,动态柱状图"></a>柱状图，时间柱状图,动态柱状图</h5><p><strong>基础柱状图—————————————————————————————————————————————————————-</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bar.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>))</span><br></pre></td></tr></table></figure><p><em><strong>实现数值标签的位置</strong></em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar=Bar()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>])</span><br><span class="line">bar.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line">bar.set_global_opts(</span><br><span class="line">    legend_opts=LegendOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    toolbox_opts=ToolboxOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    tooltip_opts=TooltipOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    visualmap_opts=VisualMapOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    datazoom_opts=DataZoomOpts(is_show=<span class="literal">True</span>)</span><br><span class="line">)</span><br><span class="line">bar.reversal_axis() </span><br><span class="line">bar.render(<span class="string">&quot;./基础柱状图.html&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><h5 id="1-通过Bar-构建一个柱状图对象"><a href="#1-通过Bar-构建一个柱状图对象" class="headerlink" title="1.通过Bar()构建一个柱状图对象"></a>1.通过Bar()构建一个柱状图对象</h5><h5 id="2-和折线图一样，通过add-xaxis-和add-yaxis-添加"><a href="#2-和折线图一样，通过add-xaxis-和add-yaxis-添加" class="headerlink" title="2.和折线图一样，通过add xaxis()和add_yaxis()添加"></a>2.和折线图一样，通过add xaxis()和add_yaxis()添加</h5><h5 id="x和y轴数据"><a href="#x和y轴数据" class="headerlink" title="x和y轴数据"></a>x和y轴数据</h5><h5 id="3-通过柱状图对象的-reversal-axis-，反转x和y轴"><a href="#3-通过柱状图对象的-reversal-axis-，反转x和y轴" class="headerlink" title="3.通过柱状图对象的:reversal axis()，反转x和y轴"></a>3.通过柱状图对象的:reversal axis()，反转x和y轴</h5><h5 id="4-通过label-opts-LabelOpts-position-”right”-设置"><a href="#4-通过label-opts-LabelOpts-position-”right”-设置" class="headerlink" title="4.通过label opts&#x3D;LabelOpts(position&#x3D;”right”)设置"></a>4.通过label opts&#x3D;LabelOpts(position&#x3D;”right”)设置</h5><h5 id="数值标签在右侧显示"><a href="#数值标签在右侧显示" class="headerlink" title="数值标签在右侧显示"></a>数值标签在右侧显示</h5></blockquote><hr><p><strong>时间柱状图——————————————————————————————————————————————————————</strong></p><p><strong>在有多个柱状图bar对象的前提下，创建一个时间线timeline对象，然后给时间线对象的add方法添加多个bar对象和标题</strong></p><p><strong>from</strong> pyecharts.charts <strong>import</strong> Timeline</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Timeline</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar=Bar()</span><br><span class="line">bar1=Bar()</span><br><span class="line">bar2=Bar()</span><br><span class="line">bar3=Bar()</span><br><span class="line">bar4=Bar()</span><br><span class="line">bar5=Bar()</span><br><span class="line">bar6=Bar()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>))</span><br><span class="line">bar.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar1.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">35</span>,<span class="number">45</span>,<span class="number">45</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>))</span><br><span class="line">bar1.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar2.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">40</span>,<span class="number">60</span>,<span class="number">40</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>))</span><br><span class="line">bar2.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar3.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">45</span>,<span class="number">30</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>,font_size=<span class="string">&quot;30px&quot;</span>))</span><br><span class="line">bar3.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar4.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">205</span>,<span class="number">30</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>,font_size=<span class="string">&quot;30px&quot;</span>))</span><br><span class="line">bar4.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar5.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">100</span>,<span class="number">30</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>,font_size=<span class="string">&quot;30px&quot;</span>))</span><br><span class="line">bar5.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar6.add_yaxis(<span class="string">&quot;gdp&quot;</span>,[<span class="number">205</span>,<span class="number">30</span>,<span class="number">50</span>],label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>,font_size=<span class="string">&quot;30px&quot;</span>))</span><br><span class="line">bar6.add_xaxis([<span class="string">&quot;中国&quot;</span>,<span class="string">&quot;美国&quot;</span>,<span class="string">&quot;日本&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar.set_global_opts(</span><br><span class="line">    title_opts=TitleOpts(title=<span class="string">&quot;时间线柱状图666666&quot;</span> ),</span><br><span class="line">    legend_opts=LegendOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    toolbox_opts=ToolboxOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    tooltip_opts=TooltipOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    visualmap_opts=VisualMapOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    datazoom_opts=DataZoomOpts(is_show=<span class="literal">True</span>,pos_top=<span class="string">&quot;20px&quot;</span>)</span><br><span class="line">)</span><br><span class="line">time=Timeline()</span><br><span class="line"></span><br><span class="line">time.add(bar,<span class="string">&quot;2001&quot;</span>)</span><br><span class="line">time.add(bar1,<span class="string">&quot;2002&quot;</span>)</span><br><span class="line">time.add(bar2,<span class="string">&quot;2003&quot;</span>)</span><br><span class="line">time.add(bar3,<span class="string">&quot;2004&quot;</span>)</span><br><span class="line">time.add(bar4,<span class="string">&quot;2010&quot;</span>)</span><br><span class="line">time.add(bar5,<span class="string">&quot;2024&quot;</span>)</span><br><span class="line">time.add(bar6,<span class="string">&quot;2034&quot;</span>)</span><br><span class="line"></span><br><span class="line">time.add_schema(</span><br><span class="line">    play_interval=<span class="number">700</span>,</span><br><span class="line">    is_auto_play=<span class="literal">True</span>,</span><br><span class="line">    is_loop_play=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># bar.reversal_axis()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time.render(<span class="string">&quot;./时间线柱状图.html&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;控制时间线的属性&#x3D;&#x3D;</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">time.add_schema(</span><br><span class="line">    play_interval=<span class="number">700</span>,</span><br><span class="line">    is_auto_play=<span class="literal">True</span>,</span><br><span class="line">    is_loop_play=<span class="literal">True</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h6 id="主题类型模块"><a href="#主题类型模块" class="headerlink" title="&#x3D;&#x3D;主题类型模块&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;主题类型模块&#x3D;&#x3D;</strong></h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType</span><br><span class="line">time=Timeline(</span><br><span class="line">    &#123;<span class="string">&quot;theme&quot;</span>:ThemeType.BUILTIN_THEMES&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="综合案例-2"><a href="#综合案例-2" class="headerlink" title="综合案例"></a>综合案例</h5><p><em><strong>循环中每创建一个bar就add到时间线里面，是不会有问题的</strong></em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Timeline</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./数据/1960-2019全球GDP数据.csv&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;GB2312&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data=file.readlines()</span><br><span class="line">    data.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line"></span><br><span class="line">zd=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">    <span class="comment"># print(line)</span></span><br><span class="line">    <span class="built_in">list</span>=line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="comment"># print(list)</span></span><br><span class="line">    year=<span class="built_in">int</span>(<span class="built_in">list</span>[<span class="number">0</span>])</span><br><span class="line">    country=<span class="built_in">list</span>[<span class="number">1</span>]</span><br><span class="line">    gdp=<span class="built_in">float</span>(<span class="built_in">list</span>[<span class="number">2</span>])</span><br><span class="line">    <span class="comment"># print(year,country,gdp)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        zd[year].append([country,gdp])</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        zd[year]=[]</span><br><span class="line">        zd[year].append([country,gdp])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(zd)</span></span><br><span class="line">timeline=Timeline(</span><br><span class="line">    &#123;<span class="string">&quot;theme&quot;</span>:ThemeType.WALDEN&#125;</span><br><span class="line">)</span><br><span class="line">timedata=zd.keys()</span><br><span class="line"><span class="comment"># print(type(timedata))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> year <span class="keyword">in</span> timedata:</span><br><span class="line">    zd[year].sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line">    yeardata=zd[year][<span class="number">0</span>:<span class="number">8</span>]</span><br><span class="line">    x_data=[]</span><br><span class="line">    y_data=[]</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> yeardata:</span><br><span class="line">        x_data.append(data[<span class="number">0</span>])</span><br><span class="line">        y_data.append(<span class="built_in">int</span>(data[<span class="number">1</span>]/<span class="number">100000000</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        bar=Bar()</span><br><span class="line">        <span class="comment"># x_data.reverse()</span></span><br><span class="line">        <span class="comment"># y_data.reverse()</span></span><br><span class="line"></span><br><span class="line">        bar.add_xaxis(x_data)</span><br><span class="line">        bar.add_yaxis(<span class="string">&quot;GDP/亿&quot;</span>,y_data,label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>,font_size=<span class="string">&quot;20px&quot;</span>))</span><br><span class="line"></span><br><span class="line">        bar.set_global_opts(</span><br><span class="line">            <span class="comment"># visualmap_opts=VisualMapOpts(is_show=True),</span></span><br><span class="line">            <span class="comment"># toolbox_opts=ToolboxOpts(is_show=True),</span></span><br><span class="line">            <span class="comment"># tooltip_opts=TooltipOpts(is_show=True),</span></span><br><span class="line">            <span class="comment"># datazoom_opts=DataZoomOpts(is_show=True),</span></span><br><span class="line">            <span class="comment"># legend_opts=LegendOpts(is_show=True)</span></span><br><span class="line">            title_opts=TitleOpts(title=<span class="string">f&quot;gdp<span class="subst">&#123;year&#125;</span>前八争霸&quot;</span>)</span><br><span class="line">        )</span><br><span class="line">        bar.reversal_axis()</span><br><span class="line">        timeline.add(bar,<span class="built_in">str</span>(year))</span><br><span class="line"></span><br><span class="line">timeline.add_schema(</span><br><span class="line">    is_auto_play=<span class="literal">True</span>,</span><br><span class="line">    is_loop_play=<span class="literal">True</span>,</span><br><span class="line">    play_interval=<span class="number">300</span>,</span><br><span class="line">    is_timeline_show=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">timeline.render(<span class="string">&quot;./动态gdp.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><blockquote><ol><li><h5 id="创建一个类，-》设计表格"><a href="#创建一个类，-》设计表格" class="headerlink" title="创建一个类，-》设计表格"></a>创建一个类，-》设计表格</h5></li><li><h5 id="创建具体的对象，-》打印出来"><a href="#创建具体的对象，-》打印出来" class="headerlink" title="创建具体的对象，-》打印出来"></a>创建具体的对象，-》打印出来</h5></li><li><h5 id="设置对象的属性值，-》学生填写"><a href="#设置对象的属性值，-》学生填写" class="headerlink" title="设置对象的属性值，-》学生填写"></a>设置对象的属性值，-》学生填写</h5></li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设计类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    name=<span class="literal">None</span></span><br><span class="line">    number=<span class="literal">None</span></span><br><span class="line">    address=<span class="literal">None</span></span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line">student1=student()</span><br><span class="line"></span><br><span class="line">student1.age=<span class="number">11</span></span><br><span class="line">student1.name=<span class="string">&quot;林军姐&quot;</span></span><br><span class="line">student1.address=<span class="string">&quot;日本&quot;</span></span><br><span class="line">student1.number=<span class="number">1982830095</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(student1.address,student1.age,student1.name,student1.number)</span><br><span class="line"><span class="comment"># 日本 11 林军姐 1982830095</span></span><br></pre></td></tr></table></figure><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><h5 id="类的定义和使用"><a href="#类的定义和使用" class="headerlink" title="类的定义和使用"></a>类的定义和使用</h5><hr><p><strong>在类内定义和变量叫成员变量</strong></p><p><strong>在类内定义和函数叫成员方法</strong></p><p>&#x3D;&#x3D;<strong>类的属性和行为都是类的成员</strong>&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>:</span><br><span class="line">类的属性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">类的行为</span><br></pre></td></tr></table></figure><h5 id="创建类对象的语法"><a href="#创建类对象的语法" class="headerlink" title="创建类对象的语法"></a>创建类对象的语法</h5><h6 id="对象名-类名字"><a href="#对象名-类名字" class="headerlink" title="&#x3D;&#x3D;对象名&#x3D;类名字()&#x3D;&#x3D;"></a>&#x3D;&#x3D;对象名&#x3D;类名字()&#x3D;&#x3D;</h6><hr><h5 id="类的成员方法的创建"><a href="#类的成员方法的创建" class="headerlink" title="类的成员方法的创建"></a>类的成员方法的创建</h5><blockquote><h5 id="1，和普通函数构造没太大区别，2，-只不过必须有一个形参是self，必须要有-3，self形参不需要给对应的实参。"><a href="#1，和普通函数构造没太大区别，2，-只不过必须有一个形参是self，必须要有-3，self形参不需要给对应的实参。" class="headerlink" title="1，和普通函数构造没太大区别，2，&#x3D;&#x3D;只不过必须有一个形参是self，必须要有&#x3D;&#x3D;,3，self形参不需要给对应的实参。"></a>1，和普通函数构造没太大区别，2，&#x3D;&#x3D;只不过必须有一个形参是self，必须要有&#x3D;&#x3D;,3，self形参不需要给对应的实参。</h5><p>​     <strong>&#x3D;&#x3D;实例方法需要通过类的实例来调用，而不是直接通过类来调用。&#x3D;&#x3D;</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line"> name=<span class="string">&quot;黑马&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line">father.a5g()</span><br></pre></td></tr></table></figure><h5 id="2-访问成员变量的时候也要用到self"><a href="#2-访问成员变量的时候也要用到self" class="headerlink" title="2. 访问成员变量的时候也要用到self"></a>2. 访问成员变量的时候也要用到self</h5></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设计类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    name=<span class="literal">None</span></span><br><span class="line">    number=<span class="literal">None</span></span><br><span class="line">    address=<span class="literal">None</span></span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sayhi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;你好,我叫<span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化对象</span></span><br><span class="line">student1=student()</span><br><span class="line"></span><br><span class="line">student1.age=<span class="number">11</span></span><br><span class="line">student1.name=<span class="string">&quot;林军姐&quot;</span></span><br><span class="line">student1.address=<span class="string">&quot;日本&quot;</span></span><br><span class="line">student1.number=<span class="number">1982830095</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(student1.address,student1.age,student1.name,student1.number)</span><br><span class="line"><span class="comment"># 日本 11 林军姐 1982830095</span></span><br><span class="line">student1.sayhi()</span><br><span class="line"><span class="comment"># 你好,我叫林军姐</span></span><br></pre></td></tr></table></figure><h5 id="面向对象编程-属性和行为"><a href="#面向对象编程-属性和行为" class="headerlink" title="面向对象编程(属性和行为)"></a>面向对象编程(属性和行为)</h5><blockquote><h5 id="类-设计图纸"><a href="#类-设计图纸" class="headerlink" title="类&#x3D;&#x3D;设计图纸"></a>类&#x3D;&#x3D;设计图纸</h5><h5 id="对象-基于图纸生产的实体"><a href="#对象-基于图纸生产的实体" class="headerlink" title="对象&#x3D;&#x3D;基于图纸生产的实体"></a>对象&#x3D;&#x3D;基于图纸生产的实体</h5></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">clock</span>:</span><br><span class="line">    <span class="built_in">id</span>=<span class="literal">None</span></span><br><span class="line">    price=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ring</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">import</span> winsound</span><br><span class="line">        winsound.Beep(<span class="number">2000</span>,<span class="number">3000</span>)</span><br><span class="line">类==设计图纸</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对象==基于图纸生产的实体</span><br><span class="line">clock1=clock()</span><br><span class="line">clock2=clock()</span><br><span class="line"></span><br><span class="line">clock1.<span class="built_in">id</span>=<span class="string">&quot;0001&quot;</span></span><br><span class="line">clock1.price=<span class="number">100</span></span><br><span class="line"></span><br><span class="line">clock2.<span class="built_in">id</span>=<span class="string">&quot;0002&quot;</span></span><br><span class="line">clock2.price=<span class="number">200</span></span><br><span class="line">clock1.ring()</span><br><span class="line">clock2.ring()</span><br></pre></td></tr></table></figure><h4 id="类内置的方法—-魔术方法"><a href="#类内置的方法—-魔术方法" class="headerlink" title="类内置的方法—-魔术方法"></a>类内置的方法—-魔术方法</h4><p>魔术方法__魔术名字__</p><p>很多很多，常用的</p><blockquote><ol><li><h4 id="init-—构造方法"><a href="#init-—构造方法" class="headerlink" title="__init__—构造方法"></a>__init__—构造方法</h4><h5 id="特点：对象实例化的时候自动执行，把参数自动传递-inie-方法使用"><a href="#特点：对象实例化的时候自动执行，把参数自动传递-inie-方法使用" class="headerlink" title="&#x3D;&#x3D;特点：对象实例化的时候自动执行，把参数自动传递__inie__方法使用&#x3D;&#x3D;"></a>&#x3D;&#x3D;特点：对象实例化的时候自动执行，把参数自动传递__inie__方法使用&#x3D;&#x3D;</h5><p>与最基本的声明变量相比</p><p><strong>定义—》定义加赋值，二合一</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name:<span class="literal">None</span></span><br><span class="line">address=<span class="literal">None</span></span><br><span class="line">number=<span class="literal">None</span></span><br><span class="line">age=<span class="literal">None</span></span><br><span class="line">这一步可以被构造方法来代替</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    name:<span class="literal">None</span></span><br><span class="line">    address=<span class="literal">None</span></span><br><span class="line">    number=<span class="literal">None</span></span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,address,number,age</span>):</span><br><span class="line">      </span><br><span class="line">        self.name= name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.number=number</span><br><span class="line">        self.address=address</span><br><span class="line">      </span><br><span class="line">xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="string">&quot;日本&quot;</span>,<span class="number">198283095</span>,<span class="number">17</span>)</span><br><span class="line"><span class="built_in">print</span>(xrb.address)</span><br><span class="line"><span class="built_in">print</span>(xrb.age)</span><br><span class="line"><span class="built_in">print</span>(xrb.name)</span><br><span class="line"><span class="built_in">print</span>(xrb.number)</span><br><span class="line">   <span class="comment"># 日本</span></span><br><span class="line">      </span><br><span class="line">   <span class="comment"># 17</span></span><br><span class="line">      </span><br><span class="line">   <span class="comment"># 王大山</span></span><br><span class="line">      </span><br><span class="line">   <span class="comment"># 198283095</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="str-方法—字符串方法"><a href="#str-方法—字符串方法" class="headerlink" title="__str__方法—字符串方法"></a>__str__方法—字符串方法</h4><blockquote><p>问题引入</p></blockquote>   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    name:<span class="literal">None</span></span><br><span class="line">    address=<span class="literal">None</span></span><br><span class="line">    number=<span class="literal">None</span></span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,address,number,age</span>):</span><br><span class="line"></span><br><span class="line">        self.name= name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.number=number</span><br><span class="line">        self.address=address</span><br><span class="line"></span><br><span class="line">xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="string">&quot;日本&quot;</span>,<span class="number">198283095</span>,<span class="number">17</span>)</span><br><span class="line"><span class="built_in">print</span>(xrb)</span><br><span class="line"><span class="comment"># &lt;__main__.student object at 0x0000024AD5537450&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用str魔术方法，可以直接输出对象的属性"><a href="#使用str魔术方法，可以直接输出对象的属性" class="headerlink" title="使用str魔术方法，可以直接输出对象的属性"></a>使用str魔术方法，可以直接输出对象的属性</h5><h5 id="替换了原来的str方法-原来的str（对象）是内存地址-也替换了对象的打印方式"><a href="#替换了原来的str方法-原来的str（对象）是内存地址-也替换了对象的打印方式" class="headerlink" title="&#x3D;&#x3D;替换了原来的str方法 ,原来的str（对象）是内存地址,也替换了对象的打印方式&#x3D;&#x3D;"></a>&#x3D;&#x3D;替换了原来的str方法 ,原来的str（对象）是内存地址,也替换了对象的打印方式&#x3D;&#x3D;</h5>   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    name:<span class="literal">None</span></span><br><span class="line">    address=<span class="literal">None</span></span><br><span class="line">    number=<span class="literal">None</span></span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,address,number,age</span>):</span><br><span class="line"></span><br><span class="line">        self.name= name</span><br><span class="line">        self.age=age</span><br><span class="line">        self.number=number</span><br><span class="line">        self.address=address</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>,<span class="subst">&#123;self.age&#125;</span>,<span class="subst">&#123;self.address&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="string">&quot;日本&quot;</span>,<span class="number">198283095</span>,<span class="number">17</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(xrb))</span><br><span class="line"><span class="comment"># 王大山,17,日本</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h5 id="lt-方法"><a href="#lt-方法" class="headerlink" title="__lt__方法"></a>__lt__方法</h5><blockquote><h5 id="操控原来的"><a href="#操控原来的" class="headerlink" title="操控原来的&lt;,原来是比较内存位置的大小"></a>操控原来的&lt;,原来是比较内存位置的大小</h5></blockquote>   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line"></span><br><span class="line">        self.name= name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>,<span class="subst">&#123;self.age&#125;</span>,<span class="subst">&#123;self.address&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.age&gt;other.age</span><br><span class="line"></span><br><span class="line">xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="number">17</span>)</span><br><span class="line">xrb1=student(<span class="string">&quot;周杰伦&quot;</span>,<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(xrb.age,xrb1.age)</span><br><span class="line"><span class="built_in">print</span>(xrb&gt;xrb1)</span><br><span class="line"><span class="built_in">print</span>(xrb.__lt__(xrb1))</span><br><span class="line"><span class="number">17</span>,<span class="number">32</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对于给定的代码，输出结果应该是不同的。</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 在 `<span class="built_in">print</span>(xrb&gt;xrb1)` 中，使用了 `&gt;` 操作符进行比较。`&gt;` 操作符实际上调用了对象的 `__gt__` 方法。由于 `student` 类中没有定义 `__gt__` 方法，Python 会使用默认的比较规则进行比较。默认的比较规则是基于对象的内存地址进行比较，而不是基于对象的属性。</span><br><span class="line"><span class="number">2.</span> 在 `<span class="built_in">print</span>(xrb.__lt__(xrb1))` 中，使用了 `__lt__` 方法进行比较。`__lt__` 方法定义了对象之间的比较规则。根据 `__lt__` 方法中的逻辑，如果 `self` 对象的 `age` 属性大于 `other` 对象的 `age` 属性，它将返回 `<span class="literal">True</span>`，否则返回 `<span class="literal">False</span>`。</span><br><span class="line">在这种情况下，`xrb` 对象的 `age` 是 <span class="number">17</span>，`xrb1` 对象的 `age` 是 <span class="number">32</span>。因此，`xrb.__lt__(xrb1)` 返回 `<span class="literal">False</span>`，而不是 `<span class="literal">True</span>`。</span><br><span class="line">所以，根据提供的代码，`<span class="built_in">print</span>(xrb&gt;xrb1)` 的输出结果应该是 `<span class="literal">False</span>`，而 `<span class="built_in">print</span>(xrb.__lt__(xrb1))` 的输出结果应该是 `<span class="literal">False</span>`。</span><br></pre></td></tr></table></figure><p>   &#x3D;&#x3D;最好使用具体的方法，因为&gt;,&lt;都需要定义，默认是比较内存地址的大小，现在之定义了&lt;号，而&gt;还默认是比较内存地址&#x3D;&#x3D;</p><h5 id="print-xrb-lt-xrb1-，或者"><a href="#print-xrb-lt-xrb1-，或者" class="headerlink" title="print(xrb.lt(xrb1))，或者&lt;，才是自己定义的方法，如果符合return后面的式子就返回true"></a>print(xrb.<strong>lt</strong>(xrb1))，或者&lt;，才是自己定义的方法，如果符合return后面的式子就返回true</h5><hr><ol start="3"><li>__lt__方法</li></ol><blockquote><h5 id="操控原来-的"><a href="#操控原来-的" class="headerlink" title="操控原来 的&lt;&#x3D; ，原来是比较内存位置的大小"></a>操控原来 的&lt;&#x3D; ，原来是比较内存位置的大小</h5></blockquote>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line"></span><br><span class="line">         self.name= name</span><br><span class="line">         self.age=age</span><br><span class="line"></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>,<span class="subst">&#123;self.age&#125;</span>,<span class="subst">&#123;self.address&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self,other</span>):</span><br><span class="line">         <span class="keyword">return</span> self.age&lt;other.age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self,other</span>):</span><br><span class="line">         <span class="keyword">return</span> self.age&lt;=other.age</span><br><span class="line"></span><br><span class="line"> xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="number">32</span>)</span><br><span class="line"> xrb1=student(<span class="string">&quot;周杰伦&quot;</span>,<span class="number">32</span>)</span><br><span class="line">xrb2=student(<span class="string">&quot;林俊杰&quot;</span>,<span class="number">11</span>)</span><br><span class="line"> <span class="comment"># print(xrb.age,xrb1.age)</span></span><br><span class="line"> <span class="built_in">print</span>(xrb2&lt;=xrb1)</span><br><span class="line"> <span class="built_in">print</span>(xrb.__le__(xrb1))</span><br><span class="line"> <span class="comment"># True</span></span><br><span class="line"> <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="在-Python-中，-操作符和-操作符的默认行为是比较对象的内存位置，"><a href="#在-Python-中，-操作符和-操作符的默认行为是比较对象的内存位置，" class="headerlink" title="&#x3D;&#x3D;在 Python 中，&gt; 操作符和 &gt;= 操作符的默认行为是比较对象的内存位置，&#x3D;&#x3D;"></a>&#x3D;&#x3D;在 Python 中，<code>&gt;</code> 操作符和 <code>&gt;=</code> 操作符的默认行为是比较对象的内存位置，&#x3D;&#x3D;</h4><p>  lt le,gt ge   &lt; &lt;&#x3D; &gt; &gt;&#x3D;</p><ol start="4"><li>__eq__方法</li></ol><blockquote><h5 id="操控-原来的-是比较内存位置是否相同的"><a href="#操控-原来的-是比较内存位置是否相同的" class="headerlink" title="操控=&#x3D;,原来的&#x3D;&#x3D;是比较内存位置是否相同的"></a>操控=&#x3D;,原来的&#x3D;&#x3D;是比较内存位置是否相同的</h5></blockquote>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line"></span><br><span class="line">        self.name= name</span><br><span class="line">        self.age=age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>,<span class="subst">&#123;self.age&#125;</span>,<span class="subst">&#123;self.address&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.age&lt;other.age</span><br><span class="line">       <span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self,other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.age&lt;=other.age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">return</span> self.age==other.age</span><br><span class="line"></span><br><span class="line">xrb=student(<span class="string">&quot;王大山&quot;</span>,<span class="number">98</span>)</span><br><span class="line">xrb1=student(<span class="string">&quot;周杰伦&quot;</span>,<span class="number">98</span>)</span><br><span class="line">   xrb2=student(<span class="string">&quot;林俊杰&quot;</span>,<span class="number">11</span>)</span><br><span class="line"><span class="built_in">print</span>(xrb==xrb1)</span><br><span class="line"><span class="built_in">print</span>(xrb==xrb2)</span><br></pre></td></tr></table></figure></blockquote><hr><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p><strong>把现实世界的，属性，行为，封装道类中，描述为成员变量，成员方法，从而完成程序对现实世界事物的描述</strong></p><blockquote><p>苹果越狱，安卓root</p><p>就是突破权限</p><hr><h4 id="私有成员变量，私有成员方法"><a href="#私有成员变量，私有成员方法" class="headerlink" title="私有成员变量，私有成员方法"></a>私有成员变量，私有成员方法</h4><p>如何私有？</p><hr><h5 id="1-如果一个属性或方法的名称以两个下划线开头，并且不以两个下划线结尾，那么它将被视为私有的。"><a href="#1-如果一个属性或方法的名称以两个下划线开头，并且不以两个下划线结尾，那么它将被视为私有的。" class="headerlink" title="1. &#x3D;&#x3D;如果一个属性或方法的名称以两个下划线开头，并且不以两个下划线结尾，那么它将被视为私有的。&#x3D;&#x3D;"></a>1. &#x3D;&#x3D;如果一个属性或方法的名称以两个下划线开头，并且不以两个下划线结尾，那么它将被视为私有的。&#x3D;&#x3D;</h5><h5 id="2-私有成员变量和私有成员方法在类的外部是无法直接访问的。"><a href="#2-私有成员变量和私有成员方法在类的外部是无法直接访问的。" class="headerlink" title="2. &#x3D;&#x3D;私有成员变量和私有成员方法在类的外部是无法直接访问的。&#x3D;&#x3D;"></a>2. &#x3D;&#x3D;私有成员变量和私有成员方法在类的外部是无法直接访问的。&#x3D;&#x3D;</h5><p>3&#x3D;&#x3D;<strong>私有成员通过公共的成员函数去调用和操作</strong>&#x3D;&#x3D;</p><p>类对象无法使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sb</span>:</span><br><span class="line"> __name=<span class="string">&quot;王大山&quot;</span></span><br><span class="line"> age=<span class="literal">None</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__getage</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="keyword">return</span> self.age</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">public</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span>(self.__getage())</span><br><span class="line">     <span class="keyword">return</span> self.__name</span><br><span class="line">sbson=sb()</span><br><span class="line">sbson.age=<span class="number">18</span></span><br><span class="line"><span class="comment"># print(sbson.__getage())</span></span><br><span class="line"></span><br><span class="line">sbson.__name=<span class="string">&quot;周杰伦&quot;</span></span><br><span class="line"><span class="built_in">print</span>(sbson.__name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;公共方法可以访问私有成员变量和私有成员方法,<span class="subst">&#123;sbson.public()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __name 是私有成员变量，但是在 sbson 对象上赋值 sbson.__name = &quot;周杰伦&quot; 并不会修改类中的私有成员变量 __name。相反，它会创建一个新的公有成员变量 __name 并将其赋值为 &quot;周杰伦&quot;。因此，当你打印 sbson.__name 时，它将输出 &quot;周杰伦&quot;。</span></span><br><span class="line"><span class="comment"># 周杰伦</span></span><br><span class="line"><span class="comment"># 18</span></span><br><span class="line"><span class="comment"># 公共方法可以访问私有成员变量和私有成员方法,王大山</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a><strong>单继承</strong></h5><blockquote><h5 id="class-类名（父类名）"><a href="#class-类名（父类名）" class="headerlink" title="class 类名（父类名）"></a>class 类名（父类名）</h5><h5 id="类内容体"><a href="#类内容体" class="headerlink" title="类内容体"></a>类内容体</h5><h6 id="就把父亲的成员都继承过来了。"><a href="#就把父亲的成员都继承过来了。" class="headerlink" title="&#x3D;&#x3D;就把父亲的成员都继承过来了。&#x3D;&#x3D;"></a>&#x3D;&#x3D;就把父亲的成员都继承过来了。&#x3D;&#x3D;</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span>:</span><br><span class="line"> name=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone2022</span>(<span class="title class_ inherited__">phone</span>):</span><br><span class="line"> age=<span class="literal">None</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">a6g</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;6g&quot;</span>)</span><br><span class="line">a=phone2022()</span><br><span class="line">a.a5g()</span><br><span class="line">a.a6g()</span><br><span class="line">5g</span><br><span class="line">6g</span><br></pre></td></tr></table></figure></blockquote><h5 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a><strong>多继承</strong></h5><blockquote><h5 id="class-类名-父类1，父类2，父类3-。。。"><a href="#class-类名-父类1，父类2，父类3-。。。" class="headerlink" title="class 类名(父类1，父类2，父类3.。。。)"></a>class 类名(父类1，父类2，父类3.。。。)</h5><h5 id="类内容提体"><a href="#类内容提体" class="headerlink" title="类内容提体"></a>类内容提体</h5><p>就把所有父亲的成员继承下来了。</p></blockquote><p>&#x3D;&#x3D;<em><strong>如果有同名的成员，从左到右，最左边继承的优先级最高</strong></em>&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span>:</span><br><span class="line">    name=<span class="string">&quot;黑马&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone1</span>:</span><br><span class="line">    name=<span class="string">&quot;牛马&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">phone2022</span>(phone1,phone):</span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a6g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;6g&quot;</span>)</span><br><span class="line">a=phone2022()</span><br><span class="line"><span class="built_in">print</span>(a.name)</span><br><span class="line">牛马</span><br></pre></td></tr></table></figure><h4 id="复写"><a href="#复写" class="headerlink" title="复写"></a>复写</h4><p><strong>&#x3D;&#x3D;子类对父亲的成员不满意，就在子类重新定义父亲继承下来的那个，名字相同，就是复写&#x3D;&#x3D;</strong></p><p><strong>复写后。子类调用类实体对象的成员是复写后 的成员</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    name=<span class="string">&quot;黑马&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line">    name=<span class="string">&quot;牛马&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a6g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;6g&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;555555g&quot;</span>)</span><br><span class="line">a=son()</span><br><span class="line"><span class="built_in">print</span>(a.name)</span><br><span class="line">a.a5g()</span><br><span class="line"><span class="comment"># 牛马</span></span><br><span class="line"><span class="comment"># 555555g</span></span><br></pre></td></tr></table></figure><p><strong>但复写后，还想使用父类原来的成员，也就是复写前的父类成员</strong></p><blockquote><ol><li><h4 id="用父类名-成员-类外-，子类内都可以使用"><a href="#用父类名-成员-类外-，子类内都可以使用" class="headerlink" title="用父类名.成员   类外&#x3D;&#x3D;，子类内都可以使用&#x3D;&#x3D;"></a>用父类名.成员   类外&#x3D;&#x3D;，子类内都可以使用&#x3D;&#x3D;</h4><p><strong>在类外调用成员行为需要实例化一个对象先</strong></p><p><strong>在子类里面调用父类的行为需要加（self）参数</strong></p></li><li><h4 id="super-父类成员-只能在子类的类体内使用-★★★★★★★★"><a href="#super-父类成员-只能在子类的类体内使用-★★★★★★★★" class="headerlink" title="super().父类成员  &#x3D;&#x3D;只能在子类的类体内使用&#x3D;&#x3D; ★★★★★★★★"></a>super().父类成员  &#x3D;&#x3D;只能在子类的类体内使用&#x3D;&#x3D; ★★★★★★★★</h4></li></ol></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    name=<span class="string">&quot;黑马&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;5g&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    age=<span class="literal">None</span></span><br><span class="line">    name=<span class="string">&quot;牛马&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a6g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">super</span>().name)</span><br><span class="line">        <span class="built_in">print</span>(father.name)</span><br><span class="line"></span><br><span class="line">        father.a5g(self)</span><br><span class="line">        <span class="built_in">super</span>().a5g()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">a=son()</span><br><span class="line"><span class="built_in">print</span>(a.name)</span><br><span class="line">a.a6g()</span><br><span class="line"><span class="built_in">print</span>(father.name)</span><br><span class="line"><span class="comment"># 牛马</span></span><br><span class="line"><span class="comment"># 黑马</span></span><br><span class="line"><span class="comment"># 黑马</span></span><br><span class="line"><span class="comment"># 黑马</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h4><p><strong>方便开发者看</strong></p><p><strong>帮助ide代码提示</strong></p><p><strong>标记错了也不影响运行</strong></p><p><strong>变量:类型</strong></p><p><strong>数据容器:类型[类型注解挨个，如果统一写一个就ok]</strong></p><p><strong>数据容器都用[]</strong></p><h5 id="变量，数据容器的类型注解"><a href="#变量，数据容器的类型注解" class="headerlink" title="变量，数据容器的类型注解"></a>变量，数据容器的类型注解</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a:<span class="built_in">int</span>=<span class="number">10</span></span><br><span class="line">b=<span class="number">10</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sb</span>:</span><br><span class="line">    name:<span class="built_in">str</span>=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">xrb:sb=sb()</span><br><span class="line">mylist:<span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">mylist1:<span class="built_in">list</span>[<span class="built_in">int</span>]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">mytuple:<span class="built_in">tuple</span>=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">mytuple1:<span class="built_in">tuple</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]=(<span class="number">1</span>,<span class="string">&quot;adsad&quot;</span>)</span><br><span class="line"></span><br><span class="line">myset:<span class="built_in">set</span>=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">myset1:<span class="built_in">set</span>[<span class="built_in">int</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mydict:<span class="built_in">dict</span>=&#123;<span class="string">&quot;ky1&quot;</span>:<span class="number">1</span>,<span class="string">&quot;ky2&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line">mydict1:<span class="built_in">dict</span>[<span class="built_in">str</span>,<span class="built_in">int</span>]</span><br></pre></td></tr></table></figure><blockquote><h5 id="给无法直接看出变量类型的变量添加类型注解"><a href="#给无法直接看出变量类型的变量添加类型注解" class="headerlink" title="给无法直接看出变量类型的变量添加类型注解"></a><strong>给无法直接看出变量类型的变量添加类型注解</strong></h5></blockquote><hr><h5 id="函数参数的类型注解"><a href="#函数参数的类型注解" class="headerlink" title="函数参数的类型注解"></a><strong>函数参数的类型注解</strong></h5><p><em><strong>就会有类型提示了，ide知道了</strong></em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="string">&quot;你好&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="函数返回值的类型注解"><a href="#函数返回值的类型注解" class="headerlink" title="函数返回值的类型注解"></a>函数返回值的类型注解</h5><p><em><strong>-&gt;就会帮函数的返回值给予提示</strong></em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a:<span class="built_in">int</span>,b:<span class="built_in">str</span></span>)-&gt;<span class="built_in">int</span>:</span><br><span class="line">    <span class="built_in">print</span>(a,b)</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h5 id="Union类型注解"><a href="#Union类型注解" class="headerlink" title="Union类型注解"></a>Union类型注解</h5><ol><li><h5 id="导入Union模块"><a href="#导入Union模块" class="headerlink" title="导入Union模块"></a>导入Union模块</h5></li><li><h5 id="注释的时候如果里面的数据多，且是混合的，之前的挨个注释就不太方便了"><a href="#注释的时候如果里面的数据多，且是混合的，之前的挨个注释就不太方便了" class="headerlink" title="注释的时候如果里面的数据多，且是混合的，之前的挨个注释就不太方便了"></a>注释的时候如果里面的数据多，且是混合的，之前的挨个注释就不太方便了</h5></li><li><h5 id="union-数据类型1，数据类型2"><a href="#union-数据类型1，数据类型2" class="headerlink" title="union[数据类型1，数据类型2]"></a>union[数据类型1，数据类型2]</h5></li><li><h5 id="表示要么是数据类型1，要么是数据类型2"><a href="#表示要么是数据类型1，要么是数据类型2" class="headerlink" title="表示要么是数据类型1，要么是数据类型2"></a>表示要么是数据类型1，要么是数据类型2</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line">mylist:<span class="built_in">list</span>[<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="string">&quot;s&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line">mydict=&#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">3</span>,<span class="string">&quot;1&quot;</span>:<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;2&quot;</span>:<span class="string">&quot;我去&quot;</span>&#125;</span><br><span class="line">mydict:<span class="built_in">dict</span>[<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>],<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]]=&#123;<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">3</span>,<span class="string">&quot;1&quot;</span>:<span class="string">&quot;你好&quot;</span>,<span class="string">&quot;2&quot;</span>:<span class="string">&quot;我去&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">data:<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]</span>)-&gt;<span class="type">Union</span>[<span class="built_in">int</span>,<span class="built_in">str</span>]:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">a()提示</span><br><span class="line">(variable) <span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">data: <span class="built_in">int</span> | <span class="built_in">str</span></span>) -&gt; (<span class="built_in">int</span> | <span class="built_in">str</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ol><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p><strong>多种状态，完成某个行为的时候，使用不同的对象得到不同的结果</strong></p><p><strong>animal；相当于顶层设计，设计一个标准</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;喵喵喵&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jiao</span>(<span class="params">a:animal</span>):</span><br><span class="line">    a.speak()</span><br><span class="line"></span><br><span class="line">dog=dog()</span><br><span class="line">cat=cat()</span><br><span class="line"></span><br><span class="line">jiao(dog)</span><br><span class="line">jiao(cat)</span><br><span class="line">汪汪汪</span><br><span class="line">喵喵喵</span><br></pre></td></tr></table></figure><p><strong>抽象类（接口）：含有抽象方法的类</strong></p><p><strong>抽象方法：方法体的实现是空的PASS</strong></p><p><strong>顶层设计有多少个抽象方法，以后就要有对应几个函数。</strong></p><p><strong>顶层设计标准，子类来实现具体的功能</strong></p><p><strong>要求子类必须复写实现具体的功能</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">airconditioner</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cool</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_hot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">geli</span>(<span class="title class_ inherited__">airconditioner</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cool</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;格力的制冷&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_hot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;格力的制热&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;格力的左右摇摆&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">meidi</span>(<span class="title class_ inherited__">airconditioner</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cool</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;美的的制冷&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_hot</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;美的的制热&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;美的的左右摇摆&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mc</span>(<span class="params"><span class="built_in">object</span>:airconditioner</span>):</span><br><span class="line">    <span class="built_in">object</span>.make_cool()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mh</span>(<span class="params"><span class="built_in">object</span>:airconditioner</span>):</span><br><span class="line">    <span class="built_in">object</span>.make_hot()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params"><span class="built_in">object</span>:airconditioner</span>):</span><br><span class="line">    <span class="built_in">object</span>.swing()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">airmeidi=meidi()</span><br><span class="line">airgeli=geli()</span><br><span class="line"></span><br><span class="line">mc(airgeli)</span><br><span class="line">mc(airmeidi)</span><br><span class="line"><span class="comment"># 格力的制冷</span></span><br><span class="line"><span class="comment"># 美的的制冷</span></span><br><span class="line">mh(airgeli)</span><br><span class="line">mh(airmeidi)</span><br><span class="line"><span class="comment"># 格力的制热</span></span><br><span class="line"><span class="comment"># 美的的制热</span></span><br><span class="line">swing(airgeli)</span><br><span class="line">swing(airmeidi)</span><br><span class="line"><span class="comment"># 格力的左右摇摆</span></span><br><span class="line"><span class="comment"># 美的的左右摇摆</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SQL数据库（简单入门）"><a href="#SQL数据库（简单入门）" class="headerlink" title="SQL数据库（简单入门）"></a>SQL数据库（简单入门）</h3><p><strong>&#x3D;&#x3D;字符串的值，出现在sql语句中，必须用单引号包起来&#x3D;&#x3D;</strong></p><p><strong>后端&#x3D;sql+编程语言</strong></p><p><strong>SQL开发人员必备技能</strong></p><p><strong>SQL{pyspark，pyflink,BI可视化}</strong></p><p><em><strong>数据的存储，数据库管理系统</strong></em></p><hr><p><strong>&#x3D;&#x3D;数据库是对数据库数据的操作管理查询&#x3D;&#x3D;</strong></p><p><em><strong>而操控数据库需要用到SQL语言</strong></em></p><p>组织数据：库-&gt;表-&gt;数据</p><blockquote><ol><li><p>进入mysql开发环境</p><p>mysql -uroot -p</p><blockquote><p> 在命令行环境中</p><ol><li>show databases;查看有哪些数据库</li><li>use 数据库名  使用某个数据库</li><li>show tables 查看数据库内有哪些表</li><li>exit 退出数据库</li></ol></blockquote></li></ol></blockquote><p><strong>mysql图形化工具DBeaver免费开源</strong></p><p>SQL语言的分类</p><blockquote><ol><li><p>数据定义</p><ol><li>数据定义D D L   -define</li><li>数据操纵D M L   -manipulate</li><li>数据控制D C L   - control</li><li>数据查询D Q L   quer</li></ol></li><li><p>简单语法</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="keyword">SHOW</span> databases;</span><br><span class="line"><span class="keyword">show</span></span><br><span class="line">databases;</span><br><span class="line"># dsadsadasd</span><br><span class="line"><span class="comment">-- dasdadasd</span></span><br><span class="line"><span class="comment">/*三大</span></span><br><span class="line"><span class="comment"> * 大撒大撒</span></span><br><span class="line"><span class="comment"> * 撒大苏打</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span><span class="operator">*</span><span class="operator">/</span></span><br></pre></td></tr></table></figure><h5 id="对大小写不敏感"><a href="#对大小写不敏感" class="headerlink" title="对大小写不敏感"></a>对大小写不敏感</h5><h5 id="可以换行写，但必须以-结尾"><a href="#可以换行写，但必须以-结尾" class="headerlink" title="可以换行写，但必须以;结尾"></a>可以换行写，但必须以;结尾</h5><h5 id="三种注释方法-单行-空格-空格"><a href="#三种注释方法-单行-空格-空格" class="headerlink" title="三种注释方法:单行:#(空格),-空格,"></a>三种注释方法:单行:#(空格),-空格,</h5><h5 id="多行"><a href="#多行" class="headerlink" title="多行:&#x2F;**&#x2F;"></a>多行:&#x2F;**&#x2F;</h5></li></ol></blockquote><h4 id="数据定义D-D-L"><a href="#数据定义D-D-L" class="headerlink" title="数据定义D D L"></a>数据定义D D L</h4><p><strong>库管理</strong></p><blockquote><ol><li><p>查看数据库</p><h5 id="show-databases"><a href="#show-databases" class="headerlink" title="show databases;"></a>show databases;</h5></li><li><p>使用数据库</p><h5 id="use-库名"><a href="#use-库名" class="headerlink" title="use 库名;"></a>use 库名;</h5></li><li><p>创建数据库</p><h5 id="create-database-库名-charset-utf-8"><a href="#create-database-库名-charset-utf-8" class="headerlink" title="create database 库名 [charset utf-8];"></a>create database 库名 [charset utf-8];</h5></li><li><p>删除数据库</p><h5 id="drop-database-库名"><a href="#drop-database-库名" class="headerlink" title="drop database 库名;"></a>drop database 库名;</h5></li><li><p>查看当前使用的数据库</p><h5 id="select-database"><a href="#select-database" class="headerlink" title="select database();"></a>select database();</h5></li></ol></blockquote><p>**表管理**</p><blockquote><ol><li><p>查看表</p><h5 id="先选择数据库"><a href="#先选择数据库" class="headerlink" title="先选择数据库"></a>先选择数据库</h5><h5 id="show-tables"><a href="#show-tables" class="headerlink" title="show tables;"></a>show tables;</h5></li><li><p>添加表</p><h5 id="creat-table-表（"><a href="#creat-table-表（" class="headerlink" title="creat table 表（"></a>creat table 表（</h5><h5 id="列名-列类型"><a href="#列名-列类型" class="headerlink" title="列名 列类型,"></a>列名 列类型,</h5><h5 id="列名-列类型-1"><a href="#列名-列类型-1" class="headerlink" title="列名 列类型,"></a>列名 列类型,</h5><h5 id="列名-列类型-2"><a href="#列名-列类型-2" class="headerlink" title="列名 列类型"></a>列名 列类型</h5><h5 id="）"><a href="#）" class="headerlink" title="）;"></a>）;</h5><p><strong>最后一个表的添加不需要,</strong></p></li><li><p>删除表</p><h5 id="drop-table-表名"><a href="#drop-table-表名" class="headerlink" title="drop table 表名;"></a>drop table 表名;</h5><h5 id="drop-table-if-exits-表名"><a href="#drop-table-if-exits-表名" class="headerlink" title="drop table if exits 表名;"></a>drop table if exits 表名;</h5></li></ol><p>&#x3D;&#x3D;<strong>选中要运行的语句然后执行</strong>&#x3D;&#x3D;</p></blockquote><hr><h4 id="数据操作D-M-L"><a href="#数据操作D-M-L" class="headerlink" title="数据操作D M L"></a>数据操作D M L</h4><p>对表的数据操作</p><blockquote><ol><li><p>数据插入insert</p><p>insert into 表名([列],,,,,) values (对应的值,,,,,,,,,)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id) <span class="keyword">values</span> (<span class="number">1001</span>),(<span class="number">1002</span>),(<span class="number">1003</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> student(id,name,age) <span class="keyword">values</span> (<span class="number">001</span>,&quot;林俊杰&quot;,<span class="number">18</span>),(<span class="number">002</span>,&quot;张杰&quot;,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span>  student <span class="keyword">values</span> (<span class="number">001</span>,&quot;林俊杰&quot;,<span class="number">18</span>),(<span class="number">002</span>,&quot;张杰&quot;,<span class="number">23</span>);</span><br></pre></td></tr></table></figure></li><li><p>数据的删除delete</p><h5 id="delete-from-表名-where-条件判断"><a href="#delete-from-表名-where-条件判断" class="headerlink" title="delete from 表名 [where 条件判断];"></a>delete from 表名 [where 条件判断];</h5><h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断:&gt; &lt; &#x3D; &gt;&#x3D; &lt;&#x3D; !&#x3D;"></a>条件判断:&gt; &lt; &#x3D; &gt;&#x3D; &lt;&#x3D; !&#x3D;</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">删除具体的</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student;</span><br><span class="line">删除整张表</span><br></pre></td></tr></table></figure></li><li><p>数据的更新update</p><h5 id="update-表-set-列-值-where-条件判断"><a href="#update-表-set-列-值-where-条件判断" class="headerlink" title="update 表 set 列&#x3D;值 [where 条件判断];"></a>update 表 set 列&#x3D;值 [where 条件判断];</h5><h5 id="条件判断-1"><a href="#条件判断-1" class="headerlink" title="条件判断:&gt; &lt; &#x3D; &gt;&#x3D; &lt;&#x3D; !&#x3D;"></a>条件判断:&gt; &lt; &#x3D; &gt;&#x3D; &lt;&#x3D; !&#x3D;</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> name<span class="operator">=</span>&quot;牛马程序员&quot; <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="数据查找-D-Q-L"><a href="#数据查找-D-Q-L" class="headerlink" title="数据查找 D Q L"></a>数据查找 D Q L</h4><blockquote><ol><li><h5 id="最基础的数据查找"><a href="#最基础的数据查找" class="headerlink" title="最基础的数据查找"></a>最基础的数据查找</h5><p>select  列表 from 表</p><p>*代表该表的所有列</p><p>where 条件判断</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,age,gender <span class="keyword">from</span> students;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students age<span class="operator">&gt;=</span><span class="number">18</span>;</span><br></pre></td></tr></table></figure></li><li><p>分组聚合</p><p>基础语法: group by 列，按照列分组</p><h6 id="SELECT-字段-聚合函数-FROM-表-WHERE条件-GROUP-BY列"><a href="#SELECT-字段-聚合函数-FROM-表-WHERE条件-GROUP-BY列" class="headerlink" title="SELECT&#x3D;&#x3D;字段&#x3D;&#x3D;|聚合函数 FROM 表[WHERE条件] &#x3D;&#x3D;GROUP BY列&#x3D;&#x3D;"></a>SELECT&#x3D;&#x3D;字段&#x3D;&#x3D;|聚合函数 FROM 表[WHERE条件] &#x3D;&#x3D;GROUP BY列&#x3D;&#x3D;</h6><p><strong>&#x3D;&#x3D;GROUP BY中出现了哪个列，哪个列才能出现在SELECT中的非聚合中。&#x3D;&#x3D;</strong></p><p>聚合函数有:<br>SUM(列)求和<br>AVG(列)求平均值<br>MIN(列)求最小值<br>MAX(列)求最大值<br>COUNT(列| *）:求数量</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sex,<span class="built_in">avg</span>(age) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="数据排序-D-C-L"><a href="#数据排序-D-C-L" class="headerlink" title="数据排序 D C L"></a>数据排序 D C L</h4><blockquote><h5 id="select-列-from-student-where-条件判断-order-by-字段-asc-desc"><a href="#select-列-from-student-where-条件判断-order-by-字段-asc-desc" class="headerlink" title="select 列|* from student [where 条件判断] order by 字段 [asc|desc] ;"></a><strong>select</strong> 列|* <strong>from</strong> student [<strong>where</strong> 条件判断] <strong>order</strong> <strong>by</strong> 字段 [asc|desc] ;</h5><p>默认是asc，也就是升序。</p><p>按照字段排序</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">&gt;=</span><span class="number">18</span> <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure><p>加个限制条件</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">&gt;=</span><span class="number">18</span> <span class="keyword">order</span> <span class="keyword">by</span> age limit n[,m];</span><br></pre></td></tr></table></figure><p>只有n的时候就取前n条数据</p><p>既有n又有m的时候是取n（不包含第n条)之后的m条数据</p></blockquote><p>where,group by ,order by,limit 都可以省略，按照需求</p><hr><p>执行顺序:<br>FROM -&gt; WHERE -&gt; GROUP BY和聚合函数-&gt; SELECT -&gt; ORDER BY -&gt;LIMIT</p><h4 id="PYTHON-mysql"><a href="#PYTHON-mysql" class="headerlink" title="PYTHON&amp;mysql"></a>PYTHON&amp;mysql</h4><p><strong>获取链接对象</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#导入模块</span><br><span class="line"><span class="keyword">from</span> pymysql import <span class="keyword">Connect</span></span><br><span class="line"></span><br><span class="line">#connection(主机，端口，用户，密码)得到链接对象</span><br><span class="line"><span class="keyword">sql</span><span class="operator">=</span><span class="keyword">Connect</span>(</span><br><span class="line">    host<span class="operator">=</span>&quot;localhost&quot;,</span><br><span class="line">    port<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">    <span class="keyword">user</span><span class="operator">=</span>&quot;root&quot;,</span><br><span class="line">    passwd<span class="operator">=</span>&quot;zzuli4514&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#关闭链接</span><br><span class="line">sql.close()</span><br></pre></td></tr></table></figure><p><strong>sql执行语句创建表单</strong></p><p>创建</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#导入模块</span><br><span class="line"><span class="keyword">from</span> pymysql import <span class="keyword">Connect</span></span><br><span class="line">#创建链接对象</span><br><span class="line"><span class="keyword">sql</span><span class="operator">=</span><span class="keyword">Connect</span>(</span><br><span class="line">    host<span class="operator">=</span>&quot;localhost&quot;,</span><br><span class="line">    port<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">    <span class="keyword">user</span><span class="operator">=</span>&quot;root&quot;,</span><br><span class="line">    passwd<span class="operator">=</span>&quot;zzuli4514&quot;</span><br><span class="line">)</span><br><span class="line">print(sql.get_server_info())</span><br><span class="line">#链接数据库</span><br><span class="line">sql.select_db(&quot;text001&quot;)</span><br><span class="line">#创建对应的游标对象</span><br><span class="line"><span class="keyword">cursor</span><span class="operator">=</span>sql.cursor()</span><br><span class="line">#执行<span class="keyword">sql</span></span><br><span class="line">cursor.execute(&quot;create table sb2(id int)&quot;)</span><br><span class="line">#关闭链接</span><br><span class="line"></span><br><span class="line">sql.close()</span><br></pre></td></tr></table></figure><p>查询相关功能</p><p>利用游标对象执行不同的excute语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#导入模块</span><br><span class="line"><span class="keyword">from</span> pymysql import <span class="keyword">Connect</span></span><br><span class="line">#创建链接对象</span><br><span class="line"><span class="keyword">sql</span><span class="operator">=</span><span class="keyword">Connect</span>(</span><br><span class="line">    host<span class="operator">=</span>&quot;localhost&quot;,</span><br><span class="line">    port<span class="operator">=</span><span class="number">3306</span>,</span><br><span class="line">    <span class="keyword">user</span><span class="operator">=</span>&quot;root&quot;,</span><br><span class="line">    passwd<span class="operator">=</span>&quot;zzuli4514&quot;</span><br><span class="line">)</span><br><span class="line">print(sql.get_server_info())</span><br><span class="line">#链接数据库</span><br><span class="line">sql.select_db(&quot;text001&quot;)</span><br><span class="line">#创建对应的游标对象</span><br><span class="line"><span class="keyword">cursor</span><span class="operator">=</span>sql.cursor()</span><br><span class="line"></span><br><span class="line">#执行<span class="keyword">sql</span></span><br><span class="line">cursor.execute(&quot;select * from student&quot;)</span><br><span class="line">data:tuple<span class="operator">=</span>cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    print(i)</span><br><span class="line"># (<span class="number">4</span>, <span class="string">&#x27;尼干吗&#x27;</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">1</span>, <span class="string">&#x27;周杰伦&#x27;</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">2</span>, <span class="string">&#x27;王大山&#x27;</span>, <span class="number">43</span>, <span class="number">2</span>, <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"># (<span class="number">3</span>, <span class="string">&#x27;周星驰&#x27;</span>, <span class="number">23</span>, <span class="number">3</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">4</span>, <span class="string">&#x27;尼干吗&#x27;</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">1</span>, <span class="string">&#x27;周杰伦&#x27;</span>, <span class="number">33</span>, <span class="number">1</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">2</span>, <span class="string">&#x27;王大山&#x27;</span>, <span class="number">43</span>, <span class="number">2</span>, <span class="string">&#x27;女&#x27;</span>)</span><br><span class="line"># (<span class="number">3</span>, <span class="string">&#x27;周星驰&#x27;</span>, <span class="number">23</span>, <span class="number">3</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"># (<span class="number">4</span>, <span class="string">&#x27;尼干吗&#x27;</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="string">&#x27;男&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#关闭链接</span><br><span class="line">sql.close()</span><br></pre></td></tr></table></figure><p>对数据的更改，需要使用connection对象的commit方法来确认</p><p><strong>1,直接在创建connection对象的时候直接设置自动确认属性</strong></p><p><strong>2，在执行mysql语句后手动确认</strong></p><p><strong>只有确认的修改才能生效</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">connect=connect(</span><br><span class="line">    host=<span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    autocommit=<span class="literal">True</span>,</span><br><span class="line">    password=<span class="string">&quot;zzuli4514&quot;</span>,</span><br><span class="line">    user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    port=<span class="number">3306</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">connect.select_db(<span class="string">&quot;text001&quot;</span>)</span><br><span class="line"></span><br><span class="line">cursor=connect.cursor()</span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">&quot;insert into student values (9,&#x27;林俊杰&#x27;,20,3,&#x27;男&#x27;);&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># connect.commit()</span></span><br><span class="line">connect.close()</span><br></pre></td></tr></table></figure><h3 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h3><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><blockquote><p><strong>不定义全局变量，让函数持续的访问和修改一个外部的变量</strong></p></blockquote><p><strong><code>nonlocal</code>是一个关键字，用于在嵌套函数中声明一个变量为非局部变量。当在一个函数内部定义了另一个函数时，内部函数可以访问外部函数的变量。然而，&#x3D;&#x3D;默认情况下，内部函数只能读取外部函数的变量，而不能修改它们。&#x3D;&#x3D;</strong></p><p><strong>在内部函数中使用<code>nonlocal</code>关键字声明一个变量时，Python会沿着作用域链向上查找，找到最近的外部函数中具有相同名称的变量，并将其标记为非局部变量。</strong></p><p><strong>&#x3D;&#x3D;<code>nonlocal</code>关键字只能在嵌套函数中使用，而不能在全局作用域或单独的函数中使用。&#x3D;&#x3D;</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">account_mount</span>(<span class="params">total=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">atm</span>(<span class="params">money,choose=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> total</span><br><span class="line">        <span class="keyword">if</span> choose:</span><br><span class="line">            total+=money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;取款:+<span class="subst">&#123;money&#125;</span>,账户余额:<span class="subst">&#123;total&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total-=money</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;取款:-<span class="subst">&#123;money&#125;</span>,账户余额:<span class="subst">&#123;total&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> atm</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;无需通过定义全局变量，就可以通过函数实现持续访问，操作某个值&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;闭包使用的变量在函数内，很难被错误的误改&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;缺点，由于一直持续的引用外部函数的变量，会占用内存&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">atm=account_mount()</span><br><span class="line">atm(<span class="number">100</span>)</span><br><span class="line">atm(<span class="number">100</span>)</span><br><span class="line">atm(<span class="number">100</span>,choose=<span class="literal">False</span>)</span><br><span class="line">无需通过定义全局变量，就可以通过函数实现持续访问，操作某个值</span><br><span class="line">闭包使用的变量在函数内，很难被错误的误改</span><br><span class="line">缺点，由于一直持续的引用外部函数的变量，会占用内存</span><br><span class="line">取款:+<span class="number">100</span>,账户余额:<span class="number">100</span></span><br><span class="line">取款:+<span class="number">100</span>,账户余额:<span class="number">200</span></span><br><span class="line">取款:-<span class="number">100</span>,账户余额:<span class="number">100</span></span><br></pre></td></tr></table></figure><hr><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p><strong>在不修改原函数的内容的情况下</strong></p><p>实现给原函数添加新的功能</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠中。。。&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">0</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">sleep</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要汤姆睡觉了&quot;</span>)</span><br><span class="line">        sleep()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要汤姆起床了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">sheep=outer(sleep)</span><br><span class="line">sheep()</span><br><span class="line"><span class="comment"># 我要汤姆睡觉了</span></span><br><span class="line"><span class="comment"># 睡眠中。。。</span></span><br><span class="line"><span class="comment"># 我要汤姆起床了</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>改进后的写法，@**outer **</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">sleep</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要汤姆睡觉了&quot;</span>)</span><br><span class="line">        sleep()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要汤姆起床了&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outer</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠中。。。&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">0</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep()</span><br><span class="line"><span class="comment"># 我要汤姆睡觉了</span></span><br><span class="line"><span class="comment"># 睡眠中。。。</span></span><br><span class="line"><span class="comment"># 我要汤姆起床了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p><strong>编程套路</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sb</span>:</span><br><span class="line">    name=<span class="literal">None</span></span><br><span class="line">SB=sb()</span><br></pre></td></tr></table></figure><p>​<strong>减少内存损耗，提供多个接口，只实例一个对象，导包传入一个对象。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 包 <span class="keyword">import</span> sb,SB</span><br><span class="line"></span><br><span class="line">s1=SB</span><br><span class="line">s2=SB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="comment"># &lt;包.sb object at 0x00000247FA22B590&gt;</span></span><br><span class="line"><span class="comment"># &lt;包.sb object at 0x00000247FA22B590&gt;</span></span><br></pre></td></tr></table></figure><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>当要创建很多很多对象的时候</p><p>有统一的getperson（）入口  易于维护</p><p>当发生修改的时候只修改工厂的方法就可以了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">teacher</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">worker</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">factory</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getperson</span>(<span class="params">self,<span class="built_in">type</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span>==<span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> worker()</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span>==<span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> teacher()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> student()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person=factory()</span><br><span class="line">worker=person.getperson(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">teacher=person.getperson(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">student=person.getperson(<span class="string">&#x27;s&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="进程，线程-并行执行"><a href="#进程，线程-并行执行" class="headerlink" title="进程，线程, 并行执行"></a>进程，线程, 并行执行</h4><p><strong>一个操作系统中可以有多个进程，多任务运行</strong></p><p><strong>一个进程可以运行多个线程，多线程运行</strong></p><img src="/xu-runbo/post/a378bd8e/image-20230717134650413.png" class="" title="image-20230717134650413"><p><strong>一个进程可以有多个线程，线程之间内存是共享的。</strong></p><p><strong>不同线程之间的内存是隔离的</strong></p><p><strong>并行执行</strong></p><p>同一时间做多个事情。</p><h4 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h4><p><strong>调用threading模块，创造一个线程对象就是一个线程</strong></p><p><strong>线程一般都持久干活</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading,time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我在唱歌啦啦啦啦啦&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我在跳舞嘎嘎&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sing=threading.Thread(target=sing)</span><br><span class="line">dance=threading.Thread(target=dance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sing.start()</span><br><span class="line">dance.start()</span><br><span class="line"></span><br><span class="line">一边唱歌一边跳舞</span><br></pre></td></tr></table></figure><p>参数</p><p>​    group: <em>None</em> <strong>&#x3D;</strong> None,<strong>忽略</strong><br>​    target: ((…) -&gt; <strong>object</strong>) <strong>|</strong> <em>None</em> <strong>&#x3D;</strong> None, <strong>执行任务名称</strong><br>​    name: <strong>str</strong> <strong>|</strong> <em>None</em> <strong>&#x3D;</strong> None, <strong>线程名一般不设置</strong><br>​    args: Iterable[Any] <strong>&#x3D;</strong> (), <strong>以元组的形式传参</strong><br>​    kwargs: Mapping[<strong>str</strong>, Any] <strong>|</strong> <em>None</em> <strong>&#x3D;</strong> None,  <strong>以字典的形式传参</strong></p><p>因为target&#x3D;任务名字，没有直接调用函数,所以要另一种方式传参</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading,time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dance</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sing=threading.Thread(target=sing,args=(<span class="string">&quot;我在唱歌啊啊啊啊啊&quot;</span>,))</span><br><span class="line">dance=threading.Thread(target=dance,kwargs=&#123;<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;我在跳舞蹬蹬咚咚&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sing.start()</span><br><span class="line">dance.start()</span><br></pre></td></tr></table></figure><h4 id="网络编程Socket"><a href="#网络编程Socket" class="headerlink" title="网络编程Socket"></a>网络编程Socket</h4><p>进程之间的网路通信需要<strong>socket</strong>,数据的搬运工</p><hr><p><strong>两个进程之间要想进行通讯,就必须有服务端和客户端</strong></p><p><strong>socket服务端</strong></p><blockquote><h4 id="等待其他进程的连接-可以收发信息"><a href="#等待其他进程的连接-可以收发信息" class="headerlink" title="等待其他进程的连接,可以收发信息."></a>等待其他进程的连接,可以收发信息.</h4><ol><li><p>导入内置的socket对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#创建一个socket对象</span></span><br><span class="line">socket_severe=socket.socket()</span><br><span class="line">      </span><br><span class="line"><span class="comment">#服务端绑定在本机和端口</span></span><br><span class="line">socket_severe.bind((<span class="string">&quot;localhost&quot;</span>, <span class="number">8888</span>))</span><br><span class="line">      </span><br><span class="line"><span class="comment">#设置服务端允许连接的数量</span></span><br><span class="line">socket_severe.listen(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#等待客户端连接，这是一个阻塞语句，只有成功链接了才会执行下一句,返回一个二元元组.</span></span><br><span class="line">client_socket,client_address=socket_severe.accept()</span><br><span class="line"><span class="comment">#表示连接的socket对象，以及客户端的地址信息。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;蛙趣，客户端连接成功!,并且客户端的地址信息是<span class="subst">&#123;client_address&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    client_msg=client_socket.recv(<span class="number">1024</span>).decode(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    <span class="comment">#这是一个阻塞语句，只有成功链接了才会执行下一句</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;客户端发送来的信息是:<span class="subst">&#123;client_msg&#125;</span>&quot;</span>)</span><br><span class="line">      </span><br><span class="line">    severe_sentmsg=<span class="built_in">input</span>(<span class="string">&quot;要给客户端回应的信息是:&quot;</span>)</span><br><span class="line">    client_socket.send(severe_sentmsg.encode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> severe_sentmsg==<span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      </span><br><span class="line">   client_socket.close()</span><br><span class="line">socket_severe.close()</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>socket客户端</strong></p><blockquote><h4 id="主动连接服务端-可以收发信息"><a href="#主动连接服务端-可以收发信息" class="headerlink" title="主动连接服务端,可以收发信息."></a>主动连接服务端,可以收发信息.</h4><p><strong>全程使用client__socket对象</strong>,<strong>先发送后接受</strong></p><ol><li><p>导入socket模块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#创建一个socket对象</span></span><br><span class="line">client_socket=socket.socket()</span><br><span class="line"><span class="comment">#客户端连接具体的服务端</span></span><br><span class="line">      </span><br><span class="line">client_socket.connect((<span class="string">&quot;localhost&quot;</span>,<span class="number">8888</span>))</span><br><span class="line">      </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sent_data=<span class="built_in">input</span>(<span class="string">&quot;要给服务端发送的信息是:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> sent_data==<span class="string">&quot;exit&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    client_socket.send(sent_data.encode(<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">      </span><br><span class="line">    recv_data=client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">      </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;服务端返回来的信息是:<span class="subst">&#123;recv_data.decode(<span class="string">&#x27;UTF-8&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">      <span class="comment">#关闭链接</span></span><br><span class="line">client_socket.close()</span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p><strong>正则表达式,又称规则表达式( Regular Expression),是使用单个字符串来描述、匹配某个句法规则的字符串,常被用</strong><br><strong>来检索、替换那些符合某个模式(规则)的文本。</strong></p><blockquote><ol><li><strong>match,search,findall方法</strong></li><li><strong>span得到的是对应的(起始下标，末下标+1)</strong></li><li>match是从头到尾开始匹配，如果刚开始都没有，后面又也没用。</li><li>search也从头开始找，但只找第一个。</li><li>findall，全部找，不管在哪能找到，并以列表的形式返回</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment">#导入正则表达式的RE模块</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------match-------------------    &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;python itniuma python itniuma&quot;</span></span><br><span class="line"><span class="comment">#目标字符串</span></span><br><span class="line">result=re.<span class="keyword">match</span>(<span class="string">&quot;python&quot;</span>,<span class="built_in">str</span>)</span><br><span class="line"><span class="comment">#re模块的match对象实例化</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(result.span())</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment"># &lt;re.Match object; span=(0, 6), match=&#x27;python&#x27;&gt;</span></span><br><span class="line"><span class="comment"># (0, 6)</span></span><br><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="comment">#从前到后开始找，如果刚开始就匹配不到，就算后面又有也没用</span></span><br><span class="line"><span class="comment"># 如果没有就返回none</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;--------------------search---------------------    &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;1python itniuma python itniuma&quot;</span></span><br><span class="line"></span><br><span class="line">result=re.search(<span class="string">&quot;python&quot;</span>,<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(result.span())</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"><span class="comment">#  &lt;re.Match object; span=(1, 7), match=&#x27;python&#x27;&gt;</span></span><br><span class="line"><span class="comment"># (1, 7)</span></span><br><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="comment">#有的话只找一个！</span></span><br><span class="line"><span class="comment"># 如果没有就返回none</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------------------findall-----------------------    &quot;</span>)</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;1python itniuma python itniuma&quot;</span></span><br><span class="line">result=re.findall(<span class="string">&quot;python&quot;</span>,<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># print(result.count(&quot;python&quot;))</span></span><br><span class="line"><span class="comment"># [&#x27;python&#x27;, &#x27;python&#x27;]</span></span><br></pre></td></tr></table></figure></blockquote><hr><h4 id="正则表达式——元字符匹配"><a href="#正则表达式——元字符匹配" class="headerlink" title="正则表达式——元字符匹配"></a>正则表达式——元字符匹配</h4><table><thead><tr><th align="center">字符</th><th>功能</th></tr></thead><tbody><tr><td align="center">.</td><td>匹配任意1个字符(除了\n) ，.匹配点本身</td></tr><tr><td align="center">[]</td><td>匹配[ ]中列举的字符</td></tr><tr><td align="center">\d</td><td>匹配数字，即0-9</td></tr><tr><td align="center">\D</td><td>匹配非数字</td></tr><tr><td align="center">\s</td><td>匹配空白，即空格、tab键 .</td></tr><tr><td align="center">\S</td><td>匹配非空白</td></tr><tr><td align="center">\w</td><td>匹配单词字符，即a-Z、A-Z、  日-9、 _</td></tr><tr><td align="center">\W</td><td>匹配非单词字符</td></tr></tbody></table><p>r标记是查找原始的字符串，转义字符无效</p><p><strong>数量匹配</strong></p><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>*</td><td>匹配前一个规则的字符出现0至无数次  [0,+∞)</td></tr><tr><td>+</td><td>匹配前一个规则的字符出现1至无数次   [1,+∞)</td></tr><tr><td>？</td><td>匹配前一个规则的字符出现0次或1次     o||1</td></tr><tr><td>{m}</td><td>匹配前一个规则的字符出现m次    &#x3D;&#x3D;m</td></tr><tr><td>{m,}</td><td>匹配前一个规则的字符出现最少m次  &gt;&#x3D;m</td></tr><tr><td>{m,n}</td><td>匹配前一个规则的字符出现m到n次   [m,n]</td></tr></tbody></table><p><strong>边界匹配</strong></p><p>^$匹配整体需要加这个</p><table><thead><tr><th>字符</th><th>功能</th></tr></thead><tbody><tr><td>^</td><td>匹配字符串开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td></tr><tr><td>\b</td><td>匹配一个单词的边界</td></tr><tr><td>\B</td><td>匹配非单词边界</td></tr></tbody></table><p>分组匹配</p><table><thead><tr><th align="center">字符</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">|</td><td align="left">匹配左右任意一个表达式</td></tr><tr><td align="center">（）</td><td align="left">将括号中字符作为一个分组</td></tr></tbody></table><img src="/xu-runbo/post/a378bd8e/image-20230720182736642.png" class="" title="image-20230720182736642"><p>如果正则表达式里面有（），会把每一个（）都列出来，findall，每一个组的匹配返回，可以外加一个大括号.</p>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp2.0</title>
      <link href="/xu-runbo/post/a77e947a.html"/>
      <url>/xu-runbo/post/a77e947a.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-核心编程"><a href="#C-核心编程" class="headerlink" title="C++核心编程"></a>C++核心编程</h1><p>本阶段主要针对C++&#x3D;&#x3D;面向对象&#x3D;&#x3D;编程技术做详细讲解，探讨C++中的核心和精髓。</p><h2 id="1-内存分区模型"><a href="#1-内存分区模型" class="headerlink" title="1 内存分区模型"></a>1 内存分区模型</h2><p>C++程序在执行时，将内存大方向划分为<strong>4个区域</strong></p><ul><li>代码区：存放<strong>函数体</strong>的<strong>二进制代码</strong>，由<strong>操作系统</strong>进行管理的</li><li>注释不在代码区</li><li>全局区：存放<strong>全局变量和静态变量以及常量</strong></li><li>栈区：由<strong>编译器自动分配释放</strong>, 存放<strong>函数的参数值</strong>,<strong>局部变量</strong>等</li><li>堆区：由**程序员分配和释放,**<strong><strong>若程序员不释放,程序结束时由操作系统回收</strong></strong></li></ul><p><strong>内存四区意义：</strong></p><p>不同区域存放的数据，<strong>赋予不同的生命周期</strong>, 给我们更大的<strong>灵活编程</strong></p><h3 id="1-1-程序运行前"><a href="#1-1-程序运行前" class="headerlink" title="1.1 程序运行前"></a>1.1 程序运行前</h3><p>​<strong>在程序编译后，生成了exe可执行程序</strong>，<strong>未执行该程序前</strong>分为两个区域</p><p>​<strong>代码区：</strong></p><p>​存放 CPU 执行的机器指令</p><p>​代码区是<strong>共享</strong>的，共享的目的是对于频繁被执行的程序，<strong>只需要在内存中有一份代码即可</strong></p><p>​代码区是<strong>只读</strong>的，使其只读的原因是防止程序意外地修改了它的指令,<strong>金币变点券</strong></p><p>​<strong>全局区：</strong></p><p>​<strong>全局变量 和 静态变量</strong>存放在此.</p><p>​全局区还包含了<strong>常量区</strong>, <strong>字符串常量和全局常量</strong>存放在此.</p><p>&#x3D;&#x3D;<strong>局部常量也局部变量都在栈区</strong>&#x3D;&#x3D;</p><p>​&#x3D;&#x3D;该区域的数据在程序结束后由操作系统释放&#x3D;&#x3D;.</p><img src="/xu-runbo/post/a77e947a/image-20230725153630117.png" class="" title="image-20230725153630117"><hr><p>(int)指针的地址，是不被定义的行为.</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;a)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;b)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="type">int</span> g_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c_g_a = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> c_g_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部变量</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印地址</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部变量a地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部变量b地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局变量g_a地址为： &quot;</span> &lt;&lt;  <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;g_a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局变量g_b地址为： &quot;</span> &lt;&lt;  <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;g_b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态变量</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> s_a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> s_b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;静态变量s_a地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;s_a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;静态变量s_b地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;s_b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;字符串常量地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;<span class="string">&quot;hello world&quot;</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局常量c_g_a地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;c_g_a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;全局常量c_g_b地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;c_g_b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> c_l_a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> c_l_b = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部常量c_l_a地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;c_l_a) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;局部常量c_l_b地址为： &quot;</span> &lt;&lt; <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;c_l_b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打印结果：</p><p><strong>局部变量</strong>a地址为： 6422044<br><strong>局部变量</strong>b地址为： 6422040<br>全局变量g_a地址为： 4206608<br>全局变量g_b地址为： 4206612<br>静态变量s_a地址为： 4206616<br>静态变量s_b地址为： 4206620<br>字符串常量地址为： 4210842<br>全局常量c_g_a地址为： 4210692<br>全局常量c_g_b地址为： 4210696<br><strong>局部常量</strong>c_l_a地址为： 6422036<br><strong>局部常量</strong>c_l_b地址为： 6422032<br>请按任意键继续. . .</p><img src="/xu-runbo/post/a77e947a/1545017602518.png" class="" width="1545017602518"><p>总结：</p><ul><li>C++中在<strong>程序运行前</strong>分为全局区和代码区</li><li>代码区特点是<strong>共享和只读</strong></li><li>全局区中存放&#x3D;&#x3D;全局变量、静态变量、常量&#x3D;&#x3D;,<strong>不包括局部常量和局部变量</strong></li><li>常量区中存放 const修饰的<strong>全局常量  和 字符串常量</strong></li></ul><h3 id="1-2-程序运行后"><a href="#1-2-程序运行后" class="headerlink" title="1.2 程序运行后"></a>1.2 程序运行后</h3><p>​<strong>栈区：</strong><strong><strong>编译器的天下.</strong></strong></p><p>​由<strong>编译器</strong>自动分配释放, 存放<strong>函数的参数值,局部变量</strong>等</p><p>​注意事项：<strong>不要返回局部变量的地址，栈区开辟的数据由编译器自动释放</strong></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> * <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *p = <span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;<span class="comment">//理论上第一次打印10</span></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;<span class="comment">//第二次打印乱码，就是因为编译器帮你做了一次保留，栈区的数据由编译器主宰。</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​<strong>堆区：</strong></p><p>​由<strong>程序员分配释放,若程序员不释放,程序结束时由操作系统回收</strong></p><p>​在C++中<strong>主要利用new在堆区开辟内存</strong></p><p>​&#x3D;&#x3D;并且返回new出来内存的地址，也就是指针！&#x3D;&#x3D;</p><img src="/xu-runbo/post/a77e947a/image-20230725160019240.png" class="" title="image-20230725160019240"><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = <span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;<span class="comment">//都是10，因为堆区的数据只有点击了x才被释放。在此之前一直存在。不像堆区离开了局部（函数）就被释放了，虽然编译器会帮你保留一次，但第二次就要出问题了。</span></span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>堆区数据由程序员管理开辟和释放</p><p>堆区数据利用new关键字进行开辟内存</p><h3 id="1-3-new操作符"><a href="#1-3-new操作符" class="headerlink" title="1.3 new操作符"></a>1.3 new操作符</h3><p>​C++中利用&#x3D;&#x3D;new&#x3D;&#x3D;操作符在堆区开辟数据</p><p>​堆区开辟的数据，<strong>由程序员手动开辟，手动释放</strong>，释放利用操作符 &#x3D;&#x3D;delete&#x3D;&#x3D;</p><p>​语法：<code> new 数据类型</code>(初始值)</p><p>​利用new创建的数据，<strong>会返回该数据对应的类型的指针(地址)</strong></p><p>int *a&#x3D;new int(10)</p><p>​&#x3D;&#x3D;最后需要delete对应的指针！&#x3D;&#x3D;加new返回的 指针！</p><blockquote><img src="/xu-runbo/post/a77e947a/image-20230725160534499.png" class="" title="image-20230725160534499"></blockquote><p>​&#x3D;&#x3D;<strong>释放的空间不可访问</strong>&#x3D;&#x3D;</p><p><strong>示例1： 基本语法</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>* <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = <span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用delete释放堆区数据</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//15735568</span></span><br></pre></td></tr></table></figure><p><strong>示例2：开辟数组</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//堆区开辟数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>* arr = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//开辟字符串,开辟字符串数组的时候换成[]再加个数</span></span><br><span class="line">    string* str=<span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    cout&lt;&lt;*str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i] = i + <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> []  arr;</span><br><span class="line">    <span class="keyword">delete</span> str;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-引用"><a href="#2-引用" class="headerlink" title="2 引用"></a>2 引用</h2><h3 id="2-1-引用的基本使用"><a href="#2-1-引用的基本使用" class="headerlink" title="2.1 引用的基本使用"></a>2.1 引用的基本使用</h3><p><strong>作用： <strong>给</strong>变量</strong>起别名</p><p>土豆，马铃薯都是。。</p><p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p><p>类型得相同</p><img src="/xu-runbo/post/a77e947a/image-20230725170131910.png" class="" title="image-20230725170131910"><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-引用注意事项"><a href="#2-2-引用注意事项" class="headerlink" title="2.2 引用注意事项"></a>2.2 引用注意事项</h3><ul><li><strong>引用必须初始化</strong></li><li>引用在初始化后，不可以改变也就是</li><li>一旦引用被初始化绑定到一个对象上，它将一直引用该对象，无法改变引用所绑定的对象。</li></ul><p>示例：</p><img src="/xu-runbo/post/a77e947a/image-20230725170414023.png" class="" title="image-20230725170414023"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//int &amp;c; //错误，引用必须初始化</span></span><br><span class="line"><span class="type">int</span> &amp;c = a; <span class="comment">//一旦初始化后，就不可以更改</span></span><br><span class="line">c = b; <span class="comment">//这是赋值操作，不是更改引用</span></span><br><span class="line">    <span class="comment">//实际上是操作a的值。。</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-引用做函数参数"><a href="#2-3-引用做函数参数" class="headerlink" title="2.3 引用做函数参数"></a>2.3 引用做函数参数</h3><p><strong>作用：</strong>函数传参时，可以利<strong>用引用的技术让形参修饰实参</strong></p><p><strong>优点：</strong>可以简化指针修改实参</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sp1</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sp2</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=*a;</span><br><span class="line">    *a=*b;</span><br><span class="line">    *b=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sp3</span><span class="params">(<span class="type">int</span>&amp; a,<span class="type">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入两个数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;值传递，不可以修改实参的本身&quot;</span>&lt;&lt;endl;</span><br><span class="line">      <span class="built_in">sp1</span>(a,b);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;地址传递--指针，可以修改实参的本身&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">sp2</span>(&amp;a,&amp;b);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;地址传递--引用，可以修改实参的本身&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">sp3</span>(a,b);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结：<strong>通过引用参数产生的效果同按地址传递是一样的</strong>。引用的语法更清楚简单</p><h5 id="当引用作为一个函数形参时，它所引用的变量的生命周期必须保证在函数的执行期间内是有效的。在函数执行期间内，对于引用所指向的变量所进行的任何修改都将影响到函数调用方式中的原始变量。"><a href="#当引用作为一个函数形参时，它所引用的变量的生命周期必须保证在函数的执行期间内是有效的。在函数执行期间内，对于引用所指向的变量所进行的任何修改都将影响到函数调用方式中的原始变量。" class="headerlink" title="当引用作为一个函数形参时，它所引用的变量的生命周期必须保证在函数的执行期间内是有效的。在函数执行期间内，对于引用所指向的变量所进行的任何修改都将影响到函数调用方式中的原始变量。"></a>当引用作为一个函数形参时，它所引用的变量的生命周期必须保证在函数的执行期间内是有效的。在函数执行期间内，对于引用所指向的变量所进行的任何修改都将影响到函数调用方式中的原始变量。</h5><p>引用和指针操作最大的区别在于，指<strong>针的方式借助的形参会占用栈区空间</strong>，而用引用则不会，<strong>因此引用节省了栈区空间！</strong></p></blockquote><hr><h3 id="2-4-引用做函数返回值"><a href="#2-4-引用做函数返回值" class="headerlink" title="2.4 引用做函数返回值"></a>2.4 引用做函数返回值</h3><p>作用：引用是可以<strong>作为函数的返回值</strong>存在的</p><p>注意：**&#x3D;&#x3D;不要返回局部变量引用和地址&#x3D;&#x3D;**</p><p><strong>也要用引用的形式去接受</strong></p><p><strong>变量有可以同时存在多个别名，别名与别名与变量之间的操作是共通的</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> &amp;b=a;</span><br><span class="line">    <span class="type">int</span> &amp;c=a;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;b=&quot;</span>&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;c=&quot;</span>&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用法：<em>函数调用作为左值</em></p><hr><p>在 C++ 中，<strong>不建议返回指向局部变量的引用，因为局部变量在函数执行完毕后会被销毁，而引用仍然指向该变量的内存地址。</strong>这样会导致返回的引用指向一个无效的内存位置，访问该引用可能会导致未定义行为。</p><p><strong>而静态变量是在程序运行期间一直存在的，不会在函数执行完毕后被销毁。</strong>因此，返回静态变量的引用是安全的，因为静态变量的生命周期超出了函数的作用域。</p><hr><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回局部变量引用</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>; <span class="comment">//局部变量</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回a的引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回静态变量引用</span></span><br><span class="line"><span class="function"><span class="type">int</span>&amp; <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">20</span><span class="comment">//全局区，在整个程序运行完才释放</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能返回局部变量的引用</span></span><br><span class="line">    <span class="comment">//返回的a是以类型“int&amp;”返回的，所以必须要以类型“int&amp;”去接收，这里用ref去接收，即int&amp; ref = a  ，即ref为a的别名</span></span><br><span class="line"><span class="type">int</span>&amp; ref = <span class="built_in">test01</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果函数做左值，那么必须返回引用,ref2也是a的别名</span></span><br><span class="line"><span class="type">int</span>&amp; ref2 = <span class="built_in">test02</span>();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">////</span></span><br><span class="line">    <span class="comment">//int &amp;别名=1000 也相当于是a的别名只不过是函数</span></span><br><span class="line"><span class="built_in">test02</span>() = <span class="number">1000</span>;</span><br><span class="line"><span class="comment">////</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>int * const 变量名字&#x3D;</p><p>费曼学习法，先学面向过程C，在学面向对象CSharp，然后又滚来学C++面向对象过程（滑稽）</p><h3 id="2-5-引用的本质"><a href="#2-5-引用的本质" class="headerlink" title="2.5 引用的本质"></a>2.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p><blockquote><p>常量指针是指 指针指向的数据不可更改</p><p>const指针常量是值 指针的指向不可更改</p></blockquote><p>讲解示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发现是引用，转换为 int* const ref = &amp;a;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span>&amp; ref)</span></span>&#123;</span><br><span class="line">ref = <span class="number">100</span>; <span class="comment">// ref是引用，转换为*ref = 100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class="line"><span class="type">int</span>&amp; ref = a; </span><br><span class="line">ref = <span class="number">20</span>; <span class="comment">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span></span><br><span class="line">    </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">func</span>(a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p><h3 id="2-6-常量引用"><a href="#2-6-常量引用" class="headerlink" title="2.6 常量引用"></a>2.6 常量引用</h3><p><strong>作用：</strong>常量引用<strong>主要用来修饰形参，防止误操作</strong></p><p>在函数形参列表中，可以加改变实参</p><p>引用必须引用一块合法的内存空间</p><p>int&amp; a&#x3D;10;  不可以</p><p>const int&amp; a&#x3D;10  可以</p><p>相当于，编译器帮助这样处理.</p><p>{</p><p>int temp&#x3D;10;</p><p>const int&amp; a&#x3D;temp;</p><p>}</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用使用的场景，通常用来修饰形参</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showValue</span><span class="params">(<span class="type">const</span> <span class="type">int</span>&amp; v)</span> </span>&#123;</span><br><span class="line"><span class="comment">//v += 10;</span></span><br><span class="line">cout &lt;&lt; v &lt;&lt; endl;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//相当于</span></span><br><span class="line"><span class="comment">//void showValue(const int* const name) &#123;</span></span><br><span class="line"><span class="comment">//v += 10;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; v &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class="line"><span class="comment">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>&amp; ref = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ref = 100;  //加入const后不可以修改变量</span></span><br><span class="line">cout &lt;&lt; ref &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数中利用常量引用防止误操作修改实参</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">showValue</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-函数提高"><a href="#3-函数提高" class="headerlink" title="3 函数提高"></a>3 函数提高</h2><h3 id="3-1-函数默认参数"><a href="#3-1-函数默认参数" class="headerlink" title="3.1 函数默认参数"></a>3.1 函数默认参数</h3><p>在C++中，函数的形参列表中的形参是可以有默认值的。</p><p>语法：<code> 返回值类型  函数名 （参数= 默认值）&#123;&#125;</code></p><p>&#x3D;&#x3D;如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值&#x3D;&#x3D;</p><h6 id="如果函数声明有默认值，函数实现的时候就不能有默认参数"><a href="#如果函数声明有默认值，函数实现的时候就不能有默认参数" class="headerlink" title="&#x3D;&#x3D;如果函数声明有默认值，函数实现的时候就不能有默认参数&#x3D;&#x3D;"></a>&#x3D;&#x3D;如果函数<strong>声明有默认值</strong>，函数实现的时候就不能有默认参数&#x3D;&#x3D;</h6><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>, <span class="type">int</span> c = <span class="number">10</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span></span><br><span class="line"><span class="comment">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a = <span class="number">10</span>, <span class="type">int</span> b = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; <span class="built_in">func</span>(<span class="number">20</span>, <span class="number">20</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ret = &quot;</span> &lt;&lt; <span class="built_in">func</span>(<span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-函数占位参数"><a href="#3-2-函数占位参数" class="headerlink" title="3.2 函数占位参数"></a>3.2 函数占位参数</h3><p>C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置</p><p><strong>语法：</strong> <code>返回值类型 函数名 (数据类型)&#123;&#125;</code></p><p>占一个位置，可以接受实参。</p><p><strong>占位参数必须填补</strong></p><p>在现阶段函数的占位参数存在意义不大，但是后面的课程中会用到该技术</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数占位参数 ，占位参数也可以有默认参数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> =<span class="number">10</span>)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is func&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>,<span class="number">10</span>); <span class="comment">//占位参数必须填补</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-函数重载"><a href="#3-3-函数重载" class="headerlink" title="3.3 函数重载"></a>3.3 函数重载</h3><h4 id="3-3-1-函数重载概述"><a href="#3-3-1-函数重载概述" class="headerlink" title="3.3.1 函数重载概述"></a>3.3.1 函数重载概述</h4><p><strong>作用：</strong>函数名可以相同，提高复用性</p><p><strong>函数重载满足条件：</strong></p><ul><li><p>同一个作用域下</p></li><li><p>函数名称相同</p></li><li><p>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong>（前提是参数类型不同！！！）</p></li><li><blockquote><p>函数的返回值类型不可以重载！！！</p></blockquote></li></ul><p><strong>注意:</strong>  <strong>函数的返回值不可以作为函数重载的条件</strong></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数重载需要函数都在同一个作用域下</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (int a) 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (double a)的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a ,<span class="type">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (int a ,double b) 的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">double</span> a ,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (double a ,int b)的调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回值不可以作为函数重载条件</span></span><br><span class="line"><span class="comment">//int func(double a, int b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="number">3.14</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>,<span class="number">3.14</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="number">3.14</span> , <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-2-函数重载注意事项"><a href="#3-3-2-函数重载注意事项" class="headerlink" title="3.3.2 函数重载注意事项"></a>3.3.2 函数重载注意事项</h4><ul><li><strong>引用作为重载条件</strong></li><li>函数重载碰到<strong>函数默认参数</strong></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数重载注意事项</span></span><br><span class="line"><span class="comment">//1、引用作为重载条件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、函数重载碰到函数默认参数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func2(int a) 调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">func</span>(a); <span class="comment">//调用无const</span></span><br><span class="line"><span class="built_in">func</span>(<span class="number">10</span>);<span class="comment">//调用有const</span></span><br><span class="line">    相当于弄了一个临时变量</span><br><span class="line">      <span class="comment">//  int &amp;a=10 不可以</span></span><br><span class="line">      <span class="comment">//  const int &amp;a=10;可以</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//func2(10); //碰到默认参数产生歧义，需要避免 二义性！~！！</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-类和对象"><a href="#4-类和对象" class="headerlink" title="&#x3D;&#x3D;4 类和对象&#x3D;&#x3D;"></a>&#x3D;&#x3D;<strong>4</strong> 类和对象&#x3D;&#x3D;</h2><p>C++面向对象的三大特性为：&#x3D;&#x3D;封装、继承、多态&#x3D;&#x3D;</p><p>C++认为&#x3D;&#x3D;万事万物都皆为对象&#x3D;&#x3D;，对象上有其属性和行为</p><blockquote><p><strong>类里面的属性和行为都是成员！</strong></p><p><strong>创建具体的对象的过程叫做类的实例化！</strong></p></blockquote><p><strong>例如：</strong></p><p>​人可以作为对象，属性有姓名、年龄、身高、体重…，行为有走、跑、跳、吃饭、唱歌…</p><p>​车也可以作为对象，属性有轮胎、方向盘、车灯…,行为有载人、放音乐、开空调…</p><p>​具有相同性质的&#x3D;&#x3D;对象&#x3D;&#x3D;，我们可以抽象称为&#x3D;&#x3D;类&#x3D;&#x3D;，人属于人类，车属于车类</p><h3 id="4-1-封装–1"><a href="#4-1-封装–1" class="headerlink" title="4.1 封装–1"></a>4.1 封装–1</h3><h4 id="4-1-1-封装的意义"><a href="#4-1-1-封装的意义" class="headerlink" title="4.1.1  封装的意义"></a>4.1.1  封装的意义</h4><p>封装是C++面向对象三大特性之一</p><p>封装的意义：</p><ul><li>将属性和行为作为一个整体，表现生活中的事物</li><li>将属性和行为<strong>加以权限控制</strong></li></ul><p><strong>封装意义一：</strong></p><p>​在设计类的时候，属性和行为写在一起，表现事物</p><p><strong>语法：</strong> <code>class 类名&#123;   访问权限： 属性  / 行为  &#125;;</code></p><p><strong>示例1：</strong>设计一个圆类，求圆的周长</p><p><strong>示例代码：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//圆周率</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、封装的意义</span></span><br><span class="line"><span class="comment">//将属性和行为作为一个整体，用来表现生活中的事物</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//封装一个圆类，求圆的周长</span></span><br><span class="line"><span class="comment">//class代表设计一个类，后面跟着的是类名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:  <span class="comment">//访问权限  公共的权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//属性</span></span><br><span class="line"><span class="type">int</span> m_r;<span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//行为</span></span><br><span class="line"><span class="comment">//获取到圆的周长</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calculateZC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//2 * pi  * r</span></span><br><span class="line"><span class="comment">//获取圆的周长</span></span><br><span class="line"><span class="keyword">return</span>  <span class="number">2</span> * PI * m_r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过圆类，创建圆的对象</span></span><br><span class="line"><span class="comment">// c1就是一个具体的圆</span></span><br><span class="line">Circle c1;</span><br><span class="line">c1.m_r = <span class="number">10</span>; <span class="comment">//给圆对象的半径 进行赋值操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 * pi * 10 = = 62.8</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;圆的周长为： &quot;</span> &lt;&lt; c1.<span class="built_in">calculateZC</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong>设计一个学生类，属性有姓名和学号，可以给姓名和学号赋值，可以显示学生的姓名和学号</p><p><strong>示例2代码：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setname</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setid</span><span class="params">(string number)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;number=number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">showmessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="keyword">this</span>-&gt;name&lt;&lt;<span class="string">&quot;----&quot;</span>&lt;&lt;<span class="keyword">this</span>-&gt;number&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string name;</span><br><span class="line">    string number;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    student xrb;</span><br><span class="line">    xrb.<span class="built_in">setname</span>(<span class="string">&quot;徐润波&quot;</span>);</span><br><span class="line">    xrb.<span class="built_in">setid</span>(<span class="string">&quot;542207230725&quot;</span>);</span><br><span class="line">    xrb.<span class="built_in">showmessage</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>封装意义二：</strong></p><p>类在设计时，可以把属性和行为放在不同的权限下，加以控制</p><p>访问权限有三种：</p><ol><li>public        公共权限  </li><li>protected 保护权限</li><li>private      私有权限</li></ol><blockquote><p>在C++中，类的成员可以不同的访问权限，包括私有（private）、保护（protected）和公共（public）权限。这些权限决定了类的成员对于<strong>类内部和类外部</strong>的<strong>可见性和可访问性。</strong></p><p><strong>私有权限（private）是最严格的权限</strong>，它表示<strong>只有类内部的成员函数可以访问该成员，</strong>类外部的代码无法直接访问私有成员。私有成员对于类外部的用户是隐藏的，只有类内部的函数可以直接访问和操作私有成员。私有成员常用于封装类的实现细节，以确保数据的安全性和一致性。</p><p>保护权限（protected）<strong>介于私有权限和公共权限之间。</strong>保护成员<strong>可以被类内部的成员函数和派生类的成员函数访问</strong>，但对于类外部的代码是不可见的。<strong>保护成员常用于实现继承中的数据共享和派生类的访问控制。</strong></p><p>区别总结如下：</p><ul><li><strong>私有权限（private）：只有类内部的成员函数可以访问，类外部的代码无法直接访问。</strong></li><li>*<em>保护权限（protected）：类内部的成员函数和派生类的成员函数可以访问，类外部的代码无法直接访问。</em></li><li><strong>公共权限（public）：类内部的成员函数和类外部的代码都可以访问。</strong></li></ul><p>需要注意的是，这些<strong>访问权限只是在编译时进行的静态检查</strong>，<em><strong>而不是运行时的限制</strong></em>。因此，通过类的<strong>公共成员函数可以间接地访问私有和保护成员</strong>。</p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//三种权限</span></span><br><span class="line"><span class="comment">//公共权限  public     类内可以访问  类外可以访问</span></span><br><span class="line"><span class="comment">//保护权限  protected  类内可以访问  类外不可以访问</span></span><br><span class="line"><span class="comment">//私有权限  private    类内可以访问  类外不可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//姓名  公共权限</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_Name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//汽车  保护权限</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">string m_Car;</span><br><span class="line"></span><br><span class="line"><span class="comment">//银行卡密码  私有权限</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_Password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_Name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">m_Car = <span class="string">&quot;拖拉机&quot;</span>;</span><br><span class="line">m_Password = <span class="number">123456</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Person p;</span><br><span class="line">p.m_Name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"><span class="comment">//p.m_Car = &quot;奔驰&quot;;  //保护权限类外访问不到</span></span><br><span class="line"><span class="comment">//p.m_Password = 123; //私有权限类外访问不到</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-struct和class区别"><a href="#4-1-2-struct和class区别" class="headerlink" title="4.1.2 struct和class区别"></a>4.1.2 struct和class区别</h4><p>在C++中 struct和class唯一的<strong>区别</strong>就在于 <strong>默认的访问权限不同</strong></p><p>区别：</p><blockquote><ul><li><h4 id="struct-默认权限为公共"><a href="#struct-默认权限为公共" class="headerlink" title="struct 默认权限为公共"></a>struct 默认权限为公共</h4></li><li><h4 id="class-默认权限为私有"><a href="#class-默认权限为私有" class="headerlink" title="class   默认权限为私有"></a>class   默认权限为私有</h4></li></ul></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span>  m_A; <span class="comment">//默认是私有权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">C2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m_A;  <span class="comment">//默认是公共权限</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">C1 c1;</span><br><span class="line">c1.m_A = <span class="number">10</span>; <span class="comment">//错误，访问权限是私有</span></span><br><span class="line"></span><br><span class="line">C2 c2;</span><br><span class="line">c2.m_A = <span class="number">10</span>; <span class="comment">//正确，访问权限是公共</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-3-成员属性设置为私有"><a href="#4-1-3-成员属性设置为私有" class="headerlink" title="4.1.3 &#x3D;&#x3D;成员属性设置为私有&#x3D;&#x3D;"></a>4.1.3 &#x3D;&#x3D;成员属性设置为私有&#x3D;&#x3D;</h4><p><strong>优点1：</strong>将所有成员属性设置为私有，可以<strong>自己控制读写权限</strong></p><p><strong>优点2：</strong>对于写权限，我们可以检测数据的有效性</p><hr><p><em>在 C++ 中，私有成员是类的成员，<strong>只有类的成员函数可以直接访问和修改私有成员。</strong>其他函数或代码块无法直接访问和修改私有成员。</em></p><p><em>然而，<strong>可以通过指针间接访问和修改私有成员</strong>。如果你有一个指向类对象的指针，你可以使用指针来访问和修改私有成员。这是因为<strong>指针可以具有与类成员函数相同的访问权限。</strong></em></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateMember;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setPrivateMember</span><span class="params">(<span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">        privateMember = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getPrivateMember</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> privateMember;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MyClass obj;</span><br><span class="line">    MyClass* ptr = &amp;obj;</span><br><span class="line"></span><br><span class="line">    ptr-&gt;<span class="built_in">setPrivateMember</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="type">int</span> value = ptr-&gt;<span class="built_in">getPrivateMember</span>();</span><br><span class="line">    cout&lt;&lt;value&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//姓名设置可读可写</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123;</span><br><span class="line">        m_Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取年龄</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//设置年龄</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setAge</span><span class="params">(<span class="type">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span> || age &gt; <span class="number">150</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;你个老妖精!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情人设置为只写</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setLover</span><span class="params">(string lover)</span> </span>&#123;</span><br><span class="line">        m_Lover = lover;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string m_Name; <span class="comment">//可读可写  姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> m_Age; <span class="comment">//只读  年龄</span></span><br><span class="line"></span><br><span class="line">    string m_Lover; <span class="comment">//只写  情人</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Person p;</span><br><span class="line">    <span class="comment">//姓名设置</span></span><br><span class="line">    p.<span class="built_in">setName</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; p.<span class="built_in">getName</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//年龄设置</span></span><br><span class="line">    p.<span class="built_in">setAge</span>(<span class="number">50</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;年龄： &quot;</span> &lt;&lt; p.<span class="built_in">getAge</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情人设置</span></span><br><span class="line">    p.<span class="built_in">setLover</span>(<span class="string">&quot;苍井&quot;</span>);</span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;情人： &quot; &lt;&lt; p.m_Lover &lt;&lt; endl;  //只写属性，不可以读取</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>练习案例1：设计立方体类</strong></p><p>设计立方体类(Cube)</p><p>求出立方体的面积和体积</p><p>分别用全局函数和成员函数判断两个立方体是否相等。</p><img src="/xu-runbo/post/a77e947a/1545533548532.png" class="" width="1545533548532"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cubic</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getwidth</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;width;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setwidth</span><span class="params">(<span class="type">int</span> width)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;width=width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getlength</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setlength</span><span class="params">(<span class="type">int</span> length)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;length=length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getheight</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setheight</span><span class="params">(<span class="type">int</span> height)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;height=height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">caculateV</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;length*<span class="keyword">this</span>-&gt;height*<span class="keyword">this</span>-&gt;width;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> width;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    cubic abc;</span><br><span class="line">    abc.<span class="built_in">setwidth</span>(<span class="number">3</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;得到立方体的宽度&quot;</span>&lt;&lt;abc.<span class="built_in">getwidth</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    abc.<span class="built_in">setlength</span>(<span class="number">4</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;得到立方体的长度&quot;</span>&lt;&lt;abc.<span class="built_in">getlength</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    abc.<span class="built_in">setheight</span>(<span class="number">5</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;得到立方体的高度&quot;</span>&lt;&lt;abc.<span class="built_in">getheight</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;得到立方体的体积V=&quot;</span>&lt;&lt;abc.<span class="built_in">caculateV</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到立方体的宽度3</span></span><br><span class="line"><span class="comment">//得到立方体的长度4</span></span><br><span class="line"><span class="comment">//得到立方体的高度5</span></span><br><span class="line"><span class="comment">//得到立方体的体积V=60</span></span><br><span class="line"><span class="comment">//请按任意键继续. .</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><strong>练习案例2：点和圆的关系</strong></p><p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p><img src="/xu-runbo/post/a77e947a/1545533829184.png" class="" width="1545533829184"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getx</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setx</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">gety</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sety</span><span class="params">(<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y=y;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">circle</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setx</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c_x=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sety</span><span class="params">(<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c_y=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setr</span><span class="params">(<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c_r=r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;c_r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">CaculateTheRelationshipBetweenCircleAndPoint</span><span class="params">(point abc)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> p_x=abc.<span class="built_in">getx</span>();</span><br><span class="line">        <span class="type">int</span> p_y=abc.<span class="built_in">gety</span>();</span><br><span class="line">        <span class="type">int</span> distance=<span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">sqrt</span>((p_x-<span class="keyword">this</span>-&gt;c_x)*(p_x-<span class="keyword">this</span>-&gt;c_x)-(p_y-<span class="keyword">this</span>-&gt;c_y)*(p_y-<span class="keyword">this</span>-&gt;c_y)));</span><br><span class="line">        <span class="keyword">return</span> distance;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> c_x;</span><br><span class="line">    <span class="type">int</span> c_y;</span><br><span class="line">    <span class="type">int</span> c_r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    circle circle;</span><br><span class="line">    circle.<span class="built_in">setx</span>(<span class="number">0</span>);</span><br><span class="line">    circle.<span class="built_in">sety</span>(<span class="number">1</span>);</span><br><span class="line">    circle.<span class="built_in">setr</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    point point;</span><br><span class="line"></span><br><span class="line">    point.<span class="built_in">setx</span>(<span class="number">2</span>);</span><br><span class="line">    point.<span class="built_in">sety</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result=circle.<span class="built_in">CaculateTheRelationshipBetweenCircleAndPoint</span>(point);</span><br><span class="line">    <span class="keyword">if</span>(result==circle.<span class="built_in">getr</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;点在圆上！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(result&gt;circle.<span class="built_in">getr</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;点在园外!!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;点在园内！！！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//点在园外!!!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="static-cast和reinterpret-cast"><a href="#static-cast和reinterpret-cast" class="headerlink" title="static_cast&lt;&gt;和reinterpret_cast&lt;&gt;"></a><em><strong>static_cast&lt;&gt;和reinterpret_cast&lt;&gt;</strong></em></h4><blockquote><h2 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast&lt;&gt;"></a>static_cast&lt;&gt;</h2><p><code>static_cast&lt;&gt;</code> 是 C++ 中的一种<strong>类型转换运算符</strong>，用于在编译时进行类型转换。它可以用于将一种类型转换为另一种类型，包括基本类型、类类型和指针类型。</p><p><code>static_cast&lt;&gt;</code> 的语法如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">static_cast</span>&lt;目标类型&gt;(表达式)</span><br></pre></td></tr></table></figure><p>其中，<code>目标类型</code> 是你希望将表达式转换为的类型，而 <code>表达式</code> 则是要进行转换的值或<strong>变量</strong>。</p><p>下面是一些示例用法：</p><ol><li>将整数转换为浮点数：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">double</span> result = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(num);</span><br></pre></td></tr></table></figure><ol start="2"><li>将浮点数转换为整数：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">int</span> result = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(num);</span><br></pre></td></tr></table></figure><ol start="3"><li><em>将指针类型转换为另一种指针类型</em>：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* ptr = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">char</span>* result = <span class="built_in">static_cast</span>&lt;<span class="type">char</span>*&gt;(ptr);</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>static_cast&lt;&gt;</code> <strong>不会执行运行时的类型检查</strong>，因此转换的安全性需要由开发者自行保证。如果转换是不安全的，建议使用更加安全的类型转换运算符，如 <code>dynamic_cast&lt;&gt;</code> 或 <code>reinterpret_cast&lt;&gt;</code>。</p><p>总结起来，<code>static_cast&lt;&gt;</code> 是 C++ 中一种常用的类型转换运算符，<strong>用于在编译时进行类型转换</strong>。它可以将一种类型转换为另一种类型，但需要开发者自行确保转换的安全性。</p><hr><hr><hr><h2 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast&lt;&gt;"></a>reinterpret_cast&lt;&gt;</h2><p><code>reinterpret_cast&lt;&gt;</code> 是 C++ 中的一种类型转换运算符，用<strong>于执行底层的强制类型转换</strong>。它可以将一个指针或引用转换为另一种指针或引用类型，甚至可以将指针或引用转换为整数类型。</p><p><code>reinterpret_cast&lt;&gt;</code> 的语法如下：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">reinterpret_cast</span>&lt;目标类型&gt;(表达式)</span><br></pre></td></tr></table></figure><p>其中，<code>目标类型</code> 是你希望将表达式转换为的类型，而 <code>表达式</code> 则是要进行转换的值或变量。</p><p>下面是一些示例用法：</p><ol><li>将指针类型转换为另一种指针类型：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* ptr = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">char</span>* result = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">char</span>*&gt;(ptr);</span><br></pre></td></tr></table></figure><ol start="2"><li>将指针类型转换为整数类型：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* ptr = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">uintptr_t</span> result = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">uintptr_t</span>&gt;(ptr);</span><br></pre></td></tr></table></figure><ol start="3"><li>将整数类型转换为指针类型：</li></ol><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">uintptr_t</span> num = <span class="number">12345</span>;</span><br><span class="line"><span class="type">int</span>* result = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">int</span>*&gt;(num);</span><br></pre></td></tr></table></figure><p>需要注意的是，<code>reinterpret_cast&lt;&gt;</code> 执行的是一种底层的强制类型转换，<strong>它可以绕过编译器的类型检查</strong>，因此需要开发者自行确保转换的安全性。使用 <code>reinterpret_cast&lt;&gt;</code> 进行类型转换时应该非常小心，确保转换的结果在语义上是合理的。</p><p>总结起来，<code>reinterpret_cast&lt;&gt;</code> 是 C++ 中一种类型转换运算符，用于执行底层的强制类型转换。它可以将指针或引用转换为另一种指针或引用类型，甚至可以将指针或引用转换为整数类型。使用 <code>reinterpret_cast&lt;&gt;</code> 进行类型转换时需要非常小心，确保转换的安全性和语义正确性。</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">10</span>;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;a)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>&gt;(&amp;b)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-对象的初始化和清理"><a href="#4-2-对象的初始化和清理" class="headerlink" title="4.2 对象的初始化和清理"></a>4.2 对象的初始化和清理</h3><ul><li>生活中我们买的电子产品都基本会有<strong>出厂设置</strong>，在某一天我们不用时候也会删除一些自己信息数据保证安全</li><li>C++中的<strong>面向对象来源于生活，</strong>每个对象也都会有<strong>初始设置</strong>以及 对象销毁前的<strong>清理数据</strong>的设置。</li></ul><h4 id="4-2-1-构造函数和析构函数"><a href="#4-2-1-构造函数和析构函数" class="headerlink" title="4.2.1 构造函数和析构函数"></a>4.2.1 构造函数和析构函数</h4><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p><p><strong>多个对象的时候，先构造的后析构！！</strong></p><p><strong>在类外调用类的成员</strong></p><p><strong>类名::成员</strong></p><blockquote><p>​一个对象或者变量没有初始状态，对其使用后果是未知</p><p>​同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p></blockquote><p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这<strong>两个函数将会被编译器自动调用</strong>，完成对象初始化和清理工作。</p><p>对象的初始化和清理工作是编译<strong>器强制要我们做的事情</strong>，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p><p><strong>编译器提供的构造函数和析构函数是-&#x3D;空实现-&#x3D;。</strong></p><ul><li>构造函数：主要作用在于创建对象时<strong>为对象的成员属性赋值</strong>，<strong>构造函数由编译器自动调用</strong>，无须手动调用。</li><li>析构函数：主要作用在于对象<strong>销毁前</strong><em>系统自动调用</em>，执行一些<strong>清理工作</strong>。</li></ul><p>可以写在类内</p><p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p><blockquote><ol><li><strong>构造函数，没有返回值也写void</strong></li><li><strong>函数名称与类名相同</strong></li><li><strong>构造函数可以有参数，因此可以发生重载</strong></li><li>程序在<strong>调用对象时候会自动调用构造</strong>，无须手动调用**,而且只会调用一次**</li></ol></blockquote><p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p><blockquote><ol><li><h5 id="析构函数，没有返回值也写void"><a href="#析构函数，没有返回值也写void" class="headerlink" title="析构函数，没有返回值也写void"></a>析构函数，没有返回值也写void</h5></li><li><h5 id="函数名称是类名，但前面要加个"><a href="#函数名称是类名，但前面要加个" class="headerlink" title="函数名称是类名，但前面要加个~"></a>函数名称是类名，但前面要加个~</h5></li><li><h5 id="函数不可以有参数，不能发生重载"><a href="#函数不可以有参数，不能发生重载" class="headerlink" title="函数不可以有参数，不能发生重载"></a>函数不可以有参数，不能发生重载</h5></li><li><h5 id="程序在对象销毁前对自动调用析构函数，无需手动调用，且只会调用一次"><a href="#程序在对象销毁前对自动调用析构函数，无需手动调用，且只会调用一次" class="headerlink" title="程序在对象销毁前对自动调用析构函数，无需手动调用，且只会调用一次"></a>程序在<em>对象销毁前</em>对自动调用析构函数，无需手动调用，且只会调用一次</h5></li></ol></blockquote><hr><p>C++ 类的构造函数和析构函数可以在类的定义外部进行定义和实现。这样做的目的是将类的声明和实现分离，使代码更加清晰和可维护。</p><p><strong>构造函数和析构函数的定义和实现可以放在类的定义之后的任何地方，通常会放在类的定义之后的源文件中。</strong></p><p>以下是一个示例：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyClass.h 头文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> privateMember;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyClass</span>(); <span class="comment">// 构造函数的声明</span></span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">MyClass</span>(); <span class="comment">// 析构函数的声明</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">someMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MyClass.cpp 源文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyClass.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyClass::<span class="built_in">MyClass</span>() &#123;</span><br><span class="line">    <span class="comment">// 构造函数的实现</span></span><br><span class="line">    privateMember = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass::~<span class="built_in">MyClass</span>() &#123;</span><br><span class="line">    <span class="comment">// 析构函数的实现</span></span><br><span class="line">    <span class="comment">// 可以进行资源的释放等清理工作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyClass::someMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 方法的实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>MyClass</code> 类的构造函数和析构函数的声明放在了头文件 <code>MyClass.h</code> 中，而定义和实现则放在了源文件 <code>MyClass.cpp</code> 中。这样可以使类的接口和实现分离，提高代码的可读性和可维护性。</p><p><strong>如果构造函数和析构函数的定义和实现在类的定义内部，编译器会隐式地将它们声明为内联函数。</strong>而将它们定义在类的定义外部时，不会自动成为内联函数，需要显式地在定义中加上 <code>inline</code> 关键字来指示编译器将其作为内联函数处理。</p><blockquote><p><strong>当编译器将函数的定义插入到调用它的地方时，这被称为内联展开</strong>。相比于生成函数调用，内联展开具有以下优点和缺点：</p><p>优点：</p><ol><li><strong>减少函数调用的开销</strong>：函数调用涉及到保存和恢复寄存器、跳转到函数代码、返回地址等操作，这些操作会消耗一定的时间和空间。通过内联展开，可以避免这些开销，从而提高程序的执行效率。</li><li><strong>优化循环和递归</strong>：内联展开可以优化循环和递归函数的性能。将循环或递归函数内联展开，可以减少函数调用的次数，避免重复的栈帧创建和销毁，从而加快循环或递归的执行速度。</li><li><strong>提高编译器优化的机会</strong>：内联展开可以<strong>提供更多的代码上下文信息给编译器</strong>，使其有更多的优化机会。例如，编译器可以进行常量折叠、循环展开、代码复制等优化，从而进一步提高程序的执行效率。</li></ol><p>缺点：</p><ol><li><strong>增加代码的体积</strong>：内联展开会将函数的定义插入到调用它的地方，这会增加代码的体积。如果函数体很大，内联展开可能会导致代码膨胀，<strong>增加可执行文件的大小。</strong></li><li>增加编译时间：内联展开会增加编译器的工作量，因为编译器需要将函数的定义插入到每个调用它的地方。<strong>如果程序中有大量的函数调用，内联展开可能会导致编译时间的增加。</strong></li><li>可读性下降：内联展开会使代码变得更加冗长，可读性可能会下降。特别是对于复杂的函数体，将其内联展开可能会使代码难以理解和维护。</li></ol><p>综上所述，<strong>内联展开可以提高程序的执行效率，特别是对于频繁调用的小型函数和循环或递归函数。</strong>然而，内联展开也会增加代码的体积和编译时间，并可能降低代码的可读性。因此，在使用内联展开时需要权衡这些优缺点，并根据具体的情况进行选择。</p></blockquote><hr><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;我是构造函数，调用对象前会自动执行，只执行一次，没有返回值也不写void，可以有参数也就说我一般用于创建对象的同时对其成员进行赋值&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~<span class="built_in">Person</span>()&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;我是析构函数，对象销毁前会被自动执行，没有返回值也不写void，不可以有参数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Person p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;begin&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;end&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//begin</span></span><br><span class="line"><span class="comment">//我是构造函数，调用对象前会自动执行，只执行一次，没有返回值也不写void，可以有参数也就说我一般用于创建对象的同时对其成员进行赋值</span></span><br><span class="line"><span class="comment">//我是析构函数，对象销毁前会被自动执行，没有返回值也不写void，不可以有参数</span></span><br><span class="line"><span class="comment">//end</span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-构造函数的分类及调用"><a href="#4-2-2-构造函数的分类及调用" class="headerlink" title="4.2.2 构造函数的分类及调用"></a>4.2.2 构造函数的分类及调用</h4><p>两种分类方式：</p><p>​按参数分为： 无参构造和有参构造</p><p>​按类型分为： 普通构造（简单的有参无参）和拷贝构造</p><p>三种调用方式：</p><p>​括号法</p><p>​显示法</p><p>​隐式转换法</p><hr><p><strong>注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</strong></p><hr><blockquote><p>C++ 中的构造函数可以分为以下几种类型：</p><ol><li><p>无参构造(默认构造)（Default Constructor）：没有参数的构造函数。如果一个类没有定义任何构造函数，编译器会自动生成一个默认构造函数。默认构造函数用于创建对象时不需要提供任何参数。</p></li><li><p>有参构造（Parameterized Constructor）：带有参数的构造函数，可以在<strong>创建对象时传递参数来初始化对象的成员变量。</strong></p></li><li><p>拷贝构造函数（Copy Constructor）：*<em>用于创建一个新对象并将其初始化为已有对象的副本。</em>**<em>拷贝构造函数的参数是 &gt; <strong>同类型的对象的引用</strong></em>*。</p></li><li><p>深拷贝构造函数（Move Constructor）：用于将一个对象的资源（如动态分配的内存）转移到另一个对象中，通常用于提高程序的性能。</p></li></ol><p>构造函数的调用方式有以下几种：</p><ol><li><p>直接调用：通过类名和参数列表直接调用构造函数来创建对象。例如：<code>MyClass obj(10);</code></p></li><li><p>隐式调用：在不显式调用构造函数的情况下，使用类的对象声明来创建对象。例如：<code>MyClass obj = 10;</code></p></li><li><p>拷贝初始化：使用一个已存在的对象来初始化新对象，会调用拷贝构造函数。例如：<code>MyClass obj2 = obj1;</code></p></li><li><p>动态创建对象：使用 <code>new</code> 运算符在堆上动态创建对象，会调用构造函数。例如：<code>MyClass* ptr = new MyClass();</code></p></li></ol><p>需要注意的是，<strong>构造函数在对象创建时自动调用，无法手动调用构造函数来重新初始化已经存在的对象</strong>。构造函数的调用顺序是<strong>先调用基类的构造函数，再调用成员对象的构造函数，最后调用派生类的构造函数</strong>。析构函数的调用顺序与构造函数相反，先调用派生类的析构函数，再调用成员对象的析构函数，最后调用基类的析构函数。</p></blockquote><p>推荐使用括号</p><p>了解匿名对象</p><p>有参构造函数直接Person（10）的时候创了一个匿名对象。</p><p>相当于没人接受这个对象。</p><p>要想利用拷贝构造函数，先有一个自己同类型的对象，然后再以引用的形式传入就ok了</p><img src="/xu-runbo/post/a77e947a/image-20230726211121976.png" class="" title="image-20230726211121976"><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、构造函数分类</span></span><br><span class="line"><span class="comment">// 按照参数分类分为 有参和无参构造   无参又称为默认构造函数</span></span><br><span class="line"><span class="comment">// 按照类型分类分为 普通构造和拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//无参（默认）构造函数</span></span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> a) &#123;</span><br><span class="line">age = a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">age = p.age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、构造函数的调用</span></span><br><span class="line"><span class="comment">//调用无参构造函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person p; <span class="comment">//调用无参构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用有参的构造函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.1  括号法，常用</span></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//注意1：调用无参构造函数不能加括号，如果加了编译器认为这是一个函数声明</span></span><br><span class="line"><span class="comment">//Person p2();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.2 显式法</span></span><br><span class="line">Person p2 = <span class="built_in">Person</span>(<span class="number">10</span>); </span><br><span class="line">Person p3 = <span class="built_in">Person</span>(p2);</span><br><span class="line"><span class="comment">//Person(10)单独写就是匿名对象  当前行结束之后，马上析构，直接构造析构然后立马销毁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.3 隐式转换法</span></span><br><span class="line">Person p4 = <span class="number">10</span>; <span class="comment">// Person p4 = Person(10); </span></span><br><span class="line">Person p5 = p4; <span class="comment">// Person p5 = Person(p4); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意2：不能利用 拷贝构造函数 初始化匿名对象 编译器认为是对象声明</span></span><br><span class="line"><span class="comment">//Person p5(p4);</span></span><br><span class="line">    <span class="comment">///数声明和对象定义的语法非常相似，都可以使用括号来表示。</span></span><br><span class="line">    <span class="comment">//使用额外的括号：可以在匿名对象的括号外面再加一对括号，这样编译器就不会将其解释为函数声明。</span></span><br><span class="line"><span class="comment">//MyClass obj((MyClass())); // 使用括号明确告诉编译器我们要定义一个对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-拷贝构造函数调用时机"><a href="#4-2-3-拷贝构造函数调用时机" class="headerlink" title="4.2.3 拷贝构造函数调用时机"></a>4.2.3 拷贝构造函数调用时机</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">mAge = p.mAge;</span><br><span class="line">默认的简单拷贝</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++中拷贝构造函数调用时机通常有三种情况</p><ul><li>使用一个已经创建完毕的对象来初始化一个新对象</li><li><strong>值传递</strong>的方式给函数参数传值</li><li>以<strong>值方式</strong>返回局部对象</li></ul><blockquote><ol><li><p><code>Person newman3 = man;</code> 和 <code>Person newman3; newman3 = man;</code> 是有区别的。</p><ol><li><code>Person newman3 = man;</code> 使用<strong>拷贝初始化的方式创建了一个新的对象</strong> <code>newman3</code>，并将 <code>man</code> 对象的值复制给 <code>newman3</code>。这里会<strong>调用拷贝构造函数来完成对象的复制初始化。</strong></li><li>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</li><li><code>Person newman3; newman3 = man;</code> 首先创建了一个新的对象 <code>newman3</code>，但它<strong>是通过默认构造函数创建的</strong>，并不包含任何数据。然后，通<strong>过赋值操作符 <code>=</code> 将 <code>man</code> 对象的值赋给了 <code>newman3</code><strong>。这里会调用</strong>赋值运算符重载函数来完成对象的赋值操作。</strong></li></ol><p>总体来说，两种形式都会将 <code>man</code> 对象的值复制到 <code>newman3</code> 对象中，但是在实现细节上有所不同。<strong>拷贝初始化会调用拷贝构造函数</strong>，<strong>而赋值操作会调用赋值运算符重载函数</strong>。在某些情况下，拷贝构造函数和赋值运算符重载函数的实现可能会有差异，因此两种形式可能具有不同的行为。<strong>在一般情况下</strong>，如果需要创建并初始化一个新对象，<strong>建议使用拷贝初始化的方式</strong>，而不是先创建对象再赋值的方式。</p></li><li><p><strong>值传递是指将实参的值</strong>复制一份传递给函数的形参。<strong>在函数调用时，会创建一个新的变量（形参），并将实参的值复制到形参中。</strong>&#x3D;&#x3D;在函数内部，对形参的修改不会影响到实参的值。&#x3D;&#x3D;当函数执行完毕后，形参的生命周期结束<strong>，它所占用的内存会被释放。</strong></p><p>text02()在你的例子中，<code>doWork</code> 函数的形参 <code>p1</code> 是通过值传递的方式进行传递的。当你调用 <code>doWork(p)</code> 时，会创建一个新的 <code>Person</code> 对象 <code>p1</code>，并将 <code>p</code> 对象的值复制给 <code>p1</code>。</p></li><li><p>可以以值方式返回<strong>局部对象</strong>。当函数返回一个对象时，编<strong><em>译器会执行对象的拷贝构造函数来创建一个临时对象，并将其作为返回值</em>。这个临时对象是在函数调用栈上分配的</strong>，<strong>它的生命周期与函数的返回值绑定。</strong></p><p>&#x2F;&#x2F;</p><p><strong>假如说我用a来接受这个局部对象，那么这个临时对象将会在a的销毁的时候同时销毁</strong></p><img src="/xu-runbo/post/a77e947a/image-20230727153838243.png" class="" title="image-20230727153838243"></li></ol></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">mAge = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">mAge = p.mAge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数在释放内存之前调用</span></span><br><span class="line">~<span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 使用一个已经创建完毕的对象来初始化一个新对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">man</span><span class="params">(<span class="number">100</span>)</span></span>; <span class="comment">//p对象已经创建完毕</span></span><br><span class="line"><span class="function">Person <span class="title">newman</span><span class="params">(man)</span></span>; <span class="comment">//调用拷贝构造函数</span></span><br><span class="line">Person newman2 = man; <span class="comment">//拷贝构造</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person newman3;</span></span><br><span class="line"><span class="comment">//newman3 = man; //不是调用拷贝构造函数，赋值操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 值传递的方式给函数参数传值</span></span><br><span class="line"><span class="comment">//相当于Person p1 = p;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">doWork</span><span class="params">(Person p1)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person p; <span class="comment">//无参构造函数</span></span><br><span class="line"><span class="built_in">doWork</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 以值方式返回局部对象</span></span><br><span class="line"><span class="function">Person <span class="title">doWork2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p1;</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span> *)&amp;p1 &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> p1;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//此时return *this;也会拷贝一个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person p = <span class="built_in">doWork2</span>();</span><br><span class="line">cout &lt;&lt; (<span class="type">int</span> *)&amp;p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test01();</span></span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line"><span class="built_in">test03</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-4-构造函数调用规则"><a href="#4-2-4-构造函数调用规则" class="headerlink" title="4.2.4 构造函数调用规则"></a>4.2.4 构造函数调用规则</h4><p>默认情况下，创建一个类的时候，c++编译器至少给一个类添加3个函数,</p><p>1．默认构造函数(无参，函数体为空)</p><p>2．默认析构函数(无参，函数体为空)</p><p>3．默认拷贝构造函数，对属性进行值拷贝</p><p>构造函数调用规则如下：</p><ul><li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p></li><li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p></li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//无参（默认）构造函数</span></span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> a) &#123;</span><br><span class="line">age = a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; p) &#123;</span><br><span class="line">age = p.age;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"><span class="comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//如果用户提供有参构造，编译器不会提供默认构造，会提供拷贝构造</span></span><br><span class="line">Person p1; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//用户提供的有参</span></span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(p2)</span></span>; <span class="comment">//此时如果用户没有提供拷贝构造，编译器会提供</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果用户提供拷贝构造，编译器不会提供其他构造函数</span></span><br><span class="line">Person p4; <span class="comment">//此时如果用户自己没有提供默认构造，会出错</span></span><br><span class="line"><span class="function">Person <span class="title">p5</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//此时如果用户自己没有提供有参，会出错</span></span><br><span class="line"><span class="function">Person <span class="title">p6</span><span class="params">(p5)</span></span>; <span class="comment">//用户自己提供拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line">    <span class="comment">//如果不写拷贝构造，编译器会自动添加拷贝构造，并且做浅拷贝操作</span></span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;p2的年龄为： &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;<span class="comment">//18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-5-深拷贝与浅拷贝"><a href="#4-2-5-深拷贝与浅拷贝" class="headerlink" title="4.2.5 深拷贝与浅拷贝"></a>4.2.5 深拷贝与浅拷贝</h4><p><strong>深浅拷贝是面试经典问题，也是常见的一个坑</strong></p><p>浅拷贝：<strong>简单的赋值拷贝操作</strong>  编译器提供的那个拷贝构造函数，浅拷贝</p><p>深拷贝：<strong>在堆区重新申请空间，进行拷贝操作</strong></p><img src="/xu-runbo/post/a77e947a/image-20230727164829489.png" class="" title="image-20230727164829489"><p><strong>这是编译器帮忙写的浅拷贝</strong></p><img src="/xu-runbo/post/a77e947a/image-20230727172119889.png" class="" title="image-20230727172119889"><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//无参（默认）构造函数</span></span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;无参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age, <span class="type">int</span> height) &#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">m_age = age;</span><br><span class="line">m_height = <span class="keyword">new</span> <span class="built_in">int</span>(height);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数  </span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> Person&amp; a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_age = a.m_age;</span><br><span class="line"><span class="comment">//m_height = a.m_height;</span></span><br><span class="line"><span class="comment">//利用拷贝对象的数据来开辟一个新的空间。</span></span><br><span class="line">m_height = <span class="keyword">new</span> <span class="built_in">int</span>(*a.m_height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">Person</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (m_height != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_height;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_age;</span><br><span class="line"><span class="type">int</span>* m_height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>, <span class="number">160</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(p1)</span></span>;</span><br><span class="line"><span class="comment">//Person p2 = p1;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1的年龄： &quot;</span> &lt;&lt; p1.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p1.m_height &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2的年龄： &quot;</span> &lt;&lt; p2.m_age &lt;&lt; <span class="string">&quot; 身高： &quot;</span> &lt;&lt; *p2.m_height &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：<strong>如果属性有在堆区开辟的，一定要自己提供拷贝构造函数，防止浅拷贝带来的问题</strong></p></blockquote><ol><li><p>自己写拷贝构造函数，用拷贝对象的数据来开辟对应的空间</p></li><li><pre><code class="c++">//拷贝构造函数  Person(const Person&amp; a)&#123;    cout &lt;&lt; &quot;拷贝构造函数&quot; &lt;&lt; endl;    m_age = a.m_age;    //m_height = a.m_height;    //利用拷贝对象的数据来开辟一个新的空间。    m_height = new int(*a.m_height);&#125;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 析构函数PLUS！</span><br><span class="line"></span><br><span class="line">4. ```c++</span><br><span class="line">   //析构函数</span><br><span class="line">   ~Person() &#123;</span><br><span class="line">   cout &lt;&lt; &quot;析构函数!&quot; &lt;&lt; endl;</span><br><span class="line">   if (m_height != NULL)</span><br><span class="line">   &#123;</span><br><span class="line">   delete m_height;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol><p>只有new出来的空间才能用delete，而且只能delete一次！</p><h4 id="4-2-6-初始化列表"><a href="#4-2-6-初始化列表" class="headerlink" title="4.2.6 初始化列表"></a>4.2.6 初始化列表</h4><p><strong>作用：</strong></p><p>C++提供了初始化列表语法，用来初始化属性</p><p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p><p><code>//初始化列表方式初始化</code></p><p><code>Person(int a, int b, int c) :m_A(a), m_B(b), m_C(c)&#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">////传统方式初始化</span></span><br><span class="line"><span class="comment">//Person(int a, int b, int c) &#123;</span></span><br><span class="line"><span class="comment">//m_A = a;</span></span><br><span class="line"><span class="comment">//m_B = b;</span></span><br><span class="line"><span class="comment">//m_C = c;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化列表方式初始化</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c) :<span class="built_in">m_A</span>(a), <span class="built_in">m_B</span>(b), <span class="built_in">m_C</span>(c) &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;mB:&quot;</span> &lt;&lt; m_B &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;mC:&quot;</span> &lt;&lt; m_C &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line">p.<span class="built_in">PrintPerson</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-7-类对象作为类成员"><a href="#4-2-7-类对象作为类成员" class="headerlink" title="&#x3D;&#x3D;4.2.7 类对象作为类成员&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.2.7 类对象作为类成员&#x3D;&#x3D;</h4><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">    A a；</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>B类中有对象A作为成员，A为对象成员</p><p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p><blockquote><p><strong>&#x2F;&#x2F;构造的顺序是 ：先调用<em>对象成员</em>的构造，再调用本类构造</strong><br><strong>&#x2F;&#x2F;析构顺序与构造相反</strong></p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Phone</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">m_PhoneName = name;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Phone构造&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Phone</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Phone析构&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string m_PhoneName;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化列表可以告诉编译器调用哪一个构造函数</span></span><br><span class="line"><span class="built_in">Person</span>(string name, string pName) :<span class="built_in">m_Name</span>(name), <span class="built_in">m_Phone</span>(pName)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person构造&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Person析构&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">playGame</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; m_Name &lt;&lt; <span class="string">&quot; 使用&quot;</span> &lt;&lt; m_Phone.m_PhoneName &lt;&lt; <span class="string">&quot; 牌手机! &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string m_Name;</span><br><span class="line">Phone m_Phone;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//当类中成员是其他类对象时，我们称该成员为 对象成员</span></span><br><span class="line"><span class="comment">//构造的顺序是 ：先调用对象成员的构造，再调用本类构造</span></span><br><span class="line"><span class="comment">//析构顺序与构造相反</span></span><br><span class="line"><span class="function">Person <span class="title">p</span><span class="params">(<span class="string">&quot;张三&quot;</span> , <span class="string">&quot;苹果X&quot;</span>)</span></span>;</span><br><span class="line">p.<span class="built_in">playGame</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>();</span><br><span class="line">~<span class="built_in">Son</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Father</span>();</span><br><span class="line">~<span class="built_in">Father</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Son* a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Father::<span class="built_in">Father</span>()</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="keyword">new</span> Son;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父亲被构造了&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Father::~<span class="built_in">Father</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父亲被析构了&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son::<span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;儿子被构造了&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son::~<span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;儿子被析构了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Father father;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>();</span><br><span class="line">~<span class="built_in">Son</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Father</span>();</span><br><span class="line">~<span class="built_in">Father</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Son a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Father::<span class="built_in">Father</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父亲被构造了&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Father::~<span class="built_in">Father</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父亲被析构了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son::<span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;儿子被构造了&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Son::~<span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;儿子被析构了&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Father father;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这两种都是先构造儿子后构造父亲，析构相反</strong></p><p><strong>只有在父亲的构造函数里面再栈区开辟一个儿子对象的时候才是先构造父亲，然后构造儿子，其他相反</strong></p><h4 id="4-2-8-静态成员"><a href="#4-2-8-静态成员" class="headerlink" title="4.2.8 静态成员"></a>4.2.8 静态成员</h4><p><strong>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员</strong></p><p>—————————————-<em>可以通过类名访问静态成员</em>————————————————-</p><p><strong><em>静态成员分为</em>：</strong></p><ul><li><strong>静态成员变量</strong><ul><li><strong>所有对象共享同一份数据</strong></li><li><strong>在编译阶段分配内存</strong>（全局区运行前）</li><li><strong>类内声明，类外初始化</strong>（记得加作用域！！！！）</li></ul></li><li><strong>静态成员函数</strong><ul><li><strong>所有对象共享同一个函数</strong></li><li><strong>静态成员函数只能访问静态成员变量</strong></li></ul></li></ul><blockquote><p><strong>静态成员变量也有私有的时候。外部不能直接访问</strong></p><p><strong>可以通过类名访问静态成员</strong></p><p><strong>普通的成员public变量不可以直接用类名：：变量名访问！！！</strong></p></blockquote><p><strong>示例1 ：</strong>静态成员变量</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员变量特点：</span></span><br><span class="line"><span class="comment">//1 在编译阶段分配内存</span></span><br><span class="line"><span class="comment">//2 类内声明，类外初始化</span></span><br><span class="line"><span class="comment">//3 所有对象共享同一份数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_B; <span class="comment">//静态成员变量也是有访问权限的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> Person::m_B = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、通过对象</span></span><br><span class="line">Person p1;</span><br><span class="line">p1.m_A = <span class="number">100</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">Person p2;</span><br><span class="line">p2.m_A = <span class="number">200</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl; <span class="comment">//共享同一份数据</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、通过类名</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong>静态成员函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员函数特点：</span></span><br><span class="line"><span class="comment">//1 程序共享一个函数</span></span><br><span class="line"><span class="comment">//2 静态成员函数只能访问静态成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_A = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//静态static成员函数它只属于类本身不属于每一个对象实例，独立存在。非静态成员，仅当实例化对象之后才存在。静态成员函数产生在前，非静态成员函数产生在后，静态函数无法访问一个不存在的东西。也就是静态成员函数离不能用this指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A; <span class="comment">//静态成员变量</span></span><br><span class="line"><span class="type">int</span> m_B; <span class="comment">// </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态成员函数也是有访问权限的</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func2调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> Person::m_A = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//静态成员变量两种访问方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、通过对象</span></span><br><span class="line">Person p1;</span><br><span class="line">p1.<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、通过类名</span></span><br><span class="line">Person::<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Person::func2(); //私有权限访问不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-C-对象模型和this指针"><a href="#4-3-C-对象模型和this指针" class="headerlink" title="4.3 C++对象模型和this指针"></a>4.3 C++对象模型和this指针</h3><h4 id="4-3-1-成员变量和成员函数分开存储"><a href="#4-3-1-成员变量和成员函数分开存储" class="headerlink" title="4.3.1 成员变量和成员函数分开存储"></a>4.3.1 成员变量和成员函数分开存储</h4><p>在C++中，<strong>类内的成员变量和成员函数分开存储</strong></p><p>只有<strong>非静态成员变量才属于类的对象上</strong></p><blockquote><h5 id="只有非静态成员变量在真正属于类！！！！！"><a href="#只有非静态成员变量在真正属于类！！！！！" class="headerlink" title="只有非静态成员变量在真正属于类！！！！！"></a>只有非静态成员变量在真正属于类！！！！！</h5><h5 id="空对象占用1字节，为了区分空对象。"><a href="#空对象占用1字节，为了区分空对象。" class="headerlink" title="空对象占用1字节，为了区分空对象。"></a>空对象占用1字节，为了区分空对象。</h5><h5 id="也就是类的大小是根据非静态成员变量的"><a href="#也就是类的大小是根据非静态成员变量的" class="headerlink" title="也就是类的大小是根据非静态成员变量的"></a>也就是类的大小是根据非静态成员变量的</h5></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">mA = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非静态成员变量占对象空间</span></span><br><span class="line"><span class="type">int</span> mA;</span><br><span class="line"><span class="comment">//静态成员变量不占对象空间</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> mB;</span><br><span class="line"><span class="comment">//函数也不占对象空间，所有函数共享一个函数实例</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;mA:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;mA &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态成员函数也不占对象空间</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">sfunc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(Person) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-this指针概念"><a href="#4-3-2-this指针概念" class="headerlink" title="4.3.2 this指针概念"></a>4.3.2 this指针概念</h4><p>通过4.3.1我们知道在C++中成员变量和成员函数是分开存储的</p><p>每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码</p><p>那么问题是：这一块代码是如何区分那个对象调用自己的呢？</p><p>c++通过提供特殊的对象指针，this指针，解决上述问题。<em><strong>this指针指向被调用的成员函数所属的对象</strong></em></p><blockquote><p><strong>this指针是隐含每一个非静态成员函数内的一种指针</strong></p><p><strong>this指针不需要定义，直接使用即可</strong></p><p><strong>静态成员函数没有this指针</strong></p><p>本质是指针常量！！！，已经指向了a，不可以修改指向，但可以修改值</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showperson</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_a = <span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Person a;</span><br><span class="line">a.<span class="built_in">showperson</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>this指针的用途：</p><ul><li>当形参和成员变量同名时，可用this指针来区分</li><li>*<em>在类的非静态成员函数中返回对象本身，可使用return <em>this</em></em></li></ul><h5 id="链式编程思想！！！"><a href="#链式编程思想！！！" class="headerlink" title="&#x3D;&#x3D;链式编程思想！！！&#x3D;&#x3D;"></a>&#x3D;&#x3D;<strong>链式编程思想！！！</strong>&#x3D;&#x3D;</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Person&amp; <span class="title">PersonAddPerson</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;age += p.age;</span><br><span class="line"><span class="comment">//返回对象本身</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="comment">///////////////////////////////////////////////////////////////</span></span><br><span class="line">p2.<span class="built_in">PersonAddPerson</span>(p1).<span class="built_in">PersonAddPerson</span>(p1).<span class="built_in">PersonAddPerson</span>(p1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-3-空指针访问成员函数"><a href="#4-3-3-空指针访问成员函数" class="headerlink" title="4.3.3 空指针访问成员函数"></a>4.3.3 空指针访问成员函数</h4><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p><p>如果用到this指针，需要加以判断保证代码的健壮性</p><blockquote><p>类类型的指针，在成员里this就是指针。</p></blockquote><p>但不能用空指针访问里面的属性，可以用函数。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showperosn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我是person类&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showpp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//代码健壮！！！</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sdadasdassdasdasdasdsda&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person* p = <span class="literal">NULL</span>;</span><br><span class="line">p-&gt;<span class="built_in">showperosn</span>(); <span class="comment">//空指针，可以调用成员函数</span></span><br><span class="line">p-&gt;<span class="built_in">showpp</span>(); <span class="comment">//但是如果成员函数中用到了this指针，就不可以了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-4-const修饰成员函数"><a href="#4-3-4-const修饰成员函数" class="headerlink" title="4.3.4 const修饰成员函数"></a>4.3.4 const修饰成员函数</h4><p><strong>常函数：</strong></p><blockquote><ul><li><strong>成员函数后</strong>加const后我们称为这个函数为<strong>常函数</strong></li><li><strong>常函数内不可以修改成员属性</strong></li><li><strong>成员属性声明时加关键字mutable后，在常函数中依然可以修改</strong></li></ul></blockquote><p><strong>常对象：</strong></p><ul><li><strong>声明对象前加const称该对象为常对象</strong></li><li><strong>常对象只能调用常函数</strong></li><li><strong>常对象可以修改静态变量的值</strong></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123;</span><br><span class="line">m_A = <span class="number">0</span>;</span><br><span class="line">m_B = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//this指针的本质是一个指针常量，指针的指向不可修改</span></span><br><span class="line"><span class="comment">//如果想让指针指向的值也不可以修改，需要声明常函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowPerson</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="comment">//const Type* const pointer;</span></span><br><span class="line"><span class="comment">//this = NULL; //不能修改指针的指向 Person* const this;</span></span><br><span class="line"><span class="comment">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_B = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyFunc</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="comment">//mA = 10000;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> m_B; <span class="comment">//可修改 可变的</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰对象  常对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> Person person; <span class="comment">//常量对象  </span></span><br><span class="line">cout &lt;&lt; person.m_A &lt;&lt; endl;</span><br><span class="line"><span class="comment">//person.mA = 100; //常对象不能修改成员变量的值,但是可以访问</span></span><br><span class="line">person.m_B = <span class="number">100</span>; <span class="comment">//但是常对象可以修改mutable修饰成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常对象访问成员函数</span></span><br><span class="line">person.<span class="built_in">MyFunc</span>(); <span class="comment">//常对象不能调用const的函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-友元"><a href="#4-4-友元" class="headerlink" title="4.4 友元"></a>4.4 友元</h3><p>生活中你的家有客厅(Public)，有你的卧室(Private)</p><p>客厅所有来的客人都可以进去，但是你的卧室是私有的，也就是说只有你能进去</p><p>但是呢，你也可以允许你的好闺蜜好基友进去。</p><p>在程序里，有些私有属性 也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术</p><p>友元的目的就是<strong>让一个函数或者类 访问另一个类中私有成员</strong></p><p>友元的关键字为  &#x3D;&#x3D;friend&#x3D;&#x3D;</p><p>友元的三种实现</p><ul><li>全局函数做友元</li><li>类做友元</li><li>成员函数做友元</li></ul><h4 id="4-4-1-全局函数做友元"><a href="#4-4-1-全局函数做友元" class="headerlink" title="4.4.1 全局函数做友元"></a>4.4.1 全局函数做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">building</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">goodgay</span><span class="params">(building* building)</span></span>;<span class="comment">//写在类里面就ok，最好在上面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">building</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_sittingrom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">m_bedroom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_sittingrom;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_bedroom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodgay</span><span class="params">(building* building)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友 全局函数正在访问:&quot;</span> &lt;&lt;building-&gt;m_sittingrom&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友 全局函数正在访问:&quot;</span> &lt;&lt; building-&gt;m_bedroom&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">text01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">building b;</span><br><span class="line"><span class="built_in">goodgay</span>(&amp;b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">text01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-2-类做友元"><a href="#4-4-2-类做友元" class="headerlink" title="4.4.2 类做友元"></a>4.4.2 类做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">goodGay</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">goodGay</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Building *building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">goodGay</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Building</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Building::<span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">goodGay::<span class="built_in">goodGay</span>()</span><br><span class="line">&#123;</span><br><span class="line">building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">goodGay gg;</span><br><span class="line">gg.<span class="built_in">visit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-3-成员函数做友元"><a href="#4-4-3-成员函数做友元" class="headerlink" title="4.4.3 成员函数做友元"></a>4.4.3 成员函数做友元</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span>;</span><br><span class="line"><span class="comment">//你可以在goodGay类的定义之前提供一个Building类的前向声明来解决编译错误。</span></span><br><span class="line"><span class="comment">//但是，在这种情况下，你不能直接在goodGay类的构造函数中使用new来创建Building对象，因为编译器仍然无法识别Building类的具体定义。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">goodGay</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">goodGay</span>();</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">visit2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Building* building;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Building</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">goodGay</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Building</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_SittingRoom = <span class="string">&quot;客厅&quot;</span>;</span><br><span class="line">m_BedRoom = <span class="string">&quot;卧室&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string m_SittingRoom; <span class="comment">//客厅</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_BedRoom;<span class="comment">//卧室</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodGay::visit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">goodGay::visit2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line">goodGay::<span class="built_in">goodGay</span>()</span><br><span class="line">&#123;</span><br><span class="line">building = <span class="keyword">new</span> Building;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">goodGay gg;</span><br><span class="line">gg.<span class="built_in">visit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-运算符重载"><a href="#4-5-运算符重载" class="headerlink" title="4.5 运算符重载"></a>4.5 运算符重载</h3><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h4 id="4-5-1-加号运算符重载"><a href="#4-5-1-加号运算符重载" class="headerlink" title="4.5.1 加号运算符重载"></a>4.5.1 加号运算符重载</h4><p>作用：实现两个自定义数据类型相加的运算</p><blockquote><p>通过成员函数重载</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class person</span><br><span class="line">&#123;</span><br><span class="line">public: </span><br><span class="line">person(int a, int b)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;m_a = a;</span><br><span class="line">this-&gt;m_b = b;</span><br><span class="line">&#125;</span><br><span class="line">person operator+(person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">person p3(0, 0);</span><br><span class="line">p3.m_a = this-&gt;m_a + p.m_a;</span><br><span class="line">p3.m_b = this-&gt;m_b + p.m_b;</span><br><span class="line">return p3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">int m_a;</span><br><span class="line">int m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">person p1(10, 10);</span><br><span class="line">person p2(20, 20);</span><br><span class="line">person p3=p1+(p2);</span><br><span class="line">cout &lt;&lt; p3.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;_------------------&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3.m_b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过全局函数重载</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line"><span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//person fucn(person&amp; p1, person&amp; p2)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//person p3(0,0);</span></span><br><span class="line"><span class="comment">//p3.m_a = p1.m_a + p2.m_a;</span></span><br><span class="line"><span class="comment">//p3.m_b = p3.m_b + p2.m_b;</span></span><br><span class="line"><span class="comment">//return p3;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">person <span class="keyword">operator</span>+(person&amp; p1, person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">person <span class="title">p3</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">p3.m_a = p1.m_a + p2.m_a;</span><br><span class="line">p3.m_b = p1.m_b + p2.m_b;</span><br><span class="line"><span class="keyword">return</span> p3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="number">20</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//person p3 = func(p1, p2);</span></span><br><span class="line">    <span class="comment">//可以简写为这样！</span></span><br><span class="line">person p3 = p1 + p2;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; p3.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;_------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3.m_b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>运算符对应的函数重载</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line"><span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person <span class="keyword">operator</span>+(person&amp; p1, person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">person <span class="title">p3</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">p3.m_a = p1.m_a + p2.m_a;</span><br><span class="line">p3.m_b = p1.m_b + p2.m_b;</span><br><span class="line"><span class="keyword">return</span> p3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person <span class="keyword">operator</span>+(person&amp; p1, <span class="type">int</span> num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">person <span class="title">p3</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">p3.m_a = p1.m_a + num;</span><br><span class="line">p3.m_b = p1.m_b + num;</span><br><span class="line"><span class="keyword">return</span> p3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="number">20</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//person p3 = operator+(p1, p2);</span></span><br><span class="line">person p3 = p1 + p2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在如果</span></span><br><span class="line">person p4 = p1 + <span class="number">100</span>;<span class="comment">//person + int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; p3.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p3.m_b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;_------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p4.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; p4.m_b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>通过成员函数或者全局函数写一个目标重载运算符的作用函数,然后把函数的名字改为operator+就可以说使用+号来重载了</li><li>不把函数名改写为operator+之前的加号还默认是原来的样子!!!!</li><li>熟练之后直接函数名字就是operator+</li><li>如果二者同时存在的时候就会报错</li></ol></blockquote><blockquote><p>总结1：对于<strong>内置的数据类型</strong>的表达式的的运算符是不可能改变的1+1&#x3D;2,变成1+1&#x3D;0?不可以</p></blockquote><blockquote><p>总结2：不要滥用运算符重载,加号运算符重载,实现就不要用减号..</p></blockquote><h4 id="4-5-2-左移运算符重载"><a href="#4-5-2-左移运算符重载" class="headerlink" title="&#x3D;&#x3D;4.5.2 左移运算符重载&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.5.2 左移运算符重载&#x3D;&#x3D;</h4><p>作用：可以输出自定义数据类型</p><p>加个cosnt最好，引用作为函数参数传递的时候不修改最好加上cosnt！！！！！！！！！</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p) <span class="comment">//本质operator&lt;&lt;(cout,p) 简化cout&lt;&lt;p;</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a ;</span><br><span class="line">cout &lt;&lt; p.m_b;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//链式思想,返回cout对应的</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="type">const</span> person&amp; p) <span class="comment">//本质operator&lt;&lt;(cout,p) 简化cout&lt;&lt;p;</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a ;</span><br><span class="line">cout &lt;&lt; p.m_b;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也是ok的因为,引用本来就是起别名,而真正传入的实参确实cout所以</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_A = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_B = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数 实现不了  p &lt;&lt; cout 不是我们想要的效果</span></span><br><span class="line"><span class="comment">//void operator&lt;&lt;(Person&amp; p)&#123;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数实现左移重载</span></span><br><span class="line"><span class="comment">//ostream对象只能有一个,所以要用引用的形式修改,否则覆盖不了原来的cout</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, Person&amp; p) &#123;</span><br><span class="line">out &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; p.m_A &lt;&lt; <span class="string">&quot; b:&quot;</span> &lt;&lt; p.m_B;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; p1 &lt;&lt; <span class="string">&quot;hello world&quot;</span> &lt;&lt; endl; <span class="comment">//链式编程</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结<strong>：重载左移运算符配合友元可以实现输出自定义数据类型</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, person&amp; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(<span class="type">int</span> a,<span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_b = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout对象和我的p对象</span></span><br><span class="line"><span class="comment">//void operator&lt;&lt;(cout)  // p.operator&lt;&lt;(cout)  简化为p&lt;&lt;cout</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line"><span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, person&amp; p) <span class="comment">//本质operator&lt;&lt;(cout,p) 简化cout&lt;&lt;p;</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a ;</span><br><span class="line">cout &lt;&lt; p.m_b;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">person <span class="title">p</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; p &lt;&lt; endl &lt;&lt; <span class="string">&quot;helloworld&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-3-递增运算符重载"><a href="#4-5-3-递增运算符重载" class="headerlink" title="4.5.3 递增运算符重载"></a>4.5.3 递增运算符重载</h4><p>作用： 通过重载递增运算符，实现自己的整型数据</p><p>但用引用可以节省空间，而且不怕拷贝函数有错误。</p><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">MyClass&amp; <span class="keyword">operator</span>++() &#123;  <span class="comment">// 前置递增运算符重载</span></span><br><span class="line">  <span class="comment">// 执行递增操作</span></span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;  <span class="comment">// 返回递增后的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;  <span class="comment">// 后置递增运算符重载</span></span><br><span class="line">  MyClass temp = *<span class="keyword">this</span>;  <span class="comment">// 创建一个临时对象保存当前对象的值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行递增操作</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> temp;  <span class="comment">// 返回之前的对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//class MyClass &#123;</span></span><br><span class="line"><span class="comment">//    // 类定义</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br><span class="line"></span><br><span class="line">MyClass&amp; <span class="keyword">operator</span>++(MyClass&amp; obj) &#123;  <span class="comment">// 前置递增运算符重载</span></span><br><span class="line"><span class="comment">// 执行递增操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;  <span class="comment">// 返回递增后的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyClass <span class="keyword">operator</span>++(MyClass&amp; obj, <span class="type">int</span>) &#123;  <span class="comment">// 后置递增运算符重载</span></span><br><span class="line">MyClass temp = obj;  <span class="comment">// 创建一个临时对象保存当前对象的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行递增操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp;  <span class="comment">// 返回之前的对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意conse，会有一定的影响，如果引用做函数参数的时候确认是不修改的 话就加上const！！！</span></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>前置++</p><p>返回引用！！可以链式</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, person&amp; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//p.operator++(person&amp; p)</span></span><br><span class="line">person&amp; <span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//全局函数重载的时候</span></span><br><span class="line">person&amp; <span class="keyword">operator</span>++(person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">p.m_a++;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意conse，会有一定的影响，如果引用做函数参数的时候确认是不修改的 话就加上const！！！</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">person p;</span><br><span class="line">cout &lt;&lt; ++(++p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>后置递增！</p><p>返回同类，不可以用链式</p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p);</span><br><span class="line"><span class="keyword">friend</span> person <span class="keyword">operator</span>++(person&amp; obj, <span class="type">int</span>);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person <span class="keyword">operator</span>++(person&amp; obj, <span class="type">int</span>) &#123;  <span class="comment">// 后置递增运算符重载</span></span><br><span class="line">person temp = obj;  <span class="comment">// 创建一个临时对象保存当前对象的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行递增操作</span></span><br><span class="line">obj.m_a++;=</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> temp;  <span class="comment">// 返回之前的对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意conse，会有一定的影响，如果引用做函数参数的时候确认是不修改的 话就加上const！！！</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">person myInt;</span><br><span class="line">cout &lt;&lt; myInt++ &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">person p;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><blockquote><h4 id="总结：-前置递增返回引用，后置递增返回值"><a href="#总结：-前置递增返回引用，后置递增返回值" class="headerlink" title="总结： 前置递增返回引用，后置递增返回值"></a>总结： 前置递增返回引用，后置递增返回值</h4></blockquote><p>递减！！的成员函数 的 写法</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person&amp; <span class="keyword">operator</span>--()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a--;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">person <span class="keyword">operator</span>--(<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">person temp = *<span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a--;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">person myInt;</span><br><span class="line">cout &lt;&lt; --myInt &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">person myInt;</span><br><span class="line">cout &lt;&lt; myInt--&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">person p;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递减的全局函数重载写法！！</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p);</span><br><span class="line"><span class="keyword">friend</span> person&amp; <span class="keyword">operator</span>--(person&amp; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> person <span class="keyword">operator</span>--(person&amp; p, <span class="type">int</span>);</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_a = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; cout, <span class="type">const</span> person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; p.m_a;</span><br><span class="line"><span class="keyword">return</span> cout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person&amp; <span class="keyword">operator</span>--(person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">p.m_a--;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person <span class="keyword">operator</span>--(person&amp; p,<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">person temp = p;</span><br><span class="line">p.m_a--;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">person myInt;</span><br><span class="line">cout &lt;&lt; --myInt &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">person myInt;</span><br><span class="line">cout &lt;&lt; myInt--&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; myInt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">person p;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-4-赋值运算符重载"><a href="#4-5-4-赋值运算符重载" class="headerlink" title="4.5.4 赋值运算符重载"></a>4.5.4 赋值运算符重载</h4><p>c++编译器至少给一个类添加4个函数</p><blockquote><ol><li><h5 id="默认构造函数-无参，函数体为空"><a href="#默认构造函数-无参，函数体为空" class="headerlink" title="默认构造函数(无参，函数体为空)"></a>默认构造函数(无参，函数体为空)</h5></li><li><h5 id="默认析构函数-无参，函数体为空"><a href="#默认析构函数-无参，函数体为空" class="headerlink" title="默认析构函数(无参，函数体为空)"></a>默认析构函数(无参，函数体为空)</h5></li><li><h5 id="默认拷贝构造函数，对属性进行值拷贝"><a href="#默认拷贝构造函数，对属性进行值拷贝" class="headerlink" title="默认拷贝构造函数，对属性进行值拷贝"></a>默认拷贝构造函数，对属性进行值拷贝</h5></li><li><h5 id="赋值运算符-operator-对属性进行值拷贝"><a href="#赋值运算符-operator-对属性进行值拷贝" class="headerlink" title="赋值运算符 operator&#x3D;, 对属性进行值拷贝"></a>赋值运算符 operator&#x3D;, 对属性进行值拷贝</h5></li></ol></blockquote><ol><li>也是浅拷贝</li></ol><p><strong>如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题</strong></p><p>类中有属性指向堆区，就要考虑深拷贝了</p><hr><p><strong>思考，指出那里出现了问题????</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(<span class="type">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="built_in">int</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;p;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="comment">//此处使用拷贝构造函数的隐式转换</span></span><br><span class="line">    <span class="comment">//person p3=p1</span></span><br><span class="line">    <span class="comment">//由于我们并没有写自己的深拷贝,也就是说还用的是编译器帮我们写的浅拷贝,造成了简单的赋值操作,让我么两个指针都指向了同一块数据,然后释放了两次就鸡; </span></span><br><span class="line">    <span class="comment">//我们只是写了自己的=的重载.</span></span><br><span class="line">    <span class="comment">//避免了重载的时候释放两次同一个位置</span></span><br><span class="line">    <span class="comment">//p2=p1这样的操作不会有问题</span></span><br><span class="line">person p3 = p1;</span><br><span class="line">cout &lt;&lt; *p1.p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p2.p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p3.p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/a77e947a/image-20230729143751080.png" class="" title="image-20230729143751080"><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将年龄数据开辟到堆区</span></span><br><span class="line">m_Age = <span class="keyword">new</span> <span class="built_in">int</span>(age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载赋值运算符 </span></span><br><span class="line">Person&amp; <span class="keyword">operator</span>=(Person &amp;p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_Age;</span><br><span class="line">m_Age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译器提供的代码是浅拷贝</span></span><br><span class="line"><span class="comment">//m_Age = p.m_Age;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提供深拷贝 解决浅拷贝的问题</span></span><br><span class="line">m_Age = <span class="keyword">new</span> <span class="built_in">int</span>(*p.m_Age);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回自身</span></span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~<span class="built_in">Person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_Age != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_Age;</span><br><span class="line">m_Age = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄的指针</span></span><br><span class="line"><span class="type">int</span> *m_Age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">18</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">p3 = p2 = p1; <span class="comment">//赋值操作</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1的年龄为：&quot;</span> &lt;&lt; *p1.m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p2的年龄为：&quot;</span> &lt;&lt; *p2.m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p3的年龄为：&quot;</span> &lt;&lt; *p3.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//int a = 10;</span></span><br><span class="line"><span class="comment">//int b = 20;</span></span><br><span class="line"><span class="comment">//int c = 30;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//c = b = a;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="可以是实现这样的操作，从右到左赋值！！！"><a href="#可以是实现这样的操作，从右到左赋值！！！" class="headerlink" title="可以是实现这样的操作，从右到左赋值！！！"></a>可以是实现这样的操作，从右到左赋值！！！</h4></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//test();</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">3</span>;</span><br><span class="line">a = b = c;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a  &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b=&quot;</span> &lt;&lt; b  &lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;c=&quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"><span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>给&#x3D;进行链式思想实连等</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(<span class="type">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="built_in">int</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">person</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>-&gt;p;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">person&amp; <span class="keyword">operator</span>=(<span class="type">const</span> person&amp; pp)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//需要看原来的堆区是否有数据，如果有需要先释放干净，然后再利用数据开辟空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="built_in">int</span>(*pp.p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">person p3 =(<span class="number">30</span>);</span><br><span class="line">p3 = p2 = p1;</span><br><span class="line">cout &lt;&lt; *p1.p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p2.p &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; *p3.p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-5-5-关系运算符重载—返回BOOL"><a href="#4-5-5-关系运算符重载—返回BOOL" class="headerlink" title="4.5.5 关系运算符重载—返回BOOL"></a>4.5.5 关系运算符重载—返回BOOL</h4><p><strong>作用：</strong>重<strong>载关系运算符，可以让两个自定义类型对象进行对比操作</strong></p><blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == p2.name &amp;&amp; <span class="keyword">this</span>-&gt;age == p2.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////////</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != p2.name &amp;&amp; <span class="keyword">this</span>-&gt;age != p2.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////全局函数重载的时候</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(person&amp; p1, person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.name == p2.name &amp;&amp; p1.age == p2.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(person&amp; p1, person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.name == p2.name &amp;&amp; p1.age == p2.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//全局记得加上友元!!!@#@#@#@#@#!#!</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">person</span>(string name, <span class="type">int</span> age):<span class="built_in">name</span>(name), <span class="built_in">age</span>(age)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(person&amp; p2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name == p2.name &amp;&amp; <span class="keyword">this</span>-&gt;age == p2.age)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">person <span class="title">p1</span><span class="params">(<span class="string">&quot;tom&quot;</span>, <span class="number">16</span>)</span></span>;</span><br><span class="line"><span class="function">person <span class="title">p2</span><span class="params">(<span class="string">&quot;tom&quot;</span>, <span class="number">16</span>)</span></span>;</span><br><span class="line">person p3 = <span class="built_in">person</span>(<span class="string">&quot;jerry&quot;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="comment">///erson p4 = p2;//浅拷贝！！！危险，如果指针操纵他—+析构释放，就要考虑深拷贝！！！</span></span><br><span class="line"><span class="keyword">if</span> (p1==p2)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1和p2是相等的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;p1和p2是不相等的&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-6-函数调用运算符重载"><a href="#4-5-6-函数调用运算符重载" class="headerlink" title="4.5.6 函数调用运算符重载()"></a>4.5.6 函数调用运算符重载()</h4><ul><li>函数调用运算符 ()  也可以重载</li><li>由于重载后使用的方式非常像函数的调用，因此称为仿函数</li><li>仿函数没有固定写法，非常灵活</li></ul><blockquote><h4 id="刚试了一下，operator（）（）只能在类里面定义，报错说不允许他为全局函数。"><a href="#刚试了一下，operator（）（）只能在类里面定义，报错说不允许他为全局函数。" class="headerlink" title="刚试了一下，operator（）（）只能在类里面定义，报错说不允许他为全局函数。"></a>刚试了一下，operator（）（）只能在类里面定义，报错说不允许他为全局函数。</h4></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="comment">//重载的（）操作符 也称为仿函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(string text)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; text &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myadd</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+<span class="number">1</span> + b+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//匿名对象调用  </span></span><br><span class="line"><span class="comment">//有参构造Person(10)单独写就是匿名对象  当前行结束之后，马上析构，直接构造析构然后立马销毁</span></span><br><span class="line"><span class="comment">//Person()单独写就是匿名对象  当前行结束之后，马上析构，直接构造析构然后立马销毁</span></span><br><span class="line">person p;</span><br><span class="line"><span class="built_in">p</span>(<span class="string">&quot;你好啊）OP&quot;</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----匿名函数----------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">person</span>()(<span class="string">&quot;你好啊匿名函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">Myadd add;</span><br><span class="line">cout&lt;&lt;<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">30</span>)&lt;&lt;endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----匿名函数----------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">Myadd</span>()(<span class="number">90</span>, <span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-继承–2"><a href="#4-6-继承–2" class="headerlink" title="4.6  继承–2"></a>4.6  继承–2</h3><p><strong>继承是面向对象三大特性之一</strong></p><p>有些类与类之间存在特殊的关系，例如下图中：</p><img src="/xu-runbo/post/a77e947a/1544861202252.png" class="" width="1544861202252"><p>我们发现，定义这些类时，下级别的成员除了拥有上一级的共性，还有自己的特性。</p><p>这个时候我们就可以考虑利用继承的技术，减少重复代码</p><h4 id="4-6-1-继承的基本语法"><a href="#4-6-1-继承的基本语法" class="headerlink" title="4.6.1 继承的基本语法"></a>4.6.1 继承的基本语法</h4><p>重要但不难</p><p>例如我们看到很多网站中，都有公共的头部，公共的底部，甚至公共的左侧列表，只有中心内容不同</p><p>接下来我们分别利用普通写法和继承的写法来实现网页中的内容，看一下继承存在的意义以及好处</p><p><strong>普通实现：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Java</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Python</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPP</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Java ja;</span><br><span class="line">ja.<span class="built_in">header</span>();</span><br><span class="line">ja.<span class="built_in">footer</span>();</span><br><span class="line">ja.<span class="built_in">left</span>();</span><br><span class="line">ja.<span class="built_in">content</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Python py;</span><br><span class="line">py.<span class="built_in">header</span>();</span><br><span class="line">py.<span class="built_in">footer</span>();</span><br><span class="line">py.<span class="built_in">left</span>();</span><br><span class="line">py.<span class="built_in">content</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">CPP cp;</span><br><span class="line">cp.<span class="built_in">header</span>();</span><br><span class="line">cp.<span class="built_in">footer</span>();</span><br><span class="line">cp.<span class="built_in">left</span>();</span><br><span class="line">cp.<span class="built_in">content</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承实现：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公共页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasePage</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">header</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;首页、公开课、登录、注册...（公共头部）&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">footer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;帮助中心、交流合作、站内地图...(公共底部)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java,Python,C++...(公共分类列表)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Java</span> : <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;JAVA学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Python</span> : <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Python学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPP</span> : <span class="keyword">public</span> BasePage</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">content</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C++学科视频&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Java页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Java下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Java ja;</span><br><span class="line">ja.<span class="built_in">header</span>();</span><br><span class="line">ja.<span class="built_in">footer</span>();</span><br><span class="line">ja.<span class="built_in">left</span>();</span><br><span class="line">ja.<span class="built_in">content</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Python页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Python下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Python py;</span><br><span class="line">py.<span class="built_in">header</span>();</span><br><span class="line">py.<span class="built_in">footer</span>();</span><br><span class="line">py.<span class="built_in">left</span>();</span><br><span class="line">py.<span class="built_in">content</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++页面</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;C++下载视频页面如下： &quot;</span> &lt;&lt; endl;</span><br><span class="line">CPP cp;</span><br><span class="line">cp.<span class="built_in">header</span>();</span><br><span class="line">cp.<span class="built_in">footer</span>();</span><br><span class="line">cp.<span class="built_in">left</span>();</span><br><span class="line">cp.<span class="built_in">content</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>继承的好处：&#x3D;&#x3D;可以减少重复的代码&#x3D;&#x3D;</p><blockquote><p>class A : public B; </p><p><strong>A 类称为子类 或 派生类</strong></p><p><strong>B 类称为父类 或 基类</strong></p></blockquote><p><strong>派生类中的成员，包含两大部分</strong>：</p><p><strong>一类是从基类继承过来的，一类是自己增加的成员。</strong></p><p>从基类继承过过来的表现其共性，而新增的成员体现了<strong>其个性</strong>。</p><h4 id="4-6-2-继承方式"><a href="#4-6-2-继承方式" class="headerlink" title="4.6.2 继承方式"></a>4.6.2 继承方式</h4><p>继承的语法：<code>class 子类 : 继承方式  父类</code></p><p><strong>继承方式一共有三种：</strong></p><blockquote><ul><li><h4 id="公共继承-原来是啥还是啥，只不过不可以访问父亲的私有的"><a href="#公共继承-原来是啥还是啥，只不过不可以访问父亲的私有的" class="headerlink" title="公共继承,原来是啥还是啥，只不过不可以访问父亲的私有的"></a>公共继承,原来是啥还是啥，只不过不可以访问父亲的私有的</h4></li><li><h4 id="保护继承-除了private都变成protected"><a href="#保护继承-除了private都变成protected" class="headerlink" title="保护继承  除了private都变成protected"></a>保护继承  除了private都变成protected</h4></li><li><h4 id="私有继承-全变成private；"><a href="#私有继承-全变成private；" class="headerlink" title="私有继承 全变成private；"></a>私有继承 全变成private；</h4></li></ul><p>在C++中，<strong>派生类确实继承了基类的所有成员，包括私有成员。</strong>但是，<strong>私有成员在派生类中是不可访问的。</strong>这<strong>意味着派生类无法直接访问或继承基类的私有成员。</strong></p><p><strong>私有成员只能在基类内部访问</strong>，派生类无法直接访问或继承私有成员。这是因为<strong>私有成员被设计为只能在基类内部使用，对外部是不可见的。****派生类只能通过基类的公有和保护成员来访问和操作私有成员</strong>。</p><p><strong>只是编译器把父类的private给隐藏了，子类不可访问</strong></p></blockquote><img src="/xu-runbo/post/a77e947a/clip_image002.png" class="" title="img"><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> :<span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A; <span class="comment">//可访问 public权限</span></span><br><span class="line">m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line"><span class="comment">//m_C; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son1 s1;</span><br><span class="line">s1.m_A; <span class="comment">//其他类只能访问到公共权限</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保护继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span>:<span class="keyword">protected</span> Base2</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A; <span class="comment">//可访问 protected权限</span></span><br><span class="line">m_B; <span class="comment">//可访问 protected权限</span></span><br><span class="line"><span class="comment">//m_C; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myClass2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son2 s;</span><br><span class="line"><span class="comment">//s.m_A; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son3</span>:<span class="keyword">private</span> Base3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_A; <span class="comment">//可访问 private权限</span></span><br><span class="line">m_B; <span class="comment">//可访问 private权限</span></span><br><span class="line"><span class="comment">//m_C; //不可访问</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrandSon3</span> :<span class="keyword">public</span> Son3</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Son3是私有继承，所以继承Son3的属性在GrandSon3中都无法访问到</span></span><br><span class="line"><span class="comment">//m_A;</span></span><br><span class="line"><span class="comment">//m_B;</span></span><br><span class="line"><span class="comment">//m_C;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-6-3-继承中的对象模型"><a href="#4-6-3-继承中的对象模型" class="headerlink" title="&#x3D;&#x3D;4.6.3 继承中的对象模型&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.6.3 继承中的对象模型&#x3D;&#x3D;</h4><p><strong>问题：</strong>从父类继承过来的成员，哪些属于子类对象中？</p><blockquote><p><strong>在C++中，子类继承了父类的函数，但子类函数和父类函数并不指向同一块地址。</strong></p><p><strong>当子类继承父类的函数时，子类会创建一个新的函数，该函数与父类的函数具有相同的名称和参数列表，但是可以有不同的实现（重写）或相同的实现（继承）。</strong></p><p><strong>子类函数和父类函数是两个独立的函数，它们具有不同的地址。子类对象可以通过子类函数来调用子类的实现，而父类对象可以通过父类函数来调用父类的实现。</strong></p><hr><p><strong>在C++中，子类继承了父类的成员变量，但子类的成员变量和父类的成员变量并不指向同一块地址。子类对象包含了父类对象的所有成员变量，但它们在内存中是独立存储的。</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> parentVar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> : <span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Parent parent;</span><br><span class="line">    Child child;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印父类成员变量地址</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;父类成员变量地址：&quot;</span> &lt;&lt; &amp;(parent.parentVar) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印子类成员变量地址</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;子类成员变量地址：&quot;</span> &lt;&lt; &amp;(child.parentVar) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_C; <span class="comment">//私有成员只是被隐藏了，但是还是会继承下去</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(Son) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//16</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用工具查看：</p><img src="/xu-runbo/post/a77e947a/image-20230729223112618.png" class="" title="image-20230729223112618"><p>打开工具窗口后，定位到当前CPP文件的盘符</p><img src="/xu-runbo/post/a77e947a/image-20230729222903401.png" class="" title="image-20230729222903401"><p>然后输入： cl &#x2F;d1 reportSingleClassLayout查看的类名   所属文件名</p><p>table</p><p>效果如下图：</p><img src="/xu-runbo/post/a77e947a/1545882158050.png" class="" width="1545882158050"><blockquote><p>结论： 父类中私有成员也是被子类继承下去了，只是由编译器给隐藏后访问不到</p></blockquote><h4 id="4-6-4-继承中构造和析构顺序"><a href="#4-6-4-继承中构造和析构顺序" class="headerlink" title="4.6.4 继承中构造和析构顺序"></a>4.6.4 继承中构造和析构顺序</h4><p>子类继承父类后，当创建子类对象，也会调用父类的构造函数</p><p>问题：父类和子类的构造和析构顺序是谁先谁后？</p><p><strong>因为是继承，肯定要先创建一个父类</strong></p><p><strong>先父亲后儿子，和之前的类里面有别的类的时候，</strong></p><p>4.2.7 类对象作为类成员是有区别的</p><p>类里面有类的时候是先构造里面的然后再构造外面的！！！</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Base</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son析构函数!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</span></span><br><span class="line">Son s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h4 id="总结：继承中-先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反"><a href="#总结：继承中-先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反" class="headerlink" title="总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反"></a>总结：继承中 先调用父类构造函数，再调用子类构造函数，析构顺序与构造相反</h4></blockquote><h4 id="4-6-5-继承同名成员处理方式"><a href="#4-6-5-继承同名成员处理方式" class="headerlink" title="4.6.5 继承同名成员处理方式"></a>4.6.5 继承同名成员处理方式</h4><p>问题：当子类与父类出现同名的成员，如何通过子类对象，访问到子类或父类中同名的数据呢？</p><blockquote><ul><li><h4 id="访问子类同名成员-直接访问即可"><a href="#访问子类同名成员-直接访问即可" class="headerlink" title="访问子类同名成员   直接访问即可"></a>访问子类同名成员   直接访问即可</h4></li><li><h4 id="访问父类同名成员-需要加作用域"><a href="#访问父类同名成员-需要加作用域" class="headerlink" title="访问父类同名成员   需要加作用域"></a>访问父类同名成员   需要加作用域</h4></li><li><p>直接调用就是儿子的，</p><p><strong>&#x2F;&#x2F;当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</strong><br><strong>&#x2F;&#x2F;如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</strong></p></li></ul></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base1</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是父类的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Base1</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是父类的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我是父亲！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="type">int</span> m_B ;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公共继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> :<span class="keyword">public</span> Base1</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我是儿子！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Son1</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是子类的构造函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Son1</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;这是子类的析构函数&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m_A=<span class="number">10</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当子类与父类拥有同名的成员函数，子类会隐藏父类中所有版本的同名成员函数</span></span><br><span class="line"><span class="comment">//如果想访问父类中被隐藏的同名成员函数，需要加父类的作用域</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son1 s1;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot;子类的同名是&quot;</span>&lt;&lt; s1.m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;父类的同名是&quot;</span> &lt;&lt; s1.Base1::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">s1.<span class="built_in">func</span>();</span><br><span class="line">s1.Base1::<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s1.Base1::<span class="built_in">func</span>(<span class="number">100</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(Son1) &lt;&lt; endl;</span><br><span class="line"><span class="comment">//16</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：</p><blockquote><ol><li><h5 id="子类对象可以直接访问到子类中同名成员"><a href="#子类对象可以直接访问到子类中同名成员" class="headerlink" title="子类对象可以直接访问到子类中同名成员"></a>子类对象可以直接访问到子类中同名成员</h5></li><li><h5 id="子类对象加作用域可以访问到父类同名成员"><a href="#子类对象加作用域可以访问到父类同名成员" class="headerlink" title="子类对象加作用域可以访问到父类同名成员"></a>子类对象加作用域可以访问到父类同名成员</h5></li><li><h5 id="当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数-包括重载的，都没用，加作用域可以访问到父类中同名函数"><a href="#当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数-包括重载的，都没用，加作用域可以访问到父类中同名函数" class="headerlink" title="当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数,包括重载的，都没用，加作用域可以访问到父类中同名函数"></a>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数,包括重载的，都没用，<em>加作用域</em>可以访问到父类中同名函数</h5></li></ol></blockquote><h4 id="4-6-6-继承同名静态成员处理方式"><a href="#4-6-6-继承同名静态成员处理方式" class="headerlink" title="4.6.6 继承同名静态成员处理方式"></a>4.6.6 继承同名静态成员处理方式</h4><p><strong>1.静态成员可以通过类名来访问！</strong></p><p>问题：继承中同名的静态成员在子类对象上如何进行访问？</p><p><strong>静态成员和非静态成员出现同名，处理方式一致</strong></p><p>想要使用父亲的就加作用域就欧克了！！！</p><blockquote><h5 id="访问子类同名成员-直接访问即可-1"><a href="#访问子类同名成员-直接访问即可-1" class="headerlink" title="访问子类同名成员   直接访问即可"></a>访问子类同名成员   直接访问即可</h5><h5 id="访问父类同名成员-需要加作用域-1"><a href="#访问父类同名成员-需要加作用域-1" class="headerlink" title="访问父类同名成员   需要加作用域"></a>访问父类同名成员   需要加作用域</h5></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Son::Base::<span class="built_in">func</span>();</span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">    <span class="comment">//第一个双冒号：代表通过类名方式访问，第二个双冒号是，代表访问父类的作用域下！！！！</span></span><br><span class="line">Son::Base::<span class="built_in">func</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son s;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认是Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;要想用父亲的就加作用域Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过类名访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Base::m_A &lt;&lt; endl;</span><br><span class="line"><span class="comment">//想要用子类来访问父类的静态成员变量就得用这种</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son s;</span><br><span class="line">s.<span class="built_in">func</span>();</span><br><span class="line">s.Base::<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son::<span class="built_in">func</span>();</span><br><span class="line">Son::Base::<span class="built_in">func</span>();</span><br><span class="line">Son::Base::<span class="built_in">func</span>();</span><br><span class="line"><span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">Son::Base::<span class="built_in">func</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base - static void func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base - static void func(int a)&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Base::m_A = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son - static void func()&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Son::m_A = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员属性</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son s;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;默认是Son  下 m_A = &quot;</span> &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;要想用父亲的就加作用域Base 下 m_A = &quot;</span> &lt;&lt; s.Base::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过类名访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Son::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Son  下 m_A = &quot;</span> &lt;&lt; Base::m_A &lt;&lt; endl;</span><br><span class="line"><span class="comment">//想要用子类来访问父类的静态成员变量就得用这种</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Base 下 m_A = &quot;</span> &lt;&lt; Son::Base::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同名成员函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//通过对象访问</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过对象访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son s;</span><br><span class="line">s.<span class="built_in">func</span>();</span><br><span class="line">s.Base::<span class="built_in">func</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;通过类名访问： &quot;</span> &lt;&lt; endl;</span><br><span class="line">Son::<span class="built_in">func</span>();</span><br><span class="line">Son::Base::<span class="built_in">func</span>();</span><br><span class="line"><span class="comment">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span></span><br><span class="line">    <span class="comment">//第一个双冒号：代表通过类名方式访问，第二个双冒号是，代表访问父类的作用域下！！！！</span></span><br><span class="line">Son::Base::<span class="built_in">func</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="comment">//test02();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：同名静态成员处理方式和非静态处理方式一样，只不过有两种访问的方式（通过对象 和 通过类名）</p></blockquote><h4 id="4-6-7-多继承语法"><a href="#4-6-7-多继承语法" class="headerlink" title="4.6.7 多继承语法"></a>4.6.7 多继承语法</h4><p>C++允许<strong>一个类继承多个类</strong></p><hr><p>语法：<code> class 子类 ：继承方式 父类1 ， 继承方式 父类2...</code></p><hr><p>多继承可能会引发父类中有同名成员出现，需要加作用域区分</p><p><strong>C++实际开发中不建议用多继承</strong></p><p>子类想用自己的 就类名.使用</p><p>子类想用爹爹们的 就用 子类名.父类::对应的数据</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base1</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base2</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_A = <span class="number">200</span>;  <span class="comment">//开始是m_B 不会出问题，但是改为mA就会出现不明确</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//语法：class 子类：继承方式 父类1 ，继承方式 父类2 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> : <span class="keyword">public</span> Base2, <span class="keyword">public</span> Base1 </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_C = <span class="number">300</span>;</span><br><span class="line">m_D = <span class="number">400</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_C;</span><br><span class="line"><span class="type">int</span> m_D;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多继承容易产生成员同名的情况</span></span><br><span class="line"><span class="comment">//通过使用类名作用域可以区分调用哪一个基类的成员</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son s;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sizeof Son = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(s) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s.Base1::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s.Base2::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结： 多继承中如果父类中出现了同名情况，子类使用时候要加作用域</p></blockquote><h4 id="4-6-8-菱形继承"><a href="#4-6-8-菱形继承" class="headerlink" title="4.6.8 菱形继承"></a>4.6.8 菱形继承</h4><p><strong>菱形继承概念：</strong></p><p>​两个派生类继承同一个基类</p><p>​又有某个类同时继承者两个派生类</p><p>​这种继承被称为菱形继承，或者钻石继承</p><p><strong>典型的菱形继承案例：</strong></p><img src="/xu-runbo/post/a77e947a/clip_image002.jpg" class="" title="IMG_256"><p><strong>菱形继承问题：</strong></p><ol><li><pre><code>羊继承了动物的数据，驼同样继承了动物的数据，当草泥马使用数据时，就会产生二义性。</code></pre></li><li><pre><code>草泥马继承自动物的数据继承了两份，其实我们应该清楚，这份数据我们只需要一份就可以。</code></pre></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承前加virtual关键字后，变为虚继承</span></span><br><span class="line"><span class="comment">//此时公共的父类Animal称为虚基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tuo</span>   : <span class="keyword">virtual</span> <span class="keyword">public</span> Animal &#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SheepTuo</span> : <span class="keyword">public</span> Sheep, <span class="keyword">public</span> Tuo &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SheepTuo st;</span><br><span class="line">st.Sheep::m_Age = <span class="number">100</span>;</span><br><span class="line">st.Tuo::m_Age = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;st.Sheep::m_Age = &quot;</span> &lt;&lt; st.Sheep::m_Age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;st.Tuo::m_Age = &quot;</span> &lt;&lt;  st.Tuo::m_Age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;st.m_Age = &quot;</span> &lt;&lt; st.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>菱形继承带来的主要问题是子类继承两份相同的数据，导致资源浪费以及毫无意义</li><li>利用虚继承可以解决菱形继承问题</li></ul><blockquote><p><strong>解释虚继承（virtual inheritance）的概念</strong></p><p>在C++中，当一个类被继承时，子类会包含父类的成员变量和成员函数。如果一个类被多个子类继承，那么每个子类都会包含一份父类的成员变量和成员函数，这可能会导致冗余和浪费。</p><p>为了解决这个问题，C++引入了虚继承（virtual inheritance）的概念。虚继承可以确保在多继承中，对于公共的基类，只有一份实例存在于继承体系中。通过使用<code>virtual</code>关键字来声明虚继承。</p><p>在您的代码中，<code>Sheep</code>和<code>Tuo</code>类都使用了虚继承，它们都继承自虚基类<code>Animal</code>。而<code>SheepTuo</code>类继承自<code>Sheep</code>和<code>Tuo</code>类。</p><p>在加入虚继承之前，<code>SheepTuo</code>类中会包含两份<code>m_Age</code>成员变量，分别来自于<code>Sheep</code>和<code>Tuo</code>类。而加入虚继承后，<code>SheepTuo</code>类中只会包含一份<code>m_Age</code>成员变量，来自于虚基类<code>Animal</code>。</p><p>因此，加入虚继承后，<code>SheepTuo</code>对象的大小（占用的字节数）会减小。在您的代码中，输出<code>sizeof(st)</code>可以看到<code>SheepTuo</code>对象的大小变为4。</p><p>另外，由于虚继承的特性，通过类名作用域来访问虚基类的成员变量。在您的代码中，使用<code>st.Sheep::m_Age</code>和<code>st.Tuo::m_Age</code>来访问<code>Sheep</code>和<code>Tuo</code>类中的<code>m_Age</code>成员变量。</p><p>最后，注释掉的<code>cout &lt;&lt; &quot;st.m_Age = &quot; &lt;&lt; st.m_Age &lt;&lt; endl;</code>语句会导致编译错误，因为在虚继承中，访问虚基类的成员变量需要使用类名作用域。</p><hr><p>在虚继承中，除了会包含虚基类的成员变量，还会包含一些额外的信息来处理虚继承的相关操作，比如虚基类指针或虚基类表。这些额外的信息会导致对象的大小增加。</p><hr><p><strong>确定虚基类的大小？想吧你哈哈</strong></p><p>确定虚基类指针或虚基类表所占字节的具体方法是依赖于编译器和系统的实现细节的。不同的编译器和系统可能会有不同的实现方式。</p><p>一种常见的实现方式是，在虚继承中，编译器会为每个包含虚基类的类生成一个虚基类表（vtable）。虚基类表是一个数据结构，用于存储虚基类的相关信息，比如虚基类的偏移量等。</p><p>虚基类指针是一个指向虚基类表的指针，用于在运行时动态查找虚基类的成员。虚基类指针的大小通常是一个指针的大小，即在32位系统中通常是4个字节，在64位系统中通常是8个字节。</p><p>虚基类表的大小取决于虚基类的数量和虚基类的成员变量和成员函数的数量。每个虚基类在虚基类表中占据一定的空间，用于存储虚基类的相关信息。</p></blockquote><h3 id="4-7-多态–3"><a href="#4-7-多态–3" class="headerlink" title="4.7  多态–3"></a>4.7  多态–3</h3><h4 id="4-7-1-多态的基本概念"><a href="#4-7-1-多态的基本概念" class="headerlink" title="4.7.1 多态的基本概念"></a>4.7.1 多态的基本概念</h4><p><strong>多态是C++面向对象三大特性之一</strong></p><p>多态分为两类</p><ul><li>静态多态: <strong>函数重载 和 运算符重载属于静态多态，复用函数名</strong></li><li>动态多态: <strong>派生类和虚函数实现运行时多态</strong></li></ul><p>静态多态和动态多态区别：</p><ul><li><strong>静态多态的函数地址早绑定  -  编译阶段确定函数地址</strong></li><li><strong>动态多态的函数地址晚绑定</strong>  -  运行阶段确定函数地址</li></ul><hr><p><strong>等号左边编译类型右边运行类型，早绑定看编译类型，晚绑定看运行类型</strong></p><p><strong>Animal&amp; animal与传入的东西</strong></p><hr><p>&#x3D;&#x3D;就相当于重载函数，本来必须在同一作用域下才能重载，vritual允许父子类之间函数重载&#x3D;&#x3D;</p><p>下面通过案例进行讲解多态</p><blockquote><p>&#x2F;函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</p><p>&#x2F;&#x2F;我们希望传入什么对象，那么就调用什么对象的函数<br>&#x2F;&#x2F;如果函数地址在编译阶段就能确定，那么静态联编<br>&#x2F;&#x2F;如果函数地址在运行阶段才能确定，就是动态联编</p><hr><p>&#x2F;&#x2F;多态满足条件：<br>&#x2F;&#x2F;1、有继承关系<br>&#x2F;&#x2F;2、子类重写父类中的虚函数,,此时加不加 virtual都欧克<br>&#x2F;&#x2F;多态使用：<br><strong>———————————————&#x2F;&#x2F;父类指针或引用指向子类对象</strong>—————————————————-</p><p>父亲类 *pointer&#x3D;new 子类名;</p><p>父亲类&amp;p&#x3D;子类具体对象</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建+法计算器</span></span><br><span class="line">addCalculator add;</span><br><span class="line">AbstractCalculator&amp; abc = add;</span><br><span class="line"></span><br><span class="line">abc.a = <span class="number">10</span>;</span><br><span class="line">abc.b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc.<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">////////////////////////</span></span><br><span class="line"><span class="comment">//创建+法计算器</span></span><br><span class="line">AbstractCalculator* abc = <span class="keyword">new</span> <span class="built_in">addCalculator</span>();</span><br><span class="line"></span><br><span class="line">abc-&gt;a = <span class="number">10</span>;</span><br><span class="line">abc-&gt;b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//释放对应的数据</span></span><br><span class="line"><span class="keyword">delete</span> abc;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//Speak函数就是虚函数</span></span><br><span class="line"><span class="comment">//函数前面加上virtual关键字，变成虚函数，那么编译器在编译的时候就不能确定函数调用了。</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;动物在叫！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> :<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;喵喵喵！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//早绑定，编译阶段就把函数地址给绑定了</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">(Animal&amp; animal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">animal.<span class="built_in">Speak</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们希望传入什么对象，那么就调用什么对象的函数</span></span><br><span class="line"><span class="comment">//如果函数地址在编译阶段就能确定，那么静态联编</span></span><br><span class="line"><span class="comment">//如果函数地址在运行阶段才能确定，就是动态联编</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal am;</span><br><span class="line">Cat cat;</span><br><span class="line"><span class="built_in">speak</span>(am);</span><br><span class="line"><span class="built_in">speak</span>(cat);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多态满足条件： </span></span><br><span class="line"><span class="comment">//1、有继承关系</span></span><br><span class="line"><span class="comment">//2、子类重写父类中的虚函数</span></span><br><span class="line"><span class="comment">//多态使用：</span></span><br><span class="line"><span class="comment">//父类指针或引用指向子类对象</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>没有重写speak函数的时候，通过继承，把父亲的虚函数也也继承下来了，而且在虚基表里是父类的函数</strong></p><img src="/xu-runbo/post/a77e947a/image-20230730140026926.png" class="" title="image-20230730140026926"><p>重写后</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> :<span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;喵喵喵！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/xu-runbo/post/a77e947a/image-20230730140251440.png" class="" title="image-20230730140251440"><p>总结：</p><blockquote><p>C++中的多态是通过<strong>虚函数实现的</strong>。当<strong>基类指针或引用指向派生类对象时</strong>，可以通过<strong>该指针或引用调用虚函数时，会根据对象的实际类型来确定调用哪个类的虚函数。</strong></p><p>在C++中，<strong>每个包含虚函数的类都有一个虚函数表（vtable）</strong>。<strong>虚函数表是一个存储指向虚函数地址的指针数组。****每个对象都有一个指向其类的虚函数表的指针，称为虚函数指针（vptr）。</strong></p><p><strong>当对象被创建时，编译器会在对象的内存布局中添加一个隐藏的虚函数指针。</strong>这个指针指向该类的虚函数表。**&#x3D;&#x3D;如果类没有虚函数，那么它也不会有虚函数表和虚函数指针。&#x3D;&#x3D;**</p><p>当调用一个虚函数时，<strong>编译器会根据对象的虚函数指针找到对应的虚函数表，</strong>然<strong>后根据函数在虚函数表中的索引找到要调用的函数地址。</strong>这个过程是<strong>在运行时动态确定的</strong>，因此可以实现多态。</p><p>继承和重写是多态的基础。<strong>当派生类继承基类时，它会继承基类的虚函数，并可以选择重写这些虚函数。</strong></p><p>.<strong>通过重写，派生类可以为基类的虚函数提供自己的实现</strong>。</p><p>当使用基类指针或引用调用虚函数时，根据对象的实际类型，将调用派生类的虚函数。</p></blockquote><p>多态满足条件</p><ul><li><strong>有继承关系</strong></li><li><strong>子类重写父类中的虚函数</strong></li></ul><p>多态使用条件</p><ul><li><strong>父类指针或引用指向子类对象</strong></li></ul><p>重写：<strong>函数返回值类型  函数名 参数列表 完全一致称为重写</strong></p><h4 id="4-7-2-多态案例一-计算器类"><a href="#4-7-2-多态案例一-计算器类" class="headerlink" title="4.7.2 多态案例一-计算器类"></a>4.7.2 多态案例一-计算器类</h4><p><strong>‘’字符,””字符串</strong></p><p><strong>delete会把指针指向的内存权限释放，让这块内存可以被其他进程使用</strong></p><p>案例描述：</p><p>分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类</p><p>多态的优点：</p><ul><li>代码组织结构清晰</li><li>可读性强</li><li>利于前期和后期的扩展以及维护</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Caculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getresult</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//+是一个字符串const char*</span></span><br><span class="line"><span class="comment">//或者strcmp(c,&#x27;+&#x27;)==0</span></span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Caculator caculator;</span><br><span class="line">caculator.a = <span class="number">10</span>;</span><br><span class="line">caculator.b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; caculator.<span class="built_in">getresult</span>(<span class="string">&#x27;+&#x27;</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; caculator.<span class="built_in">getresult</span>(<span class="string">&#x27;-&#x27;</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; caculator.<span class="built_in">getresult</span>(<span class="string">&#x27;*&#x27;</span>) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; caculator.<span class="built_in">getresult</span>(<span class="string">&#x27;/&#x27;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//多态实现</span></span><br><span class="line"><span class="comment">//抽象计算器类</span></span><br><span class="line"><span class="comment">//多态优点：代码组织结构清晰，可读性强，利于前期和后期的扩展以及维护</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AbstractCalculator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">addCalculator</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">jianCalculator</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">chengCalculator</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">chuCalculator</span> :<span class="keyword">public</span> AbstractCalculator</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getresult</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建+法计算器</span></span><br><span class="line">AbstractCalculator* abc = <span class="keyword">new</span> <span class="built_in">addCalculator</span>();</span><br><span class="line"></span><br><span class="line">abc-&gt;a = <span class="number">10</span>;</span><br><span class="line">abc-&gt;b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//释放对应的数据</span></span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建-法计算器</span></span><br><span class="line">abc = <span class="keyword">new</span> <span class="built_in">jianCalculator</span>();</span><br><span class="line">abc-&gt;a = <span class="number">10</span>;</span><br><span class="line">abc-&gt;b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建*法计算器</span></span><br><span class="line">abc = <span class="keyword">new</span> <span class="built_in">chengCalculator</span>();</span><br><span class="line">abc-&gt;a = <span class="number">10</span>;</span><br><span class="line">abc-&gt;b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line"><span class="comment">//创建/法计算器</span></span><br><span class="line">abc = <span class="keyword">new</span> <span class="built_in">chuCalculator</span>();</span><br><span class="line">abc-&gt;a = <span class="number">10</span>;</span><br><span class="line">abc-&gt;b = <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; abc-&gt;<span class="built_in">getresult</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line"><span class="comment">//销毁一次后仅仅完成了空间的释放,此时还可以使用,即指向关系依然存在,</span></span><br><span class="line"><span class="comment">//但如果释放了两次以上指向关系将不存在,但一般不建议这样使用,</span></span><br><span class="line"><span class="comment">//既然释放了某空间,紧接着给该空间的指针赋值为NULL或者指向一个地方,养成良好的编程风格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：C++开发提倡利用多态设计程序架构，因为多态优点很多</p><p><strong><strong>&#x2F;&#x2F;销毁一次后仅仅完成了空间的释放,此时还可以使用,即指向关系依然存在,</strong><br>    <strong>&#x2F;&#x2F;但如果释放了两次以上指向关系将不存在,但一般不建议这样使用,</strong><br>    &#x2F;&#x2F;既然释放了某空间,紧接着给该空间的指针赋值为NULL或者指向一个地方,养成良好的编程风格</strong></p></blockquote><h4 id="4-7-3-纯虚函数和抽象类"><a href="#4-7-3-纯虚函数和抽象类" class="headerlink" title="&#x3D;&#x3D;4.7.3 纯虚函数和抽象类&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.7.3 纯虚函数和抽象类&#x3D;&#x3D;</h4><p>在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容</p><blockquote><p><strong>抽象类不能实例化，但是能定义一个指向该类的指针</strong></p></blockquote><p>因此可以将虚函数改为<strong>纯虚函数</strong></p><p>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></p><hr><p><strong>当类中有了纯虚函数，这个类也称为&#x3D;&#x3D;抽象类&#x3D;&#x3D;</strong></p><p><strong>纯虚函数是在<em>基类</em>中声明为纯虚函数的虚函数，它没有实现，只是用来作为接口的占位符，要求派生类必须实现这个函数。</strong></p><hr><p><strong>抽象类特点</strong>：</p><ul><li><strong>无法实例化对象</strong></li><li><strong>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</strong></li></ul><blockquote><p>纯虚函数来自</p><ol><li><strong>纯虚函数语法：<code>virtual 返回值类型 函数名 （参数列表）= 0 ;</code></strong></li><li><strong>继承抽象类但不重写对应的纯虚函数！！！！！！！</strong></li><li>有虚析构函数或者纯虚析构函数</li></ol></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//纯虚函数</span></span><br><span class="line"><span class="comment">//类中只要有一个纯虚函数就称为抽象类</span></span><br><span class="line"><span class="comment">//抽象类无法实例化对象</span></span><br><span class="line"><span class="comment">//子类必须重写父类中的纯虚函数，否则也属于抽象类</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> :<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Base * base = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//base = new Base; // 错误，抽象类无法实例化对象</span></span><br><span class="line">base = <span class="keyword">new</span> Son;</span><br><span class="line">base-&gt;<span class="built_in">func</span>();</span><br><span class="line"><span class="keyword">delete</span> base;<span class="comment">//记得销毁</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-4-多态案例二-制作饮品"><a href="#4-7-4-多态案例二-制作饮品" class="headerlink" title="4.7.4 多态案例二-制作饮品"></a>4.7.4 多态案例二-制作饮品</h4><p><strong>案例描述：</strong></p><p>制作饮品的大致流程为：煮水 -  冲泡 - 倒入杯中 - 加入辅料</p><p>利用多态技术实现本案例，提供抽象制作饮品基类，提供子类制作咖啡和茶叶</p><img src="/xu-runbo/post/a77e947a/1545985945198.png" class="" width="1545985945198"><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Makedrink</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">zhushui</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">chongru</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">daorubeizhong</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">jiaruzuoliao</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//规定流程</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Makeit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">zhushui</span>();</span><br><span class="line"><span class="built_in">chongru</span>();</span><br><span class="line"><span class="built_in">daorubeizhong</span>();</span><br><span class="line"><span class="built_in">jiaruzuoliao</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MakeCha</span> :<span class="keyword">public</span> Makedrink</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zhushui</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;做茶的时候煮水&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chongru</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;冲泡茶叶&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">daorubeizhong</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;倒入杯子&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jiaruzuoliao</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;加柠檬&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Makecoffee</span> :<span class="keyword">public</span> Makedrink</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zhushui</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;做咖啡的时候煮水&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chongru</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;冲泡咖啡&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">daorubeizhong</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;倒入杯子&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">jiaruzuoliao</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;加牛奶和冰糖&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Dowork</span><span class="params">(Makedrink* abc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">abc-&gt;<span class="built_in">Makeit</span>();</span><br><span class="line"><span class="keyword">delete</span> abc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Makedrink* mc = <span class="keyword">new</span> <span class="built_in">MakeCha</span>();</span><br><span class="line"><span class="built_in">Dowork</span>(mc);</span><br><span class="line"><span class="built_in">Dowork</span>(<span class="keyword">new</span> MakeCha);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;现在开始制作咖啡&quot;</span> &lt;&lt; endl;</span><br><span class="line">Makedrink* cf = <span class="keyword">new</span> <span class="built_in">Makecoffee</span>();</span><br><span class="line"><span class="built_in">Dowork</span>(cf);</span><br><span class="line"><span class="built_in">Dowork</span>(<span class="keyword">new</span> MakeCha);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-5-虚析构和纯虚析构"><a href="#4-7-5-虚析构和纯虚析构" class="headerlink" title="4.7.5 虚析构和纯虚析构"></a>4.7.5 虚析构和纯虚析构</h4><p><strong>多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码</strong></p><p><strong>也就是说不运行子类的析构函数！！！造成内存泄漏</strong></p><p>解决方式：将父类中的析构函数改为<strong>虚析构</strong>或者<strong>纯虚析构</strong></p><p>​<strong>如果改成纯虚析构的话需要在函数外部进行 函数实现</strong></p><p>​<strong>或者就是简单的弄一个虚析构函数就ok了</strong></p><p>虚析构和纯虚析构共性：</p><ul><li><strong>可以解决父类指针释放子类对象</strong></li><li><strong>都需要有具体的函数实现</strong>，纯虚析构函数的实现必须在外部！</li></ul><p>虚析构和纯虚析构区别：</p><ul><li>如果是纯虚析构，该类属于抽象类，无法实例化对象</li></ul><p><strong>虚析构函数通常在希望通过基类指针或引用来删除派生类对象时使用。这样可以确保派生类的析构函数被正确调用，避免内存泄漏。</strong></p><p>虚析构语法：</p><p><code>virtual ~类名()&#123;&#125;</code></p><p>纯虚析构语法：</p><p><code> virtual ~类名() = 0;</code></p><p><strong>必须需要有外部实现！！！</strong></p><p><code>类名::~类名()&#123;&#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal 构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//纯虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//不加virtual的时候不会走子类的 析构函数 造成内存泄露</span></span><br><span class="line"><span class="comment">//析构函数加上virtual关键字，变成虚析构函数  就会走子类的析构函数了</span></span><br><span class="line"><span class="comment">//virtual ~Animal()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;析构函数&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//或者是纯虚析构函数，但要有函数实现！！且在外部</span></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Animal</span>() = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Animal::~<span class="built_in">Animal</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Animal 纯虚析构函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和包含普通纯虚函数的类一样，包含了纯虚析构函数的类也是一个抽象类。不能够被实例化。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Cat</span>(string name)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat构造函数调用！&quot;</span> &lt;&lt; endl;</span><br><span class="line">m_Name = <span class="keyword">new</span> <span class="built_in">string</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//虚函数的重写</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Speak</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; *m_Name &lt;&lt; <span class="string">&quot;小猫在说话!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">~<span class="built_in">Cat</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Cat析构函数调用!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Name != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span> m_Name;</span><br><span class="line">m_Name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">string* m_Name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal* animal = <span class="keyword">new</span> <span class="built_in">Cat</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">animal-&gt;<span class="built_in">Speak</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过父类指针去释放，会导致子类对象可能清理不干净，造成内存泄漏</span></span><br><span class="line"><span class="comment">//怎么解决？给基类增加一个虚析构函数 或者纯虚析构函数，但是明显是虚析构函数简单a Aaaaa</span></span><br><span class="line"><span class="comment">//虚析构函数就是用来解决通过父类指针释放子类对象</span></span><br><span class="line"><span class="keyword">delete</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><blockquote><h4 id="1-虚析构或纯虚析构就是用来解决通过父类指针释放子类对象"><a href="#1-虚析构或纯虚析构就是用来解决通过父类指针释放子类对象" class="headerlink" title="1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象"></a>1. 虚析构或纯虚析构就是用来解决通过父类指针释放子类对象</h4><h4 id="2-如果子类中没有堆区数据，可以不写为虚析构或纯虚析构"><a href="#2-如果子类中没有堆区数据，可以不写为虚析构或纯虚析构" class="headerlink" title="2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构"></a>2. 如果子类中没有堆区数据，可以不写为虚析构或纯虚析构</h4><h4 id="3-拥有纯虚析构函数的类也属于抽象类"><a href="#3-拥有纯虚析构函数的类也属于抽象类" class="headerlink" title="3. 拥有纯虚析构函数的类也属于抽象类"></a>3. 拥有纯虚析构函数的类也属于抽象类</h4></blockquote><h4 id="4-7-6-多态案例三-电脑组装"><a href="#4-7-6-多态案例三-电脑组装" class="headerlink" title="&#x3D;&#x3D;4.7.6 多态案例三-电脑组装&#x3D;&#x3D;"></a>&#x3D;&#x3D;4.7.6 多态案例三-电脑组装&#x3D;&#x3D;</h4><p><strong>案例描述：</strong></p><p>电脑主要组成部件为 CPU（用于计算），显卡（用于显示），内存条（用于存储）</p><p>将每个零件封装出抽象基类，并且提供不同的厂商生产不同的零件，例如Intel厂商和Lenovo厂商</p><p>创建电脑类提供让电脑工作的函数，并且调用每个零件工作的接口</p><p>测试时组装三台不同的电脑进行工作</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象CPU类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的计算函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象显卡类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VideoCard</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的显示函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象内存条类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memory</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//抽象的存储函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Computer</span>(CPU* cpu, VideoCard* vc, Memory* mem)</span><br><span class="line">&#123;</span><br><span class="line">m_cpu = cpu;</span><br><span class="line">m_vc = vc;</span><br><span class="line">m_mem = mem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供工作的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//让零件工作起来，调用接口</span></span><br><span class="line">m_cpu-&gt;<span class="built_in">calculate</span>();</span><br><span class="line"></span><br><span class="line">m_vc-&gt;<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">m_mem-&gt;<span class="built_in">storage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供析构函数 释放3个电脑零件</span></span><br><span class="line">~<span class="built_in">Computer</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放CPU零件</span></span><br><span class="line"><span class="keyword">if</span> (m_cpu != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_cpu;</span><br><span class="line">m_cpu = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放显卡零件</span></span><br><span class="line"><span class="keyword">if</span> (m_vc != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_vc;</span><br><span class="line">m_vc = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存条零件</span></span><br><span class="line"><span class="keyword">if</span> (m_mem != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> m_mem;</span><br><span class="line">m_mem = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">CPU* m_cpu; <span class="comment">//CPU的零件指针</span></span><br><span class="line">VideoCard* m_vc; <span class="comment">//显卡零件指针</span></span><br><span class="line">Memory* m_mem; <span class="comment">//内存条零件指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体厂商</span></span><br><span class="line"><span class="comment">//Intel厂商</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntelCPU</span> :<span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Intel的CPU开始计算了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntelVideoCard</span> :<span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Intel的显卡开始显示了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntelMemory</span> :<span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Intel的内存条开始存储了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lenovo厂商</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoCPU</span> :<span class="keyword">public</span> CPU</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">calculate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lenovo的CPU开始计算了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoVideoCard</span> :<span class="keyword">public</span> VideoCard</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lenovo的显卡开始显示了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LenovoMemory</span> :<span class="keyword">public</span> Memory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">storage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Lenovo的内存条开始存储了！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//第一台电脑零件</span></span><br><span class="line">CPU* intelCpu = <span class="keyword">new</span> IntelCPU;</span><br><span class="line">VideoCard* intelCard = <span class="keyword">new</span> IntelVideoCard;</span><br><span class="line">Memory* intelMem = <span class="keyword">new</span> IntelMemory;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//创建第一台电脑</span></span><br><span class="line">Computer* computer1 = <span class="keyword">new</span> <span class="built_in">Computer</span>(intelCpu, intelCard, intelMem);</span><br><span class="line">computer1-&gt;<span class="built_in">work</span>();</span><br><span class="line"><span class="keyword">delete</span> computer1;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第二台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//第二台电脑组装</span></span><br><span class="line">Computer* computer2 = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> LenovoVideoCard, <span class="keyword">new</span> LenovoMemory);</span><br><span class="line">computer2-&gt;<span class="built_in">work</span>();</span><br><span class="line"><span class="keyword">delete</span> computer2;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第三台电脑开始工作：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//第三台电脑组装</span></span><br><span class="line">Computer* computer3 = <span class="keyword">new</span> <span class="built_in">Computer</span>(<span class="keyword">new</span> LenovoCPU, <span class="keyword">new</span> IntelVideoCard, <span class="keyword">new</span> LenovoMemory);</span><br><span class="line">computer3-&gt;<span class="built_in">work</span>();</span><br><span class="line"><span class="keyword">delete</span> computer3;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-文件操作"><a href="#5-文件操作" class="headerlink" title="5 文件操作"></a>5 文件操作</h2><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件操作需要包含头文件 &#x3D;&#x3D;&lt; fstream &gt;&#x3D;&#x3D;</p><p>文件类型分为两种：</p><ol><li><strong>文本文件</strong>     -  文件以文本的<strong>ASCII码</strong>形式存储在计算机中</li><li><strong>二进制文件</strong> -  文件以文本的<strong>二进制</strong>形式存储在计算机中，用户一般不能直接读懂它们</li></ol><p>操作文件的三大类:</p><ol><li>ofstream：写操作</li><li>ifstream： 读操作</li><li>fstream ： 读写操作</li></ol><h3 id="5-1文本文件"><a href="#5-1文本文件" class="headerlink" title="5.1文本文件"></a>5.1文本文件</h3><h4 id="5-1-1写文件"><a href="#5-1-1写文件" class="headerlink" title="5.1.1写文件"></a>5.1.1写文件</h4><p>   写文件步骤如下：</p><ol><li><p>包含头文件   </p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ofstream ofs;</p></li><li><p>打开文件</p><p>ofs.open(“文件路径”,打开方式);</p></li><li><p>写数据</p><p>ofs &lt;&lt; “写入的数据”;</p></li><li><p>关闭文件</p><p>ofs.close();</p></li></ol><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p><strong>注意：</strong> 文件打开方式可以配合使用，利用|操作符</p><p><strong>例如：</strong>用二进制方式写文件 <code>ios::binary |  ios:: out</code></p><blockquote><p>在C++中，<code>|</code> 是位运算符中的按位或运算符。当它用于两个整数时，它将对这两个整数的每个位执行逻辑或操作。</p><p>在文件操作中，<code>|</code> 运算符通常用于将多个标志（flag）组合在一起。在你提供的例子中，<code>ios::binary | ios::out</code> 将 <code>ios::binary</code> 和 <code>ios::out</code> 这两个标志进行按位或运算，以便将它们组合在一起。</p><p><code>ios::binary</code> 是 <code>ios</code> 类中的一个标志，表示以二进制模式打开文件。在二进制模式下，文件将以字节流的形式进行读写，而不会进行任何文本转换。</p><p><code>ios::out</code> 是另一个 <code>ios</code> 类中的标志，表示以写入模式打开文件。在写入模式下，文件将被打开以供写入操作。</p><p>通过将这两个标志使用 <code>|</code> 运算符组合在一起，你可以同时指定二进制模式和写入模式来打开文件。</p></blockquote><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::out);</span><br><span class="line"></span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;姓名：张三&quot;</span> &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>文件操作必须包含头文件 fstream</li><li>读文件可以利用 ofstream  ，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.包含fstream头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.测试写操作ooooo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.1创建对象!</span></span><br><span class="line"><span class="comment">//fstream a;</span></span><br><span class="line"><span class="comment">//也是ok的，为了区分，先引入总的头文件fstream，再用其分类ostream创建具体要写的对象</span></span><br><span class="line">ofstream a;</span><br><span class="line"><span class="comment">//1.2打开文件</span></span><br><span class="line">a.<span class="built_in">open</span>(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/12.txt&quot;</span>, ios::out);</span><br><span class="line"><span class="comment">//1.3写入操作</span></span><br><span class="line">a &lt;&lt; <span class="string">&quot;你好啊&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//1.4关闭文件</span></span><br><span class="line">a.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-2读文件"><a href="#5-1-2读文件" class="headerlink" title="5.1.2读文件"></a>5.1.2读文件</h4><p>读文件与写文件步骤相似，但是读取方式相对于比较多</p><p>读文件步骤如下：</p><ol><li><p>包含头文件   </p><p>#include &lt;fstream&gt;</p></li><li><p>创建流对象  </p><p>ifstream ifs;</p></li><li><p>打开文件并判断文件是否打开成功</p><p>ifs.open(“文件路径”,打开方式);</p></li><li><p>读数据</p><p>四种方式读取</p></li><li><p>关闭文件</p><p>ifs.close();</p></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//1.包含fstream头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.测试写操作ooooo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.1创建对象!</span></span><br><span class="line"><span class="comment">//fstream a;</span></span><br><span class="line"><span class="comment">//也是ok的，为了区分，先引入总的头文件fstream，再用其分类ostream创建具体要写的对象</span></span><br><span class="line">ofstream a;</span><br><span class="line"><span class="comment">//1.2打开文件</span></span><br><span class="line">a.<span class="built_in">open</span>(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/11.txt&quot;</span>, ios::out | ios::binary);</span><br><span class="line"><span class="comment">//1.3写入操作</span></span><br><span class="line"><span class="comment">//&quot;你好啊&quot; &lt;&lt; endl;都被写进去了</span></span><br><span class="line">a &lt;&lt; <span class="string">&quot;你好啊dasdad &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//1.4关闭文件</span></span><br><span class="line">a.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.测试读文件</span></span><br><span class="line"><span class="comment">//2.1创建读的对象iiii</span></span><br><span class="line">fstream b;</span><br><span class="line">b.<span class="built_in">open</span>(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/11.txt&quot;</span>, ios::in);</span><br><span class="line"><span class="keyword">if</span> (b.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;打开成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;打开失败！，草！&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//读取1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//char bufer[1024];</span></span><br><span class="line"><span class="comment">//while (b&gt;&gt;bufer)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; bufer;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//读取2类内的getline</span></span><br><span class="line"><span class="comment">//char bufer[1024] = &#123; 0 &#125;;</span></span><br><span class="line"><span class="comment">//while (b.getline(bufer, sizeof(bufer)))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; bufer &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//读取3全局getline</span></span><br><span class="line"><span class="comment">//string str;</span></span><br><span class="line"><span class="comment">//while (getline(b,str))</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; str &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="keyword">while</span> (c=b.<span class="built_in">get</span>()!=EOF)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从右到左！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><blockquote><ul><li><strong>读文件可以利用 ifstream  ，或者fstream类</strong></li><li><strong>利用is_open函数可以判断文件是否打开成功</strong></li><li><strong>close 关闭文件</strong></li></ul></blockquote><h3 id="5-2-二进制文件"><a href="#5-2-二进制文件" class="headerlink" title="5.2 二进制文件"></a>5.2 二进制文件</h3><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为 &#x3D;&#x3D;ios::binary&#x3D;&#x3D;</p><h4 id="5-2-1-写文件"><a href="#5-2-1-写文件" class="headerlink" title="5.2.1 写文件"></a>5.2.1 写文件</h4><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型 ：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyStruct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">1024</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">fstream <span class="title">a</span><span class="params">(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/21.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line"></span><br><span class="line">MyStruct xrb = &#123; <span class="number">18</span>,<span class="string">&quot;李四&quot;</span> &#125;;</span><br><span class="line"><span class="comment">//结构体的实例化</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">a.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span> *)&amp;xrb, <span class="built_in">sizeof</span>(str));</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>文件输出流对象 可以通过write函数，以二进制方式写数据</li></ul><h4 id="5-2-2-读文件"><a href="#5-2-2-读文件" class="headerlink" title="5.2.2 读文件"></a>5.2.2 读文件</h4><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>参数解释：字符指针buffer指向内存中一段存储空间。len是读写的字节数</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyStruct</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">char</span> name[<span class="number">1024</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">fstream <span class="title">a</span><span class="params">(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/21.txt&quot;</span>, ios::out | ios::binary)</span></span>;</span><br><span class="line"></span><br><span class="line">MyStruct xrb = &#123; <span class="number">18</span>,<span class="string">&quot;李四&quot;</span> &#125;;</span><br><span class="line"><span class="comment">//结构体的实例化</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">a.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span> *)&amp;xrb, <span class="built_in">sizeof</span>(xrb));</span><br><span class="line"></span><br><span class="line">a.<span class="built_in">close</span>();</span><br><span class="line">fstream b;</span><br><span class="line">b.<span class="built_in">open</span>(<span class="string">&quot;E:/PROPORECODE/文件的读写操作/21.txt&quot;</span>, ios::in | ios::binary);</span><br><span class="line"><span class="keyword">if</span> (b.<span class="built_in">is_open</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;读取成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">MyStruct l;</span><br><span class="line">b.<span class="built_in">read</span>((<span class="type">char</span>*)&amp;l, <span class="built_in">sizeof</span>(l));</span><br><span class="line">cout &lt;&lt; l.age &lt;&lt; l.name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>文件输入流对象 可以通过read函数，以二进制方式读数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> c++学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cpp1.0</title>
      <link href="/xu-runbo/post/a5382a23.html"/>
      <url>/xu-runbo/post/a5382a23.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p><ul><li>创建项目</li><li>创建文件</li><li>编写代码</li><li>运行程序</li></ul><h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><p>​Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p><img src="/xu-runbo/post/a5382a23/1541383178746.png" class="" width="1541383178746"><img src="/xu-runbo/post/a5382a23/1541384366413.png" class="" width="1541384366413"><h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p><img src="/xu-runbo/post/a5382a23/1541383817248.png" class="" width="1541383817248"><p>给C++文件起个名称，然后点击添加即可。</p><img src="/xu-runbo/post/a5382a23/1541384140042.png" class="" width="1541384140042"><h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><img src="/xu-runbo/post/a5382a23/1541384818688.png" class="" width="1541384818688"><h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p><p><strong>两种格式</strong></p><ol><li><strong>单行注释</strong>：<code>// 描述信息</code> <ul><li>通常放在一行代码的上方，或者一条语句的末尾，&#x3D;&#x3D;对该行代码说明&#x3D;&#x3D;</li></ul></li><li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul><li>通常放在一段代码的上方，&#x3D;&#x3D;对该段代码做整体说明&#x3D;&#x3D;</li></ul></li></ol><blockquote><p>提示：编译器在编译代码时，会忽略注释的内容</p></blockquote><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p><p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//变量的定义</span></span><br><span class="line"><span class="comment">//语法：数据类型  变量名 = 初始值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p></blockquote><h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p><p>C++定义常量两种方式</p><ol><li><p><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code></p><ul><li>&#x3D;&#x3D;通常在文件上方定义&#x3D;&#x3D;，表示一个常量</li></ul></li><li><p><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code></p><ul><li>&#x3D;&#x3D;通常在变量定义前加关键字const&#x3D;&#x3D;，修饰该变量为常量，不可修改</li></ul></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、宏常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> day 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot; 天&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、const修饰变量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> month = <span class="number">12</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot; 个月份&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//month = 24; //报错，常量是不可以修改的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p><ul><li><strong>在定义变量或者常量时候，不要用关键字</strong></li></ul><p>C++关键字如下：</p><table><thead><tr><th>asm</th><th>do</th><th>if</th><th>return</th><th>typedef</th></tr></thead><tbody><tr><td>auto</td><td>double</td><td>inline</td><td>short</td><td>typeid</td></tr><tr><td>bool</td><td>dynamic_cast</td><td>int</td><td>signed</td><td>typename</td></tr><tr><td>break</td><td>else</td><td>long</td><td>sizeof</td><td>union</td></tr><tr><td>case</td><td>enum</td><td>mutable</td><td>static</td><td>unsigned</td></tr><tr><td>catch</td><td>explicit</td><td>namespace</td><td>static_cast</td><td>using</td></tr><tr><td>char</td><td>export</td><td>new</td><td>struct</td><td>virtual</td></tr><tr><td>class</td><td>extern</td><td>operator</td><td>switch</td><td>void</td></tr><tr><td>const</td><td>false</td><td>private</td><td>template</td><td>volatile</td></tr><tr><td>const_cast</td><td>float</td><td>protected</td><td>this</td><td>wchar_t</td></tr><tr><td>continue</td><td>for</td><td>public</td><td>throw</td><td>while</td></tr><tr><td>default</td><td>friend</td><td>register</td><td>true</td><td></td></tr><tr><td>delete</td><td>goto</td><td>reinterpret_cast</td><td>try</td><td></td></tr></tbody></table><p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p><h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p><ul><li>标识符不能是关键字</li><li>标识符只能由字母、数字、下划线组成</li><li>第一个字符必须为字母或下划线</li><li>标识符中字母区分大小写</li></ul><blockquote><p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p></blockquote><h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p><h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是&#x3D;&#x3D;整数类型&#x3D;&#x3D;的数据</p><p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th>取值范围</th></tr></thead><tbody><tr><td>short(短整型)</td><td>2字节</td><td>(-2^15 ~ 2^15-1)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long(长整形)</td><td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td><td>(-2^31 ~ 2^31-1)</td></tr><tr><td>long long(长长整形)</td><td>8字节</td><td>(-2^63 ~ 2^63-1)</td></tr></tbody></table><h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以&#x3D;&#x3D;统计数据类型所占内存大小&#x3D;&#x3D;</p><p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">short</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">int</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>整型结论</strong>：&#x3D;&#x3D;short &lt; int &lt;&#x3D; long &lt;&#x3D; long long&#x3D;&#x3D;</p></blockquote><h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于&#x3D;&#x3D;表示小数&#x3D;&#x3D;</p><p>浮点型变量分为两种：</p><ol><li>单精度float </li><li>双精度double</li></ol><p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>占用空间</strong></th><th><strong>有效数字范围</strong></th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>7位有效数字</td></tr><tr><td>double</td><td>8字节</td><td>15～16位有效数字</td></tr><tr><td>long double</td><td>16字节</td><td></td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line"><span class="type">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> ld=<span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; f1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; d1&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(f1) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;double sizeof = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(d1) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;lone double sizeof = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(ld) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//科学计数法</span></span><br><span class="line"><span class="type">float</span> f2 = <span class="number">-3e2</span>; <span class="comment">// 3 * 10 ^ 2 </span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> f3 = <span class="number">3e-2</span>;  <span class="comment">// 3 * 0.1 ^ 2</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p><p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p><blockquote><p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p></blockquote><blockquote><p>注意2：单引号内只能有一个字符，不是字符串</p></blockquote><ul><li>C和C++中字符型变量只占用&#x3D;&#x3D;1个字节&#x3D;&#x3D;。</li><li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li></ul><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span></span><br><span class="line"><span class="comment">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (<span class="type">int</span>)ch &lt;&lt; endl;  <span class="comment">//查看字符a对应的ASCII码</span></span><br><span class="line">ch = <span class="number">97</span>; <span class="comment">//可以直接用ASCII给字符型变量赋值</span></span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ASCII码表格：</p><table><thead><tr><th><strong>ASCII</strong>值</th><th><strong>控制字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th><th><strong>ASCII</strong>值</th><th><strong>字符</strong></th></tr></thead><tbody><tr><td>0</td><td>NUT</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>!</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>“</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>,</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td>*</td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>&#x2F;</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>S</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>&#x2F;</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>&#x3D;</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>&#96;</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>_</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII 码大致由以下<strong>两部分组</strong>成：</p><ul><li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li><li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li></ul><h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些&#x3D;&#x3D;不能显示出来的ASCII字符&#x3D;&#x3D;</p><p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p><table><thead><tr><th><strong>转义字符</strong></th><th><strong>含义</strong></th><th><strong>ASCII</strong>码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>警报</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td><strong>\n</strong></td><td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td><td><strong>010</strong></td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td><strong>\t</strong></td><td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td><td><strong>009</strong></td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td><strong>\\</strong></td><td><strong>代表一个反斜线字符”&quot;</strong></td><td><strong>092</strong></td></tr><tr><td>&#39;</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>&quot;</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>数字0</td><td>000</td></tr><tr><td>\ddd</td><td>8进制转义字符，d范围0~7</td><td>3位8进制</td></tr><tr><td>\xhh</td><td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td><td>3位16进制</td></tr></tbody></table><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\\&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\tHello&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p><p><strong>两种风格</strong></p><ol><li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意：C风格的字符串要用双引号括起来</p></blockquote><ol><li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">string str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意：C++风格字符串，需要加入头文件&#x3D;&#x3D;#include&lt;string&gt;&#x3D;&#x3D;</p></blockquote><h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p><p>bool类型只有两个值：</p><ul><li>true  — 真（本质是1）</li><li>false — 假（本质是0）</li></ul><p><strong>bool类型占&#x3D;&#x3D;1个字节&#x3D;&#x3D;大小</strong></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">cout &lt;&lt; flag &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">cout &lt;&lt; flag &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">bool</span>) &lt;&lt; endl; <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p><p><strong>关键字：</strong>cin</p><p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//整型输入</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入整型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点型输入</span></span><br><span class="line"><span class="type">double</span> d = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; d;</span><br><span class="line">cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符型输入</span></span><br><span class="line"><span class="type">char</span> ch = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入字符型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; ch;</span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串型输入</span></span><br><span class="line">string str;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; str;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//布尔类型输入</span></span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; flag;</span><br><span class="line">cout &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p><p>本章我们主要讲解以下几类运算符：</p><table><thead><tr><th><strong>运算符类型</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>算术运算符</td><td>用于处理四则运算</td></tr><tr><td>赋值运算符</td><td>用于将表达式的值赋给变量</td></tr><tr><td>比较运算符</td><td>用于表达式的比较，并返回一个真值或假值</td></tr><tr><td>逻辑运算符</td><td>用于根据表达式的值返回真值或假值</td></tr></tbody></table><h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p><p>算术运算符包括以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>正号</td><td>+3</td><td>3</td></tr><tr><td>-</td><td>负号</td><td>-3</td><td>-3</td></tr><tr><td>+</td><td>加</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘</td><td>10 * 5</td><td>50</td></tr><tr><td>&#x2F;</td><td>除</td><td>10 &#x2F; 5</td><td>2</td></tr><tr><td>%</td><td>取模(取余)</td><td>10 % 3</td><td>1</td></tr><tr><td>++c</td><td>前置递增</td><td>a&#x3D;2; b&#x3D;++a;</td><td>a&#x3D;3; b&#x3D;3;</td></tr><tr><td>c++</td><td>后置递增</td><td>a&#x3D;2; b&#x3D;a++;</td><td>a&#x3D;3; b&#x3D;2;</td></tr><tr><td>–</td><td>前置递减</td><td>a&#x3D;2; b&#x3D;–a;</td><td>a&#x3D;1; b&#x3D;1;</td></tr><tr><td>c–</td><td>后置递减</td><td>a&#x3D;2; b&#x3D;a–;</td><td>a&#x3D;1; b&#x3D;2;</td></tr></tbody></table><p><strong>示例1：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加减乘除</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a1 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; a1 + b1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a1 - b1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a1 * b1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; a1 / b1 &lt;&lt; endl;  <span class="comment">//两个整数相除结果依然是整数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b2 = <span class="number">20</span>;</span><br><span class="line">cout &lt;&lt; a2 / b2 &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a3 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个小数可以相除</span></span><br><span class="line"><span class="type">double</span> d1 = <span class="number">0.5</span>;</span><br><span class="line"><span class="type">double</span> d2 = <span class="number">0.25</span>;</span><br><span class="line">cout &lt;&lt; d1 / d2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：在除法运算中，除数不能为0</p></blockquote><p><strong>示例2：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取模</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a1 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="number">10</span> % <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; a2 % b2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a3 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//两个小数不可以取模</span></span><br><span class="line"><span class="type">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"><span class="type">double</span> d2 = <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结：&#x3D;&#x3D;只有整型变量可以进行取模运算&#x3D;&#x3D;</p></blockquote><p><strong>示例3：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递增</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置递增</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">a++; <span class="comment">//等价于a = a + 1</span></span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前置递增</span></span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line">++b;</span><br><span class="line">cout &lt;&lt; b &lt;&lt; endl; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//区别</span></span><br><span class="line"><span class="comment">//前置递增先对变量进行++，再计算表达式</span></span><br><span class="line"><span class="type">int</span> a2 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b2 = ++a2 * <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; b2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置递增先计算表达式，后对变量进行++</span></span><br><span class="line"><span class="type">int</span> a3 = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b3 = a3++ * <span class="number">10</span>;</span><br><span class="line">cout &lt;&lt; b3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p></blockquote><h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p><p>赋值运算符包括以下几个符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>a&#x3D;2; b&#x3D;3;</td><td>a&#x3D;2; b&#x3D;3;</td></tr><tr><td>+&#x3D;</td><td>加等于</td><td>a&#x3D;0; a+&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>-&#x3D;</td><td>减等于</td><td>a&#x3D;5; a-&#x3D;3;</td><td>a&#x3D;2;</td></tr><tr><td>*&#x3D;</td><td>乘等于</td><td>a&#x3D;2; a*&#x3D;2;</td><td>a&#x3D;4;</td></tr><tr><td>&#x2F;&#x3D;</td><td>除等于</td><td>a&#x3D;4; a&#x2F;&#x3D;2;</td><td>a&#x3D;2;</td></tr><tr><td>%&#x3D;</td><td>模等于</td><td>a&#x3D;3; a%2;</td><td>a&#x3D;1;</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//赋值运算符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// +=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a += <span class="number">2</span>; <span class="comment">// a = a + 2;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a -= <span class="number">2</span>; <span class="comment">// a = a - 2</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// *=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a *= <span class="number">2</span>; <span class="comment">// a = a * 2</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a /= <span class="number">2</span>;  <span class="comment">// a = a / 2;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// %=</span></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a %= <span class="number">2</span>;  <span class="comment">// a = a % 2;</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p><p>比较运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>相等于</td><td>4 &#x3D;&#x3D; 3</td><td>0</td></tr><tr><td>!&#x3D;</td><td>不等于</td><td>4 !&#x3D; 3</td><td>1</td></tr><tr><td>&lt;</td><td>小于</td><td>4 &lt; 3</td><td>0</td></tr><tr><td>&gt;</td><td>大于</td><td>4 &gt; 3</td><td>1</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td><td>4 &lt;&#x3D; 3</td><td>0</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td><td>4 &gt;&#x3D; 1</td><td>1</td></tr></tbody></table><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a == b) &lt;&lt; endl; <span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a != b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &gt; b) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &lt; b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：C和C++ 语言的比较运算中， &#x3D;&#x3D;“真”用数字“1”来表示， “假”用数字“0”来表示。&#x3D;&#x3D; </p></blockquote><h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p><p>逻辑运算符有以下符号：</p><table><thead><tr><th><strong>运算符</strong></th><th><strong>术语</strong></th><th><strong>示例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>!</td><td>非</td><td>!a</td><td>如果a为假，则!a为真；  如果a为真，则!a为假。</td></tr><tr><td>&amp;&amp;</td><td>与</td><td>a &amp;&amp; b</td><td>如果a和b都为真，则结果为真，否则为假。</td></tr><tr><td>||</td><td>或</td><td>a || b</td><td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td></tr></tbody></table><p><strong>示例1：</strong>逻辑非</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 非</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; !a &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; !!a &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结： 真变假，假变真</p></blockquote><p><strong>示例2：</strong>逻辑与</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 与</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结：逻辑&#x3D;&#x3D;与&#x3D;&#x3D;运算符总结： &#x3D;&#x3D;同真为真，其余为假&#x3D;&#x3D;</p></blockquote><p><strong>示例3：</strong>逻辑或</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 或</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>逻辑&#x3D;&#x3D;或&#x3D;&#x3D;运算符总结： &#x3D;&#x3D;同假为假，其余为真&#x3D;&#x3D;</p></blockquote><h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C&#x2F;C++支持最基本的三种程序运行结构：&#x3D;&#x3D;顺序结构、选择结构、循环结构&#x3D;&#x3D;</p><ul><li>顺序结构：程序按顺序执行，不发生跳转</li><li>选择结构：依据条件是否满足，有选择的执行相应功能</li><li>循环结构：依据条件是否满足，循环多次执行某段代码</li></ul><h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p><p>if语句的三种形式</p><ul><li><p>单行格式if语句</p></li><li><p>多行格式if语句</p></li><li><p>多条件的if语句</p></li></ul><ol><li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p><img src="/xu-runbo/post/a5382a23/clip_image002.png" class="" title="img"><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择结构-单行if语句</span></span><br><span class="line"><span class="comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入一个分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if语句</span></span><br><span class="line"><span class="comment">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>注意：if条件表达式后不要加分号</p></blockquote><ol start="2"><li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li></ol><img src="/xu-runbo/post/a5382a23/clip_image002-1541662519170.png" class="" title="img"><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我未考上一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li></ol><img src="/xu-runbo/post/a5382a23/clip_image002-1541662566808.png" class="" title="img"><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p><p>案例需求：</p><ul><li>提示用户输入一个高考考试分数，根据分数做如下判断</li><li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li><li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">700</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我考上了北大&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">650</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我考上了清华&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我考上了人大&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习案例：</strong> 三只小猪称体重</p><p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        t=a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        t=a;</span><br><span class="line">        a=c;</span><br><span class="line">        c=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(b&gt;c)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        t=b;</span><br><span class="line">        b=c;</span><br><span class="line">        c=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;a&lt;&lt;b&lt;&lt;c;</span></span><br><span class="line">    cout&lt;&lt;c;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优雅</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b,c;</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    <span class="type">int</span> max=a;</span><br><span class="line">    <span class="keyword">if</span>(b&gt;max)&#123;</span><br><span class="line">        max=b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c&gt;max)&#123;</span><br><span class="line">        max=c;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;max;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p><p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p><p><strong>解释：</strong></p><p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p><p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">c = a &gt; b ? a : b;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class="line"></span><br><span class="line">(a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p></blockquote><h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p><p><strong>语法：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> 结果<span class="number">1</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> 结果<span class="number">2</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请给电影评分 </span></span><br><span class="line"><span class="comment">//10 ~ 9   经典   </span></span><br><span class="line"><span class="comment">// 8 ~ 7   非常好</span></span><br><span class="line"><span class="comment">// 6 ~ 5   一般</span></span><br><span class="line"><span class="comment">// 5分以下 烂片</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> score = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请给电影打分&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (score)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;经典&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;非常好&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;一般&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;烂片&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意1：switch语句中表达式类型只能是整型或者字符型</p></blockquote><blockquote><p>注意2：case里如果没有break，那么程序会一直向下执行</p></blockquote><blockquote><p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p></blockquote><h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> while(循环条件)&#123; 循环语句 &#125;</code></p><p><strong>解释：</strong>&#x3D;&#x3D;只要循环条件的结果为真，就执行循环语句&#x3D;&#x3D;</p><img src="/xu-runbo/post/a5382a23/clip_image002-1541668640382.png" class="" title="img"><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p></blockquote><p><strong>while循环练习案例：</strong>&#x3D;&#x3D;猜数字&#x3D;&#x3D;</p><p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="type">int</span> c=<span class="built_in">rand</span>()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;请输入你猜的数&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;太大了&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x&lt;y)</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;太小了&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;猜对了&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>随机数</strong></p><blockquote><ol><li><p>(<code>rand()</code> 是 C++ 的标准库函数，用于生成伪随机数。它生成的数字序列在每次程序运行时都是相同的。<strong>stdlib.h</strong></p><p>用户未设定随机数种子时，系统默认的随机数种子为 1，rand() 产生的是伪随机数字，每次执行时是相同的; 若要不同, 用函数 srand() 初始化它。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">srand</span>(i);</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">rand</span>();</span><br><span class="line">  </span><br><span class="line">cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>srand()</strong> 用来设置 rand() 产生随机数时的随机数种子。<strong>参数 seed 必须是个整数</strong>，如果每次 seed 都设相同值，rand() 所产生的随机数值每次就会一样。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">srand</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="type">int</span> a = <span class="built_in">rand</span>();</span><br><span class="line">   </span><br><span class="line">  cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 45</span></span><br><span class="line">  <span class="comment">// 45</span></span><br><span class="line">  <span class="comment">// 45</span></span><br><span class="line">  <span class="comment">// 45</span></span><br><span class="line">  <span class="comment">// 45</span></span><br><span class="line">  <span class="comment">// 45</span></span><br><span class="line">  <span class="comment">// 45</span></span><br><span class="line">  <span class="comment">// 45</span></span><br><span class="line">  <span class="comment">// 45</span></span><br><span class="line">  <span class="comment">// 45</span></span><br></pre></td></tr></table></figure></li><li><p><code>(unsigned)time(NULL)</code> 表示获取当前时间的秒数，并将其转换为无符号整数。</p><p><code>time(NULL)</code> 函数是 C&#x2F;C++ 标准库中的函数，它返回从 1970 年 1 月 1 日 00:00:00 UTC 起至今的秒数。它的函数原型是 <code>time_t time(time_t* timer)</code>，其中 <code>timer</code> 是一个指向 <code>time_t</code> 类型的指针，用于存储返回的时间值。如果将 <code>timer</code> 参数设置为 <code>NULL</code>，则 <strong><code>time(NULL)</code> 将直接返回当前时间的秒数。</strong></p><p>通过将 <code>time(NULL)</code> 的返回值强制转换为无符号整数 <code>(unsigned)</code>，可以将时间的秒数表示为无符号整数。这样做的目的可能是为了将时间的秒数用作随机数种子或其他需要无符号整数的场景中。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>)); </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i++ ) </span><br><span class="line">    cout &lt;&lt; <span class="built_in">rand</span>() &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>要取得 [a,b) 的随机整数，使用 (rand() % (b-a))+ a;</strong></p><p><strong>要取得 [a,b] 的随机整数，使用 (rand() % (b-a+1))+ a;</strong></p><p><strong>要取得 (a,b] 的随机整数，使用 (rand() % (b-a))+ a + 1;</strong></p><p><strong>通用公式: a + rand() % n；其中的 a 是起始值，n 是整数的范围。</strong></p><p><strong>要取得 a 到 b 之间的随机整数，另一种表示：a + (int)b * rand() &#x2F; (RAND_MAX + 1)。</strong></p><p><strong>要取得 0～1 之间的浮点数，可以使用 rand() &#x2F; double(RAND_MAX)。</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> y=<span class="built_in">rand</span>()%(<span class="number">4</span>)+<span class="number">1</span>;<span class="comment">//[0,3]+1</span></span><br><span class="line"><span class="comment">//[1,100].[0,99]+1.rand()%100+1</span></span><br><span class="line">cout&lt;&lt;y&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>unsigned：无符号 表示抛弃数据类型的负数部分，将更多的存储空间用来存放非负数 例如：int类型原本占用4字节空间，即只能存储[-2^16,2^16 - 1]范围内的数据 加unsigned后存储数据的范围就是[0,2^32 - 1]</strong></p><h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p><p><strong>注意：</strong>与while的区别在于&#x3D;&#x3D;do…while会先执行一次循环语句&#x3D;&#x3D;，再判断循环条件</p><img src="/xu-runbo/post/a5382a23/clip_image002-1541671163478.png" class="" title="img"><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p></blockquote><p><strong>练习案例：水仙花数</strong></p><p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p><p>例如：1^3 + 5^3+ 3^3 &#x3D; 153</p><p>请利用do…while语句，求出所有3位数中的水仙花数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>((x%<span class="number">10</span>)*(x%<span class="number">10</span>)*(x%<span class="number">10</span>)+(x/<span class="number">10</span>%<span class="number">10</span>)*(x/<span class="number">10</span>%<span class="number">10</span>)*(x/<span class="number">10</span>%<span class="number">10</span>)+(x/<span class="number">100</span>)*(x/<span class="number">100</span>)*(x/<span class="number">100</span>)==x)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;x&lt;&lt;<span class="string">&quot;--&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0--</span></span><br><span class="line"><span class="comment">// 1--</span></span><br><span class="line"><span class="comment">// 153--</span></span><br><span class="line"><span class="comment">// 370--</span></span><br><span class="line"><span class="comment">// 371--</span></span><br><span class="line"><span class="comment">// 407--</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p><p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>详解：</strong></p><img src="/xu-runbo/post/a5382a23/1541673704101.png" class="" width="1541673704101"><blockquote><p>注意：for循环中的表达式，要用<strong>分号</strong>进行分隔</p></blockquote><blockquote><p>总结：while , do…while, for都是开发中常用的循环语句，<strong>for循环结构比较清晰，比较常用</strong></p></blockquote><p><strong>练习案例：敲桌子</strong></p><p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p><img src="/xu-runbo/post/a5382a23/timg.gif" class="" title="timg"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((i%<span class="number">10</span>==<span class="number">7</span>)||(i/<span class="number">10</span>%<span class="number">10</span>==<span class="number">7</span>)||(i%<span class="number">7</span>==<span class="number">0</span>))</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot;过！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7过！</span></span><br><span class="line"><span class="comment">// 14过！</span></span><br><span class="line"><span class="comment">// 17过！</span></span><br><span class="line"><span class="comment">// 21过！</span></span><br><span class="line"><span class="comment">// 27过！</span></span><br><span class="line"><span class="comment">// 28过！</span></span><br><span class="line"><span class="comment">// 35过！</span></span><br><span class="line"><span class="comment">// 37过！</span></span><br><span class="line"><span class="comment">// 42过！</span></span><br><span class="line"><span class="comment">// 47过！</span></span><br><span class="line"><span class="comment">// 49过！</span></span><br><span class="line"><span class="comment">// 56过！</span></span><br><span class="line"><span class="comment">// 57过！</span></span><br><span class="line"><span class="comment">// 63过！</span></span><br><span class="line"><span class="comment">// 67过！</span></span><br><span class="line"><span class="comment">// 70过！</span></span><br><span class="line"><span class="comment">// 71过！</span></span><br><span class="line"><span class="comment">// 72过！</span></span><br><span class="line"><span class="comment">// 73过！</span></span><br><span class="line"><span class="comment">// 74过！</span></span><br><span class="line"><span class="comment">// 75过！</span></span><br><span class="line"><span class="comment">// 76过！</span></span><br><span class="line"><span class="comment">// 77过！</span></span><br><span class="line"><span class="comment">// 78过！</span></span><br><span class="line"><span class="comment">// 79过！</span></span><br><span class="line"><span class="comment">// 84过！</span></span><br><span class="line"><span class="comment">// 87过！</span></span><br><span class="line"><span class="comment">// 91过！</span></span><br><span class="line"><span class="comment">// 97过！</span></span><br><span class="line"><span class="comment">//98过！</span></span><br></pre></td></tr></table></figure><h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p><p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p><img src="/xu-runbo/post/a5382a23/1541676003486.png" class="" width="1541676003486"><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层循环执行1次，内层循环执行1轮</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习案例：</strong>乘法口诀表</p><p>案例描述：利用嵌套循环，实现九九乘法表</p><img src="/xu-runbo/post/a5382a23/0006018857256120_b.jpg" class="" title="0006018857256120_b"><h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出&#x3D;&#x3D;选择结构&#x3D;&#x3D;或者&#x3D;&#x3D;循环结构&#x3D;&#x3D;</p><p>break使用的时机：</p><ul><li>出现在switch条件语句中，作用是<strong>终止case并跳出switch</strong></li><li>出现在循环语句中，作用是跳出<strong>当前的循环语句</strong></li><li>出现在嵌套循环中，跳出<strong>最近的内层循环语句</strong></li></ul><p><strong>示例1：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、在switch 语句中使用break</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1、普通&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2、中等&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3、困难&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//2、在循环语句中用break</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>; <span class="comment">//跳出循环语句</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在&#x3D;&#x3D;循环语句&#x3D;&#x3D;中，<strong>跳过本次循环中余下尚未执行的语句，继续执行下一次循环</strong></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<strong>continue并没有使整个循环终止，而break会跳出循环</strong></p></blockquote><h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p><p><strong>语法：</strong> <code>goto 标记;</code></p><p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> FLAG;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">FLAG:</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;5&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<strong>在程序中不建议使用goto语句，以免造成程序流程混乱</strong></p></blockquote><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，<strong>就是一个集合，里面存放了&#x3D;&#x3D;相同类型的数据元素&#x3D;&#x3D;</strong></p><p><strong>特点1：</strong>数组中的每个&#x3D;&#x3D;数据元素都是相同的数据类型&#x3D;&#x3D;</p><p><strong>特点2：</strong>数组是由&#x3D;&#x3D;连续的内存&#x3D;&#x3D;位置组成的</p><img src="/xu-runbo/post/a5382a23/1541748375356.png" class="" width="1541748375356"><h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p><ol><li><code>数据类型  数组名[ 数组长度 ];</code></li><li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li><li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li></ol><p><strong>&#x3D;&#x3D;当数组作为函数参数传递时，会退化为指针，此时 <code>sizeof</code> 运算符返回的是指针的大小，而不是数组的大小。&#x3D;&#x3D;</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;size&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">20</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> c[]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="comment">// cout&lt;&lt;sizeof(c)/sizeof(int)&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> a_size=<span class="built_in">sizeof</span>(a)/<span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="type">int</span> b_size=<span class="built_in">sizeof</span>(b)/<span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="type">int</span> c_size=<span class="built_in">sizeof</span>(c)/<span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">func</span>(a,a_size);</span><br><span class="line">    <span class="built_in">func</span>(b,b_size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方式1</span></span><br><span class="line"><span class="comment">//数据类型 数组名[元素个数];</span></span><br><span class="line"><span class="type">int</span> score[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用下标赋值</span></span><br><span class="line">score[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">score[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">score[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用下标输出</span></span><br><span class="line">cout &lt;&lt; score[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; score[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; score[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种定义方式</span></span><br><span class="line"><span class="comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line"><span class="comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class="line"><span class="type">int</span> score2[<span class="number">10</span>] = &#123; <span class="number">100</span>, <span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逐个输出</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; score2[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方式3</span></span><br><span class="line"><span class="comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line"><span class="type">int</span> score3[] = &#123; <span class="number">100</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; score3[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结1：<strong>数组名的命名规范与变量名命名规范一致，不要和变量重名</strong></p></blockquote><blockquote><p>总结2：<strong>数组中下标是从0开始索引</strong></p></blockquote><hr><hr><h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p><ol><li>可以统计整个数组在内存中的长度</li><li>可以获取数组在内存中的首地址</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组名用途</span></span><br><span class="line"><span class="comment">//1、可以获取整个数组占用内存空间大小</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、可以通过数组名获取到数组首地址</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)arr &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="type">int</span>)&amp;arr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：数组名是常量，不可以赋值</p></blockquote><blockquote><p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p></blockquote><blockquote><p>总结2：<strong>对数组名进行sizeof，可以获取整个数组占内存空间的大小</strong></p><p><strong>数组作为参数传递的时候，数组名会退化为指针，此时对数组名的sizeof得到是数组位置的占字节数，</strong></p></blockquote><p><strong>练习案例1</strong>：五只小猪称体重</p><p><strong>案例描述：</strong></p><p>在一个数组中记录了五只小猪的体重，如：int arr[5] &#x3D; {300,350,200,400,250};</p><p>找出并打印最重的小猪体重。</p><blockquote><ol><li><p>遍历法</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">300</span>,<span class="number">350</span>,<span class="number">200</span>,<span class="number">400</span>,<span class="number">250</span>&#125;;</span><br><span class="line">    <span class="type">int</span> max=arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">sizeof</span>(arr)/<span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&gt;max)</span><br><span class="line">        max=arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;max;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 400<br>return 0;<br>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. ##### sort排序后端点处找极值              #include \&lt;algorithm\&gt;</span><br><span class="line"></span><br><span class="line">   ```c++</span><br><span class="line">   #include &lt;iostream&gt;</span><br><span class="line">   #include &lt;algorithm&gt;</span><br><span class="line">   using namespace std; </span><br><span class="line">   int main()</span><br><span class="line">   &#123;</span><br><span class="line">       int arr[5] = &#123;300,350,200,400,250&#125;;</span><br><span class="line">       sort(arr,arr+sizeof(arr)/sizeof(arr[0]));</span><br><span class="line">       for(int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++)</span><br><span class="line">       &#123;</span><br><span class="line">           cout&lt;&lt;arr[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">       &#125;</span><br><span class="line">       // 200 250 300 350 400 </span><br><span class="line">       cout&lt;&lt;endl;</span><br><span class="line">       sort(arr,arr+sizeof(arr)/sizeof(arr[0]),greater&lt;int&gt;());</span><br><span class="line">           for(int i=0;i&lt;sizeof(arr)/sizeof(arr[0]);i++)</span><br><span class="line">       &#123;</span><br><span class="line">           cout&lt;&lt;arr[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">       &#125;</span><br><span class="line">       // 400 350 300 250 200</span><br><span class="line">       return 0;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p><strong>练习案例2：</strong>数组元素逆置</p><p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p><p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p><blockquote><ol><li><p>标准逆序</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;algorithm&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">9</span>,j=<span class="number">0</span>;i&gt;=<span class="number">0</span>;i--,j++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[j]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;b[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><pre><code>return 0;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. ##### 算法逆序            #include \&lt;algorithm\&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p><ol><li><strong>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</strong></li><li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li><li><strong>重复以上的步骤，每次比较次数-1，直到不需要比较</strong></li></ol><img src="/xu-runbo/post/a5382a23/1541905327273.png" class="" width="1541905327273"><p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span> - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p><img src="/xu-runbo/post/a5382a23/1541905559138.png" class="" width="1541905559138"><h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p><ol><li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li><li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li><li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code> </li><li>列数必须确定</li></ol><blockquote><p>建议：以上4种定义方式，利用&#x3D;&#x3D;第二种更加直观，提高代码的可读性&#x3D;&#x3D;</p></blockquote><p>示例：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1  </span></span><br><span class="line"><span class="comment">//数组类型 数组名 [行数][列数]</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;0----------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2 </span></span><br><span class="line"><span class="comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class="line"><span class="type">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr2[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;0----------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="comment">//方式3</span></span><br><span class="line"><span class="comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line"><span class="type">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr3[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;0----------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式4 </span></span><br><span class="line"><span class="comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line"><span class="type">int</span> arr4[][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr4[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="comment">// 4 5 6</span></span><br><span class="line"><span class="comment">// 0----------------------------</span></span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"><span class="comment">// 4 5 6</span></span><br><span class="line"><span class="comment">// 0----------------------------</span></span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"><span class="comment">// 4 5 6</span></span><br><span class="line"><span class="comment">// 0----------------------------</span></span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"><span class="comment">// 4 5 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p></blockquote><h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="&#x3D;&#x3D;5.3.2 二维数组数组名&#x3D;&#x3D;"></a>&#x3D;&#x3D;5.3.2 二维数组数组名&#x3D;&#x3D;</h4><ul><li>查看二维数组所占内存空间</li><li>获取二维数组首地址</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维数组数组名</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结1：二维数组名就是这个数<strong>组的首地址</strong></p></blockquote><blockquote><p>总结2：<strong>对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</strong></p></blockquote><h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p><p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p><table><thead><tr><th></th><th>语文</th><th>数学</th><th>英语</th></tr></thead><tbody><tr><td>张三</td><td>100</td><td>100</td><td>100</td></tr><tr><td>李四</td><td>90</td><td>50</td><td>100</td></tr><tr><td>王五</td><td>60</td><td>70</td><td>80</td></tr></tbody></table><p><strong>参考答案：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> scores[<span class="number">3</span>][<span class="number">3</span>] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>&#125;,</span><br><span class="line">&#123;<span class="number">90</span>,<span class="number">50</span>,<span class="number">100</span>&#125;,</span><br><span class="line">&#123;<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">string names[<span class="number">3</span>] = &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">sum += scores[i][j];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; names[i] &lt;&lt; <span class="string">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的<strong>代码封装起来，减少重复代码</strong></p><p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p><h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p><p>1、返回值类型 </p><p>2、函数名</p><p>3、参数表列</p><p>4、函数体语句 </p><p>5、return 表达式</p><p><strong>语法：</strong> </p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名 （参数列表）</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">       函数体语句</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>表达式</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li><li>函数名：给函数起个名称</li><li>参数列表：使用该函数时，传入的数据</li><li>函数体语句：花括号内的代码，函数内需要执行的语句</li><li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li></ul><p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sum = num1 + num2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p><p><strong>语法：</strong><code> 函数名（参数）</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> <span class="comment">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sum = num1 + num2;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//调用add函数</span></span><br><span class="line"><span class="type">int</span> sum = <span class="built_in">add</span>(a, b);<span class="comment">//调用时的a，b称为实际参数，简称实参</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line">b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">sum = <span class="built_in">add</span>(a, b);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：<strong>函数定义里小括号内称为<em>形参，</em>函数调用时传入的参数称为<em>实参</em></strong></p></blockquote><h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul><li>所谓值传递，就是函数调用时实参将数值传入给形参</li><li>值传递时，&#x3D;&#x3D;如果形参发生，并不会影响实参&#x3D;&#x3D;</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> temp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = temp;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结： 值传递时，形参是修饰不了实参的</p></blockquote><h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p><ol><li>无参无返</li><li>有参无返</li><li>无参有返</li><li>有参有返</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数常见样式</span></span><br><span class="line"><span class="comment">//1、 无参无返</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is test01&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//test01(); 函数调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、 有参无返</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is test02&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、无参有返</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is test03 &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、有参有返</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">test04</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;this is test04 &quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> sum = a + b;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><hr><blockquote><h6 id="在-C-中，函数的声明可以不写的情况有两种："><a href="#在-C-中，函数的声明可以不写的情况有两种：" class="headerlink" title="&#x3D;&#x3D;在 C++ 中，函数的声明可以不写的情况有两种：&#x3D;&#x3D;"></a>&#x3D;&#x3D;<strong>在 C++ 中，函数的声明可以不写的情况有两种：</strong>&#x3D;&#x3D;</h6><ol><li><p>函数定义的同时进行声明：<br>当函数在使用之前已经定义并实现了，可以不需要显式的声明。在这种情况下，函数的定义本身就起到了声明的作用。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数实现</span></span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">func</span>(); <span class="comment">// 在主函数中调用函数，无需显式声明</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数定义位于函数调用之前：<br>当函数定义位于函数调用之前，编译器会自动识别并进行隐式声明。这种情况下，编译器会在函数调用之前自动插入函数声明。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span></span>; <span class="comment">// 隐式声明</span></span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">func</span>(); <span class="comment">// 在主函数中调用函数，无需显式声明</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 函数实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>需要注意的是，如果函数的定义位于函数调用之后，并且没有显式的声明，编译器将会报错，因为在函数调用之前没有找到函数的声明。</p><p>总结起来，函数的声明可以不写的情况是在函数定义的同时进行声明，或者函数定义位于函数调用之前。在这些情况下，可以省略显式的函数声明。</p></blockquote><hr><p><strong>作用：</strong> <strong>告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</strong></p><ul><li>函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明可以多次，定义只能一次</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 &#x3D;&#x3D;函数的分文件编写&#x3D;&#x3D;"></a>6.7 &#x3D;&#x3D;函数的分文件编写&#x3D;&#x3D;</h3><p><strong>作用：</strong>让代码结构更加清晰</p><p>函数分文件编写一般有4个步骤</p><ol><li>创建后缀名为.h的头文件  </li><li>创建后缀名为.cpp的源文件</li><li>在<strong>头文件中写函数的声明</strong></li><li>在<strong>源文件中写函数的定义</strong></li><li><strong>用的时候用””引用头文件</strong></li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.h文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现两个数字交换的函数声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main函数文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;swap.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p><ul><li><p>内存编号是从0开始记录的，一般用<strong>十六进制数字</strong>表示</p></li><li><p>可以利用指针变量保存地址</p></li></ul><h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、指针的定义</span></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>; <span class="comment">//定义整型变量a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class="line"><span class="type">int</span> * p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量赋值</span></span><br><span class="line">p = &amp;a; <span class="comment">//指针指向变量a的地址</span></span><br><span class="line">cout &lt;&lt; &amp;a &lt;&lt; endl; <span class="comment">//打印数据a的地址</span></span><br><span class="line">cout &lt;&lt; p &lt;&lt; endl;  <span class="comment">//打印指针变量p</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2、指针的使用</span></span><br><span class="line"><span class="comment">//通过*操作指针变量指向的内存</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针变量和普通变量的区别</p><ul><li><strong>普通变量</strong>存放的是<strong>数据</strong>,<strong>指针变量</strong>存放的是<strong>地址</strong></li><li>指针变量可以通过” ***** “操作符，操作指针变量指向的内存空间，这个过程称为<strong>解引用</strong></li></ul><blockquote><p>总结1： 我们<strong>可以通过 &amp; 符号 获取变量的地址</strong></p></blockquote><blockquote><p>总结2：利用指针可以记录地址</p></blockquote><blockquote><p>总结3：<strong>对指针变量解引用，可以操作指针指向的内存</strong></p></blockquote><h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> * p;</span><br><span class="line">p = &amp;a; <span class="comment">//指针指向数据a的地址</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">//* 解引用</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(p) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">char</span> *) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">float</span> *) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(<span class="type">double</span> *) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：所有指针类型在32位操作系统下是4个字节</p></blockquote><h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p><p><strong>用途：</strong>初始化指针变量</p><p><strong>注意：</strong><strong><strong>空指针指向的内存是不可以访问的</strong></strong></p><p>会出现</p><p><strong>出现异常。</strong></p><p><strong>Segmentation fault</strong></p><p><strong>内存编号0 ~255为系统占用内存，不允许用户访问</strong></p><p><strong>示例1：空指针</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量p指向内存地址编号为0的空间</span></span><br><span class="line"><span class="type">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问空指针报错 </span></span><br><span class="line"><span class="comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>野指针</strong>：指针变量<strong>指向非法的内存空间</strong></p><p><strong>示例2：野指针</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class="line"><span class="type">int</span> * p = (<span class="type">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问野指针报错 </span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>空指针和野指针是指针的两种特殊情况。</strong></p><ol><li><p>空指针：空指针是指没有指向任何有效对象或函数的指针。在 C++ 中，空指针可以用字面值 <strong><code>nullptr</code> 或者 <code>NULL</code></strong> 来表示。空指针在程序中通常用来表示指针未初始化或者指向无效的内存地址。</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* ptr = <span class="literal">nullptr</span>;  <span class="comment">// 或者 int* ptr = NULL;</span></span><br></pre></td></tr></table></figure></li><li><p>野指针：野指针是指指向未知或无效内存地址的指针。野指针通常是由于指针未初始化，<strong>或者指针指向的对象已经被释放或销毁</strong>，但指针本身没有被置为 <code>nullptr</code> 或者其他有效地址。</p><p>例如：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* ptr;  <span class="comment">// 未初始化的指针，可能成为野指针</span></span><br><span class="line"><span class="type">int</span>* ptr = <span class="keyword">new</span> <span class="type">int</span>;  <span class="comment">// 动态分配的内存，但未初始化，可能成为野指针</span></span><br><span class="line"><span class="keyword">delete</span> ptr;  <span class="comment">// 释放内存后，ptr 变成野指针</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>使用空指针是一种良好的编程习惯，</strong>可以避免指针悬空的问题。而野指针是一种危险的编程错误，<strong>可能导致程序崩溃或产生未定义的行为</strong>。在使用指针时，应该始终确保指针指向有效的对象或者函数，并在不需要使用指针时将其置为 <code>nullptr</code>。</p><blockquote><p>总结：<strong>空指针和野指针都不是我们申请的空间</strong>，因此不要访问。</p></blockquote><h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p><ol><li>const修饰指针   — 常量指针</li><li>const修饰常量   — 指针常量</li><li>const即修饰指针，又修饰常量</li></ol><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * p1 = &amp;a; </span><br><span class="line">p1 = &amp;b; <span class="comment">//正确</span></span><br><span class="line"><span class="comment">//*p1 = 100;  报错</span></span><br><span class="line">    <span class="comment">//常量指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> p2 = &amp;a;</span><br><span class="line"><span class="comment">//p2 = &amp;b; //错误</span></span><br><span class="line">*p2 = <span class="number">100</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//const既修饰指针又修饰常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p3 = &amp;a;</span><br><span class="line"><span class="comment">//p3 = &amp;b; //错误</span></span><br><span class="line"><span class="comment">//*p3 = 100; //错误</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>技巧：<strong>看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</strong></p></blockquote><ul><li>常量指针是指针本身是常量，不可以修改指针所指向的地址，但可以通过指针修改所指向的值。</li><li>指针常量是指指针所指向的值是常量，不可以通过指针修改所指向的值，但可以修改指针所指向的地址。</li></ul><h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> * p = arr;  <span class="comment">//指向数组的指针</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//利用指针遍历数组</span></span><br><span class="line">cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指针自身自增是内存增加一个所指数据的单位。</strong></p><p>*<strong>p&#x3D;arry[0]</strong></p><p>*<strong>p+n&#x3D;arry[n]</strong></p><h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p><p>void swap2(int * p1, int *p2)<br>{<br>    int temp &#x3D; *p1;<br>    *p1 &#x3D; *p2;<br>    *p2 &#x3D; temp;<br>}</p><p>​swap2(&amp;a, &amp;b); &#x2F;&#x2F;地址传递会改变实参</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap1</span><span class="params">(<span class="type">int</span> a ,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp = a;</span><br><span class="line">a = b; </span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap2</span><span class="params">(<span class="type">int</span> * p1, <span class="type">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp = *p1;</span><br><span class="line">*p1 = *p2;</span><br><span class="line">*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">swap1</span>(a, b); <span class="comment">// 值传递不会改变实参</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">swap2</span>(&amp;a, &amp;b); <span class="comment">//地址传递会改变实参</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p></blockquote><h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p><p>例如数组：int arr[10] &#x3D; { 4,3,6,9,1,2,10,8,7,5 };</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> * arr, <span class="type">int</span> len)</span>  <span class="comment">//int * arr 也可以写为int arr[]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printArray</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubbleSort</span>(arr, len);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printArray</span>(arr, len);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：<strong>当数组名传入到函数作为参数时，被退化为指向首元素的指针</strong></p></blockquote><p>此时对数组名sizeof得到的就不是数组的整个占用字节数了</p><p>而是数组名这个指针的字节（4）</p><h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户&#x3D;&#x3D;自定义的数据类型&#x3D;&#x3D;，允许用户存储不同的数据类型</p><h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p><p>通过结构体创建变量的方式有三种：</p><ul><li>struct 结构体名 变量名</li><li>struct 结构体名 变量名 &#x3D; { 成员1值 ， 成员2值…}</li><li>定义结构体时顺便创建变量</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;stu3; <span class="comment">//结构体变量创建方式3 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体变量创建方式1</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> stu1; <span class="comment">//struct 关键字可以省略</span></span><br><span class="line"></span><br><span class="line">stu1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">stu1.age = <span class="number">18</span>;</span><br><span class="line">stu1.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体变量创建方式2</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> stu2 = &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu3.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">stu3.age = <span class="number">18</span>;</span><br><span class="line">stu3.score = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结1：<strong>定义结构体时的关键字是struct，不可省略</strong></p></blockquote><blockquote><p>总结2：<strong>创建结构体变量时，关键字struct可以省略</strong></p></blockquote><blockquote><p>总结3：<strong>结构体变量利用操作符 ‘’.’’  访问成员</strong></p></blockquote><h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p><p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体数组</span></span><br><span class="line">    <span class="comment">//struct关键字也可以省略</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> arr[<span class="number">3</span>]=</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">&#123;<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p><ul><li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li><li>结构体访问成员用.</li><li>指向结构体的指针想要访问成员用-&gt;</li></ul><p><strong>struct student * p &#x3D; &stu;</strong></p><h6 id="指针的类型和对应数据的类型需要一致"><a href="#指针的类型和对应数据的类型需要一致" class="headerlink" title="&#x3D;&#x3D;指针的类型和对应数据的类型需要一致&#x3D;&#x3D;"></a>&#x3D;&#x3D;指针的类型和对应数据的类型需要一致&#x3D;&#x3D;</h6><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>, &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> * p = &amp;stu;</span><br><span class="line"></span><br><span class="line">p-&gt;score = <span class="number">80</span>; <span class="comment">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：<strong>结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</strong></p></blockquote><h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p><p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">teacher</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line"><span class="type">int</span> id; <span class="comment">//职工编号</span></span><br><span class="line">string name;  <span class="comment">//教师姓名</span></span><br><span class="line"><span class="type">int</span> age;   <span class="comment">//教师年龄</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> stu; <span class="comment">//子结构体 学生</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">teacher</span> t1;</span><br><span class="line">t1.id = <span class="number">10000</span>;</span><br><span class="line">t1.name = <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">t1.age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">t1.stu.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">t1.stu.age = <span class="number">18</span>;</span><br><span class="line">t1.stu.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class="string">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="string">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：****在结构体中可以定义另一个结构体作为成员，用来解决实际问题</strong></p><h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p><p>传递方式有两种：</p><ul><li>值传递</li><li>地址传递</li></ul><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">(student stu )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stu.age = <span class="number">28</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent2</span><span class="params">(student *stu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">stu-&gt;age = <span class="number">28</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>&#125;;</span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="built_in">printStudent</span>(stu);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="built_in">printStudent2</span>(&amp;stu);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结：<strong>如果不想修改主函数中的数据，用值传递，反之用地址传递</strong></p></blockquote><h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 &#x3D;&#x3D;结构体中 const使用场景&#x3D;&#x3D;"></a>8.7 &#x3D;&#x3D;结构体中 const使用场景&#x3D;&#x3D;</h3><p><strong>作用：</strong>用const来防止误操作</p><p>结构体作为参数的时候，最好使用const </p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//成员列表</span></span><br><span class="line">string name;  <span class="comment">//姓名</span></span><br><span class="line"><span class="type">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line"><span class="type">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const使用场景</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printStudent</span><span class="params">(<span class="type">const</span> student *stu)</span> <span class="comment">//加const防止函数体中的误操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printStudent</span>(&amp;stu);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p><p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p><p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p><p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p><p>最终打印出老师数据以及老师所带的学生数据。</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Teacher</span></span><br><span class="line">&#123;</span><br><span class="line">string name;</span><br><span class="line">Student sArray[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">allocateSpace</span><span class="params">(Teacher tArray[] , <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string tName = <span class="string">&quot;教师&quot;</span>;</span><br><span class="line">string sName = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">string nameSeed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">tArray[i].name = tName + nameSeed[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">tArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class="line">tArray[i].sArray[j].score = <span class="built_in">rand</span>() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printTeachers</span><span class="params">(Teacher tArray[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; tArray[i].name &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>)); <span class="comment">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line">Teacher tArray[<span class="number">3</span>]; <span class="comment">//老师数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(tArray) / <span class="built_in">sizeof</span>(Teacher);</span><br><span class="line"></span><br><span class="line"><span class="built_in">allocateSpace</span>(tArray, len); <span class="comment">//创建数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printTeachers</span>(tArray, len); <span class="comment">//打印数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p><p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p><p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p><p>五名英雄信息如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hero</span></span><br><span class="line">&#123;</span><br><span class="line">string name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">string sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(hero arr[] , <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j].age &gt; arr[j + <span class="number">1</span>].age)</span><br><span class="line">&#123;</span><br><span class="line">hero temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printHeros</span><span class="params">(hero arr[], <span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hero</span> arr[<span class="number">5</span>] =</span><br><span class="line">&#123;</span><br><span class="line">&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> len = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(hero); <span class="comment">//获取数组元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bubbleSort</span>(arr, len); <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printHeros</span>(arr, len); <span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> c++学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
